<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GodotSharp</name>
    </assembly>
    <members>
        <member name="T:Godot.AABB">
            <summary>
            Axis-Aligned Bounding Box. AABB consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.AABB.Position">
            <summary>
            Beginning corner. Typically has values lower than End.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.AABB.Size">
            <summary>
            Size from Position to End. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.AABB.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.AABB.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.AABB.Position"/> plus
            <see cref="P:Godot.AABB.Size"/>. Setting this value will change the size.
            </summary>
            <value>Getting is equivalent to `value = Position + Size`, setting is equivalent to `Size = value - Position`.</value>
        </member>
        <member name="M:Godot.AABB.Abs">
            <summary>
            Returns an AABB with equivalent position and size, modified so that
            the most-negative corner is the origin and the size is positive.
            </summary>
            <returns>The modified AABB.</returns>
        </member>
        <member name="M:Godot.AABB.Encloses(Godot.AABB)">
            <summary>
            Returns true if this AABB completely encloses another one.
            </summary>
            <param name="with">The other AABB that may be enclosed.</param>
            <returns>A bool for whether or not this AABB encloses `b`.</returns>
        </member>
        <member name="M:Godot.AABB.Expand(Godot.Vector3)">
            <summary>
            Returns this AABB expanded to include a given point.
            </summary>
            <param name="point">The point to include.</param>
            <returns>The expanded AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetArea">
            <summary>
            Returns the area of the AABB.
            </summary>
            <returns>The area.</returns>
        </member>
        <member name="M:Godot.AABB.GetEndpoint(System.Int32)">
            <summary>
            Gets the position of one of the 8 endpoints of the AABB.
            </summary>
            <param name="idx">Which endpoint to get.</param>
            <returns>An endpoint of the AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetLongestAxis">
            <summary>
            Returns the normalized longest axis of the AABB.
            </summary>
            <returns>A vector representing the normalized longest axis of the AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetLongestAxisIndex">
            <summary>
            Returns the <see cref="T:Godot.Vector3.Axis"/> index of the longest axis of the AABB.
            </summary>
            <returns>A <see cref="T:Godot.Vector3.Axis"/> index for which axis is longest.</returns>
        </member>
        <member name="M:Godot.AABB.GetLongestAxisSize">
            <summary>
            Returns the scalar length of the longest axis of the AABB.
            </summary>
            <returns>The scalar length of the longest axis of the AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetShortestAxis">
            <summary>
            Returns the normalized shortest axis of the AABB.
            </summary>
            <returns>A vector representing the normalized shortest axis of the AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetShortestAxisIndex">
            <summary>
            Returns the <see cref="T:Godot.Vector3.Axis"/> index of the shortest axis of the AABB.
            </summary>
            <returns>A <see cref="T:Godot.Vector3.Axis"/> index for which axis is shortest.</returns>
        </member>
        <member name="M:Godot.AABB.GetShortestAxisSize">
            <summary>
            Returns the scalar length of the shortest axis of the AABB.
            </summary>
            <returns>The scalar length of the shortest axis of the AABB.</returns>
        </member>
        <member name="M:Godot.AABB.GetSupport(Godot.Vector3)">
            <summary>
            Returns the support point in a given direction.
            This is useful for collision detection algorithms.
            </summary>
            <param name="dir">The direction to find support for.</param>
            <returns>A vector representing the support.</returns>
        </member>
        <member name="M:Godot.AABB.Grow(System.Single)">
            <summary>
            Returns a copy of the AABB grown a given amount of units towards all the sides.
            </summary>
            <param name="by">The amount to grow by.</param>
            <returns>The grown AABB.</returns>
        </member>
        <member name="M:Godot.AABB.HasNoArea">
            <summary>
            Returns true if the AABB is flat or empty, or false otherwise.
            </summary>
            <returns>A bool for whether or not the AABB has area.</returns>
        </member>
        <member name="M:Godot.AABB.HasNoSurface">
            <summary>
            Returns true if the AABB has no surface (no size), or false otherwise.
            </summary>
            <returns>A bool for whether or not the AABB has area.</returns>
        </member>
        <member name="M:Godot.AABB.HasPoint(Godot.Vector3)">
            <summary>
            Returns true if the AABB contains a point, or false otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A bool for whether or not the AABB contains `point`.</returns>
        </member>
        <member name="M:Godot.AABB.Intersection(Godot.AABB)">
            <summary>
            Returns the intersection of this AABB and `b`.
            </summary>
            <param name="with">The other AABB.</param>
            <returns>The clipped AABB.</returns>
        </member>
        <member name="M:Godot.AABB.Intersects(Godot.AABB,System.Boolean)">
             <summary>
             Returns true if the AABB overlaps with `b`
             (i.e. they have at least one point in common).
            
             If `includeBorders` is true, they will also be considered overlapping
             if their borders touch, even without intersection.
             </summary>
             <param name="with">The other AABB to check for intersections with.</param>
             <param name="includeBorders">Whether or not to consider borders.</param>
             <returns>A bool for whether or not they are intersecting.</returns>
        </member>
        <member name="M:Godot.AABB.IntersectsPlane(Godot.Plane)">
            <summary>
            Returns true if the AABB is on both sides of `plane`.
            </summary>
            <param name="plane">The plane to check for intersection.</param>
            <returns>A bool for whether or not the AABB intersects the plane.</returns>
        </member>
        <member name="M:Godot.AABB.IntersectsSegment(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns true if the AABB intersects the line segment between `from` and `to`.
            </summary>
            <param name="from">The start of the line segment.</param>
            <param name="to">The end of the line segment.</param>
            <returns>A bool for whether or not the AABB intersects the line segment.</returns>
        </member>
        <member name="M:Godot.AABB.Merge(Godot.AABB)">
            <summary>
            Returns a larger AABB that contains this AABB and `b`.
            </summary>
            <param name="with">The other AABB.</param>
            <returns>The merged AABB.</returns>
        </member>
        <member name="M:Godot.AABB.#ctor(Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs an AABB from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size, typically positive.</param>
        </member>
        <member name="M:Godot.AABB.#ctor(Godot.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an AABB from a position, width, height, and depth.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width, typically positive.</param>
            <param name="height">The height, typically positive.</param>
            <param name="depth">The depth, typically positive.</param>
        </member>
        <member name="M:Godot.AABB.#ctor(System.Single,System.Single,System.Single,Godot.Vector3)">
            <summary>
            Constructs an AABB from x, y, z, and size.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="z">The position's Z coordinate.</param>
            <param name="size">The size, typically positive.</param>
        </member>
        <member name="M:Godot.AABB.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an AABB from x, y, z, width, height, and depth.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="z">The position's Z coordinate.</param>
            <param name="width">The width, typically positive.</param>
            <param name="height">The height, typically positive.</param>
            <param name="depth">The depth, typically positive.</param>
        </member>
        <member name="M:Godot.AABB.IsEqualApprox(Godot.AABB)">
            <summary>
            Returns true if this AABB and `other` are approximately equal, by running
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other AABB to compare.</param>
            <returns>Whether or not the AABBs are approximately equal.</returns>
        </member>
        <member name="T:Godot.Basis">
             <summary>
             3×3 matrix used for 3D rotation and scale.
             Almost always used as an orthogonal basis for a Transform.
            
             Contains 3 vector fields X, Y and Z as its columns, which are typically
             interpreted as the local basis vectors of a 3D transformation. For such use,
             it is composed of a scaling and a rotation matrix, in that order (M = R.S).
            
             Can also be accessed as array of 3D vectors. These vectors are normally
             orthogonal to each other, but are not necessarily normalized (due to scaling).
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="P:Godot.Basis.x">
            <summary>
            The basis matrix's X vector (column 0).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column0"/> and array index `[0]`.</value>
        </member>
        <member name="P:Godot.Basis.y">
            <summary>
            The basis matrix's Y vector (column 1).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column1"/> and array index `[1]`.</value>
        </member>
        <member name="P:Godot.Basis.z">
            <summary>
            The basis matrix's Z vector (column 2).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column2"/> and array index `[2]`.</value>
        </member>
        <member name="F:Godot.Basis.Row0">
            <summary>
            Row 0 of the basis matrix. Shows which vectors contribute
            to the X direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="F:Godot.Basis.Row1">
            <summary>
            Row 1 of the basis matrix. Shows which vectors contribute
            to the Y direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="F:Godot.Basis.Row2">
            <summary>
            Row 2 of the basis matrix. Shows which vectors contribute
            to the Z direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="P:Godot.Basis.Column0">
            <summary>
            Column 0 of the basis matrix (the X vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.x"/> and array index `[0]`.</value>
        </member>
        <member name="P:Godot.Basis.Column1">
            <summary>
            Column 1 of the basis matrix (the Y vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.y"/> and array index `[1]`.</value>
        </member>
        <member name="P:Godot.Basis.Column2">
            <summary>
            Column 2 of the basis matrix (the Z vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.z"/> and array index `[2]`.</value>
        </member>
        <member name="P:Godot.Basis.Scale">
            <summary>
            The scale of this basis.
            </summary>
            <value>Equivalent to the lengths of each column vector, but negative if the determinant is negative.</value>
        </member>
        <member name="P:Godot.Basis.Item(System.Int32)">
            <summary>
            Access whole columns in the form of Vector3.
            </summary>
            <param name="column">Which column vector.</param>
        </member>
        <member name="P:Godot.Basis.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
        </member>
        <member name="M:Godot.Basis.Determinant">
             <summary>
             Returns the determinant of the basis matrix. If the basis is
             uniformly scaled, its determinant is the square of the scale.
            
             A negative determinant means the basis has a negative scale.
             A zero determinant means the basis isn't invertible,
             and is usually considered invalid.
             </summary>
             <returns>The determinant of the basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.GetEuler">
             <summary>
             Returns the basis's rotation in the form of Euler angles
             (in the YXZ convention: when *decomposing*, first Z, then X, and Y last).
             The returned vector contains the rotation angles in
             the format (X angle, Y angle, Z angle).
            
             Consider using the <see cref="M:Godot.Basis.Quat"/> method instead, which
             returns a <see cref="T:Godot.Quat"/> quaternion instead of Euler angles.
             </summary>
             <returns>A Vector3 representing the basis rotation in Euler angles.</returns>
        </member>
        <member name="M:Godot.Basis.GetRow(System.Int32)">
            <summary>
            Get rows by index. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
            <param name="index">Which row.</param>
            <returns>One of `Row0`, `Row1`, or `Row2`.</returns>
        </member>
        <member name="M:Godot.Basis.SetRow(System.Int32,Godot.Vector3)">
            <summary>
            Sets rows by index. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
            <param name="index">Which row.</param>
            <param name="value">The vector to set the row to.</param>
        </member>
        <member name="M:Godot.Basis.GetOrthogonalIndex">
             <summary>
             This function considers a discretization of rotations into
             24 points on unit sphere, lying along the vectors (x, y, z) with
             each component being either -1, 0, or 1, and returns the index
             of the point best representing the orientation of the object.
             It is mainly used by the <see cref="T:Godot.GridMap"/> editor.
            
             For further details, refer to the Godot source code.
             </summary>
             <returns>The orthogonal index.</returns>
        </member>
        <member name="M:Godot.Basis.Inverse">
            <summary>
            Returns the inverse of the matrix.
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Orthonormalized">
            <summary>
            Returns the orthonormalized version of the basis matrix (useful to
            call occasionally to avoid rounding errors for orthogonal matrices).
            This performs a Gram-Schmidt orthonormalization on the basis of the matrix.
            </summary>
            <returns>An orthonormalized basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Introduce an additional rotation around the given `axis`
            by `phi` (in radians). The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="phi">The angle to rotate, in radians.</param>
            <returns>The rotated basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Scaled(Godot.Vector3)">
            <summary>
            Introduce an additional scaling specified by the given 3D scaling factor.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Slerp(Godot.Basis,System.Single)">
            <summary>
            Assuming that the matrix is a proper rotation matrix, slerp performs
            a spherical-linear interpolation with another rotation matrix.
            </summary>
            <param name="target">The destination basis for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting basis matrix of the interpolation.</returns>
        </member>
        <member name="M:Godot.Basis.Tdotx(Godot.Vector3)">
            <summary>
            Transposed dot product with the X axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Tdoty(Godot.Vector3)">
            <summary>
            Transposed dot product with the Y axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Tdotz(Godot.Vector3)">
            <summary>
            Transposed dot product with the Z axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Transposed">
            <summary>
            Returns the transposed version of the basis matrix.
            </summary>
            <returns>The transposed basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Xform(Godot.Vector3)">
            <summary>
            Returns a vector transformed (multiplied) by the basis matrix.
            </summary>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Godot.Basis.XformInv(Godot.Vector3)">
             <summary>
             Returns a vector transformed (multiplied) by the transposed basis matrix.
            
             Note: This results in a multiplication by the inverse of the
             basis matrix only if it represents a rotation-reflection.
             </summary>
             <param name="v">A vector to inversely transform.</param>
             <returns>The inversely transformed vector.</returns>
        </member>
        <member name="M:Godot.Basis.Quat">
            <summary>
            Returns the basis's rotation in the form of a quaternion.
            See <see cref="M:Godot.Basis.GetEuler"/> if you need Euler angles, but keep in
            mind that quaternions should generally be preferred to Euler angles.
            </summary>
            <returns>A <see cref="T:Godot.Quat"/> representing the basis's rotation.</returns>
        </member>
        <member name="P:Godot.Basis.Identity">
            <summary>
            The identity basis, with no rotation or scaling applied.
            This is used as a replacement for `Basis()` in GDScript.
            Do not use `new Basis()` with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to `new Basis(Vector3.Right, Vector3.Up, Vector3.Back)`.</value>
        </member>
        <member name="P:Godot.Basis.FlipX">
            <summary>
            The basis that will flip something along the X axis when used in a transformation.
            </summary>
            <value>Equivalent to `new Basis(Vector3.Left, Vector3.Up, Vector3.Back)`.</value>
        </member>
        <member name="P:Godot.Basis.FlipY">
            <summary>
            The basis that will flip something along the Y axis when used in a transformation.
            </summary>
            <value>Equivalent to `new Basis(Vector3.Right, Vector3.Down, Vector3.Back)`.</value>
        </member>
        <member name="P:Godot.Basis.FlipZ">
            <summary>
            The basis that will flip something along the Z axis when used in a transformation.
            </summary>
            <value>Equivalent to `new Basis(Vector3.Right, Vector3.Up, Vector3.Forward)`.</value>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Quat)">
            <summary>
            Constructs a pure rotation basis matrix from the given quaternion.
            </summary>
            <param name="quat">The quaternion to create the basis from.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Vector3)">
             <summary>
             Constructs a pure rotation basis matrix from the given Euler angles
             (in the YXZ convention: when *composing*, first Y, then X, and Z last),
             given in the vector format as (X angle, Y angle, Z angle).
            
             Consider using the <see cref="M:Godot.Basis.#ctor(Godot.Quat)"/> constructor instead, which
             uses a <see cref="T:Godot.Quat"/> quaternion instead of Euler angles.
             </summary>
             <param name="eulerYXZ">The Euler angles to create the basis from.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a pure rotation basis matrix, rotated around the given `axis`
            by `phi` (in radians). The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="phi">The angle to rotate, in radians.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a basis matrix from 3 axis vectors (matrix columns).
            </summary>
            <param name="column0">The X vector, or Column0.</param>
            <param name="column1">The Y vector, or Column1.</param>
            <param name="column2">The Z vector, or Column2.</param>
        </member>
        <member name="M:Godot.Basis.IsEqualApprox(Godot.Basis)">
            <summary>
            Returns true if this basis and `other` are approximately equal, by running
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other basis to compare.</param>
            <returns>Whether or not the matrices are approximately equal.</returns>
        </member>
        <member name="T:Godot.Color">
             <summary>
             A color represented by red, green, blue, and alpha (RGBA) components.
             The alpha component is often used for transparency.
             Values are in floating-point and usually range from 0 to 1.
             Some properties (such as CanvasItem.modulate) may accept values
             greater than 1 (overbright or HDR colors).
            
             If you want to supply values in a range of 0 to 255, you should use
             <see cref="M:Godot.Color.Color8(System.Byte,System.Byte,System.Byte,System.Byte)"/> and the `r8`/`g8`/`b8`/`a8` properties.
             </summary>
        </member>
        <member name="F:Godot.Color.r">
            <summary>
            The color's red component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.g">
            <summary>
            The color's green component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.b">
            <summary>
            The color's blue component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.a">
            <summary>
            The color's alpha (transparency) component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="P:Godot.Color.r8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.r"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.g8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.g"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.b8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.b"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.a8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.a"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.h">
            <summary>
            The HSV hue of this color, on the range 0 to 1.
            </summary>
            <value>Getting is a long process, refer to the source code for details. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.s">
            <summary>
            The HSV saturation of this color, on the range 0 to 1.
            </summary>
            <value>Getting is equivalent to the ratio between the min and max RGB value. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.v">
            <summary>
            The HSV value (brightness) of this color, on the range 0 to 1.
            </summary>
            <value>Getting is equivalent to using `Max()` on the RGB components. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.Item(System.Int32)">
            <summary>
            Access color components using their index.
            </summary>
            <value>`[0]` is equivalent to `.r`, `[1]` is equivalent to `.g`, `[2]` is equivalent to `.b`, `[3]` is equivalent to `.a`.</value>
        </member>
        <member name="M:Godot.Color.Blend(Godot.Color)">
            <summary>
            Returns a new color resulting from blending this color over another.
            If the color is opaque, the result is also opaque.
            The second color may have a range of alpha values.
            </summary>
            <param name="over">The color to blend over.</param>
            <returns>This color blended over `over`.</returns>
        </member>
        <member name="M:Godot.Color.Darkened(System.Single)">
            <summary>
            Returns a new color resulting from making this color darker
            by the specified ratio (on the range of 0 to 1).
            </summary>
            <param name="amount">The ratio to darken by.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:Godot.Color.Inverted">
            <summary>
            Returns the inverted color: `(1 - r, 1 - g, 1 - b, a)`.
            </summary>
            <returns>The inverted color.</returns>
        </member>
        <member name="M:Godot.Color.Lightened(System.Single)">
            <summary>
            Returns a new color resulting from making this color lighter
            by the specified ratio (on the range of 0 to 1).
            </summary>
            <param name="amount">The ratio to lighten by.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:Godot.Color.Lerp(Godot.Color,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this color and `to` by amount `weight`.
            </summary>
            <param name="to">The destination color for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting color of the interpolation.</returns>
        </member>
        <member name="M:Godot.Color.Lerp(Godot.Color,Godot.Color)">
            <summary>
            Returns the result of the linear interpolation between
            this color and `to` by color amount `weight`.
            </summary>
            <param name="to">The destination color for interpolation.</param>
            <param name="weight">A color with components on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting color of the interpolation.</returns>
        </member>
        <member name="M:Godot.Color.ToAbgr32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in ABGR
            format (each byte represents a color channel).
            ABGR is the reversed version of the default format.
            </summary>
            <returns>A uint representing this color in ABGR32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToAbgr64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in ABGR
            format (each word represents a color channel).
            ABGR is the reversed version of the default format.
            </summary>
            <returns>A ulong representing this color in ABGR64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToArgb32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in ARGB
            format (each byte represents a color channel).
            ARGB is more compatible with DirectX, but not used much in Godot.
            </summary>
            <returns>A uint representing this color in ARGB32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToArgb64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in ARGB
            format (each word represents a color channel).
            ARGB is more compatible with DirectX, but not used much in Godot.
            </summary>
            <returns>A ulong representing this color in ARGB64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToRgba32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in RGBA
            format (each byte represents a color channel).
            RGBA is Godot's default and recommended format.
            </summary>
            <returns>A uint representing this color in RGBA32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToRgba64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in RGBA
            format (each word represents a color channel).
            RGBA is Godot's default and recommended format.
            </summary>
            <returns>A ulong representing this color in RGBA64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToHtml(System.Boolean)">
            <summary>
            Returns the color's HTML hexadecimal color string in RGBA format.
            </summary>
            <param name="includeAlpha">Whether or not to include alpha. If false, the color is RGB instead of RGBA.</param>
            <returns>A string for the HTML hexadecimal representation of this color.</returns>
        </member>
        <member name="M:Godot.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a color from RGBA values, typically on the range of 0 to 1.
            </summary>
            <param name="r">The color's red component, typically on the range of 0 to 1.</param>
            <param name="g">The color's green component, typically on the range of 0 to 1.</param>
            <param name="b">The color's blue component, typically on the range of 0 to 1.</param>
            <param name="a">The color's alpha (transparency) value, typically on the range of 0 to 1. Default: 1.</param>
        </member>
        <member name="M:Godot.Color.#ctor(Godot.Color,System.Single)">
            <summary>
            Constructs a color from an existing color and an alpha value.
            </summary>
            <param name="c">The color to construct from. Only its RGB values are used.</param>
            <param name="a">The color's alpha (transparency) value, typically on the range of 0 to 1. Default: 1.</param>
        </member>
        <member name="M:Godot.Color.#ctor(System.UInt32)">
            <summary>
            Constructs a color from an unsigned 32-bit integer in RGBA format
            (each byte represents a color channel).
            </summary>
            <param name="rgba">The uint representing the color.</param>
        </member>
        <member name="M:Godot.Color.#ctor(System.UInt64)">
            <summary>
            Constructs a color from an unsigned 64-bit integer in RGBA format
            (each word represents a color channel).
            </summary>
            <param name="rgba">The ulong representing the color.</param>
        </member>
        <member name="M:Godot.Color.#ctor(System.String)">
            <summary>
            Constructs a color from the HTML hexadecimal color string in RGBA format.
            </summary>
            <param name="rgba">A string for the HTML hexadecimal representation of this color.</param>
        </member>
        <member name="M:Godot.Color.Color8(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a color constructed from integer red, green, blue, and alpha channels.
            Each channel should have 8 bits of information ranging from 0 to 255.
            </summary>
            <param name="r8">The red component represented on the range of 0 to 255.</param>
            <param name="g8">The green component represented on the range of 0 to 255.</param>
            <param name="b8">The blue component represented on the range of 0 to 255.</param>
            <param name="a8">The alpha (transparency) component represented on the range of 0 to 255.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.ColorN(System.String,System.Single)">
            <summary>
            Returns a color according to the standardized name, with the
            specified alpha value. Supported color names are the same as
            the constants defined in <see cref="T:Godot.Colors"/>.
            </summary>
            <param name="name">The name of the color.</param>
            <param name="alpha">The alpha (transparency) component represented on the range of 0 to 1. Default: 1.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a color from an HSV profile, with values on the
            range of 0 to 1. This is equivalent to using each of
            the `h`/`s`/`v` properties, but much more efficient.
            </summary>
            <param name="hue">The HSV hue, typically on the range of 0 to 1.</param>
            <param name="saturation">The HSV saturation, typically on the range of 0 to 1.</param>
            <param name="value">The HSV value (brightness), typically on the range of 0 to 1.</param>
            <param name="alpha">The alpha (transparency) value, typically on the range of 0 to 1.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.ToHsv(System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts a color to HSV values. This is equivalent to using each of
            the `h`/`s`/`v` properties, but much more efficient.
            </summary>
            <param name="hue">Output parameter for the HSV hue.</param>
            <param name="saturation">Output parameter for the HSV saturation.</param>
            <param name="value">Output parameter for the HSV value.</param>
        </member>
        <member name="M:Godot.Color.IsEqualApprox(Godot.Color)">
            <summary>
            Returns true if this color and `other` are approximately equal, by running
            <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other color to compare.</param>
            <returns>Whether or not the colors are approximately equal.</returns>
        </member>
        <member name="T:Godot.Colors">
            <summary>
            This class contains color constants created from standardized color names.
            The standardized color set is based on the X11 and .NET color names.
            </summary>
        </member>
        <member name="T:Godot.DynamicGodotObject">
             <summary>
             Represents an <see cref="T:Godot.Object"/> whose members can be dynamically accessed at runtime through the Variant API.
             </summary>
             <remarks>
             <para>
             The <see cref="T:Godot.DynamicGodotObject"/> class enables access to the Variant
             members of a <see cref="T:Godot.Object"/> instance at runtime.
             </para>
             <para>
             This allows accessing the class members using their original names in the engine as well as the members from the
             script attached to the <see cref="T:Godot.Object"/>, regardless of the scripting language it was written in.
             </para>
             </remarks>
             <example>
             This sample shows how to use <see cref="T:Godot.DynamicGodotObject"/> to dynamically access the engine members of a <see cref="T:Godot.Object"/>.
             <code>
             dynamic sprite = GetNode("Sprite2D").DynamicGodotObject;
             sprite.add_child(this);
            
             if ((sprite.hframes * sprite.vframes) &gt; 0)
                 sprite.frame = 0;
             </code>
             </example>
             <example>
             This sample shows how to use <see cref="T:Godot.DynamicGodotObject"/> to dynamically access the members of the script attached to a <see cref="T:Godot.Object"/>.
             <code>
             dynamic childNode = GetNode("ChildNode").DynamicGodotObject;
            
             if (childNode.print_allowed)
             {
                 childNode.message = "Hello from C#";
                 childNode.print_message(3);
             }
             </code>
             The <c>ChildNode</c> node has the following GDScript script attached:
             <code>
             // # ChildNode.gd
             // var print_allowed = true
             // var message = ""
             //
             // func print_message(times):
             //     for i in times:
             //         print(message)
             </code>
             </example>
        </member>
        <member name="P:Godot.DynamicGodotObject.Value">
            <summary>
            Gets the <see cref="T:Godot.Object"/> associated with this <see cref="T:Godot.DynamicGodotObject"/>.
            </summary>
        </member>
        <member name="M:Godot.DynamicGodotObject.#ctor(Godot.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Godot.DynamicGodotObject"/> class.
            </summary>
            <param name="godotObject">
            The <see cref="T:Godot.Object"/> that will be associated with this <see cref="T:Godot.DynamicGodotObject"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="godotObject"/> parameter is null.
            </exception>
        </member>
        <member name="T:Godot.Node">
            <summary>
            <para>Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.</para>
            <para>A tree of nodes is called a scene. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.</para>
            <para>Scene tree: The <see cref="T:Godot.SceneTree"/> contains the active tree of nodes. When a node is added to the scene tree, it receives the  notification and its <see cref="M:Godot.Node._EnterTree"/> callback is triggered. Child nodes are always added after their parent node, i.e. the <see cref="M:Godot.Node._EnterTree"/> callback of a parent node will be triggered before its child's.</para>
            <para>Once all nodes have been added in the scene tree, they receive the  notification and their respective <see cref="M:Godot.Node._Ready"/> callbacks are triggered. For groups of nodes, the <see cref="M:Godot.Node._Ready"/> callback is called in reverse order, starting with the children and moving up to the parent nodes.</para>
            <para>This means that when adding a node to the scene tree, the following order will be used for the callbacks: <see cref="M:Godot.Node._EnterTree"/> of the parent, <see cref="M:Godot.Node._EnterTree"/> of the children, <see cref="M:Godot.Node._Ready"/> of the children and finally <see cref="M:Godot.Node._Ready"/> of the parent (recursively for the entire scene tree).</para>
            <para>Processing: Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback <see cref="M:Godot.Node._Process(System.Single)"/>, toggled with <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>) happens as fast as possible and is dependent on the frame rate, so the processing time delta is passed as an argument. Physics processing (callback <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>, toggled with <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.</para>
            <para>Nodes can also process input events. When present, the <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI <see cref="T:Godot.Control"/> nodes), ensuring that the node only receives the events that were meant for it.</para>
            <para>To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the <see cref="P:Godot.Node.Owner"/> property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.</para>
            <para>Finally, when a node is freed with <see cref="M:Godot.Object.Free"/> or <see cref="M:Godot.Node.QueueFree"/>, it will also free all its children.</para>
            <para>Groups: Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See <see cref="M:Godot.Node.AddToGroup(Godot.StringName,System.Boolean)"/>, <see cref="M:Godot.Node.IsInGroup(Godot.StringName)"/> and <see cref="M:Godot.Node.RemoveFromGroup(Godot.StringName)"/>. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on <see cref="T:Godot.SceneTree"/>.</para>
            <para>Networking with nodes: After connecting to a server (or making one, see <see cref="T:Godot.NetworkedMultiplayerENet"/>), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its <see cref="T:Godot.NodePath"/> (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationEnterTree">
            <summary>
            <para>Notification received when the node enters a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationExitTree">
            <summary>
            <para>Notification received when the node is about to exit a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationMovedInParent">
            <summary>
            <para>Notification received when the node is moved in the parent.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationReady">
            <summary>
            <para>Notification received when the node is ready. See <see cref="M:Godot.Node._Ready"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPaused">
            <summary>
            <para>Notification received when the node is paused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationUnpaused">
            <summary>
            <para>Notification received when the node is unpaused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPhysicsProcess">
            <summary>
            <para>Notification received every frame when the physics process flag is set (see <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationProcess">
            <summary>
            <para>Notification received every frame when the process flag is set (see <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationParented">
            <summary>
            <para>Notification received when a node is set as a child of another node.</para>
            <para>Note: This doesn't mean that a node entered the <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationUnparented">
            <summary>
            <para>Notification received when a node is unparented (parent removed it from the list of children).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInstanced">
            <summary>
            <para>Notification received when the node is instanced.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationDragBegin">
            <summary>
            <para>Notification received when a drag begins.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationDragEnd">
            <summary>
            <para>Notification received when a drag ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPathChanged">
            <summary>
            <para>Notification received when the node's <see cref="T:Godot.NodePath"/> changed.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInternalProcess">
            <summary>
            <para>Notification received every frame when the internal process flag is set (see <see cref="M:Godot.Node.SetProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationInternalPhysicsProcess">
            <summary>
            <para>Notification received every frame when the internal physics process flag is set (see <see cref="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationPostEnterTree">
            <summary>
            <para>Notification received when the node is ready, just before  is received. Unlike the latter, it's sent every time the node enters tree, instead of only once.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmMouseEnter">
            <summary>
            <para>Notification received from the OS when the mouse enters the game window.</para>
            <para>Implemented on desktop and web platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmMouseExit">
            <summary>
            <para>Notification received from the OS when the mouse leaves the game window.</para>
            <para>Implemented on desktop and web platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmWindowFocusIn">
            <summary>
            <para>Notification received from the OS when the node's parent <see cref="T:Godot.Window"/> is focused. This may be a change of focus between two windows of the same engine instance, or from the OS desktop or a third-party application to a window of the game (in which case  is also emitted).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmWindowFocusOut">
            <summary>
            <para>Notification received from the OS when the node's parent <see cref="T:Godot.Window"/> is defocused. This may be a change of focus between two windows of the same engine instance, or from a window of the game to the OS desktop or a third-party application (in which case  is also emitted).</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmCloseRequest">
            <summary>
            <para>Notification received from the OS when a close request is sent (e.g. closing the window with a "Close" button or Alt + F4).</para>
            <para>Implemented on desktop platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmGoBackRequest">
            <summary>
            <para>Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android).</para>
            <para>Specific to the Android platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationOsMemoryWarning">
            <summary>
            <para>Notification received from the OS when the application is exceeding its allocated memory.</para>
            <para>Specific to the iOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationTranslationChanged">
            <summary>
            <para>Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like <see cref="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationWmAbout">
            <summary>
            <para>Notification received from the OS when a request for "About" information is sent.</para>
            <para>Specific to the macOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationCrash">
            <summary>
            <para>Notification received from Godot's crash handler when the engine is about to crash.</para>
            <para>Implemented on desktop platforms if the crash handler is enabled.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationOsImeUpdate">
            <summary>
            <para>Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).</para>
            <para>Specific to the macOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationApplicationResumed">
            <summary>
            <para>Notification received from the OS when the application is resumed.</para>
            <para>Specific to the Android platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationApplicationPaused">
            <summary>
            <para>Notification received from the OS when the application is paused.</para>
            <para>Specific to the Android platform.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationApplicationFocusIn">
            <summary>
            <para>Notification received from the OS when the application is focused, i.e. when changing the focus from the OS desktop or a thirdparty application to any open window of the Godot instance.</para>
            <para>Implemented on desktop platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationApplicationFocusOut">
            <summary>
            <para>Notification received from the OS when the application is defocused, i.e. when changing the focus from any open window of the Godot instance to the OS desktop or a thirdparty application.</para>
            <para>Implemented on desktop platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.NotificationTextServerChanged">
            <summary>
            <para>Notification received when text server is changed.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Inherit">
            <summary>
            <para>Inherits pause mode from the node's parent. For the root node, it is equivalent to . Default.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Stop">
            <summary>
            <para>Stops processing when the <see cref="T:Godot.SceneTree"/> is paused.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.PauseModeEnum.Process">
            <summary>
            <para>Continue to process regardless of the <see cref="T:Godot.SceneTree"/> pause state.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Signals">
            <summary>
            <para>Duplicate the node's signals.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Groups">
            <summary>
            <para>Duplicate the node's groups.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.Scripts">
            <summary>
            <para>Duplicate the node's scripts.</para>
            </summary>
        </member>
        <member name="F:Godot.Node.DuplicateFlags.UseInstancing">
            <summary>
            <para>Duplicate using instancing.</para>
            <para>An instance stays linked to the original so when the original changes, the instance changes too.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.PauseMode">
            <summary>
            <para>Pause mode. How the node will behave if the <see cref="T:Godot.SceneTree"/> is paused.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Name">
            <summary>
            <para>The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed.</para>
            <para>Note: Auto-generated names might include the <c>@</c> character, which is reserved for unique names when using <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/>. When setting the name manually, any <c>@</c> will be removed.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Filename">
            <summary>
            <para>When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Owner">
            <summary>
            <para>The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using <see cref="T:Godot.PackedScene"/>), all the nodes it owns will be saved with it. This allows for the creation of complex <see cref="T:Godot.SceneTree"/>s, with instancing and subinstancing.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.Multiplayer">
            <summary>
            <para>The <see cref="T:Godot.MultiplayerAPI"/> instance associated with this node. Either the <see cref="P:Godot.Node.CustomMultiplayer"/>, or the default SceneTree one (if inside tree).</para>
            </summary>
        </member>
        <member name="P:Godot.Node.CustomMultiplayer">
            <summary>
            <para>The override to the default <see cref="T:Godot.MultiplayerAPI"/>. Set to <c>null</c> to use the default <see cref="T:Godot.SceneTree"/> one.</para>
            </summary>
        </member>
        <member name="P:Godot.Node.ProcessPriority">
            <summary>
            <para>The node's priority in the execution order of the enabled processing callbacks (i.e. ,  and their internal counterparts). Nodes whose process priority value is lower will have their processing callbacks executed first.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._EnterTree">
            <summary>
            <para>Called when the node enters the <see cref="T:Godot.SceneTree"/> (e.g. upon instancing, scene changing, or after calling <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/> in a script). If the node has children, its <see cref="M:Godot.Node._EnterTree"/> callback will be called first, and then that of the children.</para>
            <para>Corresponds to the  notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._ExitTree">
            <summary>
            <para>Called when the node is about to leave the <see cref="T:Godot.SceneTree"/> (e.g. upon freeing, scene changing, or after calling <see cref="M:Godot.Node.RemoveChild(Godot.Node)"/> in a script). If the node has children, its <see cref="M:Godot.Node._ExitTree"/> callback will be called last, after all its children have left the tree.</para>
            <para>Corresponds to the  notification in <see cref="M:Godot.Object._Notification(System.Int32)"/> and signal <c>tree_exiting</c>. To get notified when the node has already left the active tree, connect to the <c>tree_exited</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._GetConfigurationWarning">
            <summary>
            <para>The string returned from this method is displayed as a warning in the Scene Dock if the script that overrides it is a <c>tool</c> script.</para>
            <para>Returning an empty string produces no warning.</para>
            <para>Call <see cref="M:Godot.Node.UpdateConfigurationWarning"/> when the warning needs to be updated for this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Input(Godot.InputEvent)">
            <summary>
            <para>Called when there is an input event. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.Viewport.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> and <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> are usually a better fit as they allow the GUI to intercept the events first.</para>
            <para>Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</para>
            </summary>
        </member>
        <member name="M:Godot.Node._PhysicsProcess(System.Single)">
            <summary>
            <para>Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the <c>delta</c> variable should be constant.</para>
            <para>It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>.</para>
            <para>Corresponds to the  notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            <para>Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Process(System.Single)">
            <summary>
            <para>Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the <c>delta</c> time since the previous frame is not constant.</para>
            <para>It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>.</para>
            <para>Corresponds to the  notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            <para>Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</para>
            </summary>
        </member>
        <member name="M:Godot.Node._Ready">
            <summary>
            <para>Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their <see cref="M:Godot.Node._Ready"/> callbacks get triggered first, and the parent node will receive the ready notification afterwards.</para>
            <para>Corresponds to the  notification in <see cref="M:Godot.Object._Notification(System.Int32)"/>. See also the <c>onready</c> keyword for variables.</para>
            <para>Usually used for initialization. For even earlier initialization,  may be used. See also <see cref="M:Godot.Node._EnterTree"/>.</para>
            <para>Note: <see cref="M:Godot.Node._Ready"/> may be called only once for each node. After removing a node from the scene tree and adding again, <c>_ready</c> will not be called for the second time. This can be bypassed with requesting another call with <see cref="M:Godot.Node.RequestReady"/>, which may be called anywhere before adding the node again.</para>
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledInput(Godot.InputEvent)">
            <summary>
            <para>Called when an <see cref="T:Godot.InputEvent"/> hasn't been consumed by <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> or any GUI. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.Viewport.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, this and <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> are usually a better fit than <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> as they allow the GUI to intercept the events first.</para>
            <para>Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</para>
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)">
            <summary>
            <para>Called when an <see cref="T:Godot.InputEventKey"/> hasn't been consumed by <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> or any GUI. The input event propagates up through the node tree until a node consumes it.</para>
            <para>It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with <see cref="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)"/>.</para>
            <para>To consume the input event and stop it propagating further to other nodes, <see cref="M:Godot.Viewport.SetInputAsHandled"/> can be called.</para>
            <para>For gameplay input, this and <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> are usually a better fit than <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> as they allow the GUI to intercept the events first.</para>
            <para>Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddSibling(Godot.Node,System.Boolean)">
            <summary>
            <para>Adds a <c>sibling</c> node to current's node parent, at the the same level as that node, right below it.</para>
            <para>If <c>legible_unique_name</c> is <c>true</c>, the child node will have an human-readable name based on the name of the node being instanced instead of its type.</para>
            <para>Use <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/> instead of this method if you don't need the child node to be added below a specific node in the list of children.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddChild(Godot.Node,System.Boolean)">
            <summary>
            <para>Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.</para>
            <para>If <c>legible_unique_name</c> is <c>true</c>, the child node will have an human-readable name based on the name of the node being instanced instead of its type.</para>
            <para>Note: If the child node already has a parent, the function will fail. Use <see cref="M:Godot.Node.RemoveChild(Godot.Node)"/> first to remove the node from its current parent. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var child_node = get_child(0)</para>
            <para>if child_node.get_parent():</para>
            <para>    child_node.get_parent().remove_child(child_node)</para>
            <para>add_child(child_node)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>Node childNode = GetChild(0);</para>
            <para>if (childNode.GetParent() != null)</para>
            <para>{</para>
            <para>    childNode.GetParent().RemoveChild(childNode);</para>
            <para>}</para>
            <para>AddChild(childNode);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If you need the child node to be added below a specific node in the list of children, use <see cref="M:Godot.Node.AddSibling(Godot.Node,System.Boolean)"/> instead of this method.</para>
            <para>Note: If you want a child to be persisted to a <see cref="T:Godot.PackedScene"/>, you must set <see cref="P:Godot.Node.Owner"/> in addition to calling <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/>. This is typically relevant for <a href="https://godot.readthedocs.io/en/latest/tutorials/misc/running_code_in_the_editor.html">tool scripts</a> and <a href="https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html">editor plugins</a>. If <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean)"/> is called without setting <see cref="P:Godot.Node.Owner"/>, the newly added <see cref="T:Godot.Node"/> will not be visible in the scene tree, though it will be visible in the 2D/3D view.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveChild(Godot.Node)">
            <summary>
            <para>Removes a child node. The node is NOT deleted and must be deleted manually.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildCount">
            <summary>
            <para>Returns the number of child nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildren">
            <summary>
            <para>Returns an array of references to node's children.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetChild(System.Int32)">
            <summary>
            <para>Returns a child node by its index (see <see cref="M:Godot.Node.GetChildCount"/>). This method is often used for iterating all children of a node.</para>
            <para>Negative indices access the children from the last one.</para>
            <para>To access a child node via its name, use <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.HasNode(Godot.NodePath)">
            <summary>
            <para>Returns <c>true</c> if the node that the <see cref="T:Godot.NodePath"/> points to exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNode(Godot.NodePath)">
            <summary>
            <para>Fetches a node. The <see cref="T:Godot.NodePath"/> can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a <c>null instance</c> is returned and an error is logged. Attempts to access methods on the return value will result in an "Attempt to call &lt;method&gt; on a null instance." error.</para>
            <para>Note: Fetching absolute paths only works when the node is inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>).</para>
            <para>Example: Assume your current node is Character and the following tree:</para>
            <para><code>
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            </code></para>
            <para>Possible paths are:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>get_node("Sword")</para>
            <para>get_node("Backpack/Dagger")</para>
            <para>get_node("../Swamp/Alligator")</para>
            <para>get_node("/root/MyGame")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GetNode("Sword");</para>
            <para>GetNode("Backpack/Dagger");</para>
            <para>GetNode("../Swamp/Alligator");</para>
            <para>GetNode("/root/MyGame");</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNodeOrNull(Godot.NodePath)">
            <summary>
            <para>Similar to <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>, but does not log an error if <c>path</c> does not point to a valid <see cref="T:Godot.Node"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetParent">
            <summary>
            <para>Returns the parent node of the current node, or a <c>null instance</c> if the node lacks a parent.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.FindNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Finds a descendant of this node whose name matches <c>mask</c> as in <c>String.match</c> (i.e. case-sensitive, but <c>"*"</c> matches zero or more characters and <c>"?"</c> matches any single character except <c>"."</c>).</para>
            <para>Note: It does not match against the full path, just against individual node names.</para>
            <para>If <c>owned</c> is <c>true</c>, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner.</para>
            <para>Note: As this method walks through all the descendants of the node, it is the slowest way to get a reference to another node. Whenever possible, consider using <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/> instead. To avoid using <see cref="M:Godot.Node.FindNode(System.String,System.Boolean,System.Boolean)"/> too often, consider caching the node reference into a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.FindParent(System.String)">
            <summary>
            <para>Finds the first parent of the current node whose name matches <c>mask</c> as in <c>String.match</c> (i.e. case-sensitive, but <c>"*"</c> matches zero or more characters and <c>"?"</c> matches any single character except <c>"."</c>).</para>
            <para>Note: It does not match against the full path, just against individual node names.</para>
            <para>Note: As this method walks upwards in the scene tree, it can be slow in large, deeply nested scene trees. Whenever possible, consider using <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/> instead. To avoid using <see cref="M:Godot.Node.FindParent(System.String)"/> too often, consider caching the node reference into a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.HasNodeAndResource(Godot.NodePath)">
            <summary>
            <para>Returns <c>true</c> if the <see cref="T:Godot.NodePath"/> points to a valid node and its subname points to a valid resource, e.g. <c>Area2D/CollisionShape2D:shape</c>. Properties with a non-<see cref="T:Godot.Resource"/> type (e.g. nodes or primitive math types) are not considered resources.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNodeAndResource(Godot.NodePath)">
            <summary>
            <para>Fetches a node and one of its resources as specified by the <see cref="T:Godot.NodePath"/>'s subname (e.g. <c>Area2D/CollisionShape2D:shape</c>). If several nested resources are specified in the <see cref="T:Godot.NodePath"/>, the last one will be fetched.</para>
            <para>The return value is an array of size 3: the first index points to the <see cref="T:Godot.Node"/> (or <c>null</c> if not found), the second index points to the <see cref="T:Godot.Resource"/> (or <c>null</c> if not found), and the third index is the remaining <see cref="T:Godot.NodePath"/>, if any.</para>
            <para>For example, assuming that <c>Area2D/CollisionShape2D</c> is a valid node and that its <c>shape</c> property has been assigned a <see cref="T:Godot.RectangleShape2D"/> resource, one could have this kind of output:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]</para>
            <para>print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]</para>
            <para>print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GD.Print(GetNodeAndResource("Area2D/CollisionShape2D")); // [[CollisionShape2D:1161], Null, ]</para>
            <para>GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], ]</para>
            <para>GD.Print(GetNodeAndResource("Area2D/CollisionShape2D:shape:extents")); // [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsInsideTree">
            <summary>
            <para>Returns <c>true</c> if this node is currently inside a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsAParentOf(Godot.Node)">
            <summary>
            <para>Returns <c>true</c> if the given node is a direct or indirect child of the current node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsGreaterThan(Godot.Node)">
            <summary>
            <para>Returns <c>true</c> if the given node occurs later in the scene hierarchy than the current node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPath">
            <summary>
            <para>Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPathTo(Godot.Node)">
            <summary>
            <para>Returns the relative <see cref="T:Godot.NodePath"/> from this node to the specified <c>node</c>. Both nodes must be in the same scene or the function will fail.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.AddToGroup(Godot.StringName,System.Boolean)">
            <summary>
            <para>Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see <see cref="M:Godot.Node.IsInsideTree"/>). See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            <para>The <c>persistent</c> option is used when packing node to <see cref="T:Godot.PackedScene"/> and saving to file. Non-persistent groups aren't stored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveFromGroup(Godot.StringName)">
            <summary>
            <para>Removes a node from a group. See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsInGroup(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if this node is in the specified group. See notes in the description, and the group methods in <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.MoveChild(Godot.Node,System.Int32)">
            <summary>
            <para>Moves a child node to a different position (order) among the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetGroups">
            <summary>
            <para>Returns an array listing the groups that the node is a member of.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Raise">
            <summary>
            <para>Moves this node to the bottom of parent node's children hierarchy. This is often useful in GUIs (<see cref="T:Godot.Control"/> nodes), because their order of drawing depends on their order in the tree, i.e. the further they are on the node list, the higher they are drawn. After using <c>raise</c>, a Control will be drawn on top of their siblings.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveAndSkip">
            <summary>
            <para>Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetIndex">
            <summary>
            <para>Returns the node's order in the scene tree branch. For example, if called on the first child node the position is <c>0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTree">
            <summary>
            <para>Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/> function.</para>
            <para>Example output:</para>
            <para><code>
            TheGame
            TheGame/Menu
            TheGame/Menu/Label
            TheGame/Menu/Camera2D
            TheGame/SplashScreen
            TheGame/SplashScreen/Camera2D
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTreePretty">
            <summary>
            <para>Similar to <see cref="M:Godot.Node.PrintTree"/>, this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees.</para>
            <para>Example output:</para>
            <para><code>
             ┖╴TheGame
                ┠╴Menu
                ┃  ┠╴Label
                ┃  ┖╴Camera2D
                ┖╴SplashScreen
                   ┖╴Camera2D
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateNotification(System.Int32)">
            <summary>
            <para>Notifies the current node and all its children recursively by calling <see cref="M:Godot.Object.Notification(System.Int32,System.Boolean)"/> on all of them.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateCall(Godot.StringName,Godot.Collections.Array,System.Boolean)">
            <summary>
            <para>Calls the given method (if present) with the arguments given in <c>args</c> on this node and recursively on all its children. If the <c>parent_first</c> argument is <c>true</c>, the method will be called on the current node first, then on all its children. If <c>parent_first</c> is <c>false</c>, the children will be called first.</para>
            </summary>
            <param name="args">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcess(System.Boolean)">
            <summary>
            <para>Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a  at a fixed (usually 60 FPS, see <see cref="P:Godot.Engine.IterationsPerSecond"/> to change) interval (and the <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> callback will be called if exists). Enabled automatically if <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetPhysicsProcessDeltaTime">
            <summary>
            <para>Returns the time elapsed since the last physics-bound frame (see <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>). This is always a constant value in physics processing unless the frames per second is changed via <see cref="P:Godot.Engine.IterationsPerSecond"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessing">
            <summary>
            <para>Returns <c>true</c> if physics processing is enabled (see <see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetProcessDeltaTime">
            <summary>
            <para>Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcess(System.Boolean)">
            <summary>
            <para>Enables or disables processing. When a node is being processed, it will receive a  on every drawn frame (and the <see cref="M:Godot.Node._Process(System.Single)"/> callback will be called if exists). Enabled automatically if <see cref="M:Godot.Node._Process(System.Single)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessing">
            <summary>
            <para>Returns <c>true</c> if processing is enabled (see <see cref="M:Godot.Node.SetProcess(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInput(System.Boolean)">
            <summary>
            <para>Enables or disables input processing. This is not required for GUI controls! Enabled automatically if <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing input (see <see cref="M:Godot.Node.SetProcessInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)">
            <summary>
            <para>Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a <see cref="T:Godot.Control"/>). Enabled automatically if <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing unhandled input (see <see cref="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)">
            <summary>
            <para>Enables unhandled key input processing. Enabled automatically if <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/> is overridden. Any calls to this before <see cref="M:Godot.Node._Ready"/> will be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledKeyInput">
            <summary>
            <para>Returns <c>true</c> if the node is processing unhandled key input (see <see cref="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.CanProcess">
            <summary>
            <para>Returns <c>true</c> if the node can process while the scene tree is paused (see <see cref="P:Godot.Node.PauseMode"/>). Always returns <c>true</c> if the scene tree is not paused, and <c>false</c> if the node is not in the tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.PrintStrayNodes">
            <summary>
            <para>Prints all stray nodes (nodes outside the <see cref="T:Godot.SceneTree"/>). Used for debugging. Works only in debug builds.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetDisplayFolded(System.Boolean)">
            <summary>
            <para>Sets the folded state of the node in the Scene dock.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsDisplayedFolded">
            <summary>
            <para>Returns <c>true</c> if the node is folded (collapsed) in the Scene dock.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInternal(System.Boolean)">
            <summary>
            <para>Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal <see cref="M:Godot.Node._Process(System.Single)"/> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (<see cref="M:Godot.Node.SetProcess(System.Boolean)"/>). Only useful for advanced uses to manipulate built-in nodes' behavior.</para>
            <para>Warning: Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInternal">
            <summary>
            <para>Returns <c>true</c> if internal processing is enabled (see <see cref="M:Godot.Node.SetProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)">
            <summary>
            <para>Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (<see cref="M:Godot.Node.SetPhysicsProcess(System.Boolean)"/>). Only useful for advanced uses to manipulate built-in nodes' behavior.</para>
            <para>Warning: Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessingInternal">
            <summary>
            <para>Returns <c>true</c> if internal physics processing is enabled (see <see cref="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetTree">
            <summary>
            <para>Returns the <see cref="T:Godot.SceneTree"/> that contains this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Duplicate(System.Int32)">
            <summary>
            <para>Duplicates the node, returning a new node.</para>
            <para>You can fine-tune the behavior using the <c>flags</c> (see <see cref="T:Godot.Node.DuplicateFlags"/>).</para>
            <para>Note: It will not work properly if the node contains a script with constructor arguments (i.e. needs to supply arguments to  method). In that case, the node will be duplicated without a script.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.ReplaceBy(Godot.Node,System.Boolean)">
            <summary>
            <para>Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetSceneInstanceLoadPlaceholder(System.Boolean)">
            <summary>
            <para>Sets whether this is an instance load placeholder. See <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetSceneInstanceLoadPlaceholder">
            <summary>
            <para>Returns <c>true</c> if this is an instance load placeholder. See <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetViewport">
            <summary>
            <para>Returns the node's <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.QueueFree">
            <summary>
            <para>Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to <see cref="M:Godot.Object.Free"/>. Use <see cref="M:Godot.Object.IsQueuedForDeletion"/> to check whether a node will be deleted at the end of the frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RequestReady">
            <summary>
            <para>Requests that <c>_ready</c> be called again. Note that the method won't be called immediately, but is scheduled for when the node is added to the scene tree again (see <see cref="M:Godot.Node._Ready"/>). <c>_ready</c> is called only for the node which requested it, which means that you need to request ready for each child if you want them to call <c>_ready</c> too (in which case, <c>_ready</c> will be called in the same order as it would normally).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the <c>master</c> and <c>puppet</c> keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If <c>recursive</c>, the given peer is recursively set as the master for all children of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNetworkMaster">
            <summary>
            <para>Returns the peer ID of the network master for this node. See <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.IsNetworkMaster">
            <summary>
            <para>Returns <c>true</c> if the local system is the master of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)">
            <summary>
            <para>Changes the RPC mode for the given <c>method</c> to the given <c>mode</c>. See <see cref="T:Godot.MultiplayerAPI.RPCMode"/>. An alternative is annotating methods and properties with the corresponding keywords (<c>remote</c>, <c>master</c>, <c>puppet</c>, <c>remotesync</c>, <c>mastersync</c>, <c>puppetsync</c>). By default, methods are not exposed to networking (and RPCs). See also <see cref="M:Godot.Node.Rset(Godot.StringName,System.Object)"/> and <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> for properties.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)">
            <summary>
            <para>Changes the RPC mode for the given <c>property</c> to the given <c>mode</c>. See <see cref="T:Godot.MultiplayerAPI.RPCMode"/>. An alternative is annotating methods and properties with the corresponding keywords (<c>remote</c>, <c>master</c>, <c>puppet</c>, <c>remotesync</c>, <c>mastersync</c>, <c>puppetsync</c>). By default, properties are not exposed to networking (and RPCs). See also <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> and <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> for methods.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Rpc(Godot.StringName,System.Object[])">
            <summary>
            <para>Sends a remote procedure call request for the given <c>method</c> to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same <see cref="T:Godot.NodePath"/>, including the exact same node name. Behaviour depends on the RPC configuration for the given method, see <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/>. Methods are not exposed to RPCs by default. See also <see cref="M:Godot.Node.Rset(Godot.StringName,System.Object)"/> and <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> for properties. Returns an empty <c>Variant</c>.</para>
            <para>Note: You can only safely use RPCs on clients after you received the <c>connected_to_server</c> signal from the <see cref="T:Godot.SceneTree"/>. You also need to keep track of the connection state, either by the <see cref="T:Godot.SceneTree"/> signals like <c>server_disconnected</c> or by checking <c>SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliable(Godot.StringName,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> using an unreliable protocol. Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcId(System.Int32,Godot.StringName,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> to a specific peer identified by <c>peer_id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliableId(System.Int32,Godot.StringName,System.Object[])">
            <summary>
            <para>Sends a <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> to a specific peer identified by <c>peer_id</c> using an unreliable protocol (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.Rset(Godot.StringName,System.Object)">
            <summary>
            <para>Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/>. See also <see cref="M:Godot.Node.Rpc(Godot.StringName,System.Object[])"/> for RPCs for methods, most information applies to this method as well.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetId(System.Int32,Godot.StringName,System.Object)">
            <summary>
            <para>Remotely changes the property's value on a specific peer identified by <c>peer_id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliable(Godot.StringName,System.Object)">
            <summary>
            <para>Remotely changes the property's value on other peers (and locally) using an unreliable protocol.</para>
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliableId(System.Int32,Godot.StringName,System.Object)">
            <summary>
            <para>Remotely changes property's value on a specific peer identified by <c>peer_id</c> using an unreliable protocol (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Node.UpdateConfigurationWarning">
            <summary>
            <para>Updates the warning displayed for this node in the Scene Dock.</para>
            <para>Use <see cref="M:Godot.Node._GetConfigurationWarning"/> to setup the warning message to display.</para>
            </summary>
        </member>
        <member name="T:Godot.Node.RenamedHandler">
            <summary>
            <para>Emitted when the node is renamed.</para>
            </summary>
        </member>
        <member name="T:Godot.Node.ReadyHandler">
            <summary>
            <para>Emitted when the node is ready.</para>
            </summary>
        </member>
        <member name="T:Godot.Node.TreeEnteredHandler">
            <summary>
            <para>Emitted when the node enters the tree.</para>
            </summary>
        </member>
        <member name="T:Godot.Node.TreeExitingHandler">
            <summary>
            <para>Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a "destructor", if you will).</para>
            </summary>
        </member>
        <member name="T:Godot.Node.TreeExitedHandler">
            <summary>
            <para>Emitted after the node exits the tree and is no longer active.</para>
            </summary>
        </member>
        <member name="T:Godot.Object">
            <summary>
            <para>Every class which is not a built-in type inherits from this class.</para>
            <para>You can construct Objects from scripting languages, using <c>Object.new()</c> in GDScript, <c>new Object</c> in C#, or the "Construct Object" node in VisualScript.</para>
            <para>Objects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. To do so, call the <see cref="M:Godot.Object.Free"/> method from your script or delete the instance from C++.</para>
            <para>Some classes that extend Object add memory management. This is the case of <see cref="T:Godot.Reference"/>, which counts references and deletes itself automatically when no longer referenced. <see cref="T:Godot.Node"/>, another fundamental type, deletes all its children when freed from memory.</para>
            <para>Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in <see cref="M:Godot.Object._GetPropertyList"/> and handled in <see cref="M:Godot.Object._Get(Godot.StringName)"/> and <see cref="M:Godot.Object._Set(Godot.StringName,System.Object)"/>. However, scripting languages and C++ have simpler means to export them.</para>
            <para>Property membership can be tested directly in GDScript using <c>in</c>:</para>
            <para><code>
            var n = Node2D.new()
            print("position" in n) # Prints "True".
            print("other_property" in n) # Prints "False".
            </code></para>
            <para>The <c>in</c> operator will evaluate to <c>true</c> as long as the key exists, even if the value is <c>null</c>.</para>
            <para>Objects also receive notifications. Notifications are a simple way to notify the object about different events, so they can all be handled together. See <see cref="M:Godot.Object._Notification(System.Int32)"/>.</para>
            <para>Note: Unlike references to a <see cref="T:Godot.Reference"/>, references to an Object stored in a variable can become invalid without warning. Therefore, it's recommended to use <see cref="T:Godot.Reference"/> for data classes instead of <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.ToSignal(Godot.Object,Godot.StringName)">
            <summary>
            Returns a new <see cref="T:Godot.SignalAwaiter"/> awaiter configured to complete when the instance
            <paramref name="source"/> emits the signal specified by the <paramref name="signal"/> parameter.
            </summary>
            <param name="source">
            The instance the awaiter will be listening to.
            </param>
            <param name="signal">
            The signal the awaiter will be waiting for.
            </param>
            <example>
            This sample prints a message once every frame up to 100 times.
            <code>
            public override void _Ready()
            {
                for (int i = 0; i &lt; 100; i++)
                {
                    await ToSignal(GetTree(), "idle_frame");
                    GD.Print($"Frame {i}");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Godot.Object.DynamicObject">
            <summary>
            Gets a new <see cref="T:Godot.DynamicGodotObject"/> associated with this instance.
            </summary>
        </member>
        <member name="F:Godot.Object.NotificationPostinitialize">
            <summary>
            <para>Called right when the object is initialized. Not available in script.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.NotificationPredelete">
            <summary>
            <para>Called before the object is about to be deleted.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Deferred">
            <summary>
            <para>Connects a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Persist">
            <summary>
            <para>Persisting connections are saved when the object is serialized to file.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.Oneshot">
            <summary>
            <para>One-shot connections disconnect themselves after emission.</para>
            </summary>
        </member>
        <member name="F:Godot.Object.ConnectFlags.ReferenceCounted">
            <summary>
            <para>Connect a signal as reference-counted. This means that a given signal can be connected several times to the same target, and will only be fully disconnected once no references are left.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Get(Godot.StringName)">
            <summary>
            <para>Virtual method which can be overridden to customize the return value of <see cref="M:Godot.Object.Get(System.String)"/>.</para>
            <para>Returns the given property. Returns <c>null</c> if the <c>property</c> does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._GetPropertyList">
            <summary>
            <para>Virtual method which can be overridden to customize the return value of <see cref="M:Godot.Object.GetPropertyList"/>.</para>
            <para>Returns the object's property list as an <see cref="T:Godot.Collections.Array"/> of dictionaries.</para>
            <para>Each property's <see cref="T:Godot.Collections.Dictionary"/> must contain at least <c>name: String</c> and <c>type: int</c> (see <see cref="T:Godot.Variant.Type"/>) entries. Optionally, it can also include <c>hint: int</c> (see <see cref="T:Godot.PropertyHint"/>), <c>hint_string: String</c>, and <c>usage: int</c> (see <see cref="T:Godot.PropertyUsageFlags"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Notification(System.Int32)">
            <summary>
            <para>Called whenever the object receives a notification, which is identified in <c>what</c> by a constant. The base <see cref="T:Godot.Object"/> has two constants  and , but subclasses such as <see cref="T:Godot.Node"/> define a lot more notifications which are also received by this method.</para>
            </summary>
        </member>
        <member name="M:Godot.Object._Set(Godot.StringName,System.Object)">
            <summary>
            <para>Virtual method which can be overridden to customize the return value of <see cref="M:Godot.Object.Set(System.String,System.Object)"/>.</para>
            <para>Sets a property. Returns <c>true</c> if the <c>property</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Free">
            <summary>
            <para>Deletes the object from memory. Any pre-existing reference to the freed object will become invalid, e.g. <c>is_instance_valid(object)</c> will return <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetClass">
            <summary>
            <para>Returns the object's class as a <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsClass(System.String)">
            <summary>
            <para>Returns <c>true</c> if the object inherits from the given <c>class</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Set(System.String,System.Object)">
            <summary>
            <para>Assigns a new value to the given property. If the <c>property</c> does not exist, nothing will happen.</para>
            <para>Note: In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Get(System.String)">
            <summary>
            <para>Returns the <c>Variant</c> value of the given <c>property</c>. If the <c>property</c> doesn't exist, this will return <c>null</c>.</para>
            <para>Note: In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetIndexed(Godot.NodePath,System.Object)">
            <summary>
            <para>Assigns a new value to the property identified by the <see cref="T:Godot.NodePath"/>. The node path should be relative to the current object and can use the colon character (<c>:</c>) to access nested properties. Example:</para>
            <para><code>
            set_indexed("position", Vector2(42, 0))
            set_indexed("position:y", -10)
            print(position) # (42, -10)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetIndexed(Godot.NodePath)">
            <summary>
            <para>Gets the object's property indexed by the given <see cref="T:Godot.NodePath"/>. The node path should be relative to the current object and can use the colon character (<c>:</c>) to access nested properties. Examples: <c>"position:x"</c> or <c>"material:next_pass:blend_mode"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetPropertyList">
            <summary>
            <para>Returns the object's property list as an <see cref="T:Godot.Collections.Array"/> of dictionaries.</para>
            <para>Each property's <see cref="T:Godot.Collections.Dictionary"/> contain at least <c>name: String</c> and <c>type: int</c> (see <see cref="T:Godot.Variant.Type"/>) entries. Optionally, it can also include <c>hint: int</c> (see <see cref="T:Godot.PropertyHint"/>), <c>hint_string: String</c>, and <c>usage: int</c> (see <see cref="T:Godot.PropertyUsageFlags"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMethodList">
            <summary>
            <para>Returns the object's methods and their signatures as an <see cref="T:Godot.Collections.Array"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Notification(System.Int32,System.Boolean)">
            <summary>
            <para>Send a given notification to the object, which will also trigger a call to the <see cref="M:Godot.Object._Notification(System.Int32)"/> method of all classes that the object inherits from.</para>
            <para>If <c>reversed</c> is <c>true</c>, <see cref="M:Godot.Object._Notification(System.Int32)"/> is called first on the object's own class, and then up to its successive parent classes. If <c>reversed</c> is <c>false</c>, <see cref="M:Godot.Object._Notification(System.Int32)"/> is called first on the highest ancestor (<see cref="T:Godot.Object"/> itself), and then down to its successive inheriting classes.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetInstanceId">
            <summary>
            <para>Returns the object's unique instance ID.</para>
            <para>This ID can be saved in <see cref="T:Godot.EncodedObjectAsID"/>, and can be used to retrieve the object instance with <c>@GDScript.instance_from_id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetScript(System.Object)">
            <summary>
            <para>Assigns a script to the object. Each object can have a single script assigned to it, which are used to extend its functionality.</para>
            <para>If the object already had a script, the previous script instance will be freed and its variables and state will be lost. The new script's  method will be called.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetScript">
            <summary>
            <para>Returns the object's <see cref="T:Godot.Script"/> instance, or <c>null</c> if none is assigned.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetMeta(System.String,System.Object)">
            <summary>
            <para>Adds, changes or removes a given entry in the object's metadata. Metadata are serialized and can take any <c>Variant</c> value.</para>
            <para>To remove a given entry from the object's metadata, use <see cref="M:Godot.Object.RemoveMeta(System.String)"/>. Metadata is also removed if its value is set to <c>null</c>. This means you can also use <c>set_meta("name", null)</c> to remove metadata for <c>"name"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.RemoveMeta(System.String)">
            <summary>
            <para>Removes a given entry from the object's metadata. See also <see cref="M:Godot.Object.SetMeta(System.String,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMeta(System.String)">
            <summary>
            <para>Returns the object's metadata entry for the given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.HasMeta(System.String)">
            <summary>
            <para>Returns <c>true</c> if a metadata entry is found with the given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetMetaList">
            <summary>
            <para>Returns the object's metadata as a <see cref="T:string[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.AddUserSignal(System.String,Godot.Collections.Array)">
            <summary>
            <para>Adds a user-defined <c>signal</c>. Arguments are optional, but can be added as an <see cref="T:Godot.Collections.Array"/> of dictionaries, each containing <c>name: String</c> and <c>type: int</c> (see <see cref="T:Godot.Variant.Type"/>) entries.</para>
            </summary>
            <param name="arguments">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Object.HasUserSignal(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given user-defined <c>signal</c> exists. Only signals added using <see cref="M:Godot.Object.AddUserSignal(System.String,Godot.Collections.Array)"/> are taken into account.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.EmitSignal(Godot.StringName,System.Object[])">
            <summary>
            <para>Emits the given <c>signal</c>. The signal must exist, so it should be a built-in signal of this class or one of its parent classes, or a user-defined signal. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:</para>
            <para><code>
            emit_signal("hit", weapon_type, damage)
            emit_signal("game_over")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Object.Call(Godot.StringName,System.Object[])">
            <summary>
            <para>Calls the <c>method</c> on the object and returns the result. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:</para>
            <para><code>
            call("set", "position", Vector2(42.0, 0.0))
            </code></para>
            <para>Note: In C#, the method name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined methods where you should use the same convention as in the C# source (typically PascalCase).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.CallDeferred(Godot.StringName,System.Object[])">
            <summary>
            <para>Calls the <c>method</c> on the object during idle time. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:</para>
            <para><code>
            call_deferred("set", "position", Vector2(42.0, 0.0))
            </code></para>
            <para>Note: In C#, the method name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined methods where you should use the same convention as in the C# source (typically PascalCase).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetDeferred(Godot.StringName,System.Object)">
            <summary>
            <para>Assigns a new value to the given property, after the current frame's physics step. This is equivalent to calling <see cref="M:Godot.Object.Set(System.String,System.Object)"/> via <see cref="M:Godot.Object.CallDeferred(Godot.StringName,System.Object[])"/>, i.e. <c>call_deferred("set", property, value)</c>.</para>
            <para>Note: In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase).</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Callv(Godot.StringName,Godot.Collections.Array)">
            <summary>
            <para>Calls the <c>method</c> on the object and returns the result. Contrarily to <see cref="M:Godot.Object.Call(Godot.StringName,System.Object[])"/>, this method does not support a variable number of arguments but expects all parameters to be via a single <see cref="T:Godot.Collections.Array"/>.</para>
            <para><code>
            callv("set", [ "position", Vector2(42.0, 0.0) ])
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Object.HasMethod(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the object contains the given <c>method</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.HasSignal(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given <c>signal</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalList">
            <summary>
            <para>Returns the list of signals as an <see cref="T:Godot.Collections.Array"/> of dictionaries.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalConnectionList(System.String)">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of connections for the given <c>signal</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.GetIncomingConnections">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of dictionaries with information about signals that are connected to the object.</para>
            <para>Each <see cref="T:Godot.Collections.Dictionary"/> contains three String entries:</para>
            <para>- <c>source</c> is a reference to the signal emitter.</para>
            <para>- <c>signal_name</c> is the name of the connected signal.</para>
            <para>- <c>method_name</c> is the name of the method to which the signal is connected.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Connect(Godot.StringName,Godot.Callable,Godot.Collections.Array,System.UInt32)">
            <summary>
            <para>FIXME: The syntax changed with the addition of <see cref="T:Godot.Callable"/>, this should be updated.</para>
            <para>Connects a <c>signal</c> to a <c>method</c> on a <c>target</c> object. Pass optional <c>binds</c> to the call as an <see cref="T:Godot.Collections.Array"/> of parameters. These parameters will be passed to the method after any parameter used in the call to <see cref="M:Godot.Object.EmitSignal(Godot.StringName,System.Object[])"/>. Use <c>flags</c> to set deferred or one-shot connections. See <see cref="T:Godot.Object.ConnectFlags"/> constants.</para>
            <para>A <c>signal</c> can only be connected once to a <c>method</c>. It will throw an error if already connected, unless the signal was connected with . To avoid this, first, use <see cref="M:Godot.Object.IsConnected(Godot.StringName,Godot.Callable)"/> to check for existing connections.</para>
            <para>If the <c>target</c> is destroyed in the game's lifecycle, the connection will be lost.</para>
            <para>Examples:</para>
            <para><code>
            connect("pressed", self, "_on_Button_pressed") # BaseButton signal
            connect("text_entered", self, "_on_LineEdit_text_entered") # LineEdit signal
            connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # User-defined signal
            </code></para>
            <para>An example of the relationship between <c>binds</c> passed to <see cref="M:Godot.Object.Connect(Godot.StringName,Godot.Callable,Godot.Collections.Array,System.UInt32)"/> and parameters used when calling <see cref="M:Godot.Object.EmitSignal(Godot.StringName,System.Object[])"/>:</para>
            <para><code>
            connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # weapon_type and damage are passed last
            emit_signal("hit", "Dark lord", 5) # "Dark lord" and 5 are passed first
            func _on_Player_hit(hit_by, level, weapon_type, damage):
                print("Hit by %s (lvl %d) with weapon %s for %d damage" % [hit_by, level, weapon_type, damage])
            </code></para>
            </summary>
            <param name="binds">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Object.Disconnect(Godot.StringName,Godot.Callable)">
            <summary>
            <para>FIXME: The syntax changed with the addition of <see cref="T:Godot.Callable"/>, this should be updated.</para>
            <para>Disconnects a <c>signal</c> from a <c>method</c> on the given <c>target</c>.</para>
            <para>If you try to disconnect a connection that does not exist, the method will throw an error. Use <see cref="M:Godot.Object.IsConnected(Godot.StringName,Godot.Callable)"/> to ensure that the connection exists.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsConnected(Godot.StringName,Godot.Callable)">
            <summary>
            <para>FIXME: The syntax changed with the addition of <see cref="T:Godot.Callable"/>, this should be updated.</para>
            <para>Returns <c>true</c> if a connection exists for a given <c>signal</c>, <c>target</c>, and <c>method</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetBlockSignals(System.Boolean)">
            <summary>
            <para>If set to <c>true</c>, signal emission is blocked.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.IsBlockingSignals">
            <summary>
            <para>Returns <c>true</c> if signal emission blocking is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.PropertyListChangedNotify">
            <summary>
            <para>Notify the editor that the property list has changed, so that editor plugins can take the new values into account. Does nothing on export builds.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.SetMessageTranslation(System.Boolean)">
            <summary>
            <para>Defines whether the object can translate strings (with calls to <see cref="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)"/>). Enabled by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.CanTranslateMessages">
            <summary>
            <para>Returns <c>true</c> if the object can translate strings. See <see cref="M:Godot.Object.SetMessageTranslation(System.Boolean)"/> and <see cref="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Translates a message using translation catalogs configured in the Project Settings. An additional context could be used to specify the translation context.</para>
            <para>Only works if message translation is enabled (which it is by default), otherwise it returns the <c>message</c> unchanged. See <see cref="M:Godot.Object.SetMessageTranslation(System.Boolean)"/>.</para>
            <para>See <a href="https://docs.godotengine.org/en/latest/tutorials/i18n/internationalizing_games.html">Internationalizing games</a> for examples of the usage of this method.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Object.TrN(Godot.StringName,Godot.StringName,System.Int32,Godot.StringName)">
            <summary>
            <para>Translates a message involving plurals using translation catalogs configured in the Project Settings. An additional context could be used to specify the translation context.</para>
            <para>Only works if message translation is enabled (which it is by default), otherwise it returns the <c>message</c> or <c>plural_message</c> unchanged. See <see cref="M:Godot.Object.SetMessageTranslation(System.Boolean)"/>.</para>
            <para>The number <c>n</c> is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.</para>
            <para>Note: Negative and floating-point values usually represent physical entities for which singular and plural don't clearly apply. In such cases, use <see cref="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)"/>.</para>
            <para>See <a href="https://docs.godotengine.org/en/latest/tutorials/i18n/localization_using_gettext.html">Localization using gettext</a> for examples of the usage of this method.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Object.IsQueuedForDeletion">
            <summary>
            <para>Returns <c>true</c> if the <see cref="M:Godot.Node.QueueFree"/> method was called for the object.</para>
            </summary>
        </member>
        <member name="T:Godot.Object.ScriptChangedHandler">
            <summary>
            <para>Emitted whenever the object's script is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceLoader">
            <summary>
            <para>Singleton used to load resource files from the filesystem.</para>
            <para>It uses the many <see cref="T:Godot.ResourceFormatLoader"/> classes registered in the engine (either built-in or from a plugin) to load files into memory and convert them to a format that can be used by the engine.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceLoader.ThreadLoadStatus.InvalidResource">
            <summary>
            <para>The resource is invalid, or has not been loaded with <see cref="M:Godot.ResourceLoader.LoadThreadedRequest(System.String,System.String,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceLoader.ThreadLoadStatus.InProgress">
            <summary>
            <para>The resource is still being loaded.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceLoader.ThreadLoadStatus.Failed">
            <summary>
            <para>Some error occurred during loading and it failed.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceLoader.ThreadLoadStatus.Loaded">
            <summary>
            <para>The resource was loaded successfully and can be accessed via <see cref="M:Godot.ResourceLoader.LoadThreadedGet(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.LoadThreadedRequest(System.String,System.String,System.Boolean)">
            <summary>
            <para>Loads the resource using threads. If <c>use_sub_threads</c> is <c>true</c>, multiple threads will be used to load the resource, which makes loading faster, but may affect the main thread (and thus cause game slowdowns).</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.LoadThreadedGetStatus(System.String,Godot.Collections.Array)">
            <summary>
            <para>Returns the status of a threaded loading operation started with <see cref="M:Godot.ResourceLoader.LoadThreadedRequest(System.String,System.String,System.Boolean)"/> for the resource at <c>path</c>. See <see cref="T:Godot.ResourceLoader.ThreadLoadStatus"/> for possible return values.</para>
            <para>An array variable can optionally be passed via <c>progress</c>, and will return a one-element array containing the percentage of completion of the threaded loading.</para>
            </summary>
            <param name="progress">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.ResourceLoader.LoadThreadedGet(System.String)">
            <summary>
            <para>Returns the resource loaded by <see cref="M:Godot.ResourceLoader.LoadThreadedRequest(System.String,System.String,System.Boolean)"/>.</para>
            <para>If this is called before the loading thread is done (i.e. <see cref="M:Godot.ResourceLoader.LoadThreadedGetStatus(System.String,Godot.Collections.Array)"/> is not ), the calling thread will be blocked until the resource has finished loading.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Load(System.String,System.String,System.Boolean)">
            <summary>
            <para>Loads a resource at the given <c>path</c>, caching the result for further access.</para>
            <para>The registered <see cref="T:Godot.ResourceFormatLoader"/>s are queried sequentially to find the first one which can handle the file's extension, and then attempt loading. If loading fails, the remaining ResourceFormatLoaders are also attempted.</para>
            <para>An optional <c>type_hint</c> can be used to further specify the <see cref="T:Godot.Resource"/> type that should be handled by the <see cref="T:Godot.ResourceFormatLoader"/>. Anything that inherits from <see cref="T:Godot.Resource"/> can be used as a type hint, for example <see cref="T:Godot.Image"/>.</para>
            <para>If <c>no_cache</c> is <c>true</c>, the resource cache will be bypassed and the resource will be loaded anew. Otherwise, the cached resource will be returned if it exists.</para>
            <para>Returns an empty resource if no <see cref="T:Godot.ResourceFormatLoader"/> could handle the file.</para>
            <para>GDScript has a simplified <c>@GDScript.load</c> built-in method which can be used in most situations, leaving the use of <see cref="T:Godot.ResourceLoader"/> for more advanced scenarios.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetRecognizedExtensionsForType(System.String)">
            <summary>
            <para>Returns the list of recognized extensions for a resource type.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.SetAbortOnMissingResources(System.Boolean)">
            <summary>
            <para>Changes the behavior on missing sub-resources. The default behavior is to abort loading.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetDependencies(System.String)">
            <summary>
            <para>Returns the dependencies for the resource at the given <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.HasCached(System.String)">
            <summary>
            <para>Returns whether a cached resource is available for the given <c>path</c>.</para>
            <para>Once a resource has been loaded by the engine, it is cached in memory for faster access, and future calls to the <see cref="M:Godot.ResourceLoader.Load(System.String,System.String,System.Boolean)"/> method will use the cached version. The cached resource can be overridden by using <see cref="M:Godot.Resource.TakeOverPath(System.String)"/> on a new resource for that same path.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Exists(System.String,System.String)">
            <summary>
            <para>Returns whether a recognized resource exists for the given <c>path</c>.</para>
            <para>An optional <c>type_hint</c> can be used to further specify the <see cref="T:Godot.Resource"/> type that should be handled by the <see cref="T:Godot.ResourceFormatLoader"/>. Anything that inherits from <see cref="T:Godot.Resource"/> can be used as a type hint, for example <see cref="T:Godot.Image"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree">
            <summary>
            <para>As one of the most important classes, the <see cref="T:Godot.SceneTree"/> manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.</para>
            <para>You can also use the <see cref="T:Godot.SceneTree"/> to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.</para>
            <para><see cref="T:Godot.SceneTree"/> is the default <see cref="T:Godot.MainLoop"/> implementation used by scenes, and is thus in charge of the game loop.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Default">
            <summary>
            <para>Call a group with no flags (default).</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Reverse">
            <summary>
            <para>Call a group in reverse scene order.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Realtime">
            <summary>
            <para>Call a group immediately (calls are normally made on idle).</para>
            </summary>
        </member>
        <member name="F:Godot.SceneTree.GroupCallFlags.Unique">
            <summary>
            <para>Call a group only once even if the call is executed many times.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugCollisionsHint">
            <summary>
            <para>If <c>true</c>, collision shapes will be visible when running the game from the editor for debugging purposes.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugNavigationHint">
            <summary>
            <para>If <c>true</c>, navigation polygons will be visible when running the game from the editor for debugging purposes.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Paused">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.SceneTree"/> is paused. Doing so will have the following behavior:</para>
            <para>- 2D and 3D physics will be stopped.</para>
            <para>- <see cref="M:Godot.Node._Process(System.Single)"/>, <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> and <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> will not be called anymore in nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.RefuseNewNetworkConnections">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> refuses new incoming connections.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.EditedSceneRoot">
            <summary>
            <para>The root of the edited scene.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.CurrentScene">
            <summary>
            <para>The current scene.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.NetworkPeer">
            <summary>
            <para>The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the <see cref="T:Godot.SceneTree"/> will become a network server (check with <see cref="M:Godot.SceneTree.IsNetworkServer"/>) and will set the root node's network mode to master, or it will become a regular peer with the root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to <see cref="T:Godot.SceneTree"/>'s signals.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Root">
            <summary>
            <para>The <see cref="T:Godot.SceneTree"/>'s root <see cref="T:Godot.Window"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Multiplayer">
            <summary>
            <para>The default <see cref="T:Godot.MultiplayerAPI"/> instance for this <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.MultiplayerPoll">
            <summary>
            <para>If <c>true</c> (default value), enables automatic polling of the <see cref="T:Godot.MultiplayerAPI"/> for this SceneTree during <c>idle_frame</c>.</para>
            <para>If <c>false</c>, you need to manually call <see cref="M:Godot.MultiplayerAPI.Poll"/> to process network packets and deliver RPCs/RSETs. This allows running RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual <see cref="T:Godot.Mutex"/> protection when accessing the <see cref="T:Godot.MultiplayerAPI"/> from threads.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasGroup(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given group exists.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetAutoAcceptQuit(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the application automatically accepts quitting. Enabled by default.</para>
            <para>For mobile platforms, see <see cref="M:Godot.SceneTree.SetQuitOnGoBack(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetQuitOnGoBack(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the application quits automatically on going back (e.g. on Android). Enabled by default.</para>
            <para>To handle 'Go Back' button when this option is disabled, use .</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)">
            <summary>
            <para>Returns a <see cref="T:Godot.SceneTreeTimer"/> which will <c>SceneTreeTimer.timeout</c> after the given time in seconds elapsed in this <see cref="T:Godot.SceneTree"/>. If <c>pause_mode_process</c> is set to <c>false</c>, pausing the <see cref="T:Godot.SceneTree"/> will also pause the timer.</para>
            <para>Commonly used to create a one-shot delay timer as in the following example:</para>
            <para><code>
            func some_function():
                print("start")
                yield(get_tree().create_timer(1.0), "timeout")
                print("end")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodeCount">
            <summary>
            <para>Returns the number of nodes in this <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetFrame">
            <summary>
            <para>Returns the current frame number, i.e. the total frame count since the application started.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.Quit(System.Int32)">
            <summary>
            <para>Quits the application at the end of the current iteration. A process <c>exit_code</c> can optionally be passed as an argument. If this argument is <c>0</c> or greater, it will override the <see cref="P:Godot.OS.ExitCode"/> defined before quitting the application.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.QueueDelete(Godot.Object)">
            <summary>
            <para>Queues the given object for deletion, delaying the call to <see cref="M:Godot.Object.Free"/> to after the current frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroupFlags(System.Int32,Godot.StringName,Godot.StringName,System.Object[])">
            <summary>
            <para>Calls <c>method</c> on each member of the given group, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroupFlags(System.UInt32,Godot.StringName,System.Int32)">
            <summary>
            <para>Sends the given notification to all members of the <c>group</c>, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroupFlags(System.UInt32,Godot.StringName,System.String,System.Object)">
            <summary>
            <para>Sets the given <c>property</c> to <c>value</c> on all members of the given group, respecting the given <see cref="T:Godot.SceneTree.GroupCallFlags"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroup(Godot.StringName,Godot.StringName,System.Object[])">
            <summary>
            <para>Calls <c>method</c> on each member of the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroup(Godot.StringName,System.Int32)">
            <summary>
            <para>Sends the given notification to all members of the <c>group</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroup(Godot.StringName,System.String,System.Object)">
            <summary>
            <para>Sets the given <c>property</c> to <c>value</c> on all members of the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodesInGroup(Godot.StringName)">
            <summary>
            <para>Returns a list of all nodes assigned to the given group.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeScene(System.String)">
            <summary>
            <para>Changes the running scene to the one at the given <c>path</c>, after loading it into a <see cref="T:Godot.PackedScene"/> and creating a new instance.</para>
            <para>Returns  on success,  if the <c>path</c> cannot be loaded into a <see cref="T:Godot.PackedScene"/>, or  if that scene cannot be instantiated.</para>
            <para>Note: The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the <see cref="M:Godot.SceneTree.ChangeScene(System.String)"/> call.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeSceneTo(Godot.PackedScene)">
            <summary>
            <para>Changes the running scene to a new instance of the given <see cref="T:Godot.PackedScene"/>.</para>
            <para>Returns  on success or  if the scene cannot be instantiated.</para>
            <para>Note: The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the <see cref="M:Godot.SceneTree.ChangeSceneTo(Godot.PackedScene)"/> call.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ReloadCurrentScene">
            <summary>
            <para>Reloads the currently active scene.</para>
            <para>Returns  on success,  if no <see cref="P:Godot.SceneTree.CurrentScene"/> was defined yet,  if <see cref="P:Godot.SceneTree.CurrentScene"/> cannot be loaded into a <see cref="T:Godot.PackedScene"/>, or  if the scene cannot be instantiated.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.IsNetworkServer">
            <summary>
            <para>Returns <c>true</c> if this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> is in server mode (listening for connections).</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasNetworkPeer">
            <summary>
            <para>Returns <c>true</c> if there is a <see cref="P:Godot.SceneTree.NetworkPeer"/> set.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkConnectedPeers">
            <summary>
            <para>Returns the peer IDs of all connected peers of this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkUniqueId">
            <summary>
            <para>Returns the unique peer ID of this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetRpcSenderId">
            <summary>
            <para>Returns the sender's peer ID for the most recently received RPC call.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.ConnectedToServerHandler">
            <summary>
            <para>Emitted whenever this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> successfully connected to a server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NodeConfigurationWarningChangedHandler">
            <summary>
            <para>Emitted when a node's configuration changed. Only emitted in <c>tool</c> mode.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.ConnectionFailedHandler">
            <summary>
            <para>Emitted whenever this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> fails to establish a connection to a server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.PhysicsFrameHandler">
            <summary>
            <para>Emitted immediately before <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> is called on every node in the <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NetworkPeerDisconnectedHandler">
            <summary>
            <para>Emitted whenever this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> disconnects from a peer. Clients get notified when other clients disconnect from the same server.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NetworkPeerConnectedHandler">
            <summary>
            <para>Emitted whenever this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NodeRemovedHandler">
            <summary>
            <para>Emitted whenever a node is removed from the <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NodeAddedHandler">
            <summary>
            <para>Emitted whenever a node is added to the <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.FilesDroppedHandler">
            <summary>
            <para>Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.ServerDisconnectedHandler">
            <summary>
            <para>Emitted whenever this <see cref="T:Godot.SceneTree"/>'s <see cref="P:Godot.SceneTree.NetworkPeer"/> disconnected from server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.NodeRenamedHandler">
            <summary>
            <para>Emitted whenever a node is renamed.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTree.TreeChangedHandler">
            <summary>
            <para>Emitted whenever the <see cref="T:Godot.SceneTree"/> hierarchy changed (children being moved or renamed, etc.).</para>
            </summary>
        </member>
        <member name="F:Godot.GD.Spkey">
            <summary>
            <para>Keycodes with this bit applied are non-printable.</para>
            </summary>
        </member>
        <member name="M:Godot.MarshalUtils.TypeIsGenericArray(System.Type)">
            <summary>
            Returns <see langword="true"/> if the generic type definition of <paramref name="type"/>
            is <see cref="T:Godot.Collections.Array`1"/>; otherwise returns <see langword="false"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="type"/> is not a generic type. That is, IsGenericType returns false.
            </exception>
        </member>
        <member name="M:Godot.MarshalUtils.TypeIsGenericDictionary(System.Type)">
            <summary>
            Returns <see langword="true"/> if the generic type definition of <paramref name="type"/>
            is <see cref="T:Godot.Collections.Dictionary`2"/>; otherwise returns <see langword="false"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="type"/> is not a generic type. That is, IsGenericType returns false.
            </exception>
        </member>
        <member name="F:Godot.Mathf.Tau">
            <summary>
            The circle constant, the circumference of the unit circle in radians.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Pi">
            <summary>
            Constant that represents how many times the diameter of a circle
            fits around its perimeter. This is equivalent to `Mathf.Tau / 2`.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Inf">
            <summary>
            Positive infinity. For negative infinity, use `-Mathf.Inf`.
            </summary>
        </member>
        <member name="F:Godot.Mathf.NaN">
            <summary>
            "Not a Number", an invalid value. `NaN` has special properties, including
            that it is not equal to itself. It is output by some invalid operations,
            such as dividing zero by zero.
            </summary>
        </member>
        <member name="M:Godot.Mathf.Abs(System.Int32)">
            <summary>
            Returns the absolute value of `s` (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.Abs(System.Single)">
            <summary>
            Returns the absolute value of `s` (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.Acos(System.Single)">
            <summary>
            Returns the arc cosine of `s` in radians. Use to get the angle of cosine s.
            </summary>
            <param name="s">The input cosine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>An angle that would result in the given cosine value. On the range `0` to `Tau/2`.</returns>
        </member>
        <member name="M:Godot.Mathf.Asin(System.Single)">
            <summary>
            Returns the arc sine of `s` in radians. Use to get the angle of sine s.
            </summary>
            <param name="s">The input sine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>An angle that would result in the given sine value. On the range `-Tau/4` to `Tau/4`.</returns>
        </member>
        <member name="M:Godot.Mathf.Atan(System.Single)">
             <summary>
             Returns the arc tangent of `s` in radians. Use to get the angle of tangent s.
            
             The method cannot know in which quadrant the angle should fall.
             See <see cref="M:Godot.Mathf.Atan2(System.Single,System.Single)"/> if you have both `y` and `x`.
             </summary>
             <param name="s">The input tangent value.</param>
             <returns>An angle that would result in the given tangent value. On the range `-Tau/4` to `Tau/4`.</returns>
        </member>
        <member name="M:Godot.Mathf.Atan2(System.Single,System.Single)">
             <summary>
             Returns the arc tangent of `y` and `x` in radians. Use to get the angle
             of the tangent of `y/x`. To compute the value, the method takes into
             account the sign of both arguments in order to determine the quadrant.
            
             Important note: The Y coordinate comes first, by convention.
             </summary>
             <param name="y">The Y coordinate of the point to find the angle to.</param>
             <param name="x">The X coordinate of the point to find the angle to.</param>
             <returns>An angle that would result in the given tangent value. On the range `-Tau/2` to `Tau/2`.</returns>
        </member>
        <member name="M:Godot.Mathf.Cartesian2Polar(System.Single,System.Single)">
            <summary>
            Converts a 2D point expressed in the cartesian coordinate
            system (X and Y axis) to the polar coordinate system
            (a distance from the origin and an angle).
            </summary>
            <param name="x">The input X coordinate.</param>
            <param name="y">The input Y coordinate.</param>
            <returns>A <see cref="T:Godot.Vector2"/> with X representing the distance and Y representing the angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Ceil(System.Single)">
            <summary>
            Rounds `s` upward (towards positive infinity).
            </summary>
            <param name="s">The number to ceil.</param>
            <returns>The smallest whole number that is not less than `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a `value` so that it is not less than `min` and not more than `max`.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a `value` so that it is not less than `min` and not more than `max`.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Cosh(System.Single)">
            <summary>
            Returns the hyperbolic cosine of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Deg2Rad(System.Single)">
            <summary>
            Converts an angle expressed in degrees to radians.
            </summary>
            <param name="deg">An angle expressed in degrees.</param>
            <returns>The same angle expressed in radians.</returns>
        </member>
        <member name="M:Godot.Mathf.Ease(System.Single,System.Single)">
            <summary>
            Easing function, based on exponent. The curve values are:
            `0` is constant, `1` is linear, `0` to `1` is ease-in, `1` or more is ease-out.
            Negative values are in-out/out-in.
            </summary>
            <param name="s">The value to ease.</param>
            <param name="curve">`0` is constant, `1` is linear, `0` to `1` is ease-in, `1` or more is ease-out.</param>
            <returns>The eased value.</returns>
        </member>
        <member name="M:Godot.Mathf.Exp(System.Single)">
            <summary>
            The natural exponential function. It raises the mathematical
            constant `e` to the power of `s` and returns it.
            </summary>
            <param name="s">The exponent to raise `e` to.</param>
            <returns>`e` raised to the power of `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.Floor(System.Single)">
            <summary>
            Rounds `s` downward (towards negative infinity).
            </summary>
            <param name="s">The number to floor.</param>
            <returns>The largest whole number that is not more than `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Returns a normalized value considering the given range.
            This is the opposite of <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="from">The interpolated value.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the inverse interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)">
            <summary>
            Returns true if `a` and `b` are approximately equal to each other.
            The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>A bool for whether or not the two values are approximately equal.</returns>
        </member>
        <member name="M:Godot.Mathf.IsInf(System.Single)">
            <summary>
            Returns whether `s` is an infinity value (either positive infinity or negative infinity).
            </summary>
            <param name="s">The value to check.</param>
            <returns>A bool for whether or not the value is an infinity value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsNaN(System.Single)">
            <summary>
            Returns whether `s` is a `NaN` ("Not a Number" or invalid) value.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A bool for whether or not the value is a `NaN` value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsZeroApprox(System.Single)">
             <summary>
             Returns true if `s` is approximately zero.
             The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            
             This method is faster than using <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> with one value as zero.
             </summary>
             <param name="s">The value to check.</param>
             <returns>A bool for whether or not the value is nearly zero.</returns>
        </member>
        <member name="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values by a normalized value.
            This is the opposite <see cref="M:Godot.Mathf.InverseLerp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
             <summary>
             Linearly interpolates between two angles (in radians) by a normalized value.
            
             Similar to <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>,
             but interpolates correctly when the angles wrap around <see cref="F:Godot.Mathf.Tau"/>.
             </summary>
             <param name="from">The start angle for interpolation.</param>
             <param name="to">The destination angle for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting angle of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.Log(System.Single)">
             <summary>
             Natural logarithm. The amount of time needed to reach a certain level of continuous growth.
            
             Note: This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.
             </summary>
             <param name="s">The input value.</param>
             <returns>The natural log of `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.Max(System.Int32,System.Int32)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="M:Godot.Mathf.Max(System.Single,System.Single)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="M:Godot.Mathf.Min(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="M:Godot.Mathf.Min(System.Single,System.Single)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="M:Godot.Mathf.MoveToward(System.Single,System.Single,System.Single)">
             <summary>
             Moves `from` toward `to` by the `delta` value.
            
             Use a negative delta value to move away.
             </summary>
             <param name="from">The start value.</param>
             <param name="to">The value to move towards.</param>
             <param name="delta">The amount to move by.</param>
             <returns>The value after moving.</returns>
        </member>
        <member name="M:Godot.Mathf.NearestPo2(System.Int32)">
            <summary>
            Returns the nearest larger power of 2 for the integer `value`.
            </summary>
            <param name="value">The input value.</param>
            <returns>The nearest larger power of 2.</returns>
        </member>
        <member name="M:Godot.Mathf.Polar2Cartesian(System.Single,System.Single)">
            <summary>
            Converts a 2D point expressed in the polar coordinate
            system (a distance from the origin `r` and an angle `th`)
            to the cartesian coordinate system (X and Y axis).
            </summary>
            <param name="r">The distance from the origin.</param>
            <param name="th">The angle of the point.</param>
            <returns>A <see cref="T:Godot.Vector2"/> representing the cartesian coordinate.</returns>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Int32,System.Int32)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range `[0, b)`.
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range `[0, b)`.</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Single,System.Single)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range `[0, b)`.
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range `[0, b)`.</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Godot.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns the result of `x` raised to the power of `y`.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns>`x` raised to the power of `y`.</returns>
        </member>
        <member name="M:Godot.Mathf.Rad2Deg(System.Single)">
            <summary>
            Converts an angle expressed in radians to degrees.
            </summary>
            <param name="rad">An angle expressed in radians.</param>
            <returns>The same angle expressed in degrees.</returns>
        </member>
        <member name="M:Godot.Mathf.Round(System.Single)">
            <summary>
            Rounds `s` to the nearest whole number,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <param name="s">The number to round.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Godot.Mathf.Sign(System.Int32)">
            <summary>
            Returns the sign of `s`: `-1` or `1`. Returns `0` if `s` is `0`.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: `1`, `-1`, or `0`.</returns>
        </member>
        <member name="M:Godot.Mathf.Sign(System.Single)">
            <summary>
            Returns the sign of `s`: `-1` or `1`. Returns `0` if `s` is `0`.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: `1`, `-1`, or `0`.</returns>
        </member>
        <member name="M:Godot.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Sinh(System.Single)">
            <summary>
            Returns the hyperbolic sine of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Returns a number smoothly interpolated between `from` and `to`,
            based on the `weight`. Similar to <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>,
            but interpolates faster at the beginning and slower at the end.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.Sqrt(System.Single)">
             <summary>
             Returns the square root of `s`, where `s` is a non-negative number.
            
             If you need negative inputs, use `System.Numerics.Complex`.
             </summary>
             <param name="s">The input number. Must not be negative.</param>
             <returns>The square root of `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.StepDecimals(System.Single)">
            <summary>
            Returns the position of the first non-zero digit, after the
            decimal point. Note that the maximum return value is 10,
            which is a design decision in the implementation.
            </summary>
            <param name="step">The input value.</param>
            <returns>The position of the first non-zero digit.</returns>
        </member>
        <member name="M:Godot.Mathf.Snapped(System.Single,System.Single)">
            <summary>
            Snaps float value `s` to a given `step`.
            This can also be used to round a floating point
            number to an arbitrary number of decimals.
            </summary>
            <param name="s">The value to snap.</param>
            <param name="step">The step size to snap to.</param>
            <returns></returns>
        </member>
        <member name="M:Godot.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Tanh(System.Single)">
            <summary>
            Returns the hyperbolic tangent of angle `s` in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps `value` between `min` and `max`. Usable for creating loop-alike
            behavior or infinite surfaces. If `min` is `0`, this is equivalent
            to <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps `value` between `min` and `max`. Usable for creating loop-alike
            behavior or infinite surfaces. If `min` is `0`, this is equivalent
            to <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="F:Godot.Mathf.E">
            <summary>
            The natural number `e`.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Sqrt2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Epsilon">
            <summary>
            A very small number used for float comparison with error tolerance.
            1e-06 with single-precision floats, but 1e-14 if `REAL_T_IS_DOUBLE`.
            </summary>
        </member>
        <member name="M:Godot.Mathf.DecimalCount(System.Single)">
            <summary>
            Returns the amount of digits after the decimal place.
            </summary>
            <param name="s">The input value.</param>
            <returns>The amount of digits.</returns>
        </member>
        <member name="M:Godot.Mathf.DecimalCount(System.Decimal)">
            <summary>
            Returns the amount of digits after the decimal place.
            </summary>
            <param name="s">The input <see cref="T:System.Decimal"/> value.</param>
            <returns>The amount of digits.</returns>
        </member>
        <member name="M:Godot.Mathf.CeilToInt(System.Single)">
             <summary>
             Rounds `s` upward (towards positive infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Ceil(System.Single)"/>, but returns an `int`.
             </summary>
             <param name="s">The number to ceil.</param>
             <returns>The smallest whole number that is not less than `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.FloorToInt(System.Single)">
             <summary>
             Rounds `s` downward (towards negative infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Floor(System.Single)"/>, but returns an `int`.
             </summary>
             <param name="s">The number to floor.</param>
             <returns>The largest whole number that is not more than `s`.</returns>
        </member>
        <member name="M:Godot.Mathf.RoundToInt(System.Single)">
             <summary>
            
             </summary>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if `a` and `b` are approximately equal to each other.
            The comparison is done using the provided tolerance value.
            If you want the tolerance to be calculated for you, use <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <param name="tolerance">The pre-calculated tolerance value.</param>
            <returns>A bool for whether or not the two values are equal.</returns>
        </member>
        <member name="T:Godot.Plane">
            <summary>
            Plane represents a normalized plane equation.
            "Over" or "Above" the plane is considered the side of
            the plane towards where the normal is pointing.
            </summary>
        </member>
        <member name="P:Godot.Plane.Normal">
            <summary>
            The normal of the plane, which must be normalized.
            In the scalar equation of the plane `ax + by + cz = d`, this is
            the vector `(a, b, c)`, where `d` is the <see cref="P:Godot.Plane.D"/> property.
            </summary>
            <value>Equivalent to `x`, `y`, and `z`.</value>
        </member>
        <member name="P:Godot.Plane.x">
            <summary>
            The X component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s X value.</value>
        </member>
        <member name="P:Godot.Plane.y">
            <summary>
            The Y component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s Y value.</value>
        </member>
        <member name="P:Godot.Plane.z">
            <summary>
            The Z component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s Z value.</value>
        </member>
        <member name="P:Godot.Plane.D">
            <summary>
            The distance from the origin to the plane (in the direction of
            <see cref="P:Godot.Plane.Normal"/>). This value is typically non-negative.
            In the scalar equation of the plane `ax + by + cz = d`,
            this is `d`, while the `(a, b, c)` coordinates are represented
            by the <see cref="P:Godot.Plane.Normal"/> property.
            </summary>
            <value>The plane's distance from the origin.</value>
        </member>
        <member name="P:Godot.Plane.Center">
            <summary>
            The center of the plane, the point where the normal line intersects the plane.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/> multiplied by `D`.</value>
        </member>
        <member name="M:Godot.Plane.DistanceTo(Godot.Vector3)">
            <summary>
            Returns the shortest distance from this plane to the position `point`.
            </summary>
            <param name="point">The position to use for the calculation.</param>
            <returns>The shortest distance.</returns>
        </member>
        <member name="M:Godot.Plane.HasPoint(Godot.Vector3,System.Single)">
            <summary>
            Returns true if point is inside the plane.
            Comparison uses a custom minimum epsilon threshold.
            </summary>
            <param name="point">The point to check.</param>
            <param name="epsilon">The tolerance threshold.</param>
            <returns>A bool for whether or not the plane has the point.</returns>
        </member>
        <member name="M:Godot.Plane.Intersect3(Godot.Plane,Godot.Plane)">
            <summary>
            Returns the intersection point of the three planes: `b`, `c`,
            and this plane. If no intersection is found, `null` is returned.
            </summary>
            <param name="b">One of the three planes to use in the calculation.</param>
            <param name="c">One of the three planes to use in the calculation.</param>
            <returns>The intersection, or `null` if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IntersectRay(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the intersection point of a ray consisting of the
            position `from` and the direction normal `dir` with this plane.
            If no intersection is found, `null` is returned.
            </summary>
            <param name="from">The start of the ray.</param>
            <param name="dir">The direction of the ray, normalized.</param>
            <returns>The intersection, or `null` if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IntersectSegment(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the intersection point of a line segment from
            position `begin` to position `end` with this plane.
            If no intersection is found, `null` is returned.
            </summary>
            <param name="begin">The start of the line segment.</param>
            <param name="end">The end of the line segment.</param>
            <returns>The intersection, or `null` if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IsPointOver(Godot.Vector3)">
            <summary>
            Returns true if `point` is located above the plane.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A bool for whether or not the point is above the plane.</returns>
        </member>
        <member name="M:Godot.Plane.Normalized">
            <summary>
            Returns the plane scaled to unit length.
            </summary>
            <returns>A normalized version of the plane.</returns>
        </member>
        <member name="M:Godot.Plane.Project(Godot.Vector3)">
            <summary>
            Returns the orthogonal projection of `point` into the plane.
            </summary>
            <param name="point">The point to project.</param>
            <returns>The projected point.</returns>
        </member>
        <member name="P:Godot.Plane.PlaneYZ">
            <summary>
            A plane that extends in the Y and Z axes (normal vector points +X).
            </summary>
            <value>Equivalent to `new Plane(1, 0, 0, 0)`.</value>
        </member>
        <member name="P:Godot.Plane.PlaneXZ">
            <summary>
            A plane that extends in the X and Z axes (normal vector points +Y).
            </summary>
            <value>Equivalent to `new Plane(0, 1, 0, 0)`.</value>
        </member>
        <member name="P:Godot.Plane.PlaneXY">
            <summary>
            A plane that extends in the X and Y axes (normal vector points +Z).
            </summary>
            <value>Equivalent to `new Plane(0, 0, 1, 0)`.</value>
        </member>
        <member name="M:Godot.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a plane from four values. `a`, `b` and `c` become the
            components of the resulting plane's <see cref="P:Godot.Plane.Normal"/> vector.
            `d` becomes the plane's distance from the origin.
            </summary>
            <param name="a">The X component of the plane's normal vector.</param>
            <param name="b">The Y component of the plane's normal vector.</param>
            <param name="c">The Z component of the plane's normal vector.</param>
            <param name="d">The plane's distance from the origin. This value is typically non-negative.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a plane from a normal vector and the plane's distance to the origin.
            </summary>
            <param name="normal">The normal of the plane, must be normalized.</param>
            <param name="d">The plane's distance from the origin. This value is typically non-negative.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a plane from the three points, given in clockwise order.
            </summary>
            <param name="v1">The first point.</param>
            <param name="v2">The second point.</param>
            <param name="v3">The third point.</param>
        </member>
        <member name="M:Godot.Plane.IsEqualApprox(Godot.Plane)">
            <summary>
            Returns true if this plane and `other` are approximately equal, by running
            <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other plane to compare.</param>
            <returns>Whether or not the planes are approximately equal.</returns>
        </member>
        <member name="T:Godot.Quat">
             <summary>
             A unit quaternion used for representing 3D rotations.
             Quaternions need to be normalized to be used for rotation.
            
             It is similar to Basis, which implements matrix representation of
             rotations, and can be parametrized using both an axis-angle pair
             or Euler angles. Basis stores rotation, scale, and shearing,
             while Quat only stores rotation.
            
             Due to its compactness and the way it is stored in memory, certain
             operations (obtaining axis-angle and performing SLERP, in particular)
             are more efficient and robust against floating-point errors.
             </summary>
        </member>
        <member name="F:Godot.Quat.x">
            <summary>
            X component of the quaternion (imaginary `i` axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quat.y">
            <summary>
            Y component of the quaternion (imaginary `j` axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quat.z">
            <summary>
            Z component of the quaternion (imaginary `k` axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quat.w">
            <summary>
            W component of the quaternion (real part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="P:Godot.Quat.Item(System.Int32)">
            <summary>
            Access quaternion components using their index.
            </summary>
            <value>`[0]` is equivalent to `.x`, `[1]` is equivalent to `.y`, `[2]` is equivalent to `.z`, `[3]` is equivalent to `.w`.</value>
        </member>
        <member name="P:Godot.Quat.Length">
            <summary>
            Returns the length (magnitude) of the quaternion.
            </summary>
            <value>Equivalent to `Mathf.Sqrt(LengthSquared)`.</value>
        </member>
        <member name="P:Godot.Quat.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of the quaternion.
            This method runs faster than <see cref="P:Godot.Quat.Length"/>, so prefer it if
            you need to compare quaternions or need the squared length for some formula.
            </summary>
            <value>Equivalent to `Dot(this)`.</value>
        </member>
        <member name="M:Godot.Quat.CubicSlerp(Godot.Quat,Godot.Quat,Godot.Quat,System.Single)">
            <summary>
            Performs a cubic spherical interpolation between quaternions `preA`,
            this vector, `b`, and `postB`, by the given amount `t`.
            </summary>
            <param name="b">The destination quaternion.</param>
            <param name="preA">A quaternion before this quaternion.</param>
            <param name="postB">A quaternion after `b`.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:Godot.Quat.Dot(Godot.Quat)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="b">The other quaternion.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Godot.Quat.GetEuler">
            <summary>
            Returns Euler angles (in the YXZ convention: when decomposing,
            first Z, then X, and Y last) corresponding to the rotation
            represented by the unit quaternion. Returned vector contains
            the rotation angles in the format (X angle, Y angle, Z angle).
            </summary>
            <returns>The Euler angle representation of this quaternion.</returns>
        </member>
        <member name="M:Godot.Quat.Inverse">
            <summary>
            Returns the inverse of the quaternion.
            </summary>
            <returns>The inverse quaternion.</returns>
        </member>
        <member name="M:Godot.Quat.IsNormalized">
            <summary>
            Returns whether the quaternion is normalized or not.
            </summary>
            <returns>A bool for whether the quaternion is normalized or not.</returns>
        </member>
        <member name="M:Godot.Quat.Normalized">
            <summary>
            Returns a copy of the quaternion, normalized to unit length.
            </summary>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:Godot.Quat.Slerp(Godot.Quat,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this quaternion and `to` by amount `weight`.
            
             Note: Both quaternions must be normalized.
             </summary>
             <param name="to">The destination quaternion for interpolation. Must be normalized.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting quaternion of the interpolation.</returns>
        </member>
        <member name="M:Godot.Quat.Slerpni(Godot.Quat,System.Single)">
            <summary>
            Returns the result of the spherical linear interpolation between
            this quaternion and `to` by amount `weight`, but without
            checking if the rotation path is not bigger than 90 degrees.
            </summary>
            <param name="to">The destination quaternion for interpolation. Must be normalized.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting quaternion of the interpolation.</returns>
        </member>
        <member name="M:Godot.Quat.Xform(Godot.Vector3)">
            <summary>
            Returns a vector transformed (multiplied) by this quaternion.
            </summary>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="P:Godot.Quat.Identity">
            <summary>
            The identity quaternion, representing no rotation.
            Equivalent to an identity <see cref="T:Godot.Basis"/> matrix. If a vector is transformed by
            an identity quaternion, it will not change.
            </summary>
            <value>Equivalent to `new Quat(0, 0, 0, 1)`.</value>
        </member>
        <member name="M:Godot.Quat.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion defined by the given values.
            </summary>
            <param name="x">X component of the quaternion (imaginary `i` axis part).</param>
            <param name="y">Y component of the quaternion (imaginary `j` axis part).</param>
            <param name="z">Z component of the quaternion (imaginary `k` axis part).</param>
            <param name="w">W component of the quaternion (real part).</param>
        </member>
        <member name="M:Godot.Quat.#ctor(Godot.Quat)">
            <summary>
            Constructs a quaternion from the given quaternion.
            </summary>
            <param name="q">The existing quaternion.</param>
        </member>
        <member name="M:Godot.Quat.#ctor(Godot.Basis)">
            <summary>
            Constructs a quaternion from the given <see cref="T:Godot.Basis"/>.
            </summary>
            <param name="basis">The basis to construct from.</param>
        </member>
        <member name="M:Godot.Quat.#ctor(Godot.Vector3)">
            <summary>
            Constructs a quaternion that will perform a rotation specified by
            Euler angles (in the YXZ convention: when decomposing,
            first Z, then X, and Y last),
            given in the vector format as (X angle, Y angle, Z angle).
            </summary>
            <param name="eulerYXZ"></param>
        </member>
        <member name="M:Godot.Quat.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a quaternion that will rotate around the given axis
            by the specified angle. The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
        </member>
        <member name="M:Godot.Quat.IsEqualApprox(Godot.Quat)">
            <summary>
            Returns true if this quaternion and `other` are approximately equal, by running
            <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other quaternion to compare.</param>
            <returns>Whether or not the quaternions are approximately equal.</returns>
        </member>
        <member name="T:Godot.Rect2">
            <summary>
            2D axis-aligned bounding box. Rect2 consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.Rect2.Position">
            <summary>
            Beginning corner. Typically has values lower than End.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2.Size">
            <summary>
            Size from Position to End. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.Rect2.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.Rect2.Position"/> plus
            <see cref="P:Godot.Rect2.Size"/>. Setting this value will change the size.
            </summary>
            <value>Getting is equivalent to `value = Position + Size`, setting is equivalent to `Size = value - Position`.</value>
        </member>
        <member name="P:Godot.Rect2.Area">
            <summary>
            The area of this Rect2.
            </summary>
            <value>Equivalent to <see cref="M:Godot.Rect2.GetArea"/>.</value>
        </member>
        <member name="M:Godot.Rect2.Abs">
            <summary>
            Returns a Rect2 with equivalent position and size, modified so that
            the top-left corner is the origin and width and height are positive.
            </summary>
            <returns>The modified Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.Intersection(Godot.Rect2)">
            <summary>
            Returns the intersection of this Rect2 and `b`.
            If the rectangles do not intersect, an empty Rect2 is returned.
            </summary>
            <param name="b">The other Rect2.</param>
            <returns>The intersection of this Rect2 and `b`, or an empty Rect2 if they do not intersect.</returns>
        </member>
        <member name="M:Godot.Rect2.Encloses(Godot.Rect2)">
            <summary>
            Returns true if this Rect2 completely encloses another one.
            </summary>
            <param name="b">The other Rect2 that may be enclosed.</param>
            <returns>A bool for whether or not this Rect2 encloses `b`.</returns>
        </member>
        <member name="M:Godot.Rect2.Expand(Godot.Vector2)">
            <summary>
            Returns this Rect2 expanded to include a given point.
            </summary>
            <param name="to">The point to include.</param>
            <returns>The expanded Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.GetArea">
            <summary>
            Returns the area of the Rect2.
            </summary>
            <returns>The area.</returns>
        </member>
        <member name="M:Godot.Rect2.Grow(System.Single)">
            <summary>
            Returns a copy of the Rect2 grown by the specified amount on all sides.
            </summary>
            <param name="by">The amount to grow by.</param>
            <returns>The grown Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.GrowIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a copy of the Rect2 grown by the specified amount on each side individually.
            </summary>
            <param name="left">The amount to grow by on the left side.</param>
            <param name="top">The amount to grow by on the top side.</param>
            <param name="right">The amount to grow by on the right side.</param>
            <param name="bottom">The amount to grow by on the bottom side.</param>
            <returns>The grown Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.GrowSide(Godot.Side,System.Single)">
            <summary>
            Returns a copy of the Rect2 grown by the specified amount on the specified Side.
            </summary>
            <param name="side">The side to grow.</param>
            <param name="by">The amount to grow by.</param>
            <returns>The grown Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.HasNoArea">
            <summary>
            Returns true if the Rect2 is flat or empty, or false otherwise.
            </summary>
            <returns>A bool for whether or not the Rect2 has area.</returns>
        </member>
        <member name="M:Godot.Rect2.HasPoint(Godot.Vector2)">
            <summary>
            Returns true if the Rect2 contains a point, or false otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A bool for whether or not the Rect2 contains `point`.</returns>
        </member>
        <member name="M:Godot.Rect2.Intersects(Godot.Rect2,System.Boolean)">
             <summary>
             Returns true if the Rect2 overlaps with `b`
             (i.e. they have at least one point in common).
            
             If `includeBorders` is true, they will also be considered overlapping
             if their borders touch, even without intersection.
             </summary>
             <param name="b">The other Rect2 to check for intersections with.</param>
             <param name="includeBorders">Whether or not to consider borders.</param>
             <returns>A bool for whether or not they are intersecting.</returns>
        </member>
        <member name="M:Godot.Rect2.Merge(Godot.Rect2)">
            <summary>
            Returns a larger Rect2 that contains this Rect2 and `b`.
            </summary>
            <param name="b">The other Rect2.</param>
            <returns>The merged Rect2.</returns>
        </member>
        <member name="M:Godot.Rect2.#ctor(Godot.Vector2,Godot.Vector2)">
            <summary>
            Constructs a Rect2 from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(Godot.Vector2,System.Single,System.Single)">
            <summary>
            Constructs a Rect2 from a position, width, and height.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(System.Single,System.Single,Godot.Vector2)">
            <summary>
            Constructs a Rect2 from x, y, and size.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Rect2 from x, y, width, and height.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2.IsEqualApprox(Godot.Rect2)">
            <summary>
            Returns true if this Rect2 and `other` are approximately equal, by running
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> on each component.
            </summary>
            <param name="other">The other Rect2 to compare.</param>
            <returns>Whether or not the Rect2s are approximately equal.</returns>
        </member>
        <member name="T:Godot.Rect2i">
            <summary>
            2D axis-aligned bounding box using integers. Rect2i consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.Rect2i.Position">
            <summary>
            Beginning corner. Typically has values lower than End.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2i.Size">
            <summary>
            Size from Position to End. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.Rect2i.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2i.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.Rect2i.Position"/> plus
            <see cref="P:Godot.Rect2i.Size"/>. Setting this value will change the size.
            </summary>
            <value>Getting is equivalent to `value = Position + Size`, setting is equivalent to `Size = value - Position`.</value>
        </member>
        <member name="P:Godot.Rect2i.Area">
            <summary>
            The area of this Rect2i.
            </summary>
            <value>Equivalent to <see cref="M:Godot.Rect2i.GetArea"/>.</value>
        </member>
        <member name="M:Godot.Rect2i.Abs">
            <summary>
            Returns a Rect2i with equivalent position and size, modified so that
            the top-left corner is the origin and width and height are positive.
            </summary>
            <returns>The modified Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.Intersection(Godot.Rect2i)">
            <summary>
            Returns the intersection of this Rect2i and `b`.
            If the rectangles do not intersect, an empty Rect2i is returned.
            </summary>
            <param name="b">The other Rect2i.</param>
            <returns>The intersection of this Rect2i and `b`, or an empty Rect2i if they do not intersect.</returns>
        </member>
        <member name="M:Godot.Rect2i.Encloses(Godot.Rect2i)">
            <summary>
            Returns true if this Rect2i completely encloses another one.
            </summary>
            <param name="b">The other Rect2i that may be enclosed.</param>
            <returns>A bool for whether or not this Rect2i encloses `b`.</returns>
        </member>
        <member name="M:Godot.Rect2i.Expand(Godot.Vector2i)">
            <summary>
            Returns this Rect2i expanded to include a given point.
            </summary>
            <param name="to">The point to include.</param>
            <returns>The expanded Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.GetArea">
            <summary>
            Returns the area of the Rect2.
            </summary>
            <returns>The area.</returns>
        </member>
        <member name="M:Godot.Rect2i.Grow(System.Int32)">
            <summary>
            Returns a copy of the Rect2i grown by the specified amount on all sides.
            </summary>
            <param name="by">The amount to grow by.</param>
            <returns>The grown Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.GrowIndividual(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a copy of the Rect2i grown by the specified amount on each side individually.
            </summary>
            <param name="left">The amount to grow by on the left side.</param>
            <param name="top">The amount to grow by on the top side.</param>
            <param name="right">The amount to grow by on the right side.</param>
            <param name="bottom">The amount to grow by on the bottom side.</param>
            <returns>The grown Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.GrowSide(Godot.Side,System.Int32)">
            <summary>
            Returns a copy of the Rect2i grown by the specified amount on the specified Side.
            </summary>
            <param name="side">The side to grow.</param>
            <param name="by">The amount to grow by.</param>
            <returns>The grown Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.HasNoArea">
            <summary>
            Returns true if the Rect2i is flat or empty, or false otherwise.
            </summary>
            <returns>A bool for whether or not the Rect2i has area.</returns>
        </member>
        <member name="M:Godot.Rect2i.HasPoint(Godot.Vector2i)">
            <summary>
            Returns true if the Rect2i contains a point, or false otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A bool for whether or not the Rect2i contains `point`.</returns>
        </member>
        <member name="M:Godot.Rect2i.Intersects(Godot.Rect2i,System.Boolean)">
             <summary>
             Returns true if the Rect2i overlaps with `b`
             (i.e. they have at least one point in common).
            
             If `includeBorders` is true, they will also be considered overlapping
             if their borders touch, even without intersection.
             </summary>
             <param name="b">The other Rect2i to check for intersections with.</param>
             <param name="includeBorders">Whether or not to consider borders.</param>
             <returns>A bool for whether or not they are intersecting.</returns>
        </member>
        <member name="M:Godot.Rect2i.Merge(Godot.Rect2i)">
            <summary>
            Returns a larger Rect2i that contains this Rect2i and `b`.
            </summary>
            <param name="b">The other Rect2i.</param>
            <returns>The merged Rect2i.</returns>
        </member>
        <member name="M:Godot.Rect2i.#ctor(Godot.Vector2i,Godot.Vector2i)">
            <summary>
            Constructs a Rect2i from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2i.#ctor(Godot.Vector2i,System.Int32,System.Int32)">
            <summary>
            Constructs a Rect2i from a position, width, and height.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2i.#ctor(System.Int32,System.Int32,Godot.Vector2i)">
            <summary>
            Constructs a Rect2i from x, y, and size.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Rect2i from x, y, width, and height.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.StringExtensions.Find(System.String,System.String,System.Int32,System.Boolean)">
            <summary>Find the first occurrence of a substring. Optionally, the search starting position can be passed.</summary>
            <returns>The starting position of the substring, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.StringExtensions.Find(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>Find the first occurrence of a char. Optionally, the search starting position can be passed.</summary>
            <returns>The first instance of the char, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.StringExtensions.FindLast(System.String,System.String,System.Boolean)">
            <summary>Find the last occurrence of a substring.</summary>
            <returns>The starting position of the substring, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.StringExtensions.FindLast(System.String,System.String,System.Int32,System.Boolean)">
            <summary>Find the last occurrence of a substring specifying the search starting position.</summary>
            <returns>The starting position of the substring, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.StringExtensions.FindN(System.String,System.String,System.Int32)">
            <summary>Find the first occurrence of a substring but search as case-insensitive. Optionally, the search starting position can be passed.</summary>
            <returns>The starting position of the substring, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.StringExtensions.GetStringFromASCII(System.Byte[])">
            <summary>
            Converts the given byte array of ASCII encoded text to a string.
            Faster alternative to <see cref="M:Godot.StringExtensions.GetStringFromUTF8(System.Byte[])"/> if the
            content is ASCII-only. Unlike the UTF-8 function this function
            maps every byte to a character in the array. Multibyte sequences
            will not be interpreted correctly. For parsing user input always
            use <see cref="M:Godot.StringExtensions.GetStringFromUTF8(System.Byte[])"/>.
            </summary>
            <param name="bytes">A byte array of ASCII characters (on the range of 0-127).</param>
            <returns>A string created from the bytes.</returns>
        </member>
        <member name="M:Godot.StringExtensions.GetStringFromUTF8(System.Byte[])">
            <summary>
            Converts the given byte array of UTF-8 encoded text to a string.
            Slower than <see cref="M:Godot.StringExtensions.GetStringFromASCII(System.Byte[])"/> but supports UTF-8
            encoded data. Use this function if you are unsure about the
            source of the data. For user input this function
            should always be preferred.
            </summary>
            <param name="bytes">A byte array of UTF-8 characters (a character may take up multiple bytes).</param>
            <returns>A string created from the bytes.</returns>
        </member>
        <member name="M:Godot.StringExtensions.HexEncode(System.Byte)">
            <summary>
            Returns a hexadecimal representation of this byte as a string.
            </summary>
            <param name="bytes">The byte to encode.</param>
            <returns>The hexadecimal representation of this byte.</returns>
        </member>
        <member name="M:Godot.StringExtensions.HexEncode(System.Byte[])">
            <summary>
            Returns a hexadecimal representation of this byte array as a string.
            </summary>
            <param name="bytes">The byte array to encode.</param>
            <returns>The hexadecimal representation of this byte array.</returns>
        </member>
        <member name="M:Godot.StringExtensions.Length(System.String)">
            <summary>
            Return the length of the string in characters.
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.LStrip(System.String,System.String)">
            <summary>
            Returns a copy of the string with characters removed from the left.
            </summary>
            <param name="instance">The string to remove characters from.</param>
            <param name="chars">The characters to be removed.</param>
            <returns>A copy of the string with characters removed from the left.</returns>
        </member>
        <member name="M:Godot.StringExtensions.ExprMatch(System.String,System.String,System.Boolean)">
            <summary>
            Do a simple expression match, where '*' matches zero or more arbitrary characters and '?' matches any single character except '.'.
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.Match(System.String,System.String,System.Boolean)">
            <summary>
            Do a simple case sensitive expression match, using ? and * wildcards (see [method expr_match]).
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.MatchN(System.String,System.String)">
            <summary>
            Do a simple case insensitive expression match, using ? and * wildcards (see [method expr_match]).
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.RStrip(System.String,System.String)">
            <summary>
            Returns a copy of the string with characters removed from the right.
            </summary>
            <param name="instance">The string to remove characters from.</param>
            <param name="chars">The characters to be removed.</param>
            <returns>A copy of the string with characters removed from the right.</returns>
        </member>
        <member name="T:Godot.Transform">
             <summary>
             3×4 matrix (3 rows, 4 columns) used for 3D linear transformations.
             It can represent transformations such as translation, rotation, or scaling.
             It consists of a <see cref="T:Godot.Basis"/> (first 3 columns) and a
             <see cref="T:Godot.Vector3"/> for the origin (last column).
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="F:Godot.Transform.basis">
            <summary>
            The <see cref="T:Godot.Basis"/> of this transform. Contains the X, Y, and Z basis
            vectors (columns 0 to 2) and is responsible for rotation and scale.
            </summary>
        </member>
        <member name="F:Godot.Transform.origin">
            <summary>
            The origin vector (column 3, the fourth column). Equivalent to array index `[3]`.
            </summary>
        </member>
        <member name="P:Godot.Transform.Item(System.Int32)">
            <summary>
            Access whole columns in the form of Vector3. The fourth column is the origin vector.
            </summary>
            <param name="column">Which column vector.</param>
        </member>
        <member name="P:Godot.Transform.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order. The fourth column is the origin vector.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
        </member>
        <member name="M:Godot.Transform.AffineInverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation is composed of rotation, scaling, and translation.
            </summary>
            <returns>The inverse transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform.InterpolateWith(Godot.Transform,System.Single)">
            <summary>
            Interpolates this transform to the other `transform` by `weight`.
            </summary>
            <param name="transform">The other transform.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated transform.</returns>
        </member>
        <member name="M:Godot.Transform.Inverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation is composed of rotation and translation
            (no scaling, use <see cref="M:Godot.Transform.AffineInverse"/> for transforms with scaling).
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Transform.LookingAt(Godot.Vector3,Godot.Vector3)">
             <summary>
             Returns a copy of the transform rotated such that its
             -Z axis (forward) points towards the target position.
            
             The transform will first be rotated around the given up vector,
             and then fully aligned to the target by a further rotation around
             an axis perpendicular to both the target and up vectors.
            
             Operations take place in global space.
             </summary>
             <param name="target">The object to look at.</param>
             <param name="up">The relative up direction</param>
             <returns>The resulting transform.</returns>
        </member>
        <member name="M:Godot.Transform.Orthonormalized">
            <summary>
            Returns the transform with the basis orthogonal (90 degrees),
            and normalized axis vectors (scale of 1 or -1).
            </summary>
            <returns>The orthonormalized transform.</returns>
        </member>
        <member name="M:Godot.Transform.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Rotates the transform around the given `axis` by `phi` (in radians),
            using matrix multiplication. The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="phi">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform.Scaled(Godot.Vector3)">
            <summary>
            Scales the transform by the given 3D scaling factor, using matrix multiplication.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform.Translated(Godot.Vector3)">
             <summary>
             Translates the transform by the given `offset`,
             relative to the transform's basis vectors.
            
             Unlike <see cref="M:Godot.Transform.Rotated(Godot.Vector3,System.Single)"/> and <see cref="M:Godot.Transform.Scaled(Godot.Vector3)"/>,
             this does not use matrix multiplication.
             </summary>
             <param name="offset">The offset to translate by.</param>
             <returns>The translated matrix.</returns>
        </member>
        <member name="M:Godot.Transform.Xform(Godot.Vector3)">
            <summary>
            Returns a vector transformed (multiplied) by this transformation matrix.
            </summary>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform.XformInv(Godot.Vector3)">
             <summary>
             Returns a vector transformed (multiplied) by the transposed transformation matrix.
            
             Note: This results in a multiplication by the inverse of the
             transformation matrix only if it represents a rotation-reflection.
             </summary>
             <param name="v">A vector to inversely transform.</param>
             <returns>The inversely transformed vector.</returns>
        </member>
        <member name="P:Godot.Transform.Identity">
            <summary>
            The identity transform, with no translation, rotation, or scaling applied.
            This is used as a replacement for `Transform()` in GDScript.
            Do not use `new Transform()` with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to `new Transform(Vector3.Right, Vector3.Up, Vector3.Back, Vector3.Zero)`.</value>
        </member>
        <member name="P:Godot.Transform.FlipX">
            <summary>
            The transform that will flip something along the X axis.
            </summary>
            <value>Equivalent to `new Transform(Vector3.Left, Vector3.Up, Vector3.Back, Vector3.Zero)`.</value>
        </member>
        <member name="P:Godot.Transform.FlipY">
            <summary>
            The transform that will flip something along the Y axis.
            </summary>
            <value>Equivalent to `new Transform(Vector3.Right, Vector3.Down, Vector3.Back, Vector3.Zero)`.</value>
        </member>
        <member name="P:Godot.Transform.FlipZ">
            <summary>
            The transform that will flip something along the Z axis.
            </summary>
            <value>Equivalent to `new Transform(Vector3.Right, Vector3.Up, Vector3.Forward, Vector3.Zero)`.</value>
        </member>
        <member name="M:Godot.Transform.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a transformation matrix from 4 vectors (matrix columns).
            </summary>
            <param name="column0">The X vector, or column index 0.</param>
            <param name="column1">The Y vector, or column index 1.</param>
            <param name="column2">The Z vector, or column index 2.</param>
            <param name="origin">The origin vector, or column index 3.</param>
        </member>
        <member name="M:Godot.Transform.#ctor(Godot.Quat,Godot.Vector3)">
            <summary>
            Constructs a transformation matrix from the given quaternion and origin vector.
            </summary>
            <param name="quat">The <see cref="T:Godot.Quat"/> to create the basis from.</param>
            <param name="origin">The origin vector, or column index 3.</param>
        </member>
        <member name="M:Godot.Transform.#ctor(Godot.Basis,Godot.Vector3)">
            <summary>
            Constructs a transformation matrix from the given basis and origin vector.
            </summary>
            <param name="basis">The <see cref="T:Godot.Basis"/> to create the basis from.</param>
            <param name="origin">The origin vector, or column index 3.</param>
        </member>
        <member name="M:Godot.Transform.IsEqualApprox(Godot.Transform)">
            <summary>
            Returns true if this transform and `other` are approximately equal, by running
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are approximately equal.</returns>
        </member>
        <member name="T:Godot.Transform2D">
             <summary>
             2×3 matrix (2 rows, 3 columns) used for 2D linear transformations.
             It can represent transformations such as translation, rotation, or scaling.
             It consists of a three <see cref="T:Godot.Vector2"/> values: x, y, and the origin.
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="F:Godot.Transform2D.x">
            <summary>
            The basis matrix's X vector (column 0). Equivalent to array index `[0]`.
            </summary>
            <value></value>
        </member>
        <member name="F:Godot.Transform2D.y">
            <summary>
            The basis matrix's Y vector (column 1). Equivalent to array index `[1]`.
            </summary>
        </member>
        <member name="F:Godot.Transform2D.origin">
            <summary>
            The origin vector (column 2, the third column). Equivalent to array index `[2]`.
            The origin vector represents translation.
            </summary>
        </member>
        <member name="P:Godot.Transform2D.Rotation">
            <summary>
            The rotation of this transformation matrix.
            </summary>
            <value>Getting is equivalent to calling <see cref="M:Godot.Mathf.Atan2(System.Single,System.Single)"/> with the values of <see cref="F:Godot.Transform2D.x"/>.</value>
        </member>
        <member name="P:Godot.Transform2D.Scale">
            <summary>
            The scale of this transformation matrix.
            </summary>
            <value>Equivalent to the lengths of each column vector, but Y is negative if the determinant is negative.</value>
        </member>
        <member name="P:Godot.Transform2D.Item(System.Int32)">
            <summary>
            Access whole columns in the form of Vector2. The third column is the origin vector.
            </summary>
            <param name="column">Which column vector.</param>
        </member>
        <member name="P:Godot.Transform2D.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order. The third column is the origin vector.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
        </member>
        <member name="M:Godot.Transform2D.AffineInverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation is composed of rotation, scaling, and translation.
            </summary>
            <returns>The inverse transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.BasisDeterminant">
             <summary>
             Returns the determinant of the basis matrix. If the basis is
             uniformly scaled, its determinant is the square of the scale.
            
             A negative determinant means the Y scale is negative.
             A zero determinant means the basis isn't invertible,
             and is usually considered invalid.
             </summary>
             <returns>The determinant of the basis matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.BasisXform(Godot.Vector2)">
            <summary>
            Returns a vector transformed (multiplied) by the basis matrix.
            This method does not account for translation (the origin vector).
            </summary>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform2D.BasisXformInv(Godot.Vector2)">
             <summary>
             Returns a vector transformed (multiplied) by the inverse basis matrix.
             This method does not account for translation (the origin vector).
            
             Note: This results in a multiplication by the inverse of the
             basis matrix only if it represents a rotation-reflection.
             </summary>
             <param name="v">A vector to inversely transform.</param>
             <returns>The inversely transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform2D.InterpolateWith(Godot.Transform2D,System.Single)">
            <summary>
            Interpolates this transform to the other `transform` by `weight`.
            </summary>
            <param name="transform">The other transform.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.Inverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation is composed of rotation and translation
            (no scaling, use <see cref="M:Godot.Transform2D.AffineInverse"/> for transforms with scaling).
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Orthonormalized">
            <summary>
            Returns the transform with the basis orthogonal (90 degrees),
            and normalized axis vectors (scale of 1 or -1).
            </summary>
            <returns>The orthonormalized transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.Rotated(System.Single)">
            <summary>
            Rotates the transform by `phi` (in radians), using matrix multiplication.
            </summary>
            <param name="phi">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Scaled(Godot.Vector2)">
            <summary>
            Scales the transform by the given scaling factor, using matrix multiplication.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Translated(Godot.Vector2)">
             <summary>
             Translates the transform by the given `offset`,
             relative to the transform's basis vectors.
            
             Unlike <see cref="M:Godot.Transform2D.Rotated(System.Single)"/> and <see cref="M:Godot.Transform2D.Scaled(Godot.Vector2)"/>,
             this does not use matrix multiplication.
             </summary>
             <param name="offset">The offset to translate by.</param>
             <returns>The translated matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Xform(Godot.Vector2)">
            <summary>
            Returns a vector transformed (multiplied) by this transformation matrix.
            </summary>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform2D.XformInv(Godot.Vector2)">
            <summary>
            Returns a vector transformed (multiplied) by the inverse transformation matrix.
            </summary>
            <param name="v">A vector to inversely transform.</param>
            <returns>The inversely transformed vector.</returns>
        </member>
        <member name="P:Godot.Transform2D.Identity">
            <summary>
            The identity transform, with no translation, rotation, or scaling applied.
            This is used as a replacement for `Transform2D()` in GDScript.
            Do not use `new Transform2D()` with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to `new Transform2D(Vector2.Right, Vector2.Down, Vector2.Zero)`.</value>
        </member>
        <member name="P:Godot.Transform2D.FlipX">
            <summary>
            The transform that will flip something along the X axis.
            </summary>
            <value>Equivalent to `new Transform2D(Vector2.Left, Vector2.Down, Vector2.Zero)`.</value>
        </member>
        <member name="P:Godot.Transform2D.FlipY">
            <summary>
            The transform that will flip something along the Y axis.
            </summary>
            <value>Equivalent to `new Transform2D(Vector2.Right, Vector2.Up, Vector2.Zero)`.</value>
        </member>
        <member name="M:Godot.Transform2D.#ctor(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Constructs a transformation matrix from 3 vectors (matrix columns).
            </summary>
            <param name="xAxis">The X vector, or column index 0.</param>
            <param name="yAxis">The Y vector, or column index 1.</param>
            <param name="originPos">The origin vector, or column index 2.</param>
        </member>
        <member name="M:Godot.Transform2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a transformation matrix from the given components.
            Arguments are named such that xy is equal to calling x.y
            </summary>
            <param name="xx">The X component of the X column vector, accessed via `t.x.x` or `[0][0]`</param>
            <param name="xy">The Y component of the X column vector, accessed via `t.x.y` or `[0][1]`</param>
            <param name="yx">The X component of the Y column vector, accessed via `t.y.x` or `[1][0]`</param>
            <param name="yy">The Y component of the Y column vector, accessed via `t.y.y` or `[1][1]`</param>
            <param name="ox">The X component of the origin vector, accessed via `t.origin.x` or `[2][0]`</param>
            <param name="oy">The Y component of the origin vector, accessed via `t.origin.y` or `[2][1]`</param>
        </member>
        <member name="M:Godot.Transform2D.#ctor(System.Single,Godot.Vector2)">
            <summary>
            Constructs a transformation matrix from a rotation value and origin vector.
            </summary>
            <param name="rot">The rotation of the new transform, in radians.</param>
            <param name="pos">The origin vector, or column index 2.</param>
        </member>
        <member name="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)">
            <summary>
            Returns true if this transform and `other` are approximately equal, by running
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> on each component.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are approximately equal.</returns>
        </member>
        <member name="T:Godot.Vector2">
            <summary>
            2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.
            </summary>
        </member>
        <member name="T:Godot.Vector2.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector2.MaxAxis"/> and <see cref="M:Godot.Vector2.MinAxis"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector2.x">
            <summary>
            The vector's X component. Also accessible by using the index position `[0]`.
            </summary>
        </member>
        <member name="F:Godot.Vector2.y">
            <summary>
            The vector's Y component. Also accessible by using the index position `[1]`.
            </summary>
        </member>
        <member name="P:Godot.Vector2.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <value>`[0]` is equivalent to `.x`, `[1]` is equivalent to `.y`.</value>
        </member>
        <member name="M:Godot.Vector2.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Abs(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Angle">
             <summary>
             Returns this vector's angle with respect to the X axis, or (1, 0) vector, in radians.
            
             Equivalent to the result of <see cref="M:Godot.Mathf.Atan2(System.Single,System.Single)"/> when
             called with the vector's `y` and `x` as parameters: `Mathf.Atan2(v.y, v.x)`.
             </summary>
             <returns>The angle of this vector, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.AngleTo(Godot.Vector2)">
            <summary>
            Returns the angle to the given vector, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.AngleToPoint(Godot.Vector2)">
            <summary>
            Returns the angle between the line connecting the two points and the X axis, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.Aspect">
            <summary>
            Returns the aspect ratio of this vector, the ratio of `x` to `y`.
            </summary>
            <returns>The `x` component divided by the `y` component.</returns>
        </member>
        <member name="M:Godot.Vector2.Bounce(Godot.Vector2)">
            <summary>
            Returns the vector "bounced off" from a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to bounce off. Must be normalized.</param>
            <returns>The bounced vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Ceil">
            <summary>
            Returns a new vector with all components rounded up (towards positive infinity).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Ceil(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Clamped(System.Single)">
            <summary>
            Returns the vector with a maximum length by limiting its length to `length`.
            </summary>
            <param name="length">The length to limit to.</param>
            <returns>The vector with its length limited.</returns>
        </member>
        <member name="M:Godot.Vector2.Cross(Godot.Vector2)">
            <summary>
            Returns the cross product of this vector and `b`.
            </summary>
            <param name="b">The other vector.</param>
            <returns>The cross product value.</returns>
        </member>
        <member name="M:Godot.Vector2.CubicInterpolate(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors `preA`, this vector, `b`, and `postB`, by the given amount `t`.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after `b`.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.DirectionTo(Godot.Vector2)">
            <summary>
            Returns the normalized vector pointing from this vector to `b`.
            </summary>
            <param name="b">The other vector to point towards.</param>
            <returns>The direction from this vector to `b`.</returns>
        </member>
        <member name="M:Godot.Vector2.DistanceSquaredTo(Godot.Vector2)">
            <summary>
            Returns the squared distance between this vector and `to`.
            This method runs faster than <see cref="M:Godot.Vector2.DistanceTo(Godot.Vector2)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.DistanceTo(Godot.Vector2)">
            <summary>
            Returns the distance between this vector and `to`.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.Dot(Godot.Vector2)">
            <summary>
            Returns the dot product of this vector and `with`.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.Floor">
            <summary>
            Returns a new vector with all components rounded down (towards negative infinity).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Floor(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Inverse">
            <summary>
            Returns the inverse of this vector. This is the same as `new Vector2(1 / v.x, 1 / v.y)`.
            </summary>
            <returns>The inverse of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.IsNormalized">
            <summary>
            Returns true if the vector is normalized, and false otherwise.
            </summary>
            <returns>A bool indicating whether or not the vector is normalized.</returns>
        </member>
        <member name="M:Godot.Vector2.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector2.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Lerp(Godot.Vector2,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and `to` by amount `weight`.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.Lerp(Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and `to` by the vector amount `weight`.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A vector with components on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.MaxAxis">
            <summary>
            Returns the axis of the vector's largest value. See <see cref="T:Godot.Vector2.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2.Axis.X"/>.
            </summary>
            <returns>The index of the largest axis.</returns>
        </member>
        <member name="M:Godot.Vector2.MinAxis">
            <summary>
            Returns the axis of the vector's smallest value. See <see cref="T:Godot.Vector2.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2.Axis.Y"/>.
            </summary>
            <returns>The index of the smallest axis.</returns>
        </member>
        <member name="M:Godot.Vector2.MoveToward(Godot.Vector2,System.Single)">
            <summary>
            Moves this vector toward `to` by the fixed `delta` amount.
            </summary>
            <param name="to">The vector to move towards.</param>
            <param name="delta">The amount to move towards by.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Normalized">
            <summary>
            Returns the vector scaled to unit length. Equivalent to `v / v.Length()`.
            </summary>
            <returns>A normalized version of the vector.</returns>
        </member>
        <member name="M:Godot.Vector2.PosMod(System.Single)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components and `mod`.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by `mod`.</returns>
        </member>
        <member name="M:Godot.Vector2.PosMod(Godot.Vector2)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components and `modv`'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by `modv`'s components.</returns>
        </member>
        <member name="M:Godot.Vector2.Project(Godot.Vector2)">
            <summary>
            Returns this vector projected onto another vector `b`.
            </summary>
            <param name="onNormal">The vector to project onto.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Reflect(Godot.Vector2)">
            <summary>
            Returns this vector reflected from a plane defined by the given `normal`.
            </summary>
            <param name="normal">The normal vector defining the plane to reflect from. Must be normalized.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Rotated(System.Single)">
            <summary>
            Rotates this vector by `phi` radians.
            </summary>
            <param name="phi">The angle to rotate by, in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Round">
            <summary>
            Returns this vector with all components rounded to the nearest integer,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:Godot.Mathf.Sign(System.Single)"/> on each component.
            </summary>
            <returns>A vector with all components as either `1`, `-1`, or `0`.</returns>
        </member>
        <member name="M:Godot.Vector2.Slerp(Godot.Vector2,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this vector and `to` by amount `weight`.
            
             Note: Both vectors must be normalized.
             </summary>
             <param name="to">The destination vector for interpolation. Must be normalized.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.Slide(Godot.Vector2)">
            <summary>
            Returns this vector slid along a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to slide on.</param>
            <returns>The slid vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Snapped(Godot.Vector2)">
            <summary>
            Returns this vector with each component snapped to the nearest multiple of `step`.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Perpendicular">
            <summary>
            Returns a perpendicular vector rotated 90 degrees counter-clockwise
            compared to the original, with the same length.
            </summary>
            <returns>The perpendicular vector.</returns>
        </member>
        <member name="P:Godot.Vector2.Zero">
            <summary>
            Zero vector, a vector with all components set to `0`.
            </summary>
            <value>Equivalent to `new Vector2(0, 0)`</value>
        </member>
        <member name="P:Godot.Vector2.One">
            <summary>
            One vector, a vector with all components set to `1`.
            </summary>
            <value>Equivalent to `new Vector2(1, 1)`</value>
        </member>
        <member name="P:Godot.Vector2.Inf">
            <summary>
            Infinity vector, a vector with all components set to `Mathf.Inf`.
            </summary>
            <value>Equivalent to `new Vector2(Mathf.Inf, Mathf.Inf)`</value>
        </member>
        <member name="P:Godot.Vector2.Up">
            <summary>
            Up unit vector. Y is down in 2D, so this vector points -Y.
            </summary>
            <value>Equivalent to `new Vector2(0, -1)`</value>
        </member>
        <member name="P:Godot.Vector2.Down">
            <summary>
            Down unit vector. Y is down in 2D, so this vector points +Y.
            </summary>
            <value>Equivalent to `new Vector2(0, 1)`</value>
        </member>
        <member name="P:Godot.Vector2.Right">
            <summary>
            Right unit vector. Represents the direction of right.
            </summary>
            <value>Equivalent to `new Vector2(1, 0)`</value>
        </member>
        <member name="P:Godot.Vector2.Left">
            <summary>
            Left unit vector. Represents the direction of left.
            </summary>
            <value>Equivalent to `new Vector2(-1, 0)`</value>
        </member>
        <member name="M:Godot.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
        </member>
        <member name="M:Godot.Vector2.#ctor(Godot.Vector2)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2"/> from an existing <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="v">The existing <see cref="T:Godot.Vector2"/>.</param>
        </member>
        <member name="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)">
            <summary>
            Returns true if this vector and `other` are approximately equal, by running
            <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other vector to compare.</param>
            <returns>Whether or not the vectors are approximately equal.</returns>
        </member>
        <member name="T:Godot.Vector2i">
            <summary>
            2-element structure that can be used to represent 2D grid coordinates or pairs of integers.
            </summary>
        </member>
        <member name="T:Godot.Vector2i.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector2i.MaxAxis"/> and <see cref="M:Godot.Vector2i.MinAxis"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector2i.x">
            <summary>
            The vector's X component. Also accessible by using the index position `[0]`.
            </summary>
        </member>
        <member name="F:Godot.Vector2i.y">
            <summary>
            The vector's Y component. Also accessible by using the index position `[1]`.
            </summary>
        </member>
        <member name="P:Godot.Vector2i.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <value>`[0]` is equivalent to `.x`, `[1]` is equivalent to `.y`.</value>
        </member>
        <member name="M:Godot.Vector2i.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Abs(System.Int32)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2i.Angle">
             <summary>
             Returns this vector's angle with respect to the X axis, or (1, 0) vector, in radians.
            
             Equivalent to the result of <see cref="M:Godot.Mathf.Atan2(System.Single,System.Single)"/> when
             called with the vector's `y` and `x` as parameters: `Mathf.Atan2(v.y, v.x)`.
             </summary>
             <returns>The angle of this vector, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2i.AngleTo(Godot.Vector2i)">
            <summary>
            Returns the angle to the given vector, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2i.AngleToPoint(Godot.Vector2i)">
            <summary>
            Returns the angle between the line connecting the two points and the X axis, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2i.Aspect">
            <summary>
            Returns the aspect ratio of this vector, the ratio of `x` to `y`.
            </summary>
            <returns>The `x` component divided by the `y` component.</returns>
        </member>
        <member name="M:Godot.Vector2i.Cross(Godot.Vector2i)">
            <summary>
            Returns the cross product of this vector and `b`.
            </summary>
            <param name="b">The other vector.</param>
            <returns>The cross product vector.</returns>
        </member>
        <member name="M:Godot.Vector2i.DistanceSquaredTo(Godot.Vector2i)">
            <summary>
            Returns the squared distance between this vector and `b`.
            This method runs faster than <see cref="M:Godot.Vector2i.DistanceTo(Godot.Vector2i)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2i.DistanceTo(Godot.Vector2i)">
            <summary>
            Returns the distance between this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2i.Dot(Godot.Vector2i)">
            <summary>
            Returns the dot product of this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2i.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2i.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector2i.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2i.MaxAxis">
            <summary>
            Returns the axis of the vector's largest value. See <see cref="T:Godot.Vector2i.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2i.Axis.X"/>.
            </summary>
            <returns>The index of the largest axis.</returns>
        </member>
        <member name="M:Godot.Vector2i.MinAxis">
            <summary>
            Returns the axis of the vector's smallest value. See <see cref="T:Godot.Vector2i.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2i.Axis.Y"/>.
            </summary>
            <returns>The index of the smallest axis.</returns>
        </member>
        <member name="M:Godot.Vector2i.PosMod(System.Int32)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> of this vector's components and `mod`.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> by `mod`.</returns>
        </member>
        <member name="M:Godot.Vector2i.PosMod(Godot.Vector2i)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> of this vector's components and `modv`'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> by `modv`'s components.</returns>
        </member>
        <member name="M:Godot.Vector2i.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:Godot.Mathf.Sign(System.Int32)"/> on each component.
            </summary>
            <returns>A vector with all components as either `1`, `-1`, or `0`.</returns>
        </member>
        <member name="M:Godot.Vector2i.Perpendicular">
            <summary>
            Returns a vector rotated 90 degrees counter-clockwise
            compared to the original, with the same length.
            </summary>
            <returns>The perpendicular vector.</returns>
        </member>
        <member name="P:Godot.Vector2i.Zero">
            <summary>
            Zero vector, a vector with all components set to `0`.
            </summary>
            <value>Equivalent to `new Vector2i(0, 0)`</value>
        </member>
        <member name="P:Godot.Vector2i.One">
            <summary>
            One vector, a vector with all components set to `1`.
            </summary>
            <value>Equivalent to `new Vector2i(1, 1)`</value>
        </member>
        <member name="P:Godot.Vector2i.Up">
            <summary>
            Up unit vector. Y is down in 2D, so this vector points -Y.
            </summary>
            <value>Equivalent to `new Vector2i(0, -1)`</value>
        </member>
        <member name="P:Godot.Vector2i.Down">
            <summary>
            Down unit vector. Y is down in 2D, so this vector points +Y.
            </summary>
            <value>Equivalent to `new Vector2i(0, 1)`</value>
        </member>
        <member name="P:Godot.Vector2i.Right">
            <summary>
            Right unit vector. Represents the direction of right.
            </summary>
            <value>Equivalent to `new Vector2i(1, 0)`</value>
        </member>
        <member name="P:Godot.Vector2i.Left">
            <summary>
            Left unit vector. Represents the direction of left.
            </summary>
            <value>Equivalent to `new Vector2i(-1, 0)`</value>
        </member>
        <member name="M:Godot.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2i"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
        </member>
        <member name="M:Godot.Vector2i.#ctor(Godot.Vector2i)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2i"/> from an existing <see cref="T:Godot.Vector2i"/>.
            </summary>
            <param name="vi">The existing <see cref="T:Godot.Vector2i"/>.</param>
        </member>
        <member name="M:Godot.Vector2i.#ctor(Godot.Vector2)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2i"/> from an existing <see cref="T:Godot.Vector2"/>
            by rounding the components via <see cref="M:Godot.Mathf.RoundToInt(System.Single)"/>.
            </summary>
            <param name="v">The <see cref="T:Godot.Vector2"/> to convert.</param>
        </member>
        <member name="T:Godot.Vector3">
            <summary>
            3-element structure that can be used to represent positions in 3D space or any other pair of numeric values.
            </summary>
        </member>
        <member name="T:Godot.Vector3.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector3.MaxAxis"/> and <see cref="M:Godot.Vector3.MinAxis"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector3.x">
            <summary>
            The vector's X component. Also accessible by using the index position `[0]`.
            </summary>
        </member>
        <member name="F:Godot.Vector3.y">
            <summary>
            The vector's Y component. Also accessible by using the index position `[1]`.
            </summary>
        </member>
        <member name="F:Godot.Vector3.z">
            <summary>
            The vector's Z component. Also accessible by using the index position `[2]`.
            </summary>
        </member>
        <member name="P:Godot.Vector3.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <value>`[0]` is equivalent to `.x`, `[1]` is equivalent to `.y`, `[2]` is equivalent to `.z`.</value>
        </member>
        <member name="M:Godot.Vector3.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Abs(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.AngleTo(Godot.Vector3)">
            <summary>
            Returns the minimum angle to the given vector, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector3.Bounce(Godot.Vector3)">
            <summary>
            Returns this vector "bounced off" from a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to bounce off. Must be normalized.</param>
            <returns>The bounced vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Ceil">
            <summary>
            Returns a new vector with all components rounded up (towards positive infinity).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Ceil(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.Cross(Godot.Vector3)">
            <summary>
            Returns the cross product of this vector and `b`.
            </summary>
            <param name="b">The other vector.</param>
            <returns>The cross product vector.</returns>
        </member>
        <member name="M:Godot.Vector3.CubicInterpolate(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors `preA`, this vector,
            `b`, and `postB`, by the given amount `t`.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after `b`.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.DirectionTo(Godot.Vector3)">
            <summary>
            Returns the normalized vector pointing from this vector to `b`.
            </summary>
            <param name="b">The other vector to point towards.</param>
            <returns>The direction from this vector to `b`.</returns>
        </member>
        <member name="M:Godot.Vector3.DistanceSquaredTo(Godot.Vector3)">
            <summary>
            Returns the squared distance between this vector and `b`.
            This method runs faster than <see cref="M:Godot.Vector3.DistanceTo(Godot.Vector3)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.DistanceTo(Godot.Vector3)">
            <summary>
            Returns the distance between this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.Dot(Godot.Vector3)">
            <summary>
            Returns the dot product of this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.Floor">
            <summary>
            Returns a new vector with all components rounded down (towards negative infinity).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Floor(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.Inverse">
            <summary>
            Returns the inverse of this vector. This is the same as `new Vector3(1 / v.x, 1 / v.y, 1 / v.z)`.
            </summary>
            <returns>The inverse of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.IsNormalized">
            <summary>
            Returns true if the vector is normalized, and false otherwise.
            </summary>
            <returns>A bool indicating whether or not the vector is normalized.</returns>
        </member>
        <member name="M:Godot.Vector3.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector3.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Lerp(Godot.Vector3,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and `to` by amount `weight`.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.Lerp(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and `to` by the vector amount `weight`.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A vector with components on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.MaxAxis">
            <summary>
            Returns the axis of the vector's largest value. See <see cref="T:Godot.Vector3.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3.Axis.X"/>.
            </summary>
            <returns>The index of the largest axis.</returns>
        </member>
        <member name="M:Godot.Vector3.MinAxis">
            <summary>
            Returns the axis of the vector's smallest value. See <see cref="T:Godot.Vector3.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3.Axis.Z"/>.
            </summary>
            <returns>The index of the smallest axis.</returns>
        </member>
        <member name="M:Godot.Vector3.MoveToward(Godot.Vector3,System.Single)">
            <summary>
            Moves this vector toward `to` by the fixed `delta` amount.
            </summary>
            <param name="to">The vector to move towards.</param>
            <param name="delta">The amount to move towards by.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Normalized">
            <summary>
            Returns the vector scaled to unit length. Equivalent to `v / v.Length()`.
            </summary>
            <returns>A normalized version of the vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Outer(Godot.Vector3)">
            <summary>
            Returns the outer product with `b`.
            </summary>
            <param name="b">The other vector.</param>
            <returns>A <see cref="T:Godot.Basis"/> representing the outer product matrix.</returns>
        </member>
        <member name="M:Godot.Vector3.PosMod(System.Single)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components and `mod`.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by `mod`.</returns>
        </member>
        <member name="M:Godot.Vector3.PosMod(Godot.Vector3)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components and `modv`'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by `modv`'s components.</returns>
        </member>
        <member name="M:Godot.Vector3.Project(Godot.Vector3)">
            <summary>
            Returns this vector projected onto another vector `b`.
            </summary>
            <param name="onNormal">The vector to project onto.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Reflect(Godot.Vector3)">
            <summary>
            Returns this vector reflected from a plane defined by the given `normal`.
            </summary>
            <param name="normal">The normal vector defining the plane to reflect from. Must be normalized.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Rotates this vector around a given `axis` vector by `phi` radians.
            The `axis` vector must be a normalized vector.
            </summary>
            <param name="axis">The vector to rotate around. Must be normalized.</param>
            <param name="phi">The angle to rotate by, in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Round">
            <summary>
            Returns this vector with all components rounded to the nearest integer,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:Godot.Mathf.Sign(System.Single)"/> on each component.
            </summary>
            <returns>A vector with all components as either `1`, `-1`, or `0`.</returns>
        </member>
        <member name="M:Godot.Vector3.Slerp(Godot.Vector3,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this vector and `to` by amount `weight`.
            
             Note: Both vectors must be normalized.
             </summary>
             <param name="to">The destination vector for interpolation. Must be normalized.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.Slide(Godot.Vector3)">
            <summary>
            Returns this vector slid along a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to slide on.</param>
            <returns>The slid vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Snapped(Godot.Vector3)">
            <summary>
            Returns this vector with each component snapped to the nearest multiple of `step`.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector3.ToDiagonalMatrix">
             <summary>
             Returns a diagonal matrix with the vector as main diagonal.
            
             This is equivalent to a Basis with no rotation or shearing and
             this vector's components set as the scale.
             </summary>
             <returns>A Basis with the vector as its main diagonal.</returns>
        </member>
        <member name="P:Godot.Vector3.Zero">
            <summary>
            Zero vector, a vector with all components set to `0`.
            </summary>
            <value>Equivalent to `new Vector3(0, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3.One">
            <summary>
            One vector, a vector with all components set to `1`.
            </summary>
            <value>Equivalent to `new Vector3(1, 1, 1)`</value>
        </member>
        <member name="P:Godot.Vector3.Inf">
            <summary>
            Infinity vector, a vector with all components set to `Mathf.Inf`.
            </summary>
            <value>Equivalent to `new Vector3(Mathf.Inf, Mathf.Inf, Mathf.Inf)`</value>
        </member>
        <member name="P:Godot.Vector3.Up">
            <summary>
            Up unit vector.
            </summary>
            <value>Equivalent to `new Vector3(0, 1, 0)`</value>
        </member>
        <member name="P:Godot.Vector3.Down">
            <summary>
            Down unit vector.
            </summary>
            <value>Equivalent to `new Vector3(0, -1, 0)`</value>
        </member>
        <member name="P:Godot.Vector3.Right">
            <summary>
            Right unit vector. Represents the local direction of right,
            and the global direction of east.
            </summary>
            <value>Equivalent to `new Vector3(1, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3.Left">
            <summary>
            Left unit vector. Represents the local direction of left,
            and the global direction of west.
            </summary>
            <value>Equivalent to `new Vector3(-1, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3.Forward">
            <summary>
            Forward unit vector. Represents the local direction of forward,
            and the global direction of north.
            </summary>
            <value>Equivalent to `new Vector3(0, 0, -1)`</value>
        </member>
        <member name="P:Godot.Vector3.Back">
            <summary>
            Back unit vector. Represents the local direction of back,
            and the global direction of south.
            </summary>
            <value>Equivalent to `new Vector3(0, 0, 1)`</value>
        </member>
        <member name="M:Godot.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
        </member>
        <member name="M:Godot.Vector3.#ctor(Godot.Vector3)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3"/> from an existing <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="v">The existing <see cref="T:Godot.Vector3"/>.</param>
        </member>
        <member name="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)">
            <summary>
            Returns true if this vector and `other` are approximately equal, by running
            <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other vector to compare.</param>
            <returns>Whether or not the vectors are approximately equal.</returns>
        </member>
        <member name="T:Godot.Vector3i">
            <summary>
            3-element structure that can be used to represent 3D grid coordinates or sets of integers.
            </summary>
        </member>
        <member name="T:Godot.Vector3i.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector3i.MaxAxis"/> and <see cref="M:Godot.Vector3i.MinAxis"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector3i.x">
            <summary>
            The vector's X component. Also accessible by using the index position `[0]`.
            </summary>
        </member>
        <member name="F:Godot.Vector3i.y">
            <summary>
            The vector's Y component. Also accessible by using the index position `[1]`.
            </summary>
        </member>
        <member name="F:Godot.Vector3i.z">
            <summary>
            The vector's Z component. Also accessible by using the index position `[2]`.
            </summary>
        </member>
        <member name="P:Godot.Vector3i.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <value>`[0]` is equivalent to `.x`, `[1]` is equivalent to `.y`, `[2]` is equivalent to `.z`.</value>
        </member>
        <member name="M:Godot.Vector3i.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:Godot.Mathf.Abs(System.Int32)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3i.DistanceSquaredTo(Godot.Vector3i)">
            <summary>
            Returns the squared distance between this vector and `b`.
            This method runs faster than <see cref="M:Godot.Vector3i.DistanceTo(Godot.Vector3i)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3i.DistanceTo(Godot.Vector3i)">
            <summary>
            Returns the distance between this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3i.Dot(Godot.Vector3i)">
            <summary>
            Returns the dot product of this vector and `b`.
            </summary>
            <param name="b">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3i.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3i.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector3i.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3i.MaxAxis">
            <summary>
            Returns the axis of the vector's largest value. See <see cref="T:Godot.Vector3i.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3i.Axis.X"/>.
            </summary>
            <returns>The index of the largest axis.</returns>
        </member>
        <member name="M:Godot.Vector3i.MinAxis">
            <summary>
            Returns the axis of the vector's smallest value. See <see cref="T:Godot.Vector3i.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3i.Axis.Z"/>.
            </summary>
            <returns>The index of the smallest axis.</returns>
        </member>
        <member name="M:Godot.Vector3i.PosMod(System.Int32)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> of this vector's components and `mod`.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> by `mod`.</returns>
        </member>
        <member name="M:Godot.Vector3i.PosMod(Godot.Vector3i)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> of this vector's components and `modv`'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> by `modv`'s components.</returns>
        </member>
        <member name="M:Godot.Vector3i.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:Godot.Mathf.Sign(System.Int32)"/> on each component.
            </summary>
            <returns>A vector with all components as either `1`, `-1`, or `0`.</returns>
        </member>
        <member name="P:Godot.Vector3i.Zero">
            <summary>
            Zero vector, a vector with all components set to `0`.
            </summary>
            <value>Equivalent to `new Vector3i(0, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3i.One">
            <summary>
            One vector, a vector with all components set to `1`.
            </summary>
            <value>Equivalent to `new Vector3i(1, 1, 1)`</value>
        </member>
        <member name="P:Godot.Vector3i.Up">
            <summary>
            Up unit vector.
            </summary>
            <value>Equivalent to `new Vector3i(0, 1, 0)`</value>
        </member>
        <member name="P:Godot.Vector3i.Down">
            <summary>
            Down unit vector.
            </summary>
            <value>Equivalent to `new Vector3i(0, -1, 0)`</value>
        </member>
        <member name="P:Godot.Vector3i.Right">
            <summary>
            Right unit vector. Represents the local direction of right,
            and the global direction of east.
            </summary>
            <value>Equivalent to `new Vector3i(1, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3i.Left">
            <summary>
            Left unit vector. Represents the local direction of left,
            and the global direction of west.
            </summary>
            <value>Equivalent to `new Vector3i(-1, 0, 0)`</value>
        </member>
        <member name="P:Godot.Vector3i.Forward">
            <summary>
            Forward unit vector. Represents the local direction of forward,
            and the global direction of north.
            </summary>
            <value>Equivalent to `new Vector3i(0, 0, -1)`</value>
        </member>
        <member name="P:Godot.Vector3i.Back">
            <summary>
            Back unit vector. Represents the local direction of back,
            and the global direction of south.
            </summary>
            <value>Equivalent to `new Vector3i(0, 0, 1)`</value>
        </member>
        <member name="M:Godot.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3i"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
        </member>
        <member name="M:Godot.Vector3i.#ctor(Godot.Vector3i)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3i"/> from an existing <see cref="T:Godot.Vector3i"/>.
            </summary>
            <param name="vi">The existing <see cref="T:Godot.Vector3i"/>.</param>
        </member>
        <member name="M:Godot.Vector3i.#ctor(Godot.Vector3)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3i"/> from an existing <see cref="T:Godot.Vector3"/>
            by rounding the components via <see cref="M:Godot.Mathf.RoundToInt(System.Single)"/>.
            </summary>
            <param name="v">The <see cref="T:Godot.Vector3"/> to convert.</param>
        </member>
        <member name="F:Godot.Side.Left">
            <summary>
            <para>Left side, usually used for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/>-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Side.Top">
            <summary>
            <para>Top side, usually used for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/>-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Side.Right">
            <summary>
            <para>Right side, usually used for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/>-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Side.Bottom">
            <summary>
            <para>Bottom side, usually used for <see cref="T:Godot.Control"/> or <see cref="T:Godot.StyleBox"/>-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Corner.TopLeft">
            <summary>
            <para>Top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.Corner.TopRight">
            <summary>
            <para>Top-right corner.</para>
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomRight">
            <summary>
            <para>Bottom-right corner.</para>
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomLeft">
            <summary>
            <para>Bottom-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.Orientation.Vertical">
            <summary>
            <para>General vertical alignment, usually used for <see cref="T:Godot.Separator"/>, <see cref="T:Godot.ScrollBar"/>, <see cref="T:Godot.Slider"/>, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.Orientation.Horizontal">
            <summary>
            <para>General horizontal alignment, usually used for <see cref="T:Godot.Separator"/>, <see cref="T:Godot.ScrollBar"/>, <see cref="T:Godot.Slider"/>, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Left">
            <summary>
            <para>Horizontal left alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Center">
            <summary>
            <para>Horizontal center alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Right">
            <summary>
            <para>Horizontal right alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.HAlign.Fill">
            <summary>
            <para>Expand row to fit width, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Top">
            <summary>
            <para>Vertical top alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Center">
            <summary>
            <para>Vertical center alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.VAlign.Bottom">
            <summary>
            <para>Vertical bottom alignment, usually for text-derived classes.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Escape">
            <summary>
            <para>Escape key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Tab">
            <summary>
            <para>Tab key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backtab">
            <summary>
            <para>Shift + Tab key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backspace">
            <summary>
            <para>Backspace key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Enter">
            <summary>
            <para>Return key (on the main keyboard).</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpEnter">
            <summary>
            <para>Enter key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Insert">
            <summary>
            <para>Insert key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Delete">
            <summary>
            <para>Delete key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pause">
            <summary>
            <para>Pause key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Print">
            <summary>
            <para>Print Screen key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sysreq">
            <summary>
            <para>System Request key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Clear">
            <summary>
            <para>Clear key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Home">
            <summary>
            <para>Home key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.End">
            <summary>
            <para>End key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Left">
            <summary>
            <para>Left arrow key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Up">
            <summary>
            <para>Up arrow key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Right">
            <summary>
            <para>Right arrow key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Down">
            <summary>
            <para>Down arrow key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pageup">
            <summary>
            <para>Page Up key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pagedown">
            <summary>
            <para>Page Down key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Shift">
            <summary>
            <para>Shift key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Control">
            <summary>
            <para>Control key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Meta">
            <summary>
            <para>Meta key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Alt">
            <summary>
            <para>Alt key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Capslock">
            <summary>
            <para>Caps Lock key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numlock">
            <summary>
            <para>Num Lock key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Scrolllock">
            <summary>
            <para>Scroll Lock key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F1">
            <summary>
            <para>F1 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F2">
            <summary>
            <para>F2 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F3">
            <summary>
            <para>F3 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F4">
            <summary>
            <para>F4 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F5">
            <summary>
            <para>F5 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F6">
            <summary>
            <para>F6 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F7">
            <summary>
            <para>F7 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F8">
            <summary>
            <para>F8 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F9">
            <summary>
            <para>F9 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F10">
            <summary>
            <para>F10 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F11">
            <summary>
            <para>F11 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F12">
            <summary>
            <para>F12 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F13">
            <summary>
            <para>F13 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F14">
            <summary>
            <para>F14 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F15">
            <summary>
            <para>F15 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F16">
            <summary>
            <para>F16 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpMultiply">
            <summary>
            <para>Multiply (*) key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpDivide">
            <summary>
            <para>Divide (/) key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpSubtract">
            <summary>
            <para>Subtract (-) key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpPeriod">
            <summary>
            <para>Period (.) key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpAdd">
            <summary>
            <para>Add (+) key on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp0">
            <summary>
            <para>Number 0 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp1">
            <summary>
            <para>Number 1 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp2">
            <summary>
            <para>Number 2 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp3">
            <summary>
            <para>Number 3 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp4">
            <summary>
            <para>Number 4 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp5">
            <summary>
            <para>Number 5 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp6">
            <summary>
            <para>Number 6 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp7">
            <summary>
            <para>Number 7 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp8">
            <summary>
            <para>Number 8 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp9">
            <summary>
            <para>Number 9 on the numeric keypad.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperL">
            <summary>
            <para>Left Super key (Windows key).</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperR">
            <summary>
            <para>Right Super key (Windows key).</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Menu">
            <summary>
            <para>Context menu key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperL">
            <summary>
            <para>Left Hyper key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperR">
            <summary>
            <para>Right Hyper key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Help">
            <summary>
            <para>Help key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionL">
            <summary>
            <para>Left Direction key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionR">
            <summary>
            <para>Right Direction key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Back">
            <summary>
            <para>Media back key. Not to be confused with the Back button on an Android device.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Forward">
            <summary>
            <para>Media forward key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Stop">
            <summary>
            <para>Media stop key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Refresh">
            <summary>
            <para>Media refresh key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumedown">
            <summary>
            <para>Volume down key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumemute">
            <summary>
            <para>Mute volume key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumeup">
            <summary>
            <para>Volume up key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassboost">
            <summary>
            <para>Bass Boost key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassup">
            <summary>
            <para>Bass up key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassdown">
            <summary>
            <para>Bass down key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebleup">
            <summary>
            <para>Treble up key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebledown">
            <summary>
            <para>Treble down key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaplay">
            <summary>
            <para>Media play key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediastop">
            <summary>
            <para>Media stop key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaprevious">
            <summary>
            <para>Previous song key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Medianext">
            <summary>
            <para>Next song key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediarecord">
            <summary>
            <para>Media record key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Homepage">
            <summary>
            <para>Home page key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Favorites">
            <summary>
            <para>Favorites key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Search">
            <summary>
            <para>Search key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Standby">
            <summary>
            <para>Standby key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Openurl">
            <summary>
            <para>Open URL / Launch Browser key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmail">
            <summary>
            <para>Launch Mail key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmedia">
            <summary>
            <para>Launch Media key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch0">
            <summary>
            <para>Launch Shortcut 0 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch1">
            <summary>
            <para>Launch Shortcut 1 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch2">
            <summary>
            <para>Launch Shortcut 2 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch3">
            <summary>
            <para>Launch Shortcut 3 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch4">
            <summary>
            <para>Launch Shortcut 4 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch5">
            <summary>
            <para>Launch Shortcut 5 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch6">
            <summary>
            <para>Launch Shortcut 6 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch7">
            <summary>
            <para>Launch Shortcut 7 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch8">
            <summary>
            <para>Launch Shortcut 8 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch9">
            <summary>
            <para>Launch Shortcut 9 key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launcha">
            <summary>
            <para>Launch Shortcut A key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchb">
            <summary>
            <para>Launch Shortcut B key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchc">
            <summary>
            <para>Launch Shortcut C key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchd">
            <summary>
            <para>Launch Shortcut D key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launche">
            <summary>
            <para>Launch Shortcut E key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchf">
            <summary>
            <para>Launch Shortcut F key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Unknown">
            <summary>
            <para>Unknown key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Space">
            <summary>
            <para>Space key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclam">
            <summary>
            <para>! key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quotedbl">
            <summary>
            <para>" key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numbersign">
            <summary>
            <para># key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Dollar">
            <summary>
            <para>$ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Percent">
            <summary>
            <para>% key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ampersand">
            <summary>
            <para>&amp; key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Apostrophe">
            <summary>
            <para>' key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenleft">
            <summary>
            <para>( key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenright">
            <summary>
            <para>) key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asterisk">
            <summary>
            <para>* key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plus">
            <summary>
            <para>+ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Comma">
            <summary>
            <para>, key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Minus">
            <summary>
            <para>- key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Period">
            <summary>
            <para>. key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Slash">
            <summary>
            <para>/ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key0">
            <summary>
            <para>Number 0.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key1">
            <summary>
            <para>Number 1.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key2">
            <summary>
            <para>Number 2.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key3">
            <summary>
            <para>Number 3.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key4">
            <summary>
            <para>Number 4.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key5">
            <summary>
            <para>Number 5.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key6">
            <summary>
            <para>Number 6.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key7">
            <summary>
            <para>Number 7.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key8">
            <summary>
            <para>Number 8.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key9">
            <summary>
            <para>Number 9.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Colon">
            <summary>
            <para>: key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Semicolon">
            <summary>
            <para>; key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Less">
            <summary>
            <para>&lt; key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Equal">
            <summary>
            <para>= key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Greater">
            <summary>
            <para>&gt; key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Question">
            <summary>
            <para>? key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.At">
            <summary>
            <para>@ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.A">
            <summary>
            <para>A key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.B">
            <summary>
            <para>B key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.C">
            <summary>
            <para>C key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.D">
            <summary>
            <para>D key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.E">
            <summary>
            <para>E key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.F">
            <summary>
            <para>F key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.G">
            <summary>
            <para>G key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.H">
            <summary>
            <para>H key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.I">
            <summary>
            <para>I key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.J">
            <summary>
            <para>J key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.K">
            <summary>
            <para>K key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.L">
            <summary>
            <para>L key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.M">
            <summary>
            <para>M key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.N">
            <summary>
            <para>N key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.O">
            <summary>
            <para>O key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.P">
            <summary>
            <para>P key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Q">
            <summary>
            <para>Q key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.R">
            <summary>
            <para>R key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.S">
            <summary>
            <para>S key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.T">
            <summary>
            <para>T key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.U">
            <summary>
            <para>U key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.V">
            <summary>
            <para>V key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.W">
            <summary>
            <para>W key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.X">
            <summary>
            <para>X key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Y">
            <summary>
            <para>Y key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Z">
            <summary>
            <para>Z key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketleft">
            <summary>
            <para>[ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backslash">
            <summary>
            <para>\ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketright">
            <summary>
            <para>] key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciicircum">
            <summary>
            <para>^ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Underscore">
            <summary>
            <para>_ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quoteleft">
            <summary>
            <para>` key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceleft">
            <summary>
            <para>{ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bar">
            <summary>
            <para>| key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceright">
            <summary>
            <para>} key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciitilde">
            <summary>
            <para>~ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Nobreakspace">
            <summary>
            <para>Non-breakable space key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclamdown">
            <summary>
            <para>¡ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cent">
            <summary>
            <para>¢ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sterling">
            <summary>
            <para>£ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Currency">
            <summary>
            <para>¤ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yen">
            <summary>
            <para>¥ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Brokenbar">
            <summary>
            <para>¦ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Section">
            <summary>
            <para>§ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Diaeresis">
            <summary>
            <para>¨ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Copyright">
            <summary>
            <para>© key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ordfeminine">
            <summary>
            <para>ª key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotleft">
            <summary>
            <para>« key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Notsign">
            <summary>
            <para>¬ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Hyphen">
            <summary>
            <para>Soft hyphen key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Registered">
            <summary>
            <para>® key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Macron">
            <summary>
            <para>¯ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Degree">
            <summary>
            <para>° key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plusminus">
            <summary>
            <para>± key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Twosuperior">
            <summary>
            <para>² key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threesuperior">
            <summary>
            <para>³ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acute">
            <summary>
            <para>´ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mu">
            <summary>
            <para>µ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Paragraph">
            <summary>
            <para>¶ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Periodcentered">
            <summary>
            <para>· key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cedilla">
            <summary>
            <para>¸ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onesuperior">
            <summary>
            <para>¹ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Masculine">
            <summary>
            <para>º key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotright">
            <summary>
            <para>» key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onequarter">
            <summary>
            <para>¼ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onehalf">
            <summary>
            <para>½ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threequarters">
            <summary>
            <para>¾ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Questiondown">
            <summary>
            <para>¿ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Agrave">
            <summary>
            <para>À key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aacute">
            <summary>
            <para>Á key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acircumflex">
            <summary>
            <para>Â key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Atilde">
            <summary>
            <para>Ã key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Adiaeresis">
            <summary>
            <para>Ä key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aring">
            <summary>
            <para>Å key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ae">
            <summary>
            <para>Æ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ccedilla">
            <summary>
            <para>Ç key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Egrave">
            <summary>
            <para>È key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eacute">
            <summary>
            <para>É key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ecircumflex">
            <summary>
            <para>Ê key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ediaeresis">
            <summary>
            <para>Ë key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Igrave">
            <summary>
            <para>Ì key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Iacute">
            <summary>
            <para>Í key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Icircumflex">
            <summary>
            <para>Î key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Idiaeresis">
            <summary>
            <para>Ï key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eth">
            <summary>
            <para>Ð key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ntilde">
            <summary>
            <para>Ñ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ograve">
            <summary>
            <para>Ò key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Oacute">
            <summary>
            <para>Ó key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ocircumflex">
            <summary>
            <para>Ô key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Otilde">
            <summary>
            <para>Õ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Odiaeresis">
            <summary>
            <para>Ö key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Multiply">
            <summary>
            <para>× key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ooblique">
            <summary>
            <para>Ø key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ugrave">
            <summary>
            <para>Ù key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Uacute">
            <summary>
            <para>Ú key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ucircumflex">
            <summary>
            <para>Û key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Udiaeresis">
            <summary>
            <para>Ü key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yacute">
            <summary>
            <para>Ý key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Thorn">
            <summary>
            <para>Þ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ssharp">
            <summary>
            <para>ß key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Division">
            <summary>
            <para>÷ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ydiaeresis">
            <summary>
            <para>ÿ key.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.CodeMask">
            <summary>
            <para>Key Code mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.ModifierMask">
            <summary>
            <para>Modifier key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskShift">
            <summary>
            <para>Shift key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskAlt">
            <summary>
            <para>Alt key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskMeta">
            <summary>
            <para>Meta key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCtrl">
            <summary>
            <para>Ctrl key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCmd">
            <summary>
            <para>Command key mask. On macOS, this is equivalent to . On other platforms, this is equivalent to . This mask should be preferred to  or  for system shortcuts as it handles all platforms correctly.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskKpad">
            <summary>
            <para>Keypad key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskGroupSwitch">
            <summary>
            <para>Group Switch key mask.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Left">
            <summary>
            <para>Left mouse button.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Right">
            <summary>
            <para>Right mouse button.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Middle">
            <summary>
            <para>Middle mouse button.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Xbutton1">
            <summary>
            <para>Extra mouse button 1 (only present on some mice).</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Xbutton2">
            <summary>
            <para>Extra mouse button 2 (only present on some mice).</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelUp">
            <summary>
            <para>Mouse wheel up.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelDown">
            <summary>
            <para>Mouse wheel down.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelLeft">
            <summary>
            <para>Mouse wheel left button (only present on some mice).</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelRight">
            <summary>
            <para>Mouse wheel right button (only present on some mice).</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskLeft">
            <summary>
            <para>Left mouse button mask.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskRight">
            <summary>
            <para>Right mouse button mask.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskMiddle">
            <summary>
            <para>Middle mouse button mask.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskXbutton1">
            <summary>
            <para>Extra mouse button 1 mask.</para>
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskXbutton2">
            <summary>
            <para>Extra mouse button 2 mask.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Invalid">
            <summary>
            <para>An invalid game controller button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.A">
            <summary>
            <para>Game controller SDL button A. Corresponds to the bottom action button: Sony Cross, Xbox A, Nintendo B.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.B">
            <summary>
            <para>Game controller SDL button B. Corresponds to the right action button: Sony Circle, Xbox B, Nintendo A.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.X">
            <summary>
            <para>Game controller SDL button X. Corresponds to the left action button: Sony Square, Xbox X, Nintendo Y.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Y">
            <summary>
            <para>Game controller SDL button Y. Corresponds to the top action button: Sony Triangle, Xbox Y, Nintendo X.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Back">
            <summary>
            <para>Game controller SDL back button. Corresponds to the Sony Select, Xbox Back, Nintendo - button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Guide">
            <summary>
            <para>Game controller SDL guide button. Corresponds to the Sony PS, Xbox Home button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Start">
            <summary>
            <para>Game controller SDL start button. Corresponds to the Nintendo + button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.LeftStick">
            <summary>
            <para>Game controller SDL left stick button. Corresponds to the Sony L3, Xbox L/LS button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.RightStick">
            <summary>
            <para>Game controller SDL right stick button. Corresponds to the Sony R3, Xbox R/RS button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.LeftShoulder">
            <summary>
            <para>Game controller SDL left shoulder button. Corresponds to the Sony L1, Xbox LB button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.RightShoulder">
            <summary>
            <para>Game controller SDL right shoulder button. Corresponds to the Sony R1, Xbox RB button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.DpadUp">
            <summary>
            <para>Game controller D-pad up button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.DpadDown">
            <summary>
            <para>Game controller D-pad down button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.DpadLeft">
            <summary>
            <para>Game controller D-pad left button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.DpadRight">
            <summary>
            <para>Game controller D-pad right button.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.SdlMax">
            <summary>
            <para>The number of SDL game controller buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyButtonList.Max">
            <summary>
            <para>The maximum number of game controller buttons: Android supports up to 36 buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.Invalid">
            <summary>
            <para>An invalid game controller axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.LeftX">
            <summary>
            <para>Game controller left joystick x-axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.LeftY">
            <summary>
            <para>Game controller left joystick y-axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.RightX">
            <summary>
            <para>Game controller right joystick x-axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.RightY">
            <summary>
            <para>Game controller right joystick y-axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.TriggerLeft">
            <summary>
            <para>Game controller left trigger axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.TriggerRight">
            <summary>
            <para>Game controller right trigger axis.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.SdlMax">
            <summary>
            <para>The number of SDL game controller axes.</para>
            </summary>
        </member>
        <member name="F:Godot.JoyAxisList.Max">
            <summary>
            <para>The maximum number of game controller axes: OpenVR supports up to 5 Joysticks making a total of 10 axes.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.NoteOff">
            <summary>
            <para>MIDI note OFF message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.NoteOn">
            <summary>
            <para>MIDI note ON message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.Aftertouch">
            <summary>
            <para>MIDI aftertouch message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ControlChange">
            <summary>
            <para>MIDI control change message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ProgramChange">
            <summary>
            <para>MIDI program change message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.ChannelPressure">
            <summary>
            <para>MIDI channel pressure message.</para>
            </summary>
        </member>
        <member name="F:Godot.MidiMessageList.PitchBend">
            <summary>
            <para>MIDI pitch bend message.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Ok">
            <summary>
            <para>Methods that return <see cref="T:Godot.Error"/> return  when no error occurred. Note that many functions don't return an error code but will print error messages to standard output.</para>
            <para>Since  has value 0, and all other failure codes are positive integers, it can also be used in boolean checks, e.g.:</para>
            <para><code>
            var err = method_that_returns_error()
            if err != OK:
                print("Failure!")
            # Or, equivalent:
            if err:
                print("Still failing!")
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.Error.Failed">
            <summary>
            <para>Generic error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unavailable">
            <summary>
            <para>Unavailable error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unconfigured">
            <summary>
            <para>Unconfigured error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Unauthorized">
            <summary>
            <para>Unauthorized error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ParameterRangeError">
            <summary>
            <para>Parameter range error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.OutOfMemory">
            <summary>
            <para>Out of memory (OOM) error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileNotFound">
            <summary>
            <para>File: Not found error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadDrive">
            <summary>
            <para>File: Bad drive error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadPath">
            <summary>
            <para>File: Bad path error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileNoPermission">
            <summary>
            <para>File: No permission error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileAlreadyInUse">
            <summary>
            <para>File: Already in use error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantOpen">
            <summary>
            <para>File: Can't open error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantWrite">
            <summary>
            <para>File: Can't write error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantRead">
            <summary>
            <para>File: Can't read error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileUnrecognized">
            <summary>
            <para>File: Unrecognized error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileCorrupt">
            <summary>
            <para>File: Corrupt error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileMissingDependencies">
            <summary>
            <para>File: Missing dependencies error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.FileEof">
            <summary>
            <para>File: End of file (EOF) error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantOpen">
            <summary>
            <para>Can't open error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantCreate">
            <summary>
            <para>Can't create error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.QueryFailed">
            <summary>
            <para>Query failed error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyInUse">
            <summary>
            <para>Already in use error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Locked">
            <summary>
            <para>Locked error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Timeout">
            <summary>
            <para>Timeout error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantConnect">
            <summary>
            <para>Can't connect error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantResolve">
            <summary>
            <para>Can't resolve error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ConnectionError">
            <summary>
            <para>Connection error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantAcquireResource">
            <summary>
            <para>Can't acquire resource error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CantFork">
            <summary>
            <para>Can't fork process error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidData">
            <summary>
            <para>Invalid data error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidParameter">
            <summary>
            <para>Invalid parameter error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyExists">
            <summary>
            <para>Already exists error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DoesNotExist">
            <summary>
            <para>Does not exist error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantRead">
            <summary>
            <para>Database: Read error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantWrite">
            <summary>
            <para>Database: Write error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CompilationFailed">
            <summary>
            <para>Compilation failed error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.MethodNotFound">
            <summary>
            <para>Method not found error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.LinkFailed">
            <summary>
            <para>Linking failed error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ScriptFailed">
            <summary>
            <para>Script failed error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.CyclicLink">
            <summary>
            <para>Cycling link (import cycle) error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidDeclaration">
            <summary>
            <para>Invalid declaration error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.DuplicateSymbol">
            <summary>
            <para>Duplicate symbol error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.ParseError">
            <summary>
            <para>Parse error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Busy">
            <summary>
            <para>Busy error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Skip">
            <summary>
            <para>Skip error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Help">
            <summary>
            <para>Help error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.Bug">
            <summary>
            <para>Bug error.</para>
            </summary>
        </member>
        <member name="F:Godot.Error.PrinterOnFire">
            <summary>
            <para>Printer on fire error. (This is an easter egg, no engine methods return this error code.)</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.None">
            <summary>
            <para>No hint for the edited property.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Range">
            <summary>
            <para>Hints that an integer or float property should be within a range specified via the hint string <c>"min,max"</c> or <c>"min,max,step"</c>. The hint string can optionally include <c>"or_greater"</c> and/or <c>"or_lesser"</c> to allow manual input going respectively above the max or below the min values. Example: <c>"-360,360,1,or_greater,or_lesser"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpRange">
            <summary>
            <para>Hints that an integer or float property should be within an exponential range specified via the hint string <c>"min,max"</c> or <c>"min,max,step"</c>. The hint string can optionally include <c>"or_greater"</c> and/or <c>"or_lesser"</c> to allow manual input going respectively above the max or below the min values. Example: <c>"0.01,100,0.01,or_greater"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Enum">
            <summary>
            <para>Hints that an integer, float or string property is an enumerated value to pick in a list specified via a hint string such as <c>"Hello,Something,Else"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpEasing">
            <summary>
            <para>Hints that a float property should be edited via an exponential easing function. The hint string can include <c>"attenuation"</c> to flip the curve horizontally and/or <c>"inout"</c> to also include in/out easing.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Length">
            <summary>
            <para>Deprecated hint, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.KeyAccel">
            <summary>
            <para>Deprecated hint, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Flags">
            <summary>
            <para>Hints that an integer property is a bitmask with named bit flags. For example, to allow toggling bits 0, 1, 2 and 4, the hint could be something like <c>"Bit0,Bit1,Bit2,,Bit4"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dRender">
            <summary>
            <para>Hints that an integer property is a bitmask using the optionally named 2D render layers.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dPhysics">
            <summary>
            <para>Hints that an integer property is a bitmask using the optionally named 2D physics layers.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dRender">
            <summary>
            <para>Hints that an integer property is a bitmask using the optionally named 3D render layers.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dPhysics">
            <summary>
            <para>Hints that an integer property is a bitmask using the optionally named 3D physics layers.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.File">
            <summary>
            <para>Hints that a string property is a path to a file. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like <c>"*.png,*.jpg"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Dir">
            <summary>
            <para>Hints that a string property is a path to a directory. Editing it will show a file dialog for picking the path.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalFile">
            <summary>
            <para>Hints that a string property is an absolute path to a file outside the project folder. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like <c>"*.png,*.jpg"</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalDir">
            <summary>
            <para>Hints that a string property is an absolute path to a directory outside the project folder. Editing it will show a file dialog for picking the path.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ResourceType">
            <summary>
            <para>Hints that a property is an instance of a <see cref="T:Godot.Resource"/>-derived type, optionally specified via the hint string (e.g. <c>"Texture2D"</c>). Editing it will show a popup menu of valid resource types to instantiate.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.MultilineText">
            <summary>
            <para>Hints that a string property is text with line breaks. Editing it will show a text input field where line breaks can be typed.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.PlaceholderText">
            <summary>
            <para>Hints that a string property should have a placeholder text visible on its input field, whenever the property is empty. The hint string is the placeholder text to use.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ColorNoAlpha">
            <summary>
            <para>Hints that a color property should be edited without changing its alpha component, i.e. only R, G and B channels are edited.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossy">
            <summary>
            <para>Hints that an image is compressed using lossy compression.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossless">
            <summary>
            <para>Hints that an image is compressed using lossless compression.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.TypeString">
            <summary>
            <para>Hint that a property represents a particular type. If a property is , allows to set a type from the create dialog. If you need to create an <see cref="T:Godot.Collections.Array"/> to contain elements of a specific type, the <c>hint_string</c> must encode nested types using <c>":"</c> and <c>"/"</c> for specifying <see cref="T:Godot.Resource"/> types. For instance:</para>
            <para><code>
            hint_string = "%s:" % [TYPE_INT] # Array of inteters.
            hint_string = "%s:%s:" % [TYPE_ARRAY, TYPE_REAL] # Two-dimensional array of floats.
            hint_string = "%s/%s:Resource" % [TYPE_OBJECT, TYPE_OBJECT] # Array of resources.
            hint_string = "%s:%s/%s:Resource" % [TYPE_ARRAY, TYPE_OBJECT, TYPE_OBJECT] # Two-dimensional array of resources.
            </code></para>
            <para>Note: the final colon is required to specify for properly detecting built-in types.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Storage">
            <summary>
            <para>The property is serialized and saved in the scene file (default).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Editor">
            <summary>
            <para>The property is shown in the editor inspector (default).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Network">
            <summary>
            <para>Deprecated usage flag, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.EditorHelper">
            <summary>
            <para>Deprecated usage flag, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checkable">
            <summary>
            <para>The property can be checked in the editor inspector.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checked">
            <summary>
            <para>The property is checked in the editor inspector.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Internationalized">
            <summary>
            <para>The property is a translatable string.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Group">
            <summary>
            <para>Used to group properties together in the editor.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Category">
            <summary>
            <para>Used to categorize properties together in the editor.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Subgroup">
            <summary>
            <para>Used to group properties together in the editor in a subgroup (under a group).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.NoInstanceState">
            <summary>
            <para>The property does not save its state in <see cref="T:Godot.PackedScene"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.RestartIfChanged">
            <summary>
            <para>Editing the property prompts the user for restarting the editor.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.ScriptVariable">
            <summary>
            <para>The property is a script variable which should be serialized and saved in the scene file.</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Default">
            <summary>
            <para>Default usage (storage, editor and network).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.DefaultIntl">
            <summary>
            <para>Default usage for translatable strings (storage, editor, network and internationalized).</para>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Noeditor">
            <summary>
            <para>Default usage but without showing the property in the editor (storage, network).</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Normal">
            <summary>
            <para>Flag for a normal method.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Editor">
            <summary>
            <para>Flag for an editor method.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Noscript">
            <summary>
            <para>Deprecated method flag, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Const">
            <summary>
            <para>Flag for a constant method.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Reverse">
            <summary>
            <para>Deprecated method flag, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Virtual">
            <summary>
            <para>Flag for a virtual method.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.FromScript">
            <summary>
            <para>Deprecated method flag, unused.</para>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Default">
            <summary>
            <para>Default method flags.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Nil">
            <summary>
            <para>Variable is <c>null</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Bool">
            <summary>
            <para>Variable is of type <see cref="T:System.Boolean"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Int">
            <summary>
            <para>Variable is of type <see cref="T:System.Int32"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Float">
            <summary>
            <para>Variable is of type <see cref="T:System.Single"/> (real).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.String">
            <summary>
            <para>Variable is of type <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2i">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector2i"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rect2">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rect2i">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Rect2i"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector3"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3i">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector3i"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform2d">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Plane">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Plane"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Quat">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Quat"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Aabb">
            <summary>
            <para>Variable is of type <see cref="T:Godot.AABB"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Basis">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Basis"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Color">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.StringName">
            <summary>
            <para>Variable is of type <see cref="T:Godot.StringName"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.NodePath">
            <summary>
            <para>Variable is of type <see cref="T:Godot.NodePath"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rid">
            <summary>
            <para>Variable is of type <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Object">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Callable">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Callable"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Signal">
            <summary>
            <para>Variable is of type <see cref="T:Godot.SignalInfo"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Dictionary">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Collections.Dictionary"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Collections.Array"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.RawArray">
            <summary>
            <para>Variable is of type <see cref="T:byte[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Int32Array">
            <summary>
            <para>Variable is of type <see cref="T:int[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Int64Array">
            <summary>
            <para>Variable is of type <see cref="T:long[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Float32Array">
            <summary>
            <para>Variable is of type <see cref="T:float[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Float64Array">
            <summary>
            <para>Variable is of type <see cref="T:double[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.StringArray">
            <summary>
            <para>Variable is of type <see cref="T:string[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector2[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3Array">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Vector3[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.ColorArray">
            <summary>
            <para>Variable is of type <see cref="T:Godot.Color[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Variant.Type"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Equal">
            <summary>
            <para>Equality operator (<c>==</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.NotEqual">
            <summary>
            <para>Inequality operator (<c>!=</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Less">
            <summary>
            <para>Less than operator (<c>&lt;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.LessEqual">
            <summary>
            <para>Less than or equal operator (<c>&lt;=</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Greater">
            <summary>
            <para>Greater than operator (<c>&gt;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.GreaterEqual">
            <summary>
            <para>Greater than or equal operator (<c>&gt;=</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Add">
            <summary>
            <para>Addition operator (<c>+</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Subtract">
            <summary>
            <para>Subtraction operator (<c>-</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Multiply">
            <summary>
            <para>Multiplication operator (<c>*</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Divide">
            <summary>
            <para>Division operator (<c>/</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Negate">
            <summary>
            <para>Unary negation operator (<c>-</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Positive">
            <summary>
            <para>Unary plus operator (<c>+</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Module">
            <summary>
            <para>Remainder/modulo operator (<c>%</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftLeft">
            <summary>
            <para>Left shift operator (<c>&lt;&lt;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftRight">
            <summary>
            <para>Right shift operator (<c>&gt;&gt;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitAnd">
            <summary>
            <para>Bitwise AND operator (<c>&amp;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitOr">
            <summary>
            <para>Bitwise OR operator (<c>|</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitXor">
            <summary>
            <para>Bitwise XOR operator (<c>^</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitNegate">
            <summary>
            <para>Bitwise NOT operator (<c>~</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.And">
            <summary>
            <para>Logical AND operator (<c>and</c> or <c>&amp;&amp;</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Or">
            <summary>
            <para>Logical OR operator (<c>or</c> or <c>||</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Xor">
            <summary>
            <para>Logical XOR operator (not implemented in GDScript).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Not">
            <summary>
            <para>Logical NOT operator (<c>not</c> or <c>!</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.In">
            <summary>
            <para>Logical IN operator (<c>in</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Variant.Operator"/> enum.</para>
            </summary>
        </member>
        <member name="T:Godot.AESContext">
            <summary>
            <para>This class provides access to AES encryption/decryption of raw data. Both AES-ECB and AES-CBC mode are supported.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>extends Node</para>
            <para></para>
            <para>var aes = AESContext.new()</para>
            <para></para>
            <para>func _ready():</para>
            <para>    var key = "My secret key!!!" # Key must be either 16 or 32 bytes.</para>
            <para>    var data = "My secret text!!" # Data size must be multiple of 16 bytes, apply padding if needed.</para>
            <para>    # Encrypt ECB</para>
            <para>    aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8())</para>
            <para>    var encrypted = aes.update(data.to_utf8())</para>
            <para>    aes.finish()</para>
            <para>    # Decrypt ECB</para>
            <para>    aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8())</para>
            <para>    var decrypted = aes.update(encrypted)</para>
            <para>    aes.finish()</para>
            <para>    # Check ECB</para>
            <para>    assert(decrypted == data.to_utf8())</para>
            <para></para>
            <para>    var iv = "My secret iv!!!!" # IV must be of exactly 16 bytes.</para>
            <para>    # Encrypt CBC</para>
            <para>    aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8(), iv.to_utf8())</para>
            <para>    encrypted = aes.update(data.to_utf8())</para>
            <para>    aes.finish()</para>
            <para>    # Decrypt CBC</para>
            <para>    aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8(), iv.to_utf8())</para>
            <para>    decrypted = aes.update(encrypted)</para>
            <para>    aes.finish()</para>
            <para>    # Check CBC</para>
            <para>    assert(decrypted == data.to_utf8())</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para>using System.Diagnostics;</para>
            <para></para>
            <para>public class Example : Node</para>
            <para>{</para>
            <para>    public AESContext Aes = new AESContext();</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        string key = "My secret key!!!"; // Key must be either 16 or 32 bytes.</para>
            <para>        string data = "My secret text!!"; // Data size must be multiple of 16 bytes, apply padding if needed.</para>
            <para>        // Encrypt ECB</para>
            <para>        Aes.Start(AESContext.Mode.EcbEncrypt, key.ToUTF8());</para>
            <para>        byte[] encrypted = Aes.Update(data.ToUTF8());</para>
            <para>        Aes.Finish();</para>
            <para>        // Decrypt ECB</para>
            <para>        Aes.Start(AESContext.Mode.EcbDecrypt, key.ToUTF8());</para>
            <para>        byte[] decrypted = Aes.Update(encrypted);</para>
            <para>        Aes.Finish();</para>
            <para>        // Check ECB</para>
            <para>        Debug.Assert(decrypted == data.ToUTF8());</para>
            <para></para>
            <para>        string iv = "My secret iv!!!!"; // IV must be of exactly 16 bytes.</para>
            <para>        // Encrypt CBC</para>
            <para>        Aes.Start(AESContext.Mode.EcbEncrypt, key.ToUTF8(), iv.ToUTF8());</para>
            <para>        encrypted = Aes.Update(data.ToUTF8());</para>
            <para>        Aes.Finish();</para>
            <para>        // Decrypt CBC</para>
            <para>        Aes.Start(AESContext.Mode.EcbDecrypt, key.ToUTF8(), iv.ToUTF8());</para>
            <para>        decrypted = Aes.Update(encrypted);</para>
            <para>        Aes.Finish();</para>
            <para>        // Check CBC</para>
            <para>        Debug.Assert(decrypted == data.ToUTF8());</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="F:Godot.AESContext.Mode.EcbEncrypt">
            <summary>
            <para>AES electronic codebook encryption mode.</para>
            </summary>
        </member>
        <member name="F:Godot.AESContext.Mode.EcbDecrypt">
            <summary>
            <para>AES electronic codebook decryption mode.</para>
            </summary>
        </member>
        <member name="F:Godot.AESContext.Mode.CbcEncrypt">
            <summary>
            <para>AES cipher blocker chaining encryption mode.</para>
            </summary>
        </member>
        <member name="F:Godot.AESContext.Mode.CbcDecrypt">
            <summary>
            <para>AES cipher blocker chaining decryption mode.</para>
            </summary>
        </member>
        <member name="F:Godot.AESContext.Mode.Max">
            <summary>
            <para>Maximum value for the mode enum.</para>
            </summary>
        </member>
        <member name="M:Godot.AESContext.Start(Godot.AESContext.Mode,System.Byte[],System.Byte[])">
            <summary>
            <para>Start the AES context in the given <c>mode</c>. A <c>key</c> of either 16 or 32 bytes must always be provided, while an <c>iv</c> (initialization vector) of exactly 16 bytes, is only needed when <c>mode</c> is either  or .</para>
            </summary>
            <param name="iv">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.AESContext.Update(System.Byte[])">
            <summary>
            <para>Run the desired operation for this AES context. Will return a <see cref="T:byte[]"/> containing the result of encrypting (or decrypting) the given <c>src</c>. See <see cref="M:Godot.AESContext.Start(Godot.AESContext.Mode,System.Byte[],System.Byte[])"/> for mode of operation.</para>
            <para>Note: The size of <c>src</c> must be a multiple of 16. Apply some padding if needed.</para>
            </summary>
        </member>
        <member name="M:Godot.AESContext.GetIvState">
            <summary>
            <para>Get the current IV state for this context (IV gets updated when calling <see cref="M:Godot.AESContext.Update(System.Byte[])"/>). You normally don't need this function.</para>
            <para>Note: This function only makes sense when the context is started with  or .</para>
            </summary>
        </member>
        <member name="M:Godot.AESContext.Finish">
            <summary>
            <para>Close this AES context so it can be started again. See <see cref="M:Godot.AESContext.Start(Godot.AESContext.Mode,System.Byte[],System.Byte[])"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AStar">
            <summary>
            <para>A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting short paths among vertices (points), passing through a given set of edges (segments). It enjoys widespread use due to its performance and accuracy. Godot's A* implementation uses points in three-dimensional space and Euclidean distances by default.</para>
            <para>You must add points manually with <see cref="M:Godot.AStar.AddPoint(System.Int32,Godot.Vector3,System.Single)"/> and create segments manually with <see cref="M:Godot.AStar.ConnectPoints(System.Int32,System.Int32,System.Boolean)"/>. Then you can test if there is a path between two points with the <see cref="M:Godot.AStar.ArePointsConnected(System.Int32,System.Int32,System.Boolean)"/> function, get a path containing indices by <see cref="M:Godot.AStar.GetIdPath(System.Int32,System.Int32)"/>, or one containing actual coordinates with <see cref="M:Godot.AStar.GetPointPath(System.Int32,System.Int32)"/>.</para>
            <para>It is also possible to use non-Euclidean distances. To do so, create a class that extends <c>AStar</c> and override methods <see cref="M:Godot.AStar._ComputeCost(System.Int32,System.Int32)"/> and <see cref="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)"/>. Both take two indices and return a length, as is shown in the following example.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>class MyAStar:</para>
            <para>    extends AStar</para>
            <para></para>
            <para>    func _compute_cost(u, v):</para>
            <para>        return abs(u - v)</para>
            <para></para>
            <para>    func _estimate_cost(u, v):</para>
            <para>        return min(0, abs(u - v) - 1)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public class MyAStar : AStar</para>
            <para>{</para>
            <para>    public override float _ComputeCost(int u, int v)</para>
            <para>    {</para>
            <para>        return Mathf.Abs(u - v);</para>
            <para>    }</para>
            <para>    public override float _EstimateCost(int u, int v)</para>
            <para>    {</para>
            <para>        return Mathf.Min(0, Mathf.Abs(u - v) - 1);</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para><see cref="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)"/> should return a lower bound of the distance, i.e. <c>_estimate_cost(u, v) &lt;= _compute_cost(u, v)</c>. This serves as a hint to the algorithm because the custom <c>_compute_cost</c> might be computation-heavy. If this is not the case, make <see cref="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)"/> return the same value as <see cref="M:Godot.AStar._ComputeCost(System.Int32,System.Int32)"/> to provide the algorithm with the most accurate information.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar._ComputeCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when computing the cost between two connected points.</para>
            <para>Note that this function is hidden in the default <c>AStar</c> class.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when estimating the cost between a point and the path's ending point.</para>
            <para>Note that this function is hidden in the default <c>AStar</c> class.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetAvailablePointId">
            <summary>
            <para>Returns the next available point ID with no point associated to it.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.AddPoint(System.Int32,Godot.Vector3,System.Single)">
            <summary>
            <para>Adds a new point at the given position with the given identifier. The algorithm prefers points with lower <c>weight_scale</c> to form a path. The <c>id</c> must be 0 or larger, and the <c>weight_scale</c> must be 1 or larger.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar.new()</para>
            <para>astar.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar();</para>
            <para>astar.AddPoint(1, new Vector3(1, 0, 0), 4); // Adds the point (1, 0, 0) with weight_scale 4 and id 1</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If there already exists a point for the given <c>id</c>, its position and weight scale are updated to the given values.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the point associated with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the <c>position</c> for the point with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointWeightScale(System.Int32)">
            <summary>
            <para>Returns the weight scale of the point associated with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointWeightScale(System.Int32,System.Single)">
            <summary>
            <para>Sets the <c>weight_scale</c> for the point with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point associated with the given <c>id</c> from the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.HasPoint(System.Int32)">
            <summary>
            <para>Returns whether a point associated with the given <c>id</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointConnections(System.Int32)">
            <summary>
            <para>Returns an array with the IDs of the points that form the connection with the given point.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar.new()</para>
            <para>astar.add_point(1, Vector3(0, 0, 0))</para>
            <para>astar.add_point(2, Vector3(0, 1, 0))</para>
            <para>astar.add_point(3, Vector3(1, 1, 0))</para>
            <para>astar.add_point(4, Vector3(2, 0, 0))</para>
            <para></para>
            <para>astar.connect_points(1, 2, true)</para>
            <para>astar.connect_points(1, 3, true)</para>
            <para></para>
            <para>var neighbors = astar.get_point_connections(1) # Returns [2, 3]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar();</para>
            <para>astar.AddPoint(1, new Vector3(0, 0, 0));</para>
            <para>astar.AddPoint(2, new Vector3(0, 1, 0));</para>
            <para>astar.AddPoint(3, new Vector3(1, 1, 0));</para>
            <para>astar.AddPoint(4, new Vector3(2, 0, 0));</para>
            <para>astar.ConnectPoints(1, 2, true);</para>
            <para>astar.ConnectPoints(1, 3, true);</para>
            <para></para>
            <para>int[] neighbors = astar.GetPointConnections(1); // Returns [2, 3]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPoints">
            <summary>
            <para>Returns an array of all points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.IsPointDisabled(System.Int32)">
            <summary>
            <para>Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.ConnectPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Creates a segment between the given points. If <c>bidirectional</c> is <c>false</c>, only movement from <c>id</c> to <c>to_id</c> is allowed, not the reverse direction.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar.new()</para>
            <para>astar.add_point(1, Vector3(1, 1, 0))</para>
            <para>astar.add_point(2, Vector3(0, 5, 0))</para>
            <para>astar.connect_points(1, 2, false)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar();</para>
            <para>astar.AddPoint(1, new Vector3(1, 1, 0));</para>
            <para>astar.AddPoint(2, new Vector3(0, 5, 0));</para>
            <para>astar.ConnectPoints(1, 2, false);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.DisconnectPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Deletes the segment between the given points. If <c>bidirectional</c> is <c>false</c>, only movement from <c>id</c> to <c>to_id</c> is prevented, and a unidirectional segment possibly remains.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.ArePointsConnected(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Returns whether the two given points are directly connected by a segment. If <c>bidirectional</c> is <c>false</c>, returns whether movement from <c>id</c> to <c>to_id</c> is possible through this segment.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointCount">
            <summary>
            <para>Returns the number of points currently in the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointCapacity">
            <summary>
            <para>Returns the capacity of the structure backing the points, useful in conjunction with <c>reserve_space</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.ReserveSpace(System.Int32)">
            <summary>
            <para>Reserves space internally for <c>num_nodes</c> points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.Clear">
            <summary>
            <para>Clears all the points and segments.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPoint(Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the ID of the closest point to <c>to_position</c>, optionally taking disabled points into account. Returns <c>-1</c> if there are no points in the points pool.</para>
            <para>Note: If several points are the closest to <c>to_position</c>, the one with the smallest ID will be returned, ensuring a deterministic result.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPositionInSegment(Godot.Vector3)">
            <summary>
            <para>Returns the closest position to <c>to_position</c> that resides inside a segment between two connected points.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar.new()</para>
            <para>astar.add_point(1, Vector3(0, 0, 0))</para>
            <para>astar.add_point(2, Vector3(0, 5, 0))</para>
            <para>astar.connect_points(1, 2)</para>
            <para>var res = astar.get_closest_position_in_segment(Vector3(3, 3, 0)) # Returns (0, 3, 0)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar();</para>
            <para>astar.AddPoint(1, new Vector3(0, 0, 0));</para>
            <para>astar.AddPoint(2, new Vector3(0, 5, 0));</para>
            <para>astar.ConnectPoints(1, 2);</para>
            <para>Vector3 res = astar.GetClosestPositionInSegment(new Vector3(3, 3, 0)); // Returns (0, 3, 0)</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The result is in the segment that goes from <c>y = 0</c> to <c>y = 5</c>. It's the closest position in the segment to the given point.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar.GetIdPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the IDs of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar.new()</para>
            <para>astar.add_point(1, Vector3(0, 0, 0))</para>
            <para>astar.add_point(2, Vector3(0, 1, 0), 1) # Default weight is 1</para>
            <para>astar.add_point(3, Vector3(1, 1, 0))</para>
            <para>astar.add_point(4, Vector3(2, 0, 0))</para>
            <para></para>
            <para>astar.connect_points(1, 2, false)</para>
            <para>astar.connect_points(2, 3, false)</para>
            <para>astar.connect_points(4, 3, false)</para>
            <para>astar.connect_points(1, 4, false)</para>
            <para></para>
            <para>var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar();</para>
            <para>astar.AddPoint(1, new Vector3(0, 0, 0));</para>
            <para>astar.AddPoint(2, new Vector3(0, 1, 0), 1); // Default weight is 1</para>
            <para>astar.AddPoint(3, new Vector3(1, 1, 0));</para>
            <para>astar.AddPoint(4, new Vector3(2, 0, 0));</para>
            <para>astar.ConnectPoints(1, 2, false);</para>
            <para>astar.ConnectPoints(2, 3, false);</para>
            <para>astar.ConnectPoints(4, 3, false);</para>
            <para>astar.ConnectPoints(1, 4, false);</para>
            <para>int[] res = astar.GetIdPath(1, 3); // Returns [1, 2, 3]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If you change the 2nd point's weight to 3, then the result will be <c>[1, 4, 3]</c> instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.</para>
            </summary>
        </member>
        <member name="T:Godot.AStar2D">
            <summary>
            <para>This is a wrapper for the <see cref="T:Godot.AStar"/> class which uses 2D vectors instead of 3D vectors.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D._ComputeCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when computing the cost between two connected points.</para>
            <para>Note that this function is hidden in the default <c>AStar2D</c> class.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D._EstimateCost(System.Int32,System.Int32)">
            <summary>
            <para>Called when estimating the cost between a point and the path's ending point.</para>
            <para>Note that this function is hidden in the default <c>AStar2D</c> class.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetAvailablePointId">
            <summary>
            <para>Returns the next available point ID with no point associated to it.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.AddPoint(System.Int32,Godot.Vector2,System.Single)">
            <summary>
            <para>Adds a new point at the given position with the given identifier. The algorithm prefers points with lower <c>weight_scale</c> to form a path. The <c>id</c> must be 0 or larger, and the <c>weight_scale</c> must be 1 or larger.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar2D.new()</para>
            <para>astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar2D();</para>
            <para>astar.AddPoint(1, new Vector2(1, 0), 4); // Adds the point (1, 0) with weight_scale 4 and id 1</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If there already exists a point for the given <c>id</c>, its position and weight scale are updated to the given values.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the point associated with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the <c>position</c> for the point with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointWeightScale(System.Int32)">
            <summary>
            <para>Returns the weight scale of the point associated with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.SetPointWeightScale(System.Int32,System.Single)">
            <summary>
            <para>Sets the <c>weight_scale</c> for the point with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point associated with the given <c>id</c> from the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.HasPoint(System.Int32)">
            <summary>
            <para>Returns whether a point associated with the given <c>id</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointConnections(System.Int32)">
            <summary>
            <para>Returns an array with the IDs of the points that form the connection with the given point.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar2D.new()</para>
            <para>astar.add_point(1, Vector2(0, 0))</para>
            <para>astar.add_point(2, Vector2(0, 1))</para>
            <para>astar.add_point(3, Vector2(1, 1))</para>
            <para>astar.add_point(4, Vector2(2, 0))</para>
            <para></para>
            <para>astar.connect_points(1, 2, true)</para>
            <para>astar.connect_points(1, 3, true)</para>
            <para></para>
            <para>var neighbors = astar.get_point_connections(1) # Returns [2, 3]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar2D();</para>
            <para>astar.AddPoint(1, new Vector2(0, 0));</para>
            <para>astar.AddPoint(2, new Vector2(0, 1));</para>
            <para>astar.AddPoint(3, new Vector2(1, 1));</para>
            <para>astar.AddPoint(4, new Vector2(2, 0));</para>
            <para></para>
            <para>astar.ConnectPoints(1, 2, true);</para>
            <para>astar.ConnectPoints(1, 3, true);</para>
            <para></para>
            <para>int[] neighbors = astar.GetPointConnections(1); // Returns [2, 3]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPoints">
            <summary>
            <para>Returns an array of all points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.SetPointDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.IsPointDisabled(System.Int32)">
            <summary>
            <para>Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.ConnectPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Creates a segment between the given points. If <c>bidirectional</c> is <c>false</c>, only movement from <c>id</c> to <c>to_id</c> is allowed, not the reverse direction.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar2D.new()</para>
            <para>astar.add_point(1, Vector2(1, 1))</para>
            <para>astar.add_point(2, Vector2(0, 5))</para>
            <para>astar.connect_points(1, 2, false)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar2D();</para>
            <para>astar.AddPoint(1, new Vector2(1, 1));</para>
            <para>astar.AddPoint(2, new Vector2(0, 5));</para>
            <para>astar.ConnectPoints(1, 2, false);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.DisconnectPoints(System.Int32,System.Int32)">
            <summary>
            <para>Deletes the segment between the given points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.ArePointsConnected(System.Int32,System.Int32)">
            <summary>
            <para>Returns whether there is a connection/segment between the given points.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointCount">
            <summary>
            <para>Returns the number of points currently in the points pool.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointCapacity">
            <summary>
            <para>Returns the capacity of the structure backing the points, useful in conjunction with <c>reserve_space</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.ReserveSpace(System.Int32)">
            <summary>
            <para>Reserves space internally for <c>num_nodes</c> points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.Clear">
            <summary>
            <para>Clears all the points and segments.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetClosestPoint(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the ID of the closest point to <c>to_position</c>, optionally taking disabled points into account. Returns <c>-1</c> if there are no points in the points pool.</para>
            <para>Note: If several points are the closest to <c>to_position</c>, the one with the smallest ID will be returned, ensuring a deterministic result.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetClosestPositionInSegment(Godot.Vector2)">
            <summary>
            <para>Returns the closest position to <c>to_position</c> that resides inside a segment between two connected points.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar2D.new()</para>
            <para>astar.add_point(1, Vector2(0, 0))</para>
            <para>astar.add_point(2, Vector2(0, 5))</para>
            <para>astar.connect_points(1, 2)</para>
            <para>var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar2D();</para>
            <para>astar.AddPoint(1, new Vector2(0, 0));</para>
            <para>astar.AddPoint(2, new Vector2(0, 5));</para>
            <para>astar.ConnectPoints(1, 2);</para>
            <para>Vector2 res = astar.GetClosestPositionInSegment(new Vector2(3, 3)); // Returns (0, 3)</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The result is in the segment that goes from <c>y = 0</c> to <c>y = 5</c>. It's the closest position in the segment to the given point.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetPointPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            </summary>
        </member>
        <member name="M:Godot.AStar2D.GetIdPath(System.Int32,System.Int32)">
            <summary>
            <para>Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var astar = AStar2D.new()</para>
            <para>astar.add_point(1, Vector2(0, 0))</para>
            <para>astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1</para>
            <para>astar.add_point(3, Vector2(1, 1))</para>
            <para>astar.add_point(4, Vector2(2, 0))</para>
            <para></para>
            <para>astar.connect_points(1, 2, false)</para>
            <para>astar.connect_points(2, 3, false)</para>
            <para>astar.connect_points(4, 3, false)</para>
            <para>astar.connect_points(1, 4, false)</para>
            <para></para>
            <para>var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var astar = new AStar2D();</para>
            <para>astar.AddPoint(1, new Vector2(0, 0));</para>
            <para>astar.AddPoint(2, new Vector2(0, 1), 1); // Default weight is 1</para>
            <para>astar.AddPoint(3, new Vector2(1, 1));</para>
            <para>astar.AddPoint(4, new Vector2(2, 0));</para>
            <para></para>
            <para>astar.ConnectPoints(1, 2, false);</para>
            <para>astar.ConnectPoints(2, 3, false);</para>
            <para>astar.ConnectPoints(4, 3, false);</para>
            <para>astar.ConnectPoints(1, 4, false);</para>
            <para>int[] res = astar.GetIdPath(1, 3); // Returns [1, 2, 3]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If you change the 2nd point's weight to 3, then the result will be <c>[1, 4, 3]</c> instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.</para>
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog">
            <summary>
            <para>This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.</para>
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogText">
            <summary>
            <para>The text displayed by the dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogHideOnOk">
            <summary>
            <para>If <c>true</c>, the dialog is hidden when the OK button is pressed. You can set it to <c>false</c> if you want to do e.g. input validation when receiving the <c>confirmed</c> signal, and handle hiding the dialog in your own logic.</para>
            <para>Note: Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example <see cref="T:Godot.FileDialog"/> defaults to <c>false</c>, and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such, this property can't be used in <see cref="T:Godot.FileDialog"/> to disable hiding the dialog when pressing OK.</para>
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogAutowrap">
            <summary>
            <para>Sets autowrapping for the text in the dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetOkButton">
            <summary>
            <para>Returns the OK <see cref="T:Godot.Button"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetLabel">
            <summary>
            <para>Returns the label used for built-in text.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddButton(System.String,System.Boolean,System.String)">
            <summary>
            <para>Adds a button with label <c>text</c> and a custom <c>action</c> to the dialog and returns the created button. <c>action</c> will be passed to the <c>custom_action</c> signal when pressed.</para>
            <para>If <c>true</c>, <c>right</c> will place the button to the right of any sibling buttons.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddCancelButton(System.String)">
            <summary>
            <para>Adds a button with label <c>name</c> and a cancel action to the dialog and returns the created button.</para>
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.RegisterTextEnter(Godot.Node)">
            <summary>
            <para>Registers a <see cref="T:Godot.LineEdit"/> in the dialog. When the enter key is pressed, the dialog will be accepted.</para>
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog.CancelledHandler">
            <summary>
            <para>Emitted when the dialog is closed or the button created with <see cref="M:Godot.AcceptDialog.AddCancelButton(System.String)"/> is pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog.ConfirmedHandler">
            <summary>
            <para>Emitted when the dialog is accepted, i.e. the OK button is pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog.CustomActionHandler">
            <summary>
            <para>Emitted when a custom button is pressed. See <see cref="M:Godot.AcceptDialog.AddButton(System.String,System.Boolean,System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite2D">
            <summary>
            <para>Animations are created using a <see cref="T:Godot.SpriteFrames"/> resource, which can be configured in the editor via the SpriteFrames panel.</para>
            <para>Note: You can associate a set of normal or specular maps by creating additional <see cref="T:Godot.SpriteFrames"/> resources with a <c>_normal</c> or <c>_specular</c> suffix. For example, having 3 <see cref="T:Godot.SpriteFrames"/> resources <c>run</c>, <c>run_normal</c>, and <c>run_specular</c> will make it so the <c>run</c> animation uses normal and specular maps.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Frames">
            <summary>
            <para>The <see cref="T:Godot.SpriteFrames"/> resource containing the animation(s).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Animation">
            <summary>
            <para>The current animation from the <c>frames</c> resource. If this value changes, the <c>frame</c> counter is reset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Frame">
            <summary>
            <para>The displayed animation frame's index.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.SpeedScale">
            <summary>
            <para>The animation speed is multiplied by this value.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Playing">
            <summary>
            <para>If <c>true</c>, the <see cref="P:Godot.AnimatedSprite2D.Animation"/> is currently playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Centered">
            <summary>
            <para>If <c>true</c>, texture will be centered.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite2D.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite2D.Play(Godot.StringName,System.Boolean)">
            <summary>
            <para>Plays the animation named <c>anim</c>. If no <c>anim</c> is provided, the current animation is played. If <c>backwards</c> is <c>true</c>, the animation will be played in reverse.</para>
            </summary>
            <param name="anim">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.AnimatedSprite2D.Stop">
            <summary>
            <para>Stops the current animation (does not reset the frame counter).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite2D.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if an animation is currently being played.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite2D.FrameChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.AnimatedSprite2D.Frame"/> changed.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite2D.AnimationFinishedHandler">
            <summary>
            <para>Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite3D">
            <summary>
            <para>Animations are created using a <see cref="T:Godot.SpriteFrames"/> resource, which can be configured in the editor via the SpriteFrames panel.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frames">
            <summary>
            <para>The <see cref="T:Godot.SpriteFrames"/> resource containing the animation(s).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Animation">
            <summary>
            <para>The current animation from the <c>frames</c> resource. If this value changes, the <c>frame</c> counter is reset.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frame">
            <summary>
            <para>The displayed animation frame's index.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Playing">
            <summary>
            <para>If <c>true</c>, the <see cref="P:Godot.AnimatedSprite3D.Animation"/> is currently playing.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Play(Godot.StringName)">
            <summary>
            <para>Plays the animation named <c>anim</c>. If no <c>anim</c> is provided, the current animation is played.</para>
            </summary>
            <param name="anim">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Stop">
            <summary>
            <para>Stops the current animation (does not reset the frame counter).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if an animation is currently being played.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite3D.FrameChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.AnimatedSprite3D.Frame"/> changed.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimatedTexture">
            <summary>
            <para><see cref="T:Godot.AnimatedTexture"/> is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike <see cref="T:Godot.AnimationPlayer"/> or <see cref="T:Godot.AnimatedSprite2D"/>, it isn't a <see cref="T:Godot.Node"/>, but has the advantage of being usable anywhere a <see cref="T:Godot.Texture2D"/> resource can be used, e.g. in a <see cref="T:Godot.TileSet"/>.</para>
            <para>The playback of the animation is controlled by the <see cref="P:Godot.AnimatedTexture.Fps"/> property as well as each frame's optional delay (see <see cref="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)"/>). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame.</para>
            <para><see cref="T:Godot.AnimatedTexture"/> currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one.</para>
            <para>Note: AnimatedTexture doesn't support using <see cref="T:Godot.AtlasTexture"/>s. Each frame needs to be a separate <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimatedTexture.MaxFrames">
            <summary>
            <para>The maximum number of frames supported by <see cref="T:Godot.AnimatedTexture"/>. If you need more frames in your animation, use <see cref="T:Godot.AnimationPlayer"/> or <see cref="T:Godot.AnimatedSprite2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Frames">
            <summary>
            <para>Number of frames to use in the animation. While you can create the frames independently with <see cref="M:Godot.AnimatedTexture.SetFrameTexture(System.Int32,Godot.Texture2D)"/>, you need to set this value for the animation to take new frames into account. The maximum number of frames is .</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.CurrentFrame">
            <summary>
            <para>Sets the currently visible frame of the texture.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Pause">
            <summary>
            <para>If <c>true</c>, the animation will pause where it currently is (i.e. at <see cref="P:Godot.AnimatedTexture.CurrentFrame"/>). The animation will continue from where it was paused when changing this property to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Oneshot">
            <summary>
            <para>If <c>true</c>, the animation will only play once and will not loop back to the first frame after reaching the end. Note that reaching the end will not set <see cref="P:Godot.AnimatedTexture.Pause"/> to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimatedTexture.Fps">
            <summary>
            <para>Animation speed in frames per second. This value defines the default time interval between two frames of the animation, and thus the overall duration of the animation loop based on the <see cref="P:Godot.AnimatedTexture.Frames"/> property. A value of 0 means no predefined number of frames per second, the animation will play according to each frame's frame delay (see <see cref="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)"/>).</para>
            <para>For example, an animation with 8 frames, no frame delay and a <c>fps</c> value of 2 will run for 4 seconds, with each frame lasting 0.5 seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.SetFrameTexture(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Assigns a <see cref="T:Godot.Texture2D"/> to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID <see cref="P:Godot.AnimatedTexture.Frames"/> - 1.</para>
            <para>You can define any number of textures up to , but keep in mind that only frames from 0 to <see cref="P:Godot.AnimatedTexture.Frames"/> - 1 will be part of the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.GetFrameTexture(System.Int32)">
            <summary>
            <para>Returns the given frame's <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.SetFrameDelay(System.Int32,System.Single)">
            <summary>
            <para>Sets an additional delay (in seconds) between this frame and the next one, that will be added to the time interval defined by <see cref="P:Godot.AnimatedTexture.Fps"/>. By default, frames have no delay defined. If a delay value is defined, the final time interval between this frame and the next will be <c>1.0 / fps + delay</c>.</para>
            <para>For example, for an animation with 3 frames, 2 FPS and a frame delay on the second frame of 1.2, the resulting playback will be:</para>
            <para><code>
            Frame 0: 0.5 s (1 / fps)
            Frame 1: 1.7 s (1 / fps + 1.2)
            Frame 2: 0.5 s (1 / fps)
            Total duration: 2.7 s
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.AnimatedTexture.GetFrameDelay(System.Int32)">
            <summary>
            <para>Returns the given frame's delay value.</para>
            </summary>
        </member>
        <member name="T:Godot.Animation">
            <summary>
            <para>An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># This creates an animation that makes the node "Enemy" move to the right by</para>
            <para># 100 pixels in 0.5 seconds.</para>
            <para>var animation = Animation.new()</para>
            <para>var track_index = animation.add_track(Animation.TYPE_VALUE)</para>
            <para>animation.track_set_path(track_index, "Enemy:position:x")</para>
            <para>animation.track_insert_key(track_index, 0.0, 0)</para>
            <para>animation.track_insert_key(track_index, 0.5, 100)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// This creates an animation that makes the node "Enemy" move to the right by</para>
            <para>// 100 pixels in 0.5 seconds.</para>
            <para>var animation = new Animation();</para>
            <para>int trackIndex = animation.AddTrack(Animation.TrackType.Value);</para>
            <para>animation.TrackSetPath(trackIndex, "Enemy:position:x");</para>
            <para>animation.TrackInsertKey(trackIndex, 0.0f, 0);</para>
            <para>animation.TrackInsertKey(trackIndex, 0.5f, 100);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Animations are just data containers, and must be added to nodes such as an <see cref="T:Godot.AnimationPlayer"/> to be played back. Animation tracks have different types, each with its own set of dedicated methods. Check <see cref="T:Godot.Animation.TrackType"/> to see available types.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Value">
            <summary>
            <para>Value tracks set values in node properties, but only those which can be Interpolated.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Transform">
            <summary>
            <para>Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are interpolated.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Method">
            <summary>
            <para>Method tracks call functions with given arguments per key.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Bezier">
            <summary>
            <para>Bezier tracks are used to interpolate a value using custom curves. They can also be used to animate sub-properties of vectors and colors (e.g. alpha value of a <see cref="T:Godot.Color"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Audio">
            <summary>
            <para>Audio tracks are used to play an audio stream with either type of <see cref="T:Godot.AudioStreamPlayer"/>. The stream can be trimmed and previewed in the animation.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.TrackType.Animation">
            <summary>
            <para>Animation tracks play animations in other <see cref="T:Godot.AnimationPlayer"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Continuous">
            <summary>
            <para>Update between keyframes.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Discrete">
            <summary>
            <para>Update at the keyframes and hold the value.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Trigger">
            <summary>
            <para>Update at the keyframes.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.UpdateMode.Capture">
            <summary>
            <para>Same as linear interpolation, but also interpolates from the current value (i.e. dynamically at runtime) if the first key isn't at 0 seconds.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Nearest">
            <summary>
            <para>No interpolation (nearest value).</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Linear">
            <summary>
            <para>Linear interpolation.</para>
            </summary>
        </member>
        <member name="F:Godot.Animation.InterpolationType.Cubic">
            <summary>
            <para>Cubic interpolation.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Length">
            <summary>
            <para>The total length of the animation (in seconds).</para>
            <para>Note: Length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Loop">
            <summary>
            <para>A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.</para>
            </summary>
        </member>
        <member name="P:Godot.Animation.Step">
            <summary>
            <para>The animation step value.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AddTrack(Godot.Animation.TrackType,System.Int32)">
            <summary>
            <para>Adds a track to the Animation.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.RemoveTrack(System.Int32)">
            <summary>
            <para>Removes a track by specifying the track index.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.GetTrackCount">
            <summary>
            <para>Returns the amount of tracks in the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetType(System.Int32)">
            <summary>
            <para>Gets the type of a track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetPath(System.Int32)">
            <summary>
            <para>Gets the path of a track. For more information on the path format, see <see cref="M:Godot.Animation.TrackSetPath(System.Int32,Godot.NodePath)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetPath(System.Int32,Godot.NodePath)">
            <summary>
            <para>Sets the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by <c>":"</c>.</para>
            <para>For example, <c>"character/skeleton:ankle"</c> or <c>"character/mesh:transform/local"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.FindTrack(Godot.NodePath)">
            <summary>
            <para>Returns the index of the specified track. If the track is not found, return -1.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveUp(System.Int32)">
            <summary>
            <para>Moves a track up.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveDown(System.Int32)">
            <summary>
            <para>Moves a track down.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveTo(System.Int32,System.Int32)">
            <summary>
            <para>Changes the index position of track <c>idx</c> to the one defined in <c>to_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSwap(System.Int32,System.Int32)">
            <summary>
            <para>Swaps the track <c>idx</c>'s index position with the track <c>with_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetImported(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the given track as imported or not.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsImported(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given track is imported. Else, return <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>Enables/disables the given track. Tracks are enabled by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsEnabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the track at index <c>idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInsertKey(System.Int32,System.Single,Godot.Vector3,Godot.Quat,Godot.Vector3)">
            <summary>
            <para>Insert a transform key for a transform track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackInsertKey(System.Int32,System.Single,System.Object,System.Single)">
            <summary>
            <para>Insert a generic key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKey(System.Int32,System.Int32)">
            <summary>
            <para>Removes a key by index in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKeyAtTime(System.Int32,System.Single)">
            <summary>
            <para>Removes a key at <c>time</c> in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyValue(System.Int32,System.Int32,System.Object)">
            <summary>
            <para>Sets the value of an existing key.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyTransition(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Sets the transition curve (easing) for a specific key (see the built-in math function <c>@GDScript.ease</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyTime(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Sets the time of an existing key.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTransition(System.Int32,System.Int32)">
            <summary>
            <para>Returns the transition curve (easing) for a specific key (see the built-in math function <c>@GDScript.ease</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyCount(System.Int32)">
            <summary>
            <para>Returns the amount of keys in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyValue(System.Int32,System.Int32)">
            <summary>
            <para>Returns the value of a given key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTime(System.Int32,System.Int32)">
            <summary>
            <para>Returns the time at which the key is located.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackFindKey(System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Finds the key index by time in a given track. Optionally, only find it if the exact time is given.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationType(System.Int32,Godot.Animation.InterpolationType)">
            <summary>
            <para>Sets the interpolation type of a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationType(System.Int32)">
            <summary>
            <para>Returns the interpolation type of a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationLoopWrap(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the track at <c>idx</c> wraps the interpolation loop.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationLoopWrap(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the track at <c>idx</c> wraps the interpolation loop. New tracks wrap the interpolation loop by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInterpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position (<see cref="T:Godot.Vector3"/>), rotation (<see cref="T:Godot.Quat"/>) and scale (<see cref="T:Godot.Vector3"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackSetUpdateMode(System.Int32,Godot.Animation.UpdateMode)">
            <summary>
            <para>Sets the update mode (see <see cref="T:Godot.Animation.UpdateMode"/>) of a value track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetUpdateMode(System.Int32)">
            <summary>
            <para>Returns the update mode of a value track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Returns all the key indices of a value track, given a position and delta time.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackInterpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the interpolated value at the given time (in seconds). The <c>track_idx</c> must be the index of a value track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Returns all the key indices of a method track, given a position and delta time.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetName(System.Int32,System.Int32)">
            <summary>
            <para>Returns the method name of a method track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetParams(System.Int32,System.Int32)">
            <summary>
            <para>Returns the arguments values to be called on a method track for a given key in a given track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackInsertKey(System.Int32,System.Single,System.Single,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            <para>Inserts a Bezier Track key at the given <c>time</c> in seconds. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            <para><c>in_handle</c> is the left-side weight of the added Bezier curve point, <c>out_handle</c> is the right-side one, while <c>value</c> is the actual value at this point.</para>
            </summary>
            <param name="inHandle">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="outHandle">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyValue(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Sets the value of the key identified by <c>key_idx</c> to the given value. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyInHandle(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the in handle of the key identified by <c>key_idx</c> to value <c>in_handle</c>. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackSetKeyOutHandle(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the out handle of the key identified by <c>key_idx</c> to value <c>out_handle</c>. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyValue(System.Int32,System.Int32)">
            <summary>
            <para>Returns the value of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyInHandle(System.Int32,System.Int32)">
            <summary>
            <para>Returns the in handle of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackGetKeyOutHandle(System.Int32,System.Int32)">
            <summary>
            <para>Returns the out handle of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.BezierTrackInterpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the interpolated value at the given <c>time</c> (in seconds). The <c>track_idx</c> must be the index of a Bezier Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackInsertKey(System.Int32,System.Single,Godot.Resource,System.Single,System.Single)">
            <summary>
            <para>Inserts an Audio Track key at the given <c>time</c> in seconds. The <c>track_idx</c> must be the index of an Audio Track.</para>
            <para><c>stream</c> is the <see cref="T:Godot.AudioStream"/> resource to play. <c>start_offset</c> is the number of seconds cut off at the beginning of the audio stream, while <c>end_offset</c> is at the ending.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyStream(System.Int32,System.Int32,Godot.Resource)">
            <summary>
            <para>Sets the stream of the key identified by <c>key_idx</c> to value <c>offset</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyStartOffset(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Sets the start offset of the key identified by <c>key_idx</c> to value <c>offset</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackSetKeyEndOffset(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Sets the end offset of the key identified by <c>key_idx</c> to value <c>offset</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyStream(System.Int32,System.Int32)">
            <summary>
            <para>Returns the audio stream of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyStartOffset(System.Int32,System.Int32)">
            <summary>
            <para>Returns the start offset of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            <para>Start offset is the number of seconds cut off at the beginning of the audio stream.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AudioTrackGetKeyEndOffset(System.Int32,System.Int32)">
            <summary>
            <para>Returns the end offset of the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of an Audio Track.</para>
            <para>End offset is the number of seconds cut off at the ending of the audio stream.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackInsertKey(System.Int32,System.Single,Godot.StringName)">
            <summary>
            <para>Inserts a key with value <c>animation</c> at the given <c>time</c> (in seconds). The <c>track_idx</c> must be the index of an Animation Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackSetKeyAnimation(System.Int32,System.Int32,Godot.StringName)">
            <summary>
            <para>Sets the key identified by <c>key_idx</c> to value <c>animation</c>. The <c>track_idx</c> must be the index of an Animation Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.AnimationTrackGetKeyAnimation(System.Int32,System.Int32)">
            <summary>
            <para>Returns the animation name at the key identified by <c>key_idx</c>. The <c>track_idx</c> must be the index of an Animation Track.</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.Clear">
            <summary>
            <para>Clear the animation (clear all tracks and reset all).</para>
            </summary>
        </member>
        <member name="M:Godot.Animation.CopyTrack(System.Int32,Godot.Animation)">
            <summary>
            <para>Adds a new track that is a copy of the given track from <c>to_animation</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Animation.TracksChangedHandler">
            <summary>
            <para>Emitted when there's a change in the list of tracks, e.g. tracks are added, moved or have changed paths.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNode">
            <summary>
            <para>Base resource for <see cref="T:Godot.AnimationTree"/> nodes. In general, it's not used directly, but you can create custom ones with custom blending formulas.</para>
            <para>Inherit this when creating nodes mainly for use in <see cref="T:Godot.AnimationNodeBlendTree"/>, otherwise <see cref="T:Godot.AnimationRootNode"/> should be used instead.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Ignore">
            <summary>
            <para>Do not use filtering.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Pass">
            <summary>
            <para>Paths matching the filter will be allowed to pass.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Stop">
            <summary>
            <para>Paths matching the filter will be discarded.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNode.FilterAction.Blend">
            <summary>
            <para>Paths matching the filter will be blended (by the blend value).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNode.FilterEnabled">
            <summary>
            <para>If <c>true</c>, filtering is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetCaption">
            <summary>
            <para>Gets the text caption for this node (used by some editors).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetChildByName(System.String)">
            <summary>
            <para>Gets a child node by index (used by editors inheriting from <see cref="T:Godot.AnimationRootNode"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetChildNodes">
            <summary>
            <para>Gets all children nodes in order as a <c>name: node</c> dictionary. Only useful when inheriting <see cref="T:Godot.AnimationRootNode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameterDefaultValue(Godot.StringName)">
            <summary>
            <para>Gets the default value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameterList">
            <summary>
            <para>Gets the property information for parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. Format is similar to <see cref="M:Godot.Object.GetPropertyList"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.HasFilter">
            <summary>
            <para>Returns <c>true</c> whether you want the blend tree editor to display filter editing on this node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.Process(System.Single,System.Boolean)">
            <summary>
            <para>User-defined callback called when a custom node is processed. The <c>time</c> parameter is a relative delta, unless <c>seek</c> is <c>true</c>, in which case it is absolute.</para>
            <para>Here, call the <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, <see cref="M:Godot.AnimationNode.BlendNode(Godot.StringName,Godot.AnimationNode,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/> or <see cref="M:Godot.AnimationNode.BlendAnimation(Godot.StringName,System.Single,System.Single,System.Boolean,System.Single)"/> functions. You can also use <see cref="M:Godot.AnimationNode.GetParameter(Godot.StringName)"/> and <see cref="M:Godot.AnimationNode.SetParameter(Godot.StringName,System.Object)"/> to modify local memory.</para>
            <para>This function should return the time left for the current animation to finish (if unsure, pass the value from the main blend being called).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetInputCount">
            <summary>
            <para>Amount of inputs in this node, only useful for nodes that go into <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetInputName(System.Int32)">
            <summary>
            <para>Gets the name of an input by index.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.AddInput(System.String)">
            <summary>
            <para>Adds an input to the node. This is only useful for nodes created for use in an <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.RemoveInput(System.Int32)">
            <summary>
            <para>Removes an input, call this only when inactive.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.SetFilterPath(Godot.NodePath,System.Boolean)">
            <summary>
            <para>Adds or removes a path for the filter.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.IsPathFiltered(Godot.NodePath)">
            <summary>
            <para>Returns <c>true</c> whether a given path is filtered.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendAnimation(Godot.StringName,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            <para>Blend an animation by <c>blend</c> amount (name must be valid in the linked <see cref="T:Godot.AnimationPlayer"/>). A <c>time</c> and <c>delta</c> may be passed, as well as whether <c>seek</c> happened.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendNode(Godot.StringName,Godot.AnimationNode,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)">
            <summary>
            <para>Blend another animation node (in case this node contains children animation nodes). This function is only useful if you inherit from <see cref="T:Godot.AnimationRootNode"/> instead, else editors will not display your node for addition.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)">
            <summary>
            <para>Blend an input. This is only useful for nodes created for an <see cref="T:Godot.AnimationNodeBlendTree"/>. The <c>time</c> parameter is a relative delta, unless <c>seek</c> is <c>true</c>, in which case it is absolute. A filter mode may be optionally passed (see <see cref="T:Godot.AnimationNode.FilterAction"/> for options).</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.SetParameter(Godot.StringName,System.Object)">
            <summary>
            <para>Sets a custom parameter. These are used as local storage, because resources can be reused across the tree or scenes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNode.GetParameter(Godot.StringName)">
            <summary>
            <para>Gets the value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNode.RemovedFromGraphHandler">
            <summary>
            <para>Called when the node was removed from the graph.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNode.TreeChangedHandler">
            <summary>
            <para>Emitted by nodes that inherit from this class and that have an internal tree when one of their nodes changes. The nodes that emit this signal are <see cref="T:Godot.AnimationNodeBlendSpace1D"/>, <see cref="T:Godot.AnimationNodeBlendSpace2D"/>, <see cref="T:Godot.AnimationNodeStateMachine"/>, and <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeAdd2">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. Blends two animations additively based on an amount value in the <c>[0.0, 1.0]</c> range.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAdd2.Sync">
            <summary>
            <para>If <c>true</c>, sets the <c>optimization</c> to <c>false</c> when calling <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, forcing the blended animations to update every frame.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeAdd3">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. Blends two animations together additively out of three based on a value in the <c>[-1.0, 1.0]</c> range.</para>
            <para>This node has three inputs:</para>
            <para>- The base animation to add to</para>
            <para>- A -add animation to blend with when the blend amount is in the <c>[-1.0, 0.0]</c> range.</para>
            <para>- A +add animation to blend with when the blend amount is in the <c>[0.0, 1.0]</c> range</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAdd3.Sync">
            <summary>
            <para>If <c>true</c>, sets the <c>optimization</c> to <c>false</c> when calling <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, forcing the blended animations to update every frame.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeAnimation">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. Only features one output set using the <see cref="P:Godot.AnimationNodeAnimation.Animation"/> property. Use it as an input for <see cref="T:Godot.AnimationNode"/> that blend animations together.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeAnimation.Animation">
            <summary>
            <para>Animation to use as an output. It is one of the animations provided by <see cref="P:Godot.AnimationTree.AnimPlayer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlend2">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. Blends two animations linearly based on an amount value in the <c>[0.0, 1.0]</c> range.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlend2.Sync">
            <summary>
            <para>If <c>true</c>, sets the <c>optimization</c> to <c>false</c> when calling <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, forcing the blended animations to update every frame.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlend3">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. Blends two animations together linearly out of three based on a value in the <c>[-1.0, 1.0]</c> range.</para>
            <para>This node has three inputs:</para>
            <para>- The base animation</para>
            <para>- A -blend animation to blend with when the blend amount is in the <c>[-1.0, 0.0]</c> range.</para>
            <para>- A +blend animation to blend with when the blend amount is in the <c>[0.0, 1.0]</c> range</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlend3.Sync">
            <summary>
            <para>If <c>true</c>, sets the <c>optimization</c> to <c>false</c> when calling <see cref="M:Godot.AnimationNode.BlendInput(System.Int32,System.Single,System.Boolean,System.Single,Godot.AnimationNode.FilterAction,System.Boolean)"/>, forcing the blended animations to update every frame.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlendSpace1D">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            <para>This is a virtual axis on which you can add any type of <see cref="T:Godot.AnimationNode"/> using <see cref="M:Godot.AnimationNodeBlendSpace1D.AddBlendPoint(Godot.AnimationRootNode,System.Single,System.Int32)"/>.</para>
            <para>Outputs the linear blend of the two <see cref="T:Godot.AnimationNode"/>s closest to the node's current value.</para>
            <para>You can set the extents of the axis using the <see cref="P:Godot.AnimationNodeBlendSpace1D.MinSpace"/> and <see cref="P:Godot.AnimationNodeBlendSpace1D.MaxSpace"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.MinSpace">
            <summary>
            <para>The blend space's axis's lower limit for the points' position. See <see cref="M:Godot.AnimationNodeBlendSpace1D.AddBlendPoint(Godot.AnimationRootNode,System.Single,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.MaxSpace">
            <summary>
            <para>The blend space's axis's upper limit for the points' position. See <see cref="M:Godot.AnimationNodeBlendSpace1D.AddBlendPoint(Godot.AnimationRootNode,System.Single,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.Snap">
            <summary>
            <para>Position increment to snap to when moving a point on the axis.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace1D.ValueLabel">
            <summary>
            <para>Label of the virtual axis of the blend space.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.AddBlendPoint(Godot.AnimationRootNode,System.Single,System.Int32)">
            <summary>
            <para>Adds a new point that represents a <c>node</c> on the virtual axis at a given position set by <c>pos</c>. You can insert it at a specific index using the <c>at_index</c> argument. If you use the default value for <c>at_index</c>, the point is inserted at the end of the blend points array.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.SetBlendPointPosition(System.Int32,System.Single)">
            <summary>
            <para>Updates the position of the point at index <c>point</c> on the blend axis.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.SetBlendPointNode(System.Int32,Godot.AnimationRootNode)">
            <summary>
            <para>Changes the <see cref="T:Godot.AnimationNode"/> referenced by the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointNode(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.AnimationNode"/> referenced by the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.RemoveBlendPoint(System.Int32)">
            <summary>
            <para>Removes the point at index <c>point</c> from the blend axis.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace1D.GetBlendPointCount">
            <summary>
            <para>Returns the number of points on the blend axis.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlendSpace2D">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>.</para>
            <para>This node allows you to blend linearly between three animations using a <see cref="T:Godot.Vector2"/> weight.</para>
            <para>You can add vertices to the blend space with <see cref="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)"/> and automatically triangulate it by setting <see cref="P:Godot.AnimationNodeBlendSpace2D.AutoTriangles"/> to <c>true</c>. Otherwise, use <see cref="M:Godot.AnimationNodeBlendSpace2D.AddTriangle(System.Int32,System.Int32,System.Int32,System.Int32)"/> and <see cref="M:Godot.AnimationNodeBlendSpace2D.RemoveTriangle(System.Int32)"/> to create up the blend space by hand.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.Interpolated">
            <summary>
            <para>The interpolation between animations is linear.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.Discrete">
            <summary>
            <para>The blend space plays the animation of the node the blending position is closest to. Useful for frame-by-frame 2D animations.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendSpace2D.BlendModeEnum.DiscreteCarry">
            <summary>
            <para>Similar to , but starts the new animation at the last animation's playback position.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.AutoTriangles">
            <summary>
            <para>If <c>true</c>, the blend space is triangulated automatically. The mesh updates every time you add or remove points with <see cref="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)"/> and <see cref="M:Godot.AnimationNodeBlendSpace2D.RemoveBlendPoint(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.MinSpace">
            <summary>
            <para>The blend space's X and Y axes' lower limit for the points' position. See <see cref="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.MaxSpace">
            <summary>
            <para>The blend space's X and Y axes' upper limit for the points' position. See <see cref="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.Snap">
            <summary>
            <para>Position increment to snap to when moving a point.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.XLabel">
            <summary>
            <para>Name of the blend space's X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.YLabel">
            <summary>
            <para>Name of the blend space's Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendSpace2D.BlendMode">
            <summary>
            <para>Controls the interpolation between animations. See <see cref="T:Godot.AnimationNodeBlendSpace2D.BlendModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.AddBlendPoint(Godot.AnimationRootNode,Godot.Vector2,System.Int32)">
            <summary>
            <para>Adds a new point that represents a <c>node</c> at the position set by <c>pos</c>. You can insert it at a specific index using the <c>at_index</c> argument. If you use the default value for <c>at_index</c>, the point is inserted at the end of the blend points array.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.SetBlendPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Updates the position of the point at index <c>point</c> on the blend axis.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.SetBlendPointNode(System.Int32,Godot.AnimationRootNode)">
            <summary>
            <para>Changes the <see cref="T:Godot.AnimationNode"/> referenced by the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointNode(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.AnimationRootNode"/> referenced by the point at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.RemoveBlendPoint(System.Int32)">
            <summary>
            <para>Removes the point at index <c>point</c> from the blend space.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetBlendPointCount">
            <summary>
            <para>Returns the number of points in the blend space.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.AddTriangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Creates a new triangle using three points <c>x</c>, <c>y</c>, and <c>z</c>. Triangles can overlap. You can insert the triangle at a specific index using the <c>at_index</c> argument. If you use the default value for <c>at_index</c>, the point is inserted at the end of the blend points array.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetTrianglePoint(System.Int32,System.Int32)">
            <summary>
            <para>Returns the position of the point at index <c>point</c> in the triangle of index <c>triangle</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.RemoveTriangle(System.Int32)">
            <summary>
            <para>Removes the triangle at index <c>triangle</c> from the blend space.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendSpace2D.GetTriangleCount">
            <summary>
            <para>Returns the number of triangles in the blend space.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlendSpace2D.TrianglesUpdatedHandler">
            <summary>
            <para>Emitted every time the blend space's triangles are created, removed, or when one of their vertices changes position.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeBlendTree">
            <summary>
            <para>This node may contain a sub-tree of any other blend type nodes, such as mix, blend2, blend3, one shot, etc. This is one of the most commonly used roots.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionOk">
            <summary>
            <para>The connection was successful.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoInput">
            <summary>
            <para>The input node is <c>null</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoInputIndex">
            <summary>
            <para>The specified input port is out of range.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorNoOutput">
            <summary>
            <para>The output node is <c>null</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorSameNode">
            <summary>
            <para>Input and output nodes are the same.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeBlendTree.ConnectionErrorConnectionExists">
            <summary>
            <para>The specified connection already exists.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeBlendTree.GraphOffset">
            <summary>
            <para>The global offset of all sub-nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.AddNode(Godot.StringName,Godot.AnimationNode,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds an <see cref="T:Godot.AnimationNode"/> at the given <c>position</c>. The <c>name</c> is used to identify the created sub-node later.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.GetNode(Godot.StringName)">
            <summary>
            <para>Returns the sub-node with the specified <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.RemoveNode(Godot.StringName)">
            <summary>
            <para>Removes a sub-node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.RenameNode(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Changes the name of a sub-node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.HasNode(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if a sub-node with specified <c>name</c> exists.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.ConnectNode(Godot.StringName,System.Int32,Godot.StringName)">
            <summary>
            <para>Connects the output of an <see cref="T:Godot.AnimationNode"/> as input for another <see cref="T:Godot.AnimationNode"/>, at the input port specified by <c>input_index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.DisconnectNode(Godot.StringName,System.Int32)">
            <summary>
            <para>Disconnects the node connected to the specified input.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.SetNodePosition(Godot.StringName,Godot.Vector2)">
            <summary>
            <para>Modifies the position of a sub-node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeBlendTree.GetNodePosition(Godot.StringName)">
            <summary>
            <para>Returns the position of the sub-node with the specified <c>name</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeOneShot">
            <summary>
            <para>A resource to add to an <see cref="T:Godot.AnimationNodeBlendTree"/>. This node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.Autorestart">
            <summary>
            <para>If <c>true</c>, the sub-animation will restart automatically after finishing.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.AutorestartDelay">
            <summary>
            <para>The delay after which the automatic restart is triggered, in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeOneShot.AutorestartRandomDelay">
            <summary>
            <para>If <see cref="P:Godot.AnimationNodeOneShot.Autorestart"/> is <c>true</c>, a random additional delay (in seconds) between 0 and this value will be added to <see cref="P:Godot.AnimationNodeOneShot.AutorestartDelay"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeStateMachine">
            <summary>
            <para>Contains multiple nodes representing animation states, connected in a graph. Node transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the <see cref="T:Godot.AnimationNodeStateMachinePlayback"/> object from the <see cref="T:Godot.AnimationTree"/> node to control it programmatically.</para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var state_machine = $AnimationTree.get("parameters/playback")</para>
            <para>state_machine.travel("some_state")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var stateMachine = GetNode&lt;AnimationTree&gt;("AnimationTree").Get("parameters/playback") as AnimationNodeStateMachinePlayback;</para>
            <para>stateMachine.Travel("some_state");</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.AddNode(Godot.StringName,Godot.AnimationNode,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a new node to the graph. The <c>position</c> is used for display in the editor.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNode(Godot.StringName)">
            <summary>
            <para>Returns the animation node with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveNode(Godot.StringName)">
            <summary>
            <para>Deletes the given node from the graph.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RenameNode(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Renames the given node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.HasNode(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the graph contains the given node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNodeName(Godot.AnimationNode)">
            <summary>
            <para>Returns the given animation node's name.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetNodePosition(Godot.StringName,Godot.Vector2)">
            <summary>
            <para>Sets the node's coordinates. Used for display in the editor.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetNodePosition(Godot.StringName)">
            <summary>
            <para>Returns the given node's coordinates. Used for display in the editor.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.HasTransition(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if there is a transition between the given nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.AddTransition(Godot.StringName,Godot.StringName,Godot.AnimationNodeStateMachineTransition)">
            <summary>
            <para>Adds a transition between the given nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransition(System.Int32)">
            <summary>
            <para>Returns the given transition.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionFrom(System.Int32)">
            <summary>
            <para>Returns the given transition's start node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionTo(System.Int32)">
            <summary>
            <para>Returns the given transition's end node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetTransitionCount">
            <summary>
            <para>Returns the number of connections in the graph.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveTransitionByIndex(System.Int32)">
            <summary>
            <para>Deletes the given transition by index.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.RemoveTransition(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Deletes the transition between the two specified nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetStartNode(Godot.StringName)">
            <summary>
            <para>Sets the given node as the graph start point.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetStartNode">
            <summary>
            <para>Returns the graph's end node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetEndNode(Godot.StringName)">
            <summary>
            <para>Sets the given node as the graph end point.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetEndNode">
            <summary>
            <para>Returns the graph's end node.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.SetGraphOffset(Godot.Vector2)">
            <summary>
            <para>Sets the draw offset of the graph. Used for display in the editor.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachine.GetGraphOffset">
            <summary>
            <para>Returns the draw offset of the graph. Used for display in the editor.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeStateMachinePlayback">
            <summary>
            <para>Allows control of <see cref="T:Godot.AnimationTree"/> state machines created with <see cref="T:Godot.AnimationNodeStateMachine"/>. Retrieve with <c>$AnimationTree.get("parameters/playback")</c>.</para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var state_machine = $AnimationTree.get("parameters/playback")</para>
            <para>state_machine.travel("some_state")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var stateMachine = GetNode&lt;AnimationTree&gt;("AnimationTree").Get("parameters/playback") as AnimationNodeStateMachinePlayback;</para>
            <para>stateMachine.Travel("some_state");</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Travel(Godot.StringName)">
            <summary>
            <para>Transitions from the current state to another one, following the shortest path.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Start(Godot.StringName)">
            <summary>
            <para>Starts playing the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.Stop">
            <summary>
            <para>Stops the currently playing animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if an animation is playing.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.GetCurrentNode">
            <summary>
            <para>Returns the currently playing animation state.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.GetCurrentPlayPosition">
            <summary>
            <para>Returns the playback position within the current animation state.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationNodeStateMachinePlayback.GetTravelPath">
            <summary>
            <para>Returns the current travel path as computed internally by the A* algorithm.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.Immediate">
            <summary>
            <para>Switch to the next state immediately. The current state will end and blend into the beginning of the new one.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.Sync">
            <summary>
            <para>Switch to the next state immediately, but will seek the new state to the playback position of the old state.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationNodeStateMachineTransition.SwitchModeEnum.AtEnd">
            <summary>
            <para>Wait for the current state playback to end, then switch to the beginning of the next state animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.SwitchMode">
            <summary>
            <para>The transition type.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance">
            <summary>
            <para>Turn on the transition automatically when this state is reached. This works best with .</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.AdvanceCondition">
            <summary>
            <para>Turn on auto advance when this condition is set. The provided name will become a boolean parameter on the <see cref="T:Godot.AnimationTree"/> that can be controlled from code (see <a href="https://docs.godotengine.org/en/latest/tutorials/animation/animation_tree.html#controlling-from-code"></a>). For example, if <see cref="P:Godot.AnimationTree.TreeRoot"/> is an <see cref="T:Godot.AnimationNodeStateMachine"/> and <see cref="P:Godot.AnimationNodeStateMachineTransition.AdvanceCondition"/> is set to <c>"idle"</c>:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>$animation_tree.set("parameters/conditions/idle", is_on_floor and (linear_velocity.x == 0))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GetNode&lt;AnimationTree&gt;("animation_tree").Set("parameters/conditions/idle", IsOnFloor &amp;&amp; (LinearVelocity.x == 0));</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.XfadeTime">
            <summary>
            <para>The time to cross-fade between this state and the next.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.Priority">
            <summary>
            <para>Lower priority transitions are preferred when travelling through the tree via <see cref="M:Godot.AnimationNodeStateMachinePlayback.Travel(Godot.StringName)"/> or <see cref="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeStateMachineTransition.Disabled">
            <summary>
            <para>Don't use this transition during <see cref="M:Godot.AnimationNodeStateMachinePlayback.Travel(Godot.StringName)"/> or <see cref="P:Godot.AnimationNodeStateMachineTransition.AutoAdvance"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeStateMachineTransition.AdvanceConditionChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.AnimationNodeStateMachineTransition.AdvanceCondition"/> is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeTimeScale">
            <summary>
            <para>Allows scaling the speed of the animation (or reversing it) in any children nodes. Setting it to 0 will pause the animation.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeTimeSeek">
            <summary>
            <para>This node can be used to cause a seek command to happen to any sub-children of the graph. After setting the time, this value returns to -1.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationNodeTransition">
            <summary>
            <para>Simple state machine for cases which don't require a more advanced <see cref="T:Godot.AnimationNodeStateMachine"/>. Animations can be connected to the inputs and transition times can be specified.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.InputCount">
            <summary>
            <para>The number of available input ports for this node.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationNodeTransition.XfadeTime">
            <summary>
            <para>Cross-fading time (in seconds) between each animation connected to the inputs.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer">
            <summary>
            <para>An animation player is used for general-purpose playback of <see cref="T:Godot.Animation"/> resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.</para>
            <para><see cref="T:Godot.AnimationPlayer"/> is more suited than <see cref="T:Godot.Tween"/> for animations where you know the final values in advance. For example, fading a screen in and out is more easily done with an <see cref="T:Godot.AnimationPlayer"/> node thanks to the animation tools provided by the editor. That particular example can also be implemented with a <see cref="T:Godot.Tween"/> node, but it requires doing everything by code.</para>
            <para>Updating the target properties of animations occurs at process time.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Physics">
            <summary>
            <para>Process animation during the physics process. This is especially useful when animating physics bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Idle">
            <summary>
            <para>Process animation during the idle process.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationProcessMode.Manual">
            <summary>
            <para>Do not process animation. Use <see cref="M:Godot.AnimationPlayer.Advance(System.Single)"/> to process the animation manually.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationMethodCallMode.Deferred">
            <summary>
            <para>Batch method calls during the animation process, then do the calls after events are processed. This avoids bugs involving deleting nodes or modifying the AnimationPlayer while playing.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationPlayer.AnimationMethodCallMode.Immediate">
            <summary>
            <para>Make method calls immediately when reached in the animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.RootNode">
            <summary>
            <para>The node from which node path references will travel.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimation">
            <summary>
            <para>The name of the currently playing animation. If no animation is playing, the property's value is an empty string. Changing this value does not restart the animation. See <see cref="M:Godot.AnimationPlayer.Play(Godot.StringName,System.Single,System.Single,System.Boolean)"/> for more information on playing animations.</para>
            <para>Note: while this property appears in the inspector, it's not meant to be edited and it's not saved in the scene. This property is mainly used to get the currently playing animation, and internally for animation playback tracks. For more information, see <see cref="T:Godot.Animation"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.AssignedAnimation">
            <summary>
            <para>If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also <see cref="P:Godot.AnimationPlayer.CurrentAnimation"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.Autoplay">
            <summary>
            <para>The name of the animation to play when the scene loads.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.ResetOnSave">
            <summary>
            <para>This is used by the editor. If set to <c>true</c>, the scene will be saved with the effects of the reset animation applied (as if it had been seeked to time 0), then reverted after saving.</para>
            <para>In other words, the saved scene file will contain the "default pose", as defined by the reset animation, if any, with the editor keeping the values that the nodes had before saving.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationLength">
            <summary>
            <para>The length (in seconds) of the currently being played animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationPosition">
            <summary>
            <para>The position (in seconds) of the currently playing animation.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackProcessMode">
            <summary>
            <para>The process notification in which to update animations.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackDefaultBlendTime">
            <summary>
            <para>The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackActive">
            <summary>
            <para>If <c>true</c>, updates animations in response to process-related notifications.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackSpeed">
            <summary>
            <para>The speed scaling ratio. For instance, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.MethodCallMode">
            <summary>
            <para>The call mode to use for Call Method tracks.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AddAnimation(Godot.StringName,Godot.Animation)">
            <summary>
            <para>Adds <c>animation</c> to the player accessible with the key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RemoveAnimation(Godot.StringName)">
            <summary>
            <para>Removes the animation with key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RenameAnimation(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Renames an existing animation with key <c>name</c> to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.HasAnimation(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the <see cref="T:Godot.AnimationPlayer"/> stores an <see cref="T:Godot.Animation"/> with key <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimation(Godot.StringName)">
            <summary>
            <para>Returns the <see cref="T:Godot.Animation"/> with key <c>name</c> or <c>null</c> if not found.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimationList">
            <summary>
            <para>Returns the list of stored animation names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationSetNext(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Triggers the <c>anim_to</c> animation when the <c>anim_from</c> animation completes.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationGetNext(Godot.StringName)">
            <summary>
            <para>Returns the name of the next animation in the queue.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.SetBlendTime(Godot.StringName,Godot.StringName,System.Single)">
            <summary>
            <para>Specifies a blend time (in seconds) between two animations, referenced by their names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetBlendTime(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Gets the blend time (in seconds) between two animations, referenced by their names.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Play(Godot.StringName,System.Single,System.Single,System.Boolean)">
            <summary>
            <para>Plays the animation with key <c>name</c>. Custom blend times and speed can be set. If <c>custom_speed</c> is negative and <c>from_end</c> is <c>true</c>, the animation will play backwards (which is equivalent to calling <see cref="M:Godot.AnimationPlayer.PlayBackwards(Godot.StringName,System.Single)"/>).</para>
            <para>The <see cref="T:Godot.AnimationPlayer"/> keeps track of its current or last played animation with <see cref="P:Godot.AnimationPlayer.AssignedAnimation"/>. If this method is called with that same animation <c>name</c>, or with no <c>name</c> parameter, the assigned animation will resume playing if it was paused, or restart if it was stopped (see <see cref="M:Godot.AnimationPlayer.Stop(System.Boolean)"/> for both pause and stop). If the animation was already playing, it will keep playing.</para>
            <para>Note: The animation will be updated the next time the <see cref="T:Godot.AnimationPlayer"/> is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call <c>advance(0)</c>.</para>
            </summary>
            <param name="name">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.AnimationPlayer.PlayBackwards(Godot.StringName,System.Single)">
            <summary>
            <para>Plays the animation with key <c>name</c> in reverse.</para>
            <para>This method is a shorthand for <see cref="M:Godot.AnimationPlayer.Play(Godot.StringName,System.Single,System.Single,System.Boolean)"/> with <c>custom_speed = -1.0</c> and <c>from_end = true</c>, so see its description for more information.</para>
            </summary>
            <param name="name">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.AnimationPlayer.Stop(System.Boolean)">
            <summary>
            <para>Stops or pauses the currently playing animation. If <c>reset</c> is <c>true</c>, the animation position is reset to <c>0</c> and the playback speed is reset to <c>1.0</c>.</para>
            <para>If <c>reset</c> is <c>false</c>, the <see cref="P:Godot.AnimationPlayer.CurrentAnimationPosition"/> will be kept and calling <see cref="M:Godot.AnimationPlayer.Play(Godot.StringName,System.Single,System.Single,System.Boolean)"/> or <see cref="M:Godot.AnimationPlayer.PlayBackwards(Godot.StringName,System.Single)"/> without arguments or with the same animation name as <see cref="P:Godot.AnimationPlayer.AssignedAnimation"/> will resume the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if playing an animation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Queue(Godot.StringName)">
            <summary>
            <para>Queues an animation for playback once the current one is done.</para>
            <para>Note: If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetQueue">
            <summary>
            <para>Returns a list of the animation names that are currently queued to play.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearQueue">
            <summary>
            <para>Clears all queued, unplayed animations.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetPlayingSpeed">
            <summary>
            <para>Gets the actual playing speed of current animation or 0 if not playing. This speed is the <see cref="P:Godot.AnimationPlayer.PlaybackSpeed"/> property multiplied by <c>custom_speed</c> argument specified when calling the <see cref="M:Godot.AnimationPlayer.Play(Godot.StringName,System.Single,System.Single,System.Boolean)"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.FindAnimation(Godot.Animation)">
            <summary>
            <para>Returns the name of <c>animation</c> or an empty string if not found.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearCaches">
            <summary>
            <para><see cref="T:Godot.AnimationPlayer"/> caches animated nodes. It may not notice if a node disappears; <see cref="M:Godot.AnimationPlayer.ClearCaches"/> forces it to update the cache again.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Seek(System.Single,System.Boolean)">
            <summary>
            <para>Seeks the animation to the <c>seconds</c> point in time (in seconds). If <c>update</c> is <c>true</c>, the animation updates too, otherwise it updates at process time. Events between the current frame and <c>seconds</c> are skipped.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Advance(System.Single)">
            <summary>
            <para>Shifts position in the animation timeline and immediately updates the animation. <c>delta</c> is the time in seconds to shift. Events between the current frame and <c>delta</c> are handled.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer.CachesClearedHandler">
            <summary>
            <para>Notifies when the caches have been cleared, either automatically, or manually via <see cref="M:Godot.AnimationPlayer.ClearCaches"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer.AnimationStartedHandler">
            <summary>
            <para>Notifies when an animation starts playing.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer.AnimationChangedHandler">
            <summary>
            <para>If the currently being played animation changes, this signal will notify of such change.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer.AnimationFinishedHandler">
            <summary>
            <para>Notifies when an animation finished playing.</para>
            </summary>
        </member>
        <member name="T:Godot.AnimationTree">
            <summary>
            <para>Note: When linked with an <see cref="T:Godot.AnimationPlayer"/>, several properties and methods of the corresponding <see cref="T:Godot.AnimationPlayer"/> will not function as expected. Playback and transitions should be handled using only the <see cref="T:Godot.AnimationTree"/> and its constituent <see cref="T:Godot.AnimationNode"/>(s). The <see cref="T:Godot.AnimationPlayer"/> node should be used solely for adding, deleting, and editing animations.</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Physics">
            <summary>
            <para>The animations will progress during the physics frame (i.e. <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Idle">
            <summary>
            <para>The animations will progress during the idle frame (i.e. <see cref="M:Godot.Node._Process(System.Single)"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.AnimationTree.AnimationProcessMode.Manual">
            <summary>
            <para>The animations will only progress manually (see <see cref="M:Godot.AnimationTree.Advance(System.Single)"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.TreeRoot">
            <summary>
            <para>The root animation node of this <see cref="T:Godot.AnimationTree"/>. See <see cref="T:Godot.AnimationNode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.AnimPlayer">
            <summary>
            <para>The path to the <see cref="T:Godot.AnimationPlayer"/> used for animating.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.Active">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.AnimationTree"/> will be processing.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.ProcessMode">
            <summary>
            <para>The process mode of this <see cref="T:Godot.AnimationTree"/>. See <see cref="T:Godot.AnimationTree.AnimationProcessMode"/> for available modes.</para>
            </summary>
        </member>
        <member name="P:Godot.AnimationTree.RootMotionTrack">
            <summary>
            <para>The path to the Animation track used for root motion. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. To specify a track that controls properties or bones, append its name after the path, separated by <c>":"</c>. For example, <c>"character/skeleton:ankle"</c> or <c>"character/mesh:transform/local"</c>.</para>
            <para>If the track has type , the transformation will be cancelled visually, and the animation will appear to stay in place.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTree.GetRootMotionTransform">
            <summary>
            <para>Retrieve the motion of the <see cref="P:Godot.AnimationTree.RootMotionTrack"/> as a <see cref="T:Godot.Transform"/> that can be used elsewhere. If <see cref="P:Godot.AnimationTree.RootMotionTrack"/> is not a path to a track of type , returns an identity transformation.</para>
            </summary>
        </member>
        <member name="M:Godot.AnimationTree.Advance(System.Single)">
            <summary>
            <para>Manually advance the animations by the specified time (in seconds).</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D">
            <summary>
            <para>2D area that detects <see cref="T:Godot.CollisionObject2D"/> nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Disabled">
            <summary>
            <para>This area does not affect gravity/damping.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Combine">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order).</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.CombineReplace">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order), ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.Replace">
            <summary>
            <para>This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area2D.SpaceOverrideEnum.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damping calculated so far (in <see cref="P:Godot.Area2D.Priority"/> order), but keeps calculating the rest of the areas.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.SpaceOverride">
            <summary>
            <para>Override mode for gravity and damping calculations within this area. See <see cref="T:Godot.Area2D.SpaceOverrideEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityPoint">
            <summary>
            <para>If <c>true</c>, gravity is calculated from a point (set via <see cref="P:Godot.Area2D.GravityVec"/>). See also <see cref="P:Godot.Area2D.SpaceOverride"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityDistanceScale">
            <summary>
            <para>The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityVec">
            <summary>
            <para>The area's gravity vector (not normalized). If gravity is a point (see <see cref="P:Godot.Area2D.GravityPoint"/>), this will be the point of attraction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Gravity">
            <summary>
            <para>The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.LinearDamp">
            <summary>
            <para>The rate at which objects stop moving in this area. Represents the linear velocity lost per second.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AngularDamp">
            <summary>
            <para>The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Priority">
            <summary>
            <para>The area's priority. Higher priority areas are processed first.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitoring">
            <summary>
            <para>If <c>true</c>, the area detects bodies or areas entering and exiting it.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitorable">
            <summary>
            <para>If <c>true</c>, other monitoring areas can detect this area.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionLayer">
            <summary>
            <para>The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also <see cref="P:Godot.Area2D.CollisionMask"/>. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionMask">
            <summary>
            <para>The physics layers this area scans to determine collision detection. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusOverride">
            <summary>
            <para>If <c>true</c>, the area's audio bus overrides the default audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusName">
            <summary>
            <para>The name of the area's audio bus.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingBodies">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.PhysicsBody2D"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingAreas">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.Area2D"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsBody(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given physics body overlaps the Area2D.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody2D"/> or a <see cref="T:Godot.TileMap"/> instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsArea(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given area overlaps the Area2D.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.AreaExitedHandler">
            <summary>
            <para>Emitted when another area exits.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.AreaShapeExitedHandler">
            <summary>
            <para>Emitted when another area exits, reporting which shapes were overlapping.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.BodyEnteredHandler">
            <summary>
            <para>Emitted when a physics body enters.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody2D"/> or a <see cref="T:Godot.TileMap"/> instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.BodyShapeEnteredHandler">
            <summary>
            <para>Emitted when a physics body enters, reporting which shapes overlapped.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody2D"/> or a <see cref="T:Godot.TileMap"/> instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.AreaEnteredHandler">
            <summary>
            <para>Emitted when another area enters.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.AreaShapeEnteredHandler">
            <summary>
            <para>Emitted when another area enters, reporting which shapes overlapped. <c>shape_owner_get_owner(shape_find_owner(shape))</c> returns the parent object of the owner of the <c>shape</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.BodyExitedHandler">
            <summary>
            <para>Emitted when a physics body exits.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody2D"/> or a <see cref="T:Godot.TileMap"/> instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area2D.BodyShapeExitedHandler">
            <summary>
            <para>Emitted when a physics body exits, reporting which shapes were overlapping.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody2D"/> or a <see cref="T:Godot.TileMap"/> instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D">
            <summary>
            <para>3D area that detects <see cref="T:Godot.CollisionObject3D"/> nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).</para>
            </summary>
        </member>
        <member name="F:Godot.Area3D.SpaceOverrideEnum.Disabled">
            <summary>
            <para>This area does not affect gravity/damping.</para>
            </summary>
        </member>
        <member name="F:Godot.Area3D.SpaceOverrideEnum.Combine">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area3D.Priority"/> order).</para>
            </summary>
        </member>
        <member name="F:Godot.Area3D.SpaceOverrideEnum.CombineReplace">
            <summary>
            <para>This area adds its gravity/damping values to whatever has been calculated so far (in <see cref="P:Godot.Area3D.Priority"/> order), ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area3D.SpaceOverrideEnum.Replace">
            <summary>
            <para>This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.</para>
            </summary>
        </member>
        <member name="F:Godot.Area3D.SpaceOverrideEnum.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damping calculated so far (in <see cref="P:Godot.Area3D.Priority"/> order), but keeps calculating the rest of the areas.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.SpaceOverride">
            <summary>
            <para>Override mode for gravity and damping calculations within this area. See <see cref="T:Godot.Area3D.SpaceOverrideEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.GravityPoint">
            <summary>
            <para>If <c>true</c>, gravity is calculated from a point (set via <see cref="P:Godot.Area3D.GravityVec"/>). See also <see cref="P:Godot.Area3D.SpaceOverride"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.GravityDistanceScale">
            <summary>
            <para>The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.GravityVec">
            <summary>
            <para>The area's gravity vector (not normalized). If gravity is a point (see <see cref="P:Godot.Area3D.GravityPoint"/>), this will be the point of attraction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.Gravity">
            <summary>
            <para>The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.LinearDamp">
            <summary>
            <para>The rate at which objects stop moving in this area. Represents the linear velocity lost per second.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.AngularDamp">
            <summary>
            <para>The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.Priority">
            <summary>
            <para>The area's priority. Higher priority areas are processed first.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.Monitoring">
            <summary>
            <para>If <c>true</c>, the area detects bodies or areas entering and exiting it.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.Monitorable">
            <summary>
            <para>If <c>true</c>, other monitoring areas can detect this area.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.CollisionLayer">
            <summary>
            <para>The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also <see cref="P:Godot.Area3D.CollisionMask"/>. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.CollisionMask">
            <summary>
            <para>The physics layers this area scans to determine collision detection. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.AudioBusOverride">
            <summary>
            <para>If <c>true</c>, the area's audio bus overrides the default audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.AudioBusName">
            <summary>
            <para>The name of the area's audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.ReverbBusEnable">
            <summary>
            <para>If <c>true</c>, the area applies reverb to its associated audio.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.ReverbBusName">
            <summary>
            <para>The reverb bus name to use for this area's associated audio.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.ReverbBusAmount">
            <summary>
            <para>The degree to which this area applies reverb to its associated audio. Ranges from <c>0</c> to <c>1</c> with <c>0.1</c> precision.</para>
            </summary>
        </member>
        <member name="P:Godot.Area3D.ReverbBusUniformity">
            <summary>
            <para>The degree to which this area's reverb is a uniform effect. Ranges from <c>0</c> to <c>1</c> with <c>0.1</c> precision.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the collision mask. This simplifies editing which <see cref="T:Godot.Area3D"/> layers this <see cref="T:Godot.Area3D"/> scans.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Set/clear individual bits on the layer mask. This simplifies editing this <see cref="T:Godot.Area3D"/>'s layers.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the layer mask.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.GetOverlappingBodies">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.PhysicsBody3D"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.GetOverlappingAreas">
            <summary>
            <para>Returns a list of intersecting <see cref="T:Godot.Area3D"/>s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.OverlapsBody(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given physics body overlaps the Area3D.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody3D"/> or a <see cref="T:Godot.GridMap"/> instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="M:Godot.Area3D.OverlapsArea(Godot.Node)">
            <summary>
            <para>If <c>true</c>, the given area overlaps the Area3D.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.AreaExitedHandler">
            <summary>
            <para>Emitted when another area exits.</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.AreaShapeExitedHandler">
            <summary>
            <para>Emitted when another area exits, reporting which areas were overlapping.</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.BodyEnteredHandler">
            <summary>
            <para>Emitted when a physics body enters.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody3D"/> or a <see cref="T:Godot.GridMap"/> instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.BodyShapeEnteredHandler">
            <summary>
            <para>Emitted when a physics body enters, reporting which shapes overlapped.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody3D"/> or a <see cref="T:Godot.GridMap"/> instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.AreaEnteredHandler">
            <summary>
            <para>Emitted when another area enters.</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.AreaShapeEnteredHandler">
            <summary>
            <para>Emitted when another area enters, reporting which areas overlapped. <c>shape_owner_get_owner(shape_find_owner(shape))</c> returns the parent object of the owner of the <c>shape</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.BodyExitedHandler">
            <summary>
            <para>Emitted when a physics body exits.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody3D"/> or a <see cref="T:Godot.GridMap"/> instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.Area3D.BodyShapeExitedHandler">
            <summary>
            <para>Emitted when a physics body exits, reporting which shapes were overlapping.</para>
            <para>The <c>body</c> argument can either be a <see cref="T:Godot.PhysicsBody3D"/> or a <see cref="T:Godot.GridMap"/> instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body).</para>
            </summary>
        </member>
        <member name="T:Godot.ArrayMesh">
            <summary>
            <para>The <see cref="T:Godot.ArrayMesh"/> is used to construct a <see cref="T:Godot.Mesh"/> by specifying the attributes as arrays.</para>
            <para>The most basic example is the creation of a single triangle:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var vertices = PackedVector3Array()</para>
            <para>vertices.push_back(Vector3(0, 1, 0))</para>
            <para>vertices.push_back(Vector3(1, 0, 0))</para>
            <para>vertices.push_back(Vector3(0, 0, 1))</para>
            <para></para>
            <para># Initialize the ArrayMesh.</para>
            <para>var arr_mesh = ArrayMesh.new()</para>
            <para>var arrays = []</para>
            <para>arrays.resize(Mesh.ARRAY_MAX)</para>
            <para>arrays[Mesh.ARRAY_VERTEX] = vertices</para>
            <para></para>
            <para># Create the Mesh.</para>
            <para>arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)</para>
            <para>var m = MeshInstance3D.new()</para>
            <para>m.mesh = arr_mesh</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var vertices = new Godot.Collections.Array&lt;Vector3&gt;();</para>
            <para>vertices.Add(new Vector3(0, 1, 0));</para>
            <para>vertices.Add(new Vector3(1, 0, 0));</para>
            <para>vertices.Add(new Vector3(0, 0, 1));</para>
            <para></para>
            <para>// Initialize the ArrayMesh.</para>
            <para>var arrMesh = new ArrayMesh();</para>
            <para>var arrays = new Godot.Collections.Array();</para>
            <para>arrays.Resize((int)Mesh.ArrayType.Max);</para>
            <para>arrays[(int)Mesh.ArrayType.Vertex] = vertices;</para>
            <para></para>
            <para>// Create the Mesh.</para>
            <para>arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);</para>
            <para>var m = new MeshInstance();</para>
            <para>m.Mesh = arrMesh;</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The <see cref="T:Godot.MeshInstance3D"/> is ready to be added to the <see cref="T:Godot.SceneTree"/> to be shown.</para>
            <para>See also <see cref="T:Godot.ImmediateGeometry3D"/>, <see cref="T:Godot.MeshDataTool"/> and <see cref="T:Godot.SurfaceTool"/> for procedural geometry generation.</para>
            <para>Note: Godot uses clockwise <a href="https://learnopengl.com/Advanced-OpenGL/Face-culling">winding order</a> for front faces of triangle primitive modes.</para>
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.BlendShapeMode">
            <summary>
            <para>Sets the blend shape mode to one of <c>ArrayMesh.BlendShapeMode</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.CustomAabb">
            <summary>
            <para>Overrides the <see cref="T:Godot.AABB"/> with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddBlendShape(Godot.StringName)">
            <summary>
            <para>Adds name for a blend shape that will be added with <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>. Must be called before surface is added.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeCount">
            <summary>
            <para>Returns the number of blend shapes that the <see cref="T:Godot.ArrayMesh"/> holds.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeName(System.Int32)">
            <summary>
            <para>Returns the name of the blend shape at this index.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.ClearBlendShapes">
            <summary>
            <para>Removes all blend shapes from this <see cref="T:Godot.ArrayMesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)">
            <summary>
            <para>Creates a new surface.</para>
            <para>Surfaces are created to be rendered using a <c>primitive</c>, which may be any of the types defined in <see cref="T:Godot.Mesh.PrimitiveType"/>. (As a note, when using indices, it is recommended to only use points, lines or triangles.) <see cref="M:Godot.Mesh.GetSurfaceCount"/> will become the <c>surf_idx</c> for this new surface.</para>
            <para>The <c>arrays</c> argument is an array of arrays. See <see cref="T:Godot.Mesh.ArrayType"/> for the values used in this array. For example, <c>arrays[0]</c> is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for  if it is used.</para>
            <para>Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.</para>
            </summary>
            <param name="blendShapes">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            <param name="lods">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.ArrayMesh.ClearSurfaces">
            <summary>
            <para>Removes all surfaces from this <see cref="T:Godot.ArrayMesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceUpdateRegion(System.Int32,System.Int32,System.Byte[])">
            <summary>
            <para>Updates a specified region of mesh arrays on the GPU.</para>
            <para>Warning: Only use if you know what you are doing. You can easily cause crashes by calling this function with improper arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayLen(System.Int32)">
            <summary>
            <para>Returns the length in vertices of the vertex array in the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayIndexLen(System.Int32)">
            <summary>
            <para>Returns the length in indices of the index array in the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetFormat(System.Int32)">
            <summary>
            <para>Returns the format mask of the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetPrimitiveType(System.Int32)">
            <summary>
            <para>Returns the primitive type of the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceFindByName(System.String)">
            <summary>
            <para>Returns the index of the first surface with this name held within this <see cref="T:Godot.ArrayMesh"/>. If none are found, -1 is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceSetName(System.Int32,System.String)">
            <summary>
            <para>Sets a name for a given surface.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetName(System.Int32)">
            <summary>
            <para>Gets the name assigned to this surface.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.RegenNormalMaps">
            <summary>
            <para>Will regenerate normal maps for the <see cref="T:Godot.ArrayMesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.LightmapUnwrap(Godot.Transform,System.Single)">
            <summary>
            <para>Will perform a UV unwrap on the <see cref="T:Godot.ArrayMesh"/> to prepare the mesh for lightmapping.</para>
            </summary>
        </member>
        <member name="T:Godot.AspectRatioContainer">
            <summary>
            <para>Arranges child controls in a way to preserve their aspect ratio automatically whenever the container is resized. Solves the problem where the container size is dynamic and the contents' size needs to adjust accordingly without losing proportions.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.AlignMode.Begin">
            <summary>
            <para>Aligns child controls with the beginning (left or top) of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.AlignMode.Center">
            <summary>
            <para>Aligns child controls with the center of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.AlignMode.End">
            <summary>
            <para>Aligns child controls with the end (right or bottom) of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.StretchModeEnum.WidthControlsHeight">
            <summary>
            <para>The height of child controls is automatically adjusted based on the width of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.StretchModeEnum.HeightControlsWidth">
            <summary>
            <para>The width of child controls is automatically adjusted based on the height of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.StretchModeEnum.Fit">
            <summary>
            <para>The bounding rectangle of child controls is automatically adjusted to fit inside the container while keeping the aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.AspectRatioContainer.StretchModeEnum.Cover">
            <summary>
            <para>The width and height of child controls is automatically adjusted to make their bounding rectangle cover the entire area of the container while keeping the aspect ratio.</para>
            <para>When the bounding rectangle of child controls exceed the container's size and <see cref="P:Godot.Control.RectClipContent"/> is enabled, this allows to show only the container's area restricted by its own bounding rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.AspectRatioContainer.Ratio">
            <summary>
            <para>The aspect ratio to enforce on child controls. This is the width divided by the height. The ratio depends on the <see cref="P:Godot.AspectRatioContainer.StretchMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AspectRatioContainer.StretchMode">
            <summary>
            <para>The stretch mode used to align child controls.</para>
            </summary>
        </member>
        <member name="P:Godot.AspectRatioContainer.AlignmentHorizontal">
            <summary>
            <para>Specifies the horizontal relative position of child controls.</para>
            </summary>
        </member>
        <member name="P:Godot.AspectRatioContainer.AlignmentVertical">
            <summary>
            <para>Specifies the vertical relative position of child controls.</para>
            </summary>
        </member>
        <member name="T:Godot.AtlasTexture">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> resource aimed at managing big textures files that pack multiple smaller textures. Consists of a <see cref="T:Godot.Texture2D"/>, a margin that defines the border width, and a region that defines the actual area of the AtlasTexture.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Atlas">
            <summary>
            <para>The texture that contains the atlas. Can be any <see cref="T:Godot.Texture2D"/> subtype.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Region">
            <summary>
            <para>The AtlasTexture's used region.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Margin">
            <summary>
            <para>The margin around the region. The <see cref="T:Godot.Rect2"/>'s <c>Rect2.size</c> parameter ("w" and "h" in the editor) resizes the texture so it fits within the margin.</para>
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.FilterClip">
            <summary>
            <para>If <c>true</c>, clips the area outside of the region to avoid bleeding of the surrounding texture pixels.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioBusLayout">
            <summary>
            <para>Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between buses. See <see cref="T:Godot.AudioServer"/> for usage.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffect">
            <summary>
            <para>Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectAmplify">
            <summary>
            <para>Increases or decreases the volume being routed through the audio bus.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectAmplify.VolumeDb">
            <summary>
            <para>Amount of amplification in decibels. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandLimitFilter">
            <summary>
            <para>Limits the frequencies in a range around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows frequencies outside of this range to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandPassFilter">
            <summary>
            <para>Attenuates the frequencies inside of a range around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and cuts frequencies outside of this band.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectChorus">
            <summary>
            <para>Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.VoiceCount">
            <summary>
            <para>The amount of voices in the effect.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Dry">
            <summary>
            <para>The effect's raw signal.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Wet">
            <summary>
            <para>The effect's processed signal.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectCompressor">
            <summary>
            <para>Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).</para>
            <para>Compressor has many uses in the mix:</para>
            <para>- In the Master bus to compress the whole output (although an <see cref="T:Godot.AudioEffectLimiter"/> is probably better).</para>
            <para>- In voice channels to ensure they sound as balanced as possible.</para>
            <para>- Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.</para>
            <para>- Accentuates transients by using a wider attack, making effects sound more punchy.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Threshold">
            <summary>
            <para>The level above which compression is applied to the audio. Value can range from -60 to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Ratio">
            <summary>
            <para>Amount of compression applied to the audio once it passes the threshold level. The higher the ratio, the more the loud parts of the audio will be compressed. Value can range from 1 to 48.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Gain">
            <summary>
            <para>Gain applied to the output signal.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.AttackUs">
            <summary>
            <para>Compressor's reaction time when the signal exceeds the threshold, in microseconds. Value can range from 20 to 2000.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.ReleaseMs">
            <summary>
            <para>Compressor's delay time to stop reducing the signal after the signal level falls below the threshold, in milliseconds. Value can range from 20 to 2000.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Mix">
            <summary>
            <para>Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet).</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Sidechain">
            <summary>
            <para>Reduce the sound level using another audio bus for threshold detection.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDelay">
            <summary>
            <para>Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Dry">
            <summary>
            <para>Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDistortion">
            <summary>
            <para>Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.</para>
            <para>By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Clip">
            <summary>
            <para>Digital distortion effect which cuts off peaks at the top and bottom of the waveform.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Lofi">
            <summary>
            <para>Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Overdrive">
            <summary>
            <para>Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectDistortion.ModeEnum.Waveshape">
            <summary>
            <para>Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Mode">
            <summary>
            <para>Distortion type.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PreGain">
            <summary>
            <para>Increases or decreases the volume before the effect. Value can range from -60 to 60.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.KeepHfHz">
            <summary>
            <para>High-pass filter, in Hz. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Drive">
            <summary>
            <para>Distortion power. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PostGain">
            <summary>
            <para>Increases or decreases the volume after the effect. Value can range from -80 to 24.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ">
            <summary>
            <para>AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQs are useful on the Master bus to completely master a mix and give it more character. They are also useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.SetBandGainDb(System.Int32,System.Single)">
            <summary>
            <para>Sets band's gain at the specified index, in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandGainDb(System.Int32)">
            <summary>
            <para>Returns the band's gain at the specified index, in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandCount">
            <summary>
            <para>Returns the number of bands of the equalizer.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ10">
            <summary>
            <para>Frequency bands:</para>
            <para>Band 1: 31 Hz</para>
            <para>Band 2: 62 Hz</para>
            <para>Band 3: 125 Hz</para>
            <para>Band 4: 250 Hz</para>
            <para>Band 5: 500 Hz</para>
            <para>Band 6: 1000 Hz</para>
            <para>Band 7: 2000 Hz</para>
            <para>Band 8: 4000 Hz</para>
            <para>Band 9: 8000 Hz</para>
            <para>Band 10: 16000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ6"/>, <see cref="T:Godot.AudioEffectEQ21"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ21">
            <summary>
            <para>Frequency bands:</para>
            <para>Band 1: 22 Hz</para>
            <para>Band 2: 32 Hz</para>
            <para>Band 3: 44 Hz</para>
            <para>Band 4: 63 Hz</para>
            <para>Band 5: 90 Hz</para>
            <para>Band 6: 125 Hz</para>
            <para>Band 7: 175 Hz</para>
            <para>Band 8: 250 Hz</para>
            <para>Band 9: 350 Hz</para>
            <para>Band 10: 500 Hz</para>
            <para>Band 11: 700 Hz</para>
            <para>Band 12: 1000 Hz</para>
            <para>Band 13: 1400 Hz</para>
            <para>Band 14: 2000 Hz</para>
            <para>Band 15: 2800 Hz</para>
            <para>Band 16: 4000 Hz</para>
            <para>Band 17: 5600 Hz</para>
            <para>Band 18: 8000 Hz</para>
            <para>Band 19: 11000 Hz</para>
            <para>Band 20: 16000 Hz</para>
            <para>Band 21: 22000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ6"/>, <see cref="T:Godot.AudioEffectEQ10"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ6">
            <summary>
            <para>Frequency bands:</para>
            <para>Band 1: 32 Hz</para>
            <para>Band 2: 100 Hz</para>
            <para>Band 3: 320 Hz</para>
            <para>Band 4: 1000 Hz</para>
            <para>Band 5: 3200 Hz</para>
            <para>Band 6: 10000 Hz</para>
            <para>See also <see cref="T:Godot.AudioEffectEQ"/>, <see cref="T:Godot.AudioEffectEQ10"/>, <see cref="T:Godot.AudioEffectEQ21"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectFilter">
            <summary>
            <para>Allows frequencies other than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> to pass.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.CutoffHz">
            <summary>
            <para>Threshold frequency for the filter, in Hz.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Resonance">
            <summary>
            <para>Amount of boost in the frequency range near the cutoff frequency.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Gain">
            <summary>
            <para>Gain amount of the frequencies after the filter.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectHighPassFilter">
            <summary>
            <para>Cuts frequencies lower than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows higher frequencies to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLimiter">
            <summary>
            <para>A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping.</para>
            <para>Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.CeilingDb">
            <summary>
            <para>The waveform's maximum allowed value, in decibels. Value can range from -20 to -0.1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.ThresholdDb">
            <summary>
            <para>Threshold from which the limiter begins to be active, in decibels. Value can range from -30 to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.SoftClipDb">
            <summary>
            <para>Applies a gain to the limited waves, in decibels. Value can range from 0 to 6.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLowPassFilter">
            <summary>
            <para>Cuts frequencies higher than the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and allows lower frequencies to pass.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectNotchFilter">
            <summary>
            <para>Attenuates frequencies in a narrow band around the <see cref="P:Godot.AudioEffectFilter.CutoffHz"/> and cuts frequencies outside of this range.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPanner">
            <summary>
            <para>Determines how much of an audio signal is sent to the left and right buses.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPanner.Pan">
            <summary>
            <para>Pan position. Value can range from -1 (fully left) to 1 (fully right).</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPhaser">
            <summary>
            <para>Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMinHz">
            <summary>
            <para>Determines the minimum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMaxHz">
            <summary>
            <para>Determines the maximum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RateHz">
            <summary>
            <para>Adjusts the rate in Hz at which the effect sweeps up and down across the frequency range.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Feedback">
            <summary>
            <para>Output percent of modified sound. Value can range from 0.1 to 0.9.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Depth">
            <summary>
            <para>Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPitchShift">
            <summary>
            <para>Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectPitchShift.FFT_Size.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.AudioEffectPitchShift.FFT_Size"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPitchShift.PitchScale">
            <summary>
            <para>Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves).</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectRecord">
            <summary>
            <para>Allows the user to record sound from a microphone. It sets and gets the format in which the audio file will be recorded (8-bit, 16-bit, or compressed). It checks whether or not the recording is active, and if it is, records the sound. It then returns the recorded sample.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectRecord.Format">
            <summary>
            <para>Specifies the format in which the sample will be recorded. See <see cref="T:Godot.AudioStreamSample.FormatEnum"/> for available formats.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.SetRecordingActive(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.IsRecordingActive">
            <summary>
            <para>Returns whether the recording is active or not.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioEffectRecord.GetRecording">
            <summary>
            <para>Returns the recorded sample.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectReverb">
            <summary>
            <para>Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayMsec">
            <summary>
            <para>Time between the original signal and the early reflections of the reverb signal, in milliseconds.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayFeedback">
            <summary>
            <para>Output percent of predelay. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.RoomSize">
            <summary>
            <para>Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Damping">
            <summary>
            <para>Defines how reflective the imaginary room's walls are. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Spread">
            <summary>
            <para>Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Hipass">
            <summary>
            <para>High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Dry">
            <summary>
            <para>Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Wet">
            <summary>
            <para>Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectSpectrumAnalyzer.FFT_Size.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.AudioEffectSpectrumAnalyzer.FFT_Size"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectSpectrumAnalyzerInstance.MagnitudeMode.Average">
            <summary>
            <para>Use the average value as magnitude.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioEffectSpectrumAnalyzerInstance.MagnitudeMode.Max">
            <summary>
            <para>Use the maximum value as magnitude.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioServer">
            <summary>
            <para><see cref="T:Godot.AudioServer"/> is a low-level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.ModeStereo">
            <summary>
            <para>Two or fewer speakers were detected.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround31">
            <summary>
            <para>A 3.1 channel surround setup was detected.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround51">
            <summary>
            <para>A 5.1 channel surround setup was detected.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioServer.SpeakerMode.Surround71">
            <summary>
            <para>A 7.1 channel surround setup was detected.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioServer.BusCount">
            <summary>
            <para>Number of available audio buses.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioServer.Device">
            <summary>
            <para>Name of the current device for audio output (see <see cref="M:Godot.AudioServer.GetDeviceList"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.AudioServer.GlobalRateScale">
            <summary>
            <para>Scales the rate at which audio is played (i.e. setting it to <c>0.5</c> will make the audio be played twice as fast).</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBus(System.Int32)">
            <summary>
            <para>Removes the bus at index <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBus(System.Int32)">
            <summary>
            <para>Adds a bus at <c>at_position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.MoveBus(System.Int32,System.Int32)">
            <summary>
            <para>Moves the bus from index <c>index</c> to index <c>to_index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusName(System.Int32,System.String)">
            <summary>
            <para>Sets the name of the bus at index <c>bus_idx</c> to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusName(System.Int32)">
            <summary>
            <para>Returns the name of the bus with the index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusIndex(Godot.StringName)">
            <summary>
            <para>Returns the index of the bus with the name <c>bus_name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusChannels(System.Int32)">
            <summary>
            <para>Returns the amount of channels of the bus at index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusVolumeDb(System.Int32,System.Single)">
            <summary>
            <para>Sets the volume of the bus at index <c>bus_idx</c> to <c>volume_db</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusVolumeDb(System.Int32)">
            <summary>
            <para>Returns the volume of the bus at index <c>bus_idx</c> in dB.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSend(System.Int32,Godot.StringName)">
            <summary>
            <para>Connects the output of the bus at <c>bus_idx</c> to the bus named <c>send</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusSend(System.Int32)">
            <summary>
            <para>Returns the name of the bus that the bus at index <c>bus_idx</c> sends to.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSolo(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is in solo mode.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusSolo(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is in solo mode.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusMute(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is muted.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusMute(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is muted.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusBypassEffects(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is bypassing effects.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusBypassingEffects(System.Int32)">
            <summary>
            <para>If <c>true</c>, the bus at index <c>bus_idx</c> is bypassing effects.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBusEffect(System.Int32,Godot.AudioEffect,System.Int32)">
            <summary>
            <para>Adds an <see cref="T:Godot.AudioEffect"/> effect to the bus <c>bus_idx</c> at <c>at_position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBusEffect(System.Int32,System.Int32)">
            <summary>
            <para>Removes the effect at index <c>effect_idx</c> from the bus at index <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffectCount(System.Int32)">
            <summary>
            <para>Returns the number of effects on the bus at <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffect(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioEffect"/> at position <c>effect_idx</c> in bus <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffectInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioEffectInstance"/> assigned to the given bus and effect indices (and optionally channel).</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SwapBusEffects(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Swaps the position of two effects in bus <c>bus_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusEffectEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the effect at index <c>effect_idx</c> on the bus at index <c>bus_idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusEffectEnabled(System.Int32,System.Int32)">
            <summary>
            <para>If <c>true</c>, the effect at index <c>effect_idx</c> on the bus at index <c>bus_idx</c> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeLeftDb(System.Int32,System.Int32)">
            <summary>
            <para>Returns the peak volume of the left speaker at bus index <c>bus_idx</c> and channel index <c>channel</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeRightDb(System.Int32,System.Int32)">
            <summary>
            <para>Returns the peak volume of the right speaker at bus index <c>bus_idx</c> and channel index <c>channel</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Lock">
            <summary>
            <para>Locks the audio driver's main loop.</para>
            <para>Note: Remember to unlock it afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Unlock">
            <summary>
            <para>Unlocks the audio driver's main loop. (After locking it, you should always unlock it.)</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetSpeakerMode">
            <summary>
            <para>Returns the speaker configuration.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetMixRate">
            <summary>
            <para>Returns the sample rate at the output of the <see cref="T:Godot.AudioServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetDeviceList">
            <summary>
            <para>Returns the names of all audio devices detected on the system.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetTimeToNextMix">
            <summary>
            <para>Returns the relative time until the next mix occurs.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetTimeSinceLastMix">
            <summary>
            <para>Returns the relative time since the last mix occurred.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetOutputLatency">
            <summary>
            <para>Returns the audio driver's output latency.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureGetDeviceList">
            <summary>
            <para>Returns the names of all audio input devices detected on the system.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureGetDevice">
            <summary>
            <para>Name of the current device for audio input (see <see cref="M:Godot.AudioServer.CaptureGetDeviceList"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.CaptureSetDevice(System.String)">
            <summary>
            <para>Sets which audio input device is used for audio capture.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusLayout(Godot.AudioBusLayout)">
            <summary>
            <para>Overwrites the currently used <see cref="T:Godot.AudioBusLayout"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GenerateBusLayout">
            <summary>
            <para>Generates an <see cref="T:Godot.AudioBusLayout"/> using the available buses and effects.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioServer.BusLayoutChangedHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.AudioBusLayout"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStream">
            <summary>
            <para>Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via <see cref="T:Godot.AudioStreamSample"/>) and OGG (via <see cref="T:Godot.AudioStreamOGGVorbis"/>) file formats.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStream.GetLength">
            <summary>
            <para>Returns the length of the audio stream in seconds.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamMP3">
            <summary>
            <para>MP3 audio stream driver.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamMP3.Data">
            <summary>
            <para>Contains the audio data in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamMP3.Loop">
            <summary>
            <para>If <c>true</c>, the stream will automatically loop when it reaches the end.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamMP3.LoopOffset">
            <summary>
            <para>Time in seconds at which the stream starts after being looped.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamOGGVorbis">
            <summary>
            <para>OGG Vorbis audio stream driver.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.Data">
            <summary>
            <para>Contains the audio data in bytes.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.Loop">
            <summary>
            <para>If <c>true</c>, the stream will automatically loop when it reaches the end.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.LoopOffset">
            <summary>
            <para>Time in seconds at which the stream starts after being looped.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayback">
            <summary>
            <para>Can play, loop, pause a scroll through audio. See <see cref="T:Godot.AudioStream"/> and <see cref="T:Godot.AudioStreamOGGVorbis"/> for usage.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer">
            <summary>
            <para>Plays an audio stream non-positionally.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Stereo">
            <summary>
            <para>The audio will be played only on the first channel.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Surround">
            <summary>
            <para>The audio will be played on all surround channels.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer.MixTargetEnum.Center">
            <summary>
            <para>The audio will be played on the second channel, which is usually the center.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> object to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.VolumeDb">
            <summary>
            <para>Volume of sound, in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.PitchScale">
            <summary>
            <para>The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when added to scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.StreamPaused">
            <summary>
            <para>If <c>true</c>, the playback is paused. You can resume it by setting <c>stream_paused</c> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.MixTarget">
            <summary>
            <para>If the audio configuration has more than two speakers, this sets the target channels. See <see cref="T:Godot.AudioStreamPlayer.MixTargetEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Bus">
            <summary>
            <para>Bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given <c>from_position</c>, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/> in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.GetStreamPlayback">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioStreamPlayback"/> object associated with this <see cref="T:Godot.AudioStreamPlayer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer.FinishedHandler">
            <summary>
            <para>Emitted when the audio stops playing.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer2D">
            <summary>
            <para>Plays audio that dampens with distance from screen center.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> object to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.VolumeDb">
            <summary>
            <para>Base volume without dampening.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.PitchScale">
            <summary>
            <para>The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when added to scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.StreamPaused">
            <summary>
            <para>If <c>true</c>, the playback is paused. You can resume it by setting <c>stream_paused</c> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.MaxDistance">
            <summary>
            <para>Maximum distance from which audio is still hearable.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Attenuation">
            <summary>
            <para>Dampens audio over distance with this as an exponent.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Bus">
            <summary>
            <para>Bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.AreaMask">
            <summary>
            <para>Areas in which this sound plays.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given position <c>from_position</c>, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.GetStreamPlayback">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioStreamPlayback"/> object associated with this <see cref="T:Godot.AudioStreamPlayer2D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer2D.FinishedHandler">
            <summary>
            <para>Emitted when the audio stops playing.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer3D">
            <summary>
            <para>Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space. For greater realism, a low-pass filter is automatically applied to distant sounds. This can be disabled by setting <see cref="P:Godot.AudioStreamPlayer3D.AttenuationFilterCutoffHz"/> to <c>20500</c>.</para>
            <para>By default, audio is heard from the camera position. This can be changed by adding a <see cref="T:Godot.Listener3D"/> node to the scene and enabling it by calling <see cref="M:Godot.Listener3D.MakeCurrent"/> on it.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.InverseDistance">
            <summary>
            <para>Linear dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.InverseSquareDistance">
            <summary>
            <para>Squared dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.Logarithmic">
            <summary>
            <para>Logarithmic dampening of loudness according to distance.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.AttenuationModelEnum.Disabled">
            <summary>
            <para>No dampening of loudness according to distance. The sound will still be heard positionally, unlike an <see cref="T:Godot.AudioStreamPlayer"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.OutOfRangeModeEnum.Mix">
            <summary>
            <para>Mix this audio in, even when it's out of range. This increases CPU usage, but keeps the sound playing at the correct position if the camera leaves and enters the <see cref="T:Godot.AudioStreamPlayer3D"/>'s <see cref="P:Godot.AudioStreamPlayer3D.MaxDistance"/> radius.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.OutOfRangeModeEnum.Pause">
            <summary>
            <para>Pause this audio when it gets out of range. This decreases CPU usage, but will cause the sound to restart if the camera leaves and enters the <see cref="T:Godot.AudioStreamPlayer3D"/>'s <see cref="P:Godot.AudioStreamPlayer3D.MaxDistance"/> radius.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.Disabled">
            <summary>
            <para>Disables doppler tracking.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.IdleStep">
            <summary>
            <para>Executes doppler tracking in idle step.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamPlayer3D.DopplerTrackingEnum.PhysicsStep">
            <summary>
            <para>Executes doppler tracking in physics step.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Stream">
            <summary>
            <para>The <see cref="T:Godot.AudioStream"/> resource to be played.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationModel">
            <summary>
            <para>Decides if audio should get quieter with distance linearly, quadratically, logarithmically, or not be affected by distance, effectively disabling attenuation.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitDb">
            <summary>
            <para>The base sound level unaffected by dampening, in decibels.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitSize">
            <summary>
            <para>The factor for the attenuation effect. Higher values make the sound audible over a larger distance.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDb">
            <summary>
            <para>Sets the absolute maximum of the soundlevel, in decibels.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.PitchScale">
            <summary>
            <para>The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Playing">
            <summary>
            <para>If <c>true</c>, audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Autoplay">
            <summary>
            <para>If <c>true</c>, audio plays when the AudioStreamPlayer3D node is added to scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.StreamPaused">
            <summary>
            <para>If <c>true</c>, the playback is paused. You can resume it by setting <see cref="P:Godot.AudioStreamPlayer3D.StreamPaused"/> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDistance">
            <summary>
            <para>Sets the distance from which the <see cref="P:Godot.AudioStreamPlayer3D.OutOfRangeMode"/> takes effect. Has no effect if set to 0.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.OutOfRangeMode">
            <summary>
            <para>Decides if audio should pause when source is outside of <see cref="P:Godot.AudioStreamPlayer3D.MaxDistance"/> range.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Bus">
            <summary>
            <para>The bus on which this audio is playing.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AreaMask">
            <summary>
            <para>Areas in which this sound plays.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleEnabled">
            <summary>
            <para>If <c>true</c>, the audio should be dampened according to the direction of the sound.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleDegrees">
            <summary>
            <para>The angle in which the audio reaches cameras undampened.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleFilterAttenuationDb">
            <summary>
            <para>Dampens audio if camera is outside of <see cref="P:Godot.AudioStreamPlayer3D.EmissionAngleDegrees"/> and <see cref="P:Godot.AudioStreamPlayer3D.EmissionAngleEnabled"/> is set by this factor, in decibels.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterCutoffHz">
            <summary>
            <para>Dampens audio using a low-pass filter above this frequency, in Hz. To disable the dampening effect entirely, set this to <c>20500</c> as this frequency is above the human hearing limit.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterDb">
            <summary>
            <para>Amount how much the filter affects the loudness, in decibels.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.DopplerTracking">
            <summary>
            <para>Decides in which step the Doppler effect should be calculated.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Play(System.Single)">
            <summary>
            <para>Plays the audio from the given position <c>from_position</c>, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Seek(System.Single)">
            <summary>
            <para>Sets the position from which audio will be played, in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Stop">
            <summary>
            <para>Stops the audio.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.GetPlaybackPosition">
            <summary>
            <para>Returns the position in the <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.GetStreamPlayback">
            <summary>
            <para>Returns the <see cref="T:Godot.AudioStreamPlayback"/> object associated with this <see cref="T:Godot.AudioStreamPlayer3D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer3D.FinishedHandler">
            <summary>
            <para>Emitted when the audio stops playing.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamRandomPitch">
            <summary>
            <para>Randomly varies pitch on each start.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.AudioStream">
            <summary>
            <para>The current <see cref="T:Godot.AudioStream"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.RandomPitch">
            <summary>
            <para>The intensity of random pitch variation.</para>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamSample">
            <summary>
            <para>AudioStreamSample stores sound samples loaded from WAV files. To play the stored sound, use an <see cref="T:Godot.AudioStreamPlayer"/> (for non-positional audio) or <see cref="T:Godot.AudioStreamPlayer2D"/>/<see cref="T:Godot.AudioStreamPlayer3D"/> (for positional audio). The sound can be looped.</para>
            <para>This class can also be used to store dynamically-generated PCM audio data.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Disabled">
            <summary>
            <para>Audio does not loop.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Forward">
            <summary>
            <para>Audio loops the data between <see cref="P:Godot.AudioStreamSample.LoopBegin"/> and <see cref="P:Godot.AudioStreamSample.LoopEnd"/>, playing forward only.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.PingPong">
            <summary>
            <para>Audio loops the data between <see cref="P:Godot.AudioStreamSample.LoopBegin"/> and <see cref="P:Godot.AudioStreamSample.LoopEnd"/>, playing back and forth.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.LoopModeEnum.Backward">
            <summary>
            <para>Audio loops the data between <see cref="P:Godot.AudioStreamSample.LoopBegin"/> and <see cref="P:Godot.AudioStreamSample.LoopEnd"/>, playing backward only.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.Format8Bits">
            <summary>
            <para>8-bit audio codec.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.Format16Bits">
            <summary>
            <para>16-bit audio codec.</para>
            </summary>
        </member>
        <member name="F:Godot.AudioStreamSample.FormatEnum.ImaAdpcm">
            <summary>
            <para>Audio is compressed using IMA ADPCM.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Data">
            <summary>
            <para>Contains the audio data in bytes.</para>
            <para>Note: This property expects signed PCM8 data. To convert unsigned PCM8 to signed PCM8, subtract 128 from each byte.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Format">
            <summary>
            <para>Audio format. See <see cref="T:Godot.AudioStreamSample.FormatEnum"/> constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopMode">
            <summary>
            <para>The loop mode. This information will be imported automatically from the WAV file if present. See <see cref="T:Godot.AudioStreamSample.LoopModeEnum"/> constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopBegin">
            <summary>
            <para>The loop start point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopEnd">
            <summary>
            <para>The loop end point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.MixRate">
            <summary>
            <para>The sample rate for mixing this audio.</para>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Stereo">
            <summary>
            <para>If <c>true</c>, audio is stereo.</para>
            </summary>
        </member>
        <member name="M:Godot.AudioStreamSample.SaveToWav(System.String)">
            <summary>
            <para>Saves the AudioStreamSample as a WAV file to <c>path</c>. Samples with IMA ADPCM format can't be saved.</para>
            <para>Note: A <c>.wav</c> extension is automatically appended to <c>path</c> if it is missing.</para>
            </summary>
        </member>
        <member name="T:Godot.BackBufferCopy">
            <summary>
            <para>Node for back-buffering the currently-displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Use the <c>texture(SCREEN_TEXTURE, ...)</c> function in your shader scripts to access the buffer.</para>
            <para>Note: Since this node inherits from <see cref="T:Godot.Node2D"/> (and not <see cref="T:Godot.Control"/>), anchors and margins won't apply to child <see cref="T:Godot.Control"/>-derived nodes. This can be problematic when resizing the window. To avoid this, add <see cref="T:Godot.Control"/>-derived nodes as siblings to the BackBufferCopy node instead of adding them as children.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Disabled">
            <summary>
            <para>Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Rect">
            <summary>
            <para>BackBufferCopy buffers a rectangular region.</para>
            </summary>
        </member>
        <member name="F:Godot.BackBufferCopy.CopyModeEnum.Viewport">
            <summary>
            <para>BackBufferCopy buffers the entire screen.</para>
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.CopyMode">
            <summary>
            <para>Buffer mode. See <see cref="T:Godot.BackBufferCopy.CopyModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.Rect">
            <summary>
            <para>The area covered by the BackBufferCopy. Only used if <see cref="P:Godot.BackBufferCopy.CopyMode"/> is .</para>
            </summary>
        </member>
        <member name="T:Godot.BaseButton">
            <summary>
            <para>BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.ActionModeEnum.Press">
            <summary>
            <para>Require just a press to consider the button clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.ActionModeEnum.Release">
            <summary>
            <para>Require a press and a subsequent release before considering the button clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Normal">
            <summary>
            <para>The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Pressed">
            <summary>
            <para>The state of buttons are pressed.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Hover">
            <summary>
            <para>The state of buttons are hovered.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.Disabled">
            <summary>
            <para>The state of buttons are disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseButton.DrawMode.HoverPressed">
            <summary>
            <para>The state of buttons are both hovered and pressed.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Disabled">
            <summary>
            <para>If <c>true</c>, the button is in disabled state and can't be clicked or toggled.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ToggleMode">
            <summary>
            <para>If <c>true</c>, the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ShortcutInTooltip">
            <summary>
            <para>If <c>true</c>, the button will add information about its shortcut in the tooltip.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Pressed">
            <summary>
            <para>If <c>true</c>, the button's state is pressed. Means the button is pressed down or toggled (if <see cref="P:Godot.BaseButton.ToggleMode"/> is active).</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ActionMode">
            <summary>
            <para>Determines when the button is considered clicked, one of the <see cref="T:Godot.BaseButton.ActionModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ButtonMask">
            <summary>
            <para>Binary mask to choose which mouse buttons this button will respond to.</para>
            <para>To allow both left-click and right-click, use <c>BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.KeepPressedOutside">
            <summary>
            <para>If <c>true</c>, the button stays pressed when moving the cursor outside the button while pressing it.</para>
            <para>Note: This property only affects the button's visual appearance. Signals will be emitted at the same moment regardless of this property's value.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Shortcut">
            <summary>
            <para><see cref="T:Godot.Shortcut"/> associated to the button.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ButtonGroup">
            <summary>
            <para>The <see cref="T:Godot.ButtonGroup"/> associated with the button. Not to be confused with node groups.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ShortcutContext">
            <summary>
            <para>The <see cref="T:Godot.Node"/> which must be a parent of the focused GUI <see cref="T:Godot.Control"/> for the shortcut to be activated. If <c>null</c>, the shortcut can be activated when any control is focused (a global shortcut). This allows shortcuts to be accepted only when the user has a certain area of the GUI focused.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Pressed">
            <summary>
            <para>Called when the button is pressed. If you need to know the button's pressed state (and <see cref="P:Godot.BaseButton.ToggleMode"/> is active), use <see cref="M:Godot.BaseButton._Toggled(System.Boolean)"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Toggled(System.Boolean)">
            <summary>
            <para>Called when the button is toggled (only if <see cref="P:Godot.BaseButton.ToggleMode"/> is active).</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton.IsHovered">
            <summary>
            <para>Returns <c>true</c> if the mouse has entered the button and has not left it yet.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseButton.GetDrawMode">
            <summary>
            <para>Returns the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the <see cref="T:Godot.BaseButton.DrawMode"/> enum.</para>
            </summary>
        </member>
        <member name="T:Godot.BaseButton.ButtonDownHandler">
            <summary>
            <para>Emitted when the button starts being held down.</para>
            </summary>
        </member>
        <member name="T:Godot.BaseButton.ToggledHandler">
            <summary>
            <para>Emitted when the button was just toggled between pressed and normal states (only if <see cref="P:Godot.BaseButton.ToggleMode"/> is active). The new state is contained in the <c>button_pressed</c> argument.</para>
            </summary>
        </member>
        <member name="T:Godot.BaseButton.PressedSignalHandler">
            <summary>
            <para>Emitted when the button is toggled or pressed. This is on <c>button_down</c> if <see cref="P:Godot.BaseButton.ActionMode"/> is  and on <c>button_up</c> otherwise.</para>
            <para>If you need to know the button's pressed state (and <see cref="P:Godot.BaseButton.ToggleMode"/> is active), use <c>toggled</c> instead.</para>
            </summary>
        </member>
        <member name="T:Godot.BaseButton.ButtonUpHandler">
            <summary>
            <para>Emitted when the button stops being held down.</para>
            </summary>
        </member>
        <member name="T:Godot.BaseMaterial3D">
            <summary>
            <para>This provides a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.EmissionOperatorEnum.Add">
            <summary>
            <para>Adds the emission color to the color from the emission texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.EmissionOperatorEnum.Multiply">
            <summary>
            <para>Multiplies the emission color by the color from the emission texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DiffuseModeEnum.Burley">
            <summary>
            <para>Default diffuse scattering algorithm.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DiffuseModeEnum.Lambert">
            <summary>
            <para>Diffuse scattering ignores roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DiffuseModeEnum.LambertWrap">
            <summary>
            <para>Extends Lambert to cover more than 90 degrees when roughness increases.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DiffuseModeEnum.OrenNayar">
            <summary>
            <para>Attempts to use roughness to emulate microsurfacing.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DiffuseModeEnum.Toon">
            <summary>
            <para>Uses a hard cut for lighting, with smoothing affected by roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.ShadingModeEnum.Unshaded">
            <summary>
            <para>The object will not receive shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.ShadingModeEnum.PerPixel">
            <summary>
            <para>The object will be shaded per pixel. Useful for realistic shading effect.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.ShadingModeEnum.PerVertex">
            <summary>
            <para>The object will be shaded per vertex. Useful when you want cheaper shaders and do not care about visual quality.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.ShadingModeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.ShadingModeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.SpecularModeEnum.SchlickGgx">
            <summary>
            <para>Default specular blob.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.SpecularModeEnum.Blinn">
            <summary>
            <para>Older specular algorithm, included for compatibility.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.SpecularModeEnum.Phong">
            <summary>
            <para>Older specular algorithm, included for compatibility.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.SpecularModeEnum.Toon">
            <summary>
            <para>Toon blob which changes size based on roughness.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.SpecularModeEnum.Disabled">
            <summary>
            <para>No specular blob.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Emission">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.EmissionEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.NormalMapping">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.NormalEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Rim">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.RimEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Clearcoat">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.ClearcoatEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Anisotropy">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.AnisotropyEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.AmbientOcclusion">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.AoEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.HeightMapping">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.HeightmapEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.SubsurfaceScattering">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.SubsurfScatterEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.SubsurfaceTransmittance">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.SubsurfScatterTransmittanceEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Backlight">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.BacklightEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Refraction">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.RefractionEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Detail">
            <summary>
            <para>Constant for setting <see cref="P:Godot.BaseMaterial3D.DetailEnabled"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Feature.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.Feature"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.DisableDepthTest">
            <summary>
            <para>Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.AlbedoFromVertexColor">
            <summary>
            <para>Set <c>ALBEDO</c> to the per-vertex color specified in the mesh.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.SrgbVertexColor">
            <summary>
            <para>Vertex color is in sRGB space and needs to be converted to linear. Only applies in the Vulkan renderer.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.UsePointSize">
            <summary>
            <para>Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use <c>POINT_COORD</c> instead of <c>UV</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.FixedSize">
            <summary>
            <para>Object is scaled by depth so that it always appears the same size on screen.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.BillboardKeepScale">
            <summary>
            <para>Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when <see cref="P:Godot.BaseMaterial3D.BillboardMode"/> is .</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.Uv1UseTriplanar">
            <summary>
            <para>Use triplanar texture lookup for all texture lookups that would normally use <c>UV</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.Uv2UseTriplanar">
            <summary>
            <para>Use triplanar texture lookup for all texture lookups that would normally use <c>UV2</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.Uv1UseWorldTriplanar">
            <summary>
            <para>Use triplanar texture lookup for all texture lookups that would normally use <c>UV</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.Uv2UseWorldTriplanar">
            <summary>
            <para>Use triplanar texture lookup for all texture lookups that would normally use <c>UV2</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.AoOnUv2">
            <summary>
            <para>Use <c>UV2</c> coordinates to look up from the <see cref="P:Godot.BaseMaterial3D.AoTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.EmissionOnUv2">
            <summary>
            <para>Use <c>UV2</c> coordinates to look up from the <see cref="P:Godot.BaseMaterial3D.EmissionTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.AlbedoTextureForceSrgb">
            <summary>
            <para>Forces the shader to convert albedo from sRGB space to linear space.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.DontReceiveShadows">
            <summary>
            <para>Disables receiving shadows from other objects.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.DisableAmbientLight">
            <summary>
            <para>Disables receiving ambient light.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.UseShadowToOpacity">
            <summary>
            <para>Enables the shadow to opacity feature.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.UseTextureRepeat">
            <summary>
            <para>Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.InvertHeightmap">
            <summary>
            <para>Invert values read from a depth texture to convert them to height values (heightmap).</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.SubsurfaceModeSkin">
            <summary>
            <para>Enables the skin mode for subsurface scattering which is used to improve the look of subsurface scattering when used for human skin.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.Flags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.Flags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.CullModeEnum.Back">
            <summary>
            <para>Default cull mode. The back of the object is culled when not visible.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.CullModeEnum.Front">
            <summary>
            <para>The front of the object is culled when not visible.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.CullModeEnum.Disabled">
            <summary>
            <para>No culling is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DetailUV.Uv1">
            <summary>
            <para>Use <c>UV</c> with the detail texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DetailUV.Uv2">
            <summary>
            <para>Use <c>UV2</c> with the detail texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.Nearest">
            <summary>
            <para>The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering, but the texture will look pixelized.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.Linear">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels. Use this when you want to avoid a pixelated style, but do not want mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.NearestWithMipmaps">
            <summary>
            <para>The texture filter reads from the nearest pixel in the nearest mipmap. The fastest way to read from textures with mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.LinearWithMipmaps">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps. Use this for most cases as mipmaps are important to smooth out pixels that are far from the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.NearestWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter reads from the nearest pixel, but selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.LinearWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera. This is the slowest of the filtering options, but results in the highest quality texturing.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureFilterEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.TextureFilterEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DistanceFadeModeEnum.Disabled">
            <summary>
            <para>Do not use distance fade.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DistanceFadeModeEnum.PixelAlpha">
            <summary>
            <para>Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DistanceFadeModeEnum.PixelDither">
            <summary>
            <para>Smoothly fades the object out based on each pixel's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than .</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DistanceFadeModeEnum.ObjectDither">
            <summary>
            <para>Smoothly fades the object out based on the object's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than .</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BillboardModeEnum.Disabled">
            <summary>
            <para>Billboard mode is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BillboardModeEnum.Enabled">
            <summary>
            <para>The object's Z axis will always face the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BillboardModeEnum.FixedY">
            <summary>
            <para>The object's X axis will always face the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BillboardModeEnum.Particles">
            <summary>
            <para>Used for particle systems when assigned to <see cref="T:Godot.GPUParticles3D"/> and <see cref="T:Godot.CPUParticles3D"/> nodes. Enables <c>particles_anim_*</c> properties.</para>
            <para>The <see cref="P:Godot.ParticlesMaterial.AnimSpeed"/> or <see cref="P:Godot.CPUParticles3D.AnimSpeed"/> should also be set to a positive value for the animation to play.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DepthDrawModeEnum.OpaqueOnly">
            <summary>
            <para>Default depth draw mode. Depth is drawn only for opaque objects.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DepthDrawModeEnum.Always">
            <summary>
            <para>Depth draw is calculated for both opaque and transparent objects.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.DepthDrawModeEnum.Disabled">
            <summary>
            <para>No depth draw.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureChannel.Red">
            <summary>
            <para>Used to read from the red channel of a texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureChannel.Green">
            <summary>
            <para>Used to read from the green channel of a texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureChannel.Blue">
            <summary>
            <para>Used to read from the blue channel of a texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureChannel.Alpha">
            <summary>
            <para>Used to read from the alpha channel of a texture.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureChannel.Grayscale">
            <summary>
            <para>Currently unused.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.AlphaAntiAliasing.Off">
            <summary>
            <para>Disables Alpha AntiAliasing for the material.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.AlphaAntiAliasing.AlphaToCoverage">
            <summary>
            <para>Enables AlphaToCoverage. Alpha values in the material are passed to the AntiAliasing sample mask.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.AlphaAntiAliasing.AlphaToCoverageAndToOne">
            <summary>
            <para>Enables AlphaToCoverage and forces all non-zero alpha values to <c>1</c>. Alpha values in the material are passed to the AntiAliasing sample mask.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BlendModeEnum.Mix">
            <summary>
            <para>Default blend mode. The color of the object is blended over the background based on the object's alpha value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BlendModeEnum.Add">
            <summary>
            <para>The color of the object is added to the background.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BlendModeEnum.Sub">
            <summary>
            <para>The color of the object is subtracted from the background.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.BlendModeEnum.Mul">
            <summary>
            <para>The color of the object is multiplied by the background.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.Disabled">
            <summary>
            <para>The material will not use transparency.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.Alpha">
            <summary>
            <para>The material will use the texture's alpha values for transparency.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.AlphaScissor">
            <summary>
            <para>The material will cut off all values below a threshold, the rest will remain opaque.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.AlphaHash">
            <summary>
            <para>The material will cut off all values below a spatially-deterministic threshold, the rest will remain opaque.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.AlphaDepthPrePass">
            <summary>
            <para>The material will use the texture's alpha value for transparency, but will still be rendered in the pre-pass.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TransparencyEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.TransparencyEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Albedo">
            <summary>
            <para>Texture specifying per-pixel color.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Metallic">
            <summary>
            <para>Texture specifying per-pixel metallic value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Roughness">
            <summary>
            <para>Texture specifying per-pixel roughness value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Emission">
            <summary>
            <para>Texture specifying per-pixel emission color.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Normal">
            <summary>
            <para>Texture specifying per-pixel normal vector.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Rim">
            <summary>
            <para>Texture specifying per-pixel rim value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Clearcoat">
            <summary>
            <para>Texture specifying per-pixel clearcoat value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Flowmap">
            <summary>
            <para>Texture specifying per-pixel flowmap direction for use with <see cref="P:Godot.BaseMaterial3D.Anisotropy"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.AmbientOcclusion">
            <summary>
            <para>Texture specifying per-pixel ambient occlusion value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Heightmap">
            <summary>
            <para>Texture specifying per-pixel height.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.SubsurfaceScattering">
            <summary>
            <para>Texture specifying per-pixel subsurface scattering.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.SubsurfaceTransmittance">
            <summary>
            <para>Texture specifying per-pixel transmittance for subsurface scattering.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Backlight">
            <summary>
            <para>Texture specifying per-pixel backlight color.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Refraction">
            <summary>
            <para>Texture specifying per-pixel refraction strength.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.DetailMask">
            <summary>
            <para>Texture specifying per-pixel detail mask blending value.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.DetailAlbedo">
            <summary>
            <para>Texture specifying per-pixel detail color.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.DetailNormal">
            <summary>
            <para>Texture specifying per-pixel detail normal.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Orm">
            <summary>
            <para>Texture holding ambient occlusion, roughness, and metallic.</para>
            </summary>
        </member>
        <member name="F:Godot.BaseMaterial3D.TextureParam.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.BaseMaterial3D.TextureParam"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Transparency">
            <summary>
            <para>If <c>true</c>, transparency is enabled on the body. See also <see cref="P:Godot.BaseMaterial3D.BlendMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlphaScissorThreshold">
            <summary>
            <para>Threshold at which the alpha scissor will discard values.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlphaHashScale">
            <summary>
            <para>The hashing scale for Alpha Hash. Recommended values between <c>0</c> and <c>2</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlphaAntialiasingMode">
            <summary>
            <para>The type of alpha antialiasing to apply. See <see cref="T:Godot.BaseMaterial3D.AlphaAntiAliasing"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlphaAntialiasingEdge">
            <summary>
            <para>Threshold at which antialiasing will by applied on the alpha channel.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.BlendMode">
            <summary>
            <para>The material's blend mode.</para>
            <para>Note: Values other than <c>Mix</c> force the object into the transparent pipeline. See <see cref="T:Godot.BaseMaterial3D.BlendModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.CullMode">
            <summary>
            <para>Which side of the object is not drawn when backfaces are rendered. See <see cref="T:Godot.BaseMaterial3D.CullModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DepthDrawMode">
            <summary>
            <para>Determines when depth rendering takes place. See <see cref="T:Godot.BaseMaterial3D.DepthDrawModeEnum"/>. See also <see cref="P:Godot.BaseMaterial3D.Transparency"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.NoDepthTest">
            <summary>
            <para>If <c>true</c>, depth testing is disabled and the object will be drawn in render order.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ShadingMode">
            <summary>
            <para>Sets whether the shading takes place per-pixel or per-vertex. Per-vertex lighting is faster, making it the best choice for mobile applications, however it looks considerably worse than per-pixel.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DiffuseMode">
            <summary>
            <para>The algorithm used for diffuse light scattering. See <see cref="T:Godot.BaseMaterial3D.DiffuseModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.SpecularMode">
            <summary>
            <para>The method for rendering the specular blob. See <see cref="T:Godot.BaseMaterial3D.SpecularModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DisableAmbientLight">
            <summary>
            <para>If <c>true</c>, the object receives no ambient light.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.VertexColorUseAsAlbedo">
            <summary>
            <para>If <c>true</c>, the vertex color is used as albedo color.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.VertexColorIsSrgb">
            <summary>
            <para>If <c>true</c>, the model's vertex colors are processed as sRGB mode.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlbedoColor">
            <summary>
            <para>The material's base color.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlbedoTexture">
            <summary>
            <para>Texture to multiply by <see cref="P:Godot.BaseMaterial3D.AlbedoColor"/>. Used for basic texturing of objects.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AlbedoTexForceSrgb">
            <summary>
            <para>Forces a conversion of the <see cref="P:Godot.BaseMaterial3D.AlbedoTexture"/> from sRGB space to linear space.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Metallic">
            <summary>
            <para>A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between <c>0</c> and <c>1</c> should only be used for blending between metal and non-metal sections. To alter the amount of reflection use <see cref="P:Godot.BaseMaterial3D.Roughness"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.MetallicSpecular">
            <summary>
            <para>Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.</para>
            <para>Note: unlike <see cref="P:Godot.BaseMaterial3D.Metallic"/>, this is not energy-conserving, so it should be left at <c>0.5</c> in most cases. See also <see cref="P:Godot.BaseMaterial3D.Roughness"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.MetallicTexture">
            <summary>
            <para>Texture used to specify metallic for an object. This is multiplied by <see cref="P:Godot.BaseMaterial3D.Metallic"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.MetallicTextureChannel">
            <summary>
            <para>Specifies the channel of the <see cref="P:Godot.BaseMaterial3D.MetallicTexture"/> in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Roughness">
            <summary>
            <para>Surface reflection. A value of <c>0</c> represents a perfect mirror while a value of <c>1</c> completely blurs the reflection. See also <see cref="P:Godot.BaseMaterial3D.Metallic"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RoughnessTexture">
            <summary>
            <para>Texture used to control the roughness per-pixel. Multiplied by <see cref="P:Godot.BaseMaterial3D.Roughness"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RoughnessTextureChannel">
            <summary>
            <para>Specifies the channel of the <see cref="P:Godot.BaseMaterial3D.AoTexture"/> in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.EmissionEnabled">
            <summary>
            <para>If <c>true</c>, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a <see cref="T:Godot.GIProbe"/> is used and this object is used in baked lighting.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Emission">
            <summary>
            <para>The emitted light's color. See <see cref="P:Godot.BaseMaterial3D.EmissionEnabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.EmissionEnergy">
            <summary>
            <para>The emitted light's strength. See <see cref="P:Godot.BaseMaterial3D.EmissionEnabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.EmissionOperator">
            <summary>
            <para>Sets how <see cref="P:Godot.BaseMaterial3D.Emission"/> interacts with <see cref="P:Godot.BaseMaterial3D.EmissionTexture"/>. Can either add or multiply. See <see cref="T:Godot.BaseMaterial3D.EmissionOperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.EmissionOnUv2">
            <summary>
            <para>Use <c>UV2</c> to read from the <see cref="P:Godot.BaseMaterial3D.EmissionTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.EmissionTexture">
            <summary>
            <para>Texture that specifies how much surface emits light at a given point.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.NormalEnabled">
            <summary>
            <para>If <c>true</c>, normal mapping is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.NormalScale">
            <summary>
            <para>The strength of the normal map's effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.NormalTexture">
            <summary>
            <para>Texture used to specify the normal at a given pixel. The <c>normal_texture</c> only uses the red and green channels. The normal read from <c>normal_texture</c> is oriented around the surface normal provided by the <see cref="T:Godot.Mesh"/>.</para>
            <para>Note: Godot expects the normal map to use X+, Y-, and Z+ coordinates. See <a href="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">this page</a> for a comparison of normal map coordinates expected by popular engines.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RimEnabled">
            <summary>
            <para>If <c>true</c>, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Rim">
            <summary>
            <para>Sets the strength of the rim lighting effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RimTint">
            <summary>
            <para>The amount of to blend light and albedo color when rendering rim effect. If <c>0</c> the light color is used, while <c>1</c> means albedo color is used. An intermediate value generally works best.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RimTexture">
            <summary>
            <para>Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by <see cref="P:Godot.BaseMaterial3D.Rim"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ClearcoatEnabled">
            <summary>
            <para>If <c>true</c>, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Clearcoat">
            <summary>
            <para>Sets the strength of the clearcoat effect. Setting to <c>0</c> looks the same as disabling the clearcoat effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ClearcoatGloss">
            <summary>
            <para>Sets the roughness of the clearcoat pass. A higher value results in a smoother clearcoat while a lower value results in a rougher clearcoat.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ClearcoatTexture">
            <summary>
            <para>Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AnisotropyEnabled">
            <summary>
            <para>If <c>true</c>, anisotropy is enabled. Changes the shape of the specular blob and aligns it to tangent space. Mesh tangents are needed for this to work. If the mesh does not contain tangents the anisotropy effect will appear broken.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Anisotropy">
            <summary>
            <para>The strength of the anisotropy effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AnisotropyFlowmap">
            <summary>
            <para>Texture that offsets the tangent map for anisotropy calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AoEnabled">
            <summary>
            <para>If <c>true</c>, ambient occlusion is enabled. Ambient occlusion darkens areas based on the <see cref="P:Godot.BaseMaterial3D.AoTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AoLightAffect">
            <summary>
            <para>Amount that ambient occlusion affects lighting from lights. If <c>0</c>, ambient occlusion only affects ambient light. If <c>1</c>, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AoTexture">
            <summary>
            <para>Texture that defines the amount of ambient occlusion for a given point on the object.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AoOnUv2">
            <summary>
            <para>If <c>true</c>, use <c>UV2</c> coordinates to look up from the <see cref="P:Godot.BaseMaterial3D.AoTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.AoTextureChannel">
            <summary>
            <para>Specifies the channel of the <see cref="P:Godot.BaseMaterial3D.AoTexture"/> in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.SubsurfScatterEnabled">
            <summary>
            <para>If <c>true</c>, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.SubsurfScatterStrength">
            <summary>
            <para>The strength of the subsurface scattering effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.SubsurfScatterSkinMode">
            <summary>
            <para>If <c>true</c>, subsurface scattering will use a special mode optimized for the color and density of human skin.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.SubsurfScatterTexture">
            <summary>
            <para>Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by <see cref="P:Godot.BaseMaterial3D.SubsurfScatterStrength"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.BacklightEnabled">
            <summary>
            <para>If <c>true</c>, the backlight effect is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Backlight">
            <summary>
            <para>The color used by the backlight effect. Represents the light passing through an object.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.BacklightTexture">
            <summary>
            <para>Texture used to control the backlight effect per-pixel. Added to <see cref="P:Godot.BaseMaterial3D.Backlight"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RefractionEnabled">
            <summary>
            <para>If <c>true</c>, the refraction effect is enabled. Distorts transparency based on light from behind the object.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RefractionScale">
            <summary>
            <para>The strength of the refraction effect.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RefractionTexture">
            <summary>
            <para>Texture that controls the strength of the refraction per-pixel. Multiplied by <see cref="P:Godot.BaseMaterial3D.RefractionScale"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.RefractionTextureChannel">
            <summary>
            <para>Specifies the channel of the <see cref="P:Godot.BaseMaterial3D.AoTexture"/> in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailEnabled">
            <summary>
            <para>If <c>true</c>, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on <see cref="P:Godot.BaseMaterial3D.DetailMask"/>. This can be used to add variation to objects, or to blend between two different albedo/normal textures.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailMask">
            <summary>
            <para>Texture used to specify how the detail textures get blended with the base textures.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailBlendMode">
            <summary>
            <para>Specifies how the <see cref="P:Godot.BaseMaterial3D.DetailAlbedo"/> should blend with the current <c>ALBEDO</c>. See <see cref="T:Godot.BaseMaterial3D.BlendModeEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailUvLayer">
            <summary>
            <para>Specifies whether to use <c>UV</c> or <c>UV2</c> for the detail layer. See <see cref="T:Godot.BaseMaterial3D.DetailUV"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailAlbedo">
            <summary>
            <para>Texture that specifies the color of the detail overlay.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DetailNormal">
            <summary>
            <para>Texture that specifies the per-pixel normal of the detail overlay.</para>
            <para>Note: Godot expects the normal map to use X+, Y-, and Z+ coordinates. See <a href="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">this page</a> for a comparison of normal map coordinates expected by popular engines.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv1Scale">
            <summary>
            <para>How much to scale the <c>UV</c> coordinates. This is multiplied by <c>UV</c> in the vertex function.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv1Offset">
            <summary>
            <para>How much to offset the <c>UV</c> coordinates. This amount will be added to <c>UV</c> in the vertex function. This can be used to offset a texture.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv1Triplanar">
            <summary>
            <para>If <c>true</c>, instead of using <c>UV</c> textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv1TriplanarSharpness">
            <summary>
            <para>A lower number blends the texture more softly while a higher number blends the texture more sharply.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv1WorldTriplanar">
            <summary>
            <para>If <c>true</c>, triplanar mapping for <c>UV</c> is calculated in world space rather than object local space. See also <see cref="P:Godot.BaseMaterial3D.Uv1Triplanar"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv2Scale">
            <summary>
            <para>How much to scale the <c>UV2</c> coordinates. This is multiplied by <c>UV2</c> in the vertex function.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv2Offset">
            <summary>
            <para>How much to offset the <c>UV2</c> coordinates. This amount will be added to <c>UV2</c> in the vertex function. This can be used to offset a texture.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv2Triplanar">
            <summary>
            <para>If <c>true</c>, instead of using <c>UV2</c> textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv2TriplanarSharpness">
            <summary>
            <para>A lower number blends the texture more softly while a higher number blends the texture more sharply.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Uv2WorldTriplanar">
            <summary>
            <para>If <c>true</c>, triplanar mapping for <c>UV2</c> is calculated in world space rather than object local space. See also <see cref="P:Godot.BaseMaterial3D.Uv2Triplanar"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.TextureFilter">
            <summary>
            <para>Filter flags for the texture. See <see cref="T:Godot.BaseMaterial3D.TextureFilterEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.TextureRepeat">
            <summary>
            <para>Repeat flags for the texture. See <see cref="T:Godot.BaseMaterial3D.TextureFilterEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DisableReceiveShadows">
            <summary>
            <para>If <c>true</c>, the object receives no shadow that would otherwise be cast onto it.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ShadowToOpacity">
            <summary>
            <para>If <c>true</c>, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.BillboardMode">
            <summary>
            <para>Controls how the object faces the camera. See <see cref="T:Godot.BaseMaterial3D.BillboardModeEnum"/>.</para>
            <para>Note: Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See <a href="https://github.com/godotengine/godot/issues/41567">GitHub issue #41567</a> for details.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.BillboardKeepScale">
            <summary>
            <para>If <c>true</c>, the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when <see cref="P:Godot.BaseMaterial3D.BillboardMode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ParticlesAnimHFrames">
            <summary>
            <para>The number of horizontal frames in the particle sprite sheet. Only enabled when using . See <see cref="P:Godot.BaseMaterial3D.BillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ParticlesAnimVFrames">
            <summary>
            <para>The number of vertical frames in the particle sprite sheet. Only enabled when using . See <see cref="P:Godot.BaseMaterial3D.BillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ParticlesAnimLoop">
            <summary>
            <para>If <c>true</c>, particle animations are looped. Only enabled when using . See <see cref="P:Godot.BaseMaterial3D.BillboardMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.Grow">
            <summary>
            <para>If <c>true</c>, enables the vertex grow setting. See <see cref="P:Godot.BaseMaterial3D.GrowAmount"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.GrowAmount">
            <summary>
            <para>Grows object vertices in the direction of their normals.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.FixedSize">
            <summary>
            <para>If <c>true</c>, the object is rendered at the same size regardless of distance.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.UsePointSize">
            <summary>
            <para>If <c>true</c>, render point size can be changed.</para>
            <para>Note: this is only effective for objects whose geometry is point-based rather than triangle-based. See also <see cref="P:Godot.BaseMaterial3D.PointSize"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.PointSize">
            <summary>
            <para>The point size in pixels. See <see cref="P:Godot.BaseMaterial3D.UsePointSize"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ProximityFadeEnable">
            <summary>
            <para>If <c>true</c>, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.ProximityFadeDistance">
            <summary>
            <para>Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DistanceFadeMode">
            <summary>
            <para>Specifies which type of fade to use. Can be any of the <see cref="T:Godot.BaseMaterial3D.DistanceFadeModeEnum"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DistanceFadeMinDistance">
            <summary>
            <para>Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible.</para>
            <para>Note: If <c>distance_fade_min_distance</c> is greater than <c>distance_fade_max_distance</c>, the behavior will be reversed. The object will start to fade away at <c>distance_fade_max_distance</c> and will fully disappear once it reaches <c>distance_fade_min_distance</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.BaseMaterial3D.DistanceFadeMaxDistance">
            <summary>
            <para>Distance at which the object appears fully opaque.</para>
            <para>Note: If <c>distance_fade_max_distance</c> is less than <c>distance_fade_min_distance</c>, the behavior will be reversed. The object will start to fade away at <c>distance_fade_max_distance</c> and will fully disappear once it reaches <c>distance_fade_min_distance</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.SetFlag(Godot.BaseMaterial3D.Flags,System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables the specified flag. Flags are optional behavior that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to <c>true</c>. See <see cref="T:Godot.BaseMaterial3D.Flags"/> enumerator for options.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.GetFlag(Godot.BaseMaterial3D.Flags)">
            <summary>
            <para>Returns <c>true</c>, if the specified flag is enabled. See <see cref="T:Godot.BaseMaterial3D.Flags"/> enumerator for options.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.SetFeature(Godot.BaseMaterial3D.Feature,System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables the specified <see cref="T:Godot.BaseMaterial3D.Feature"/>. Many features that are available in <see cref="T:Godot.BaseMaterial3D"/>s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.GetFeature(Godot.BaseMaterial3D.Feature)">
            <summary>
            <para>Returns <c>true</c>, if the specified <see cref="T:Godot.BaseMaterial3D.Feature"/> is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.SetTexture(Godot.BaseMaterial3D.TextureParam,Godot.Texture2D)">
            <summary>
            <para>Sets the texture for the slot specified by <c>param</c>. See <see cref="T:Godot.BaseMaterial3D.TextureParam"/> for available slots.</para>
            </summary>
        </member>
        <member name="M:Godot.BaseMaterial3D.GetTexture(Godot.BaseMaterial3D.TextureParam)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture"/> associated with the specified <see cref="T:Godot.BaseMaterial3D.TextureParam"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.BitMap">
            <summary>
            <para>A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.Create(Godot.Vector2)">
            <summary>
            <para>Creates a bitmap with the specified size, filled with <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.CreateFromImageAlpha(Godot.Image,System.Single)">
            <summary>
            <para>Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to <c>false</c> if the alpha value of the image at that position is equal to <c>threshold</c> or less, and <c>true</c> in other case.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBit(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Sets the bitmap's element at the specified position, to the specified value.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetBit(Godot.Vector2)">
            <summary>
            <para>Returns bitmap's value at the specified position.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBitRect(Godot.Rect2,System.Boolean)">
            <summary>
            <para>Sets a rectangular portion of the bitmap to the specified value.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetTrueBitCount">
            <summary>
            <para>Returns the amount of bitmap elements that are set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetSize">
            <summary>
            <para>Returns bitmap's dimensions.</para>
            </summary>
        </member>
        <member name="M:Godot.BitMap.GrowMask(System.Int32,Godot.Rect2)">
            <summary>
            <para>Applies morphological dilation to the bitmap. The first argument is the dilation amount, Rect2 is the area where the dilation will be applied.</para>
            </summary>
        </member>
        <member name="T:Godot.Bone2D">
            <summary>
            <para>Use a hierarchy of <c>Bone2D</c> bound to a <see cref="T:Godot.Skeleton2D"/> to control, and animate other <see cref="T:Godot.Node2D"/> nodes.</para>
            <para>You can use <c>Bone2D</c> and <c>Skeleton2D</c> nodes to animate 2D meshes created with the Polygon 2D UV editor.</para>
            <para>Each bone has a <see cref="P:Godot.Bone2D.Rest"/> transform that you can reset to with <see cref="M:Godot.Bone2D.ApplyRest"/>. These rest poses are relative to the bone's parent.</para>
            <para>If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses.</para>
            </summary>
        </member>
        <member name="P:Godot.Bone2D.Rest">
            <summary>
            <para>Rest transform of the bone. You can reset the node's transforms to this value using <see cref="M:Godot.Bone2D.ApplyRest"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Bone2D.DefaultLength">
            <summary>
            <para>Length of the bone's representation drawn in the editor's viewport in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Bone2D.ApplyRest">
            <summary>
            <para>Stores the node's current transforms in <see cref="P:Godot.Bone2D.Rest"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Bone2D.GetSkeletonRest">
            <summary>
            <para>Returns the node's <see cref="P:Godot.Bone2D.Rest"/> <c>Transform2D</c> if it doesn't have a parent, or its rest pose relative to its parent.</para>
            </summary>
        </member>
        <member name="M:Godot.Bone2D.GetIndexInSkeleton">
            <summary>
            <para>Returns the node's index as part of the entire skeleton. See <see cref="T:Godot.Skeleton2D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.BoneAttachment3D">
            <summary>
            <para>This node must be the child of a <see cref="T:Godot.Skeleton3D"/> node. You can then select a bone for this node to attach to. The BoneAttachment3D node will copy the transform of the selected bone.</para>
            </summary>
        </member>
        <member name="P:Godot.BoneAttachment3D.BoneName">
            <summary>
            <para>The name of the attached bone.</para>
            </summary>
        </member>
        <member name="T:Godot.BoxContainer">
            <summary>
            <para>Arranges child <see cref="T:Godot.Control"/> nodes vertically or horizontally, and rearranges them automatically when their minimum size changes.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.Begin">
            <summary>
            <para>Aligns children with the beginning of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.Center">
            <summary>
            <para>Aligns children with the center of the container.</para>
            </summary>
        </member>
        <member name="F:Godot.BoxContainer.AlignMode.End">
            <summary>
            <para>Aligns children with the end of the container.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxContainer.Alignment">
            <summary>
            <para>The alignment of the container's children (must be one of , , or ).</para>
            </summary>
        </member>
        <member name="M:Godot.BoxContainer.AddSpacer(System.Boolean)">
            <summary>
            <para>Adds a <see cref="T:Godot.Control"/> node to the box as a spacer. If <c>begin</c> is <c>true</c>, it will insert the <see cref="T:Godot.Control"/> node in front of all other children.</para>
            </summary>
        </member>
        <member name="T:Godot.BoxMesh">
            <summary>
            <para>Generate an axis-aligned box <see cref="T:Godot.PrimitiveMesh"/>.</para>
            <para>The box's UV layout is arranged in a 3×2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to <c>Vector3(3, 2, 1)</c>.</para>
            <para>Note: When using a large textured <see cref="T:Godot.BoxMesh"/> (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase <see cref="P:Godot.BoxMesh.SubdivideDepth"/>, <see cref="P:Godot.BoxMesh.SubdivideHeight"/> and <see cref="P:Godot.BoxMesh.SubdivideWidth"/> until you no longer notice UV jittering.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxMesh.Size">
            <summary>
            <para>The box's width, height and depth.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxMesh.SubdivideWidth">
            <summary>
            <para>Number of extra edge loops inserted along the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxMesh.SubdivideHeight">
            <summary>
            <para>Number of extra edge loops inserted along the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxMesh.SubdivideDepth">
            <summary>
            <para>Number of extra edge loops inserted along the Z axis.</para>
            </summary>
        </member>
        <member name="T:Godot.BoxShape3D">
            <summary>
            <para>3D box shape that can be a child of a <see cref="T:Godot.PhysicsBody3D"/> or <see cref="T:Godot.Area3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.BoxShape3D.Size">
            <summary>
            <para>The box's width, height and depth.</para>
            </summary>
        </member>
        <member name="T:Godot.Button">
            <summary>
            <para>Button is the standard themed button. It can contain text and an icon, and will display them according to the current <see cref="T:Godot.Theme"/>.</para>
            <para>Example of creating a button and assigning an action when pressed by code:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _ready():</para>
            <para>    var button = Button.new()</para>
            <para>    button.text = "Click me"</para>
            <para>    button.connect("pressed", self, "_button_pressed")</para>
            <para>    add_child(button)</para>
            <para></para>
            <para>func _button_pressed():</para>
            <para>    print("Hello world!")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    var button = new Button();</para>
            <para>    button.Text = "Click me";</para>
            <para>    button.Connect("pressed", this, nameof(ButtonPressed));</para>
            <para>    AddChild(button);</para>
            <para>}</para>
            <para></para>
            <para>private void ButtonPressed()</para>
            <para>{</para>
            <para>    GD.Print("Hello world!");</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Buttons (like all Control nodes) can also be created in the editor, but some situations may require creating them from code.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Left">
            <summary>
            <para>Align the text to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Center">
            <summary>
            <para>Align the text to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Button.TextAlign.Right">
            <summary>
            <para>Align the text to the right.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Text">
            <summary>
            <para>The button's text that will be displayed inside the button's area.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Icon">
            <summary>
            <para>Button's icon, if text is present the icon will be placed before the text.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Flat">
            <summary>
            <para>Flat buttons don't display decoration.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.ClipText">
            <summary>
            <para>When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.Align">
            <summary>
            <para>Text alignment policy for the button's text, use one of the <see cref="T:Godot.Button.TextAlign"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Button.ExpandIcon">
            <summary>
            <para>When enabled, the button's icon will expand/shrink to fit the button's size while keeping its aspect.</para>
            </summary>
        </member>
        <member name="M:Godot.Button.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.Button.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Button.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="T:Godot.ButtonGroup">
            <summary>
            <para>Group of <see cref="T:Godot.Button"/>. All direct and indirect children buttons become radios. Only one allows being pressed.</para>
            <para><see cref="P:Godot.BaseButton.ToggleMode"/> should be <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ButtonGroup.GetPressedButton">
            <summary>
            <para>Returns the current pressed button.</para>
            </summary>
        </member>
        <member name="M:Godot.ButtonGroup.GetButtons">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <see cref="T:Godot.Button"/>s who have this as their <see cref="T:Godot.ButtonGroup"/> (see <see cref="P:Godot.BaseButton.ButtonGroup"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.CPUParticles2D">
            <summary>
            <para>CPU-based 2D particle node used to create a variety of particle systems and effects.</para>
            <para>See also <see cref="T:Godot.GPUParticles2D"/>, which provides the same functionality with hardware acceleration, but may not run on older devices.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Point">
            <summary>
            <para>All particles will be emitted from a single point.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Sphere">
            <summary>
            <para>Particles will be emitted on the surface of a sphere flattened to two dimensions.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Rectangle">
            <summary>
            <para>Particles will be emitted in the area of a rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Points">
            <summary>
            <para>Particles will be emitted at a position chosen randomly among <see cref="P:Godot.CPUParticles2D.EmissionPoints"/>. Particle color will be modulated by <see cref="P:Godot.CPUParticles2D.EmissionColors"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.DirectedPoints">
            <summary>
            <para>Particles will be emitted at a position chosen randomly among <see cref="P:Godot.CPUParticles2D.EmissionPoints"/>. Particle velocity and rotation will be set based on <see cref="P:Godot.CPUParticles2D.EmissionNormals"/>. Particle color will be modulated by <see cref="P:Godot.CPUParticles2D.EmissionColors"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.EmissionShapeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles2D.EmissionShapeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.ParticleFlags.AlignYToVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParticleFlag(Godot.CPUParticles2D.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.CPUParticles2D.ParticleFlagAlignY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.ParticleFlags.RotateY">
            <summary>
            <para>Present for consistency with 3D particle nodes, not used in 2D.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.ParticleFlags.DisableZ">
            <summary>
            <para>Present for consistency with 3D particle nodes, not used in 2D.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.ParticleFlags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles2D.ParticleFlags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.InitialLinearVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set initial velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AngularVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set angular velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.OrbitVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set orbital velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.LinearAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set linear acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.RadialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set radial acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.TangentialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set tangential acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Damping">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set damping properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Angle">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set angle properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Scale">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set scale properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.HueVariation">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set hue variation properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AnimSpeed">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set animation speed properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.AnimOffset">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)"/> to set animation offset properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.Parameter.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles2D.Parameter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles2D.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Amount">
            <summary>
            <para>Number of particles emitted in one emission cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Lifetime">
            <summary>
            <para>Amount of time each particle will exist.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.OneShot">
            <summary>
            <para>If <c>true</c>, only one emission cycle occurs. If set <c>true</c> during a cycle, emission will stop at the cycle's end.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Preprocess">
            <summary>
            <para>Particle system starts as if it had already run for this many seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.SpeedScale">
            <summary>
            <para>Particle system's running speed scaling ratio. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Explosiveness">
            <summary>
            <para>How rapidly particles in an emission cycle are emitted. If greater than <c>0</c>, there will be a gap in emissions before the next cycle begins.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Randomness">
            <summary>
            <para>Emission lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LifetimeRandomness">
            <summary>
            <para>Particle lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.FixedFps">
            <summary>
            <para>The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.FractDelta">
            <summary>
            <para>If <c>true</c>, results in fractional delta calculation which has a smoother particles display effect.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <see cref="T:Godot.CPUParticles2D.DrawOrderEnum"/> values.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Texture">
            <summary>
            <para>Particle texture. If <c>null</c>, particles will be squares.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionShape">
            <summary>
            <para>Particles will be emitted inside this region. See <see cref="T:Godot.CPUParticles2D.EmissionShapeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionSphereRadius">
            <summary>
            <para>The sphere's radius if <see cref="P:Godot.CPUParticles2D.EmissionShape"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionRectExtents">
            <summary>
            <para>The rectangle's extents if <see cref="P:Godot.CPUParticles2D.EmissionShape"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionPoints">
            <summary>
            <para>Sets the initial positions to spawn particles when using  or .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionNormals">
            <summary>
            <para>Sets the direction the particles will be emitted in when using .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.EmissionColors">
            <summary>
            <para>Sets the <see cref="T:Godot.Color"/>s to modulate particles by when using  or .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ParticleFlagAlignY">
            <summary>
            <para>Align Y axis of particle with the direction of its velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Direction">
            <summary>
            <para>Unit vector specifying the particles' emission direction.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Spread">
            <summary>
            <para>Each particle's initial direction range from <c>+spread</c> to <c>-spread</c> degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Gravity">
            <summary>
            <para>Gravity applied to every particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.InitialVelocity">
            <summary>
            <para>Initial velocity magnitude for each particle. Direction comes from <see cref="P:Godot.CPUParticles2D.Spread"/> and the node's orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.InitialVelocityRandom">
            <summary>
            <para>Initial velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocity">
            <summary>
            <para>Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocityRandom">
            <summary>
            <para>Angular velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngularVelocityCurve">
            <summary>
            <para>Each particle's angular velocity will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.OrbitVelocity">
            <summary>
            <para>Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.OrbitVelocityRandom">
            <summary>
            <para>Orbital velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.OrbitVelocityCurve">
            <summary>
            <para>Each particle's orbital velocity will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccel">
            <summary>
            <para>Linear acceleration applied to each particle in the direction of motion.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccelRandom">
            <summary>
            <para>Linear acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.LinearAccelCurve">
            <summary>
            <para>Each particle's linear acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccel">
            <summary>
            <para>Radial acceleration applied to each particle. Makes particle accelerate away from origin.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccelRandom">
            <summary>
            <para>Radial acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.RadialAccelCurve">
            <summary>
            <para>Each particle's radial acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccel">
            <summary>
            <para>Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccelRandom">
            <summary>
            <para>Tangential acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.TangentialAccelCurve">
            <summary>
            <para>Each particle's tangential acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Damping">
            <summary>
            <para>The rate at which particles lose velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DampingRandom">
            <summary>
            <para>Damping randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.DampingCurve">
            <summary>
            <para>Damping will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Angle">
            <summary>
            <para>Initial rotation applied to each particle, in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngleRandom">
            <summary>
            <para>Rotation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AngleCurve">
            <summary>
            <para>Each particle's rotation will be animated along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmount">
            <summary>
            <para>Initial scale applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmountRandom">
            <summary>
            <para>Scale randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ScaleAmountCurve">
            <summary>
            <para>Each particle's scale will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.Color">
            <summary>
            <para>Each particle's initial color. If <see cref="P:Godot.CPUParticles2D.Texture"/> is defined, it will be multiplied by this color.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.ColorRamp">
            <summary>
            <para>Each particle's color will vary along this <see cref="T:Godot.Gradient"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariation">
            <summary>
            <para>Initial hue variation applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariationRandom">
            <summary>
            <para>Hue variation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.HueVariationCurve">
            <summary>
            <para>Each particle's hue will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeed">
            <summary>
            <para>Particle animation speed.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeedRandom">
            <summary>
            <para>Animation speed randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimSpeedCurve">
            <summary>
            <para>Each particle's animation speed will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffset">
            <summary>
            <para>Particle animation offset.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffsetRandom">
            <summary>
            <para>Animation offset randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles2D.AnimOffsetCurve">
            <summary>
            <para>Each particle's animation offset will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.Restart">
            <summary>
            <para>Restarts the particle emitter.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.SetParam(Godot.CPUParticles2D.Parameter,System.Single)">
            <summary>
            <para>Sets the base value of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.GetParam(Godot.CPUParticles2D.Parameter)">
            <summary>
            <para>Returns the base value of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.SetParamRandomness(Godot.CPUParticles2D.Parameter,System.Single)">
            <summary>
            <para>Sets the randomness factor of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.GetParamRandomness(Godot.CPUParticles2D.Parameter)">
            <summary>
            <para>Returns the randomness factor of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.SetParamCurve(Godot.CPUParticles2D.Parameter,Godot.Curve)">
            <summary>
            <para>Sets the <see cref="T:Godot.Curve"/> of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.GetParamCurve(Godot.CPUParticles2D.Parameter)">
            <summary>
            <para>Returns the <see cref="T:Godot.Curve"/> of the parameter specified by <see cref="T:Godot.CPUParticles2D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.SetParticleFlag(Godot.CPUParticles2D.ParticleFlags,System.Boolean)">
            <summary>
            <para>Enables or disables the given flag (see <see cref="T:Godot.CPUParticles2D.ParticleFlags"/> for options).</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.GetParticleFlag(Godot.CPUParticles2D.ParticleFlags)">
            <summary>
            <para>Returns the enabled state of the given flag (see <see cref="T:Godot.CPUParticles2D.ParticleFlags"/> for options).</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles2D.ConvertFromParticles(Godot.Node)">
            <summary>
            <para>Sets this node's properties to match a given <see cref="T:Godot.GPUParticles2D"/> node with an assigned <see cref="T:Godot.ParticlesMaterial"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.CPUParticles3D">
            <summary>
            <para>CPU-based 3D particle node used to create a variety of particle systems and effects.</para>
            <para>See also <see cref="T:Godot.GPUParticles3D"/>, which provides the same functionality with hardware acceleration, but may not run on older devices.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.Point">
            <summary>
            <para>All particles will be emitted from a single point.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.Sphere">
            <summary>
            <para>Particles will be emitted in the volume of a sphere.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.Box">
            <summary>
            <para>Particles will be emitted in the volume of a box.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.Points">
            <summary>
            <para>Particles will be emitted at a position chosen randomly among <see cref="P:Godot.CPUParticles3D.EmissionPoints"/>. Particle color will be modulated by <see cref="P:Godot.CPUParticles3D.EmissionColors"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.DirectedPoints">
            <summary>
            <para>Particles will be emitted at a position chosen randomly among <see cref="P:Godot.CPUParticles3D.EmissionPoints"/>. Particle velocity and rotation will be set based on <see cref="P:Godot.CPUParticles3D.EmissionNormals"/>. Particle color will be modulated by <see cref="P:Godot.CPUParticles3D.EmissionColors"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.EmissionShapeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles3D.EmissionShapeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.ParticleFlags.AlignYToVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParticleFlag(Godot.CPUParticles3D.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.CPUParticles3D.ParticleFlagAlignY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.ParticleFlags.RotateY">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParticleFlag(Godot.CPUParticles3D.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.CPUParticles3D.ParticleFlagRotateY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.ParticleFlags.DisableZ">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParticleFlag(Godot.CPUParticles3D.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.CPUParticles3D.ParticleFlagDisableZ"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.ParticleFlags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles3D.ParticleFlags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.InitialLinearVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set initial velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.AngularVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set angular velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.OrbitVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set orbital velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.LinearAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set linear acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.RadialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set radial acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.TangentialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set tangential acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.Damping">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set damping properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.Angle">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set angle properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.Scale">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set scale properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.HueVariation">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set hue variation properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.AnimSpeed">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set animation speed properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.AnimOffset">
            <summary>
            <para>Use with <see cref="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)"/>, <see cref="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)"/>, and <see cref="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)"/> to set animation offset properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.Parameter.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CPUParticles3D.Parameter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="F:Godot.CPUParticles3D.DrawOrderEnum.ViewDepth">
            <summary>
            <para>Particles are drawn in order of depth.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Amount">
            <summary>
            <para>Number of particles emitted in one emission cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Lifetime">
            <summary>
            <para>Amount of time each particle will exist.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.OneShot">
            <summary>
            <para>If <c>true</c>, only one emission cycle occurs. If set <c>true</c> during a cycle, emission will stop at the cycle's end.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Preprocess">
            <summary>
            <para>Particle system starts as if it had already run for this many seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.SpeedScale">
            <summary>
            <para>Particle system's running speed scaling ratio. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Explosiveness">
            <summary>
            <para>How rapidly particles in an emission cycle are emitted. If greater than <c>0</c>, there will be a gap in emissions before the next cycle begins.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Randomness">
            <summary>
            <para>Emission lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.LifetimeRandomness">
            <summary>
            <para>Particle lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.FixedFps">
            <summary>
            <para>The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.FractDelta">
            <summary>
            <para>If <c>true</c>, results in fractional delta calculation which has a smoother particles display effect.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <see cref="T:Godot.CPUParticles3D.DrawOrderEnum"/> values.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Mesh">
            <summary>
            <para>The <see cref="T:Godot.Mesh"/> used for each particle. If <c>null</c>, particles will be spheres.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionShape">
            <summary>
            <para>Particles will be emitted inside this region. See <see cref="T:Godot.CPUParticles3D.EmissionShapeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionSphereRadius">
            <summary>
            <para>The sphere's radius if <see cref="T:Godot.CPUParticles3D.EmissionShapeEnum"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionBoxExtents">
            <summary>
            <para>The rectangle's extents if <see cref="P:Godot.CPUParticles3D.EmissionShape"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionPoints">
            <summary>
            <para>Sets the initial positions to spawn particles when using  or .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionNormals">
            <summary>
            <para>Sets the direction the particles will be emitted in when using .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.EmissionColors">
            <summary>
            <para>Sets the <see cref="T:Godot.Color"/>s to modulate particles by when using  or .</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ParticleFlagAlignY">
            <summary>
            <para>Align Y axis of particle with the direction of its velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ParticleFlagRotateY">
            <summary>
            <para>If <c>true</c>, particles rotate around Y axis by <see cref="P:Godot.CPUParticles3D.Angle"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ParticleFlagDisableZ">
            <summary>
            <para>If <c>true</c>, particles will not move on the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Direction">
            <summary>
            <para>Unit vector specifying the particles' emission direction.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Spread">
            <summary>
            <para>Each particle's initial direction range from <c>+spread</c> to <c>-spread</c> degrees. Applied to X/Z plane and Y/Z planes.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Flatness">
            <summary>
            <para>Amount of <see cref="P:Godot.CPUParticles3D.Spread"/> in Y/Z plane. A value of <c>1</c> restricts particles to X/Z plane.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Gravity">
            <summary>
            <para>Gravity applied to every particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.InitialVelocity">
            <summary>
            <para>Initial velocity magnitude for each particle. Direction comes from <see cref="P:Godot.CPUParticles3D.Spread"/> and the node's orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.InitialVelocityRandom">
            <summary>
            <para>Initial velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AngularVelocity">
            <summary>
            <para>Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AngularVelocityRandom">
            <summary>
            <para>Angular velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AngularVelocityCurve">
            <summary>
            <para>Each particle's angular velocity will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.OrbitVelocity">
            <summary>
            <para>Orbital velocity applied to each particle. Makes the particles circle around origin in the local XY plane. Specified in number of full rotations around origin per second.</para>
            <para>This property is only available when <see cref="P:Godot.CPUParticles3D.ParticleFlagDisableZ"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.OrbitVelocityRandom">
            <summary>
            <para>Orbital velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.OrbitVelocityCurve">
            <summary>
            <para>Each particle's orbital velocity will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.LinearAccel">
            <summary>
            <para>Linear acceleration applied to each particle in the direction of motion.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.LinearAccelRandom">
            <summary>
            <para>Linear acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.LinearAccelCurve">
            <summary>
            <para>Each particle's linear acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.RadialAccel">
            <summary>
            <para>Radial acceleration applied to each particle. Makes particle accelerate away from origin.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.RadialAccelRandom">
            <summary>
            <para>Radial acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.RadialAccelCurve">
            <summary>
            <para>Each particle's radial acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.TangentialAccel">
            <summary>
            <para>Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.TangentialAccelRandom">
            <summary>
            <para>Tangential acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.TangentialAccelCurve">
            <summary>
            <para>Each particle's tangential acceleration will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Damping">
            <summary>
            <para>The rate at which particles lose velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.DampingRandom">
            <summary>
            <para>Damping randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.DampingCurve">
            <summary>
            <para>Damping will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Angle">
            <summary>
            <para>Initial rotation applied to each particle, in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AngleRandom">
            <summary>
            <para>Rotation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AngleCurve">
            <summary>
            <para>Each particle's rotation will be animated along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ScaleAmount">
            <summary>
            <para>Initial scale applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ScaleAmountRandom">
            <summary>
            <para>Scale randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ScaleAmountCurve">
            <summary>
            <para>Each particle's scale will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.Color">
            <summary>
            <para>Unused for 3D particles.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.ColorRamp">
            <summary>
            <para>Unused for 3D particles.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.HueVariation">
            <summary>
            <para>Initial hue variation applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.HueVariationRandom">
            <summary>
            <para>Hue variation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.HueVariationCurve">
            <summary>
            <para>Each particle's hue will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimSpeed">
            <summary>
            <para>Particle animation speed.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimSpeedRandom">
            <summary>
            <para>Animation speed randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimSpeedCurve">
            <summary>
            <para>Each particle's animation speed will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimOffset">
            <summary>
            <para>Particle animation offset.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimOffsetRandom">
            <summary>
            <para>Animation offset randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.CPUParticles3D.AnimOffsetCurve">
            <summary>
            <para>Each particle's animation offset will vary along this <see cref="T:Godot.Curve"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.Restart">
            <summary>
            <para>Restarts the particle emitter.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.SetParam(Godot.CPUParticles3D.Parameter,System.Single)">
            <summary>
            <para>Sets the base value of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.GetParam(Godot.CPUParticles3D.Parameter)">
            <summary>
            <para>Returns the base value of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.SetParamRandomness(Godot.CPUParticles3D.Parameter,System.Single)">
            <summary>
            <para>Sets the randomness factor of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.GetParamRandomness(Godot.CPUParticles3D.Parameter)">
            <summary>
            <para>Returns the randomness factor of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.SetParamCurve(Godot.CPUParticles3D.Parameter,Godot.Curve)">
            <summary>
            <para>Sets the <see cref="T:Godot.Curve"/> of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.GetParamCurve(Godot.CPUParticles3D.Parameter)">
            <summary>
            <para>Returns the <see cref="T:Godot.Curve"/> of the parameter specified by <see cref="T:Godot.CPUParticles3D.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.SetParticleFlag(Godot.CPUParticles3D.ParticleFlags,System.Boolean)">
            <summary>
            <para>Enables or disables the given particle flag (see <see cref="T:Godot.CPUParticles3D.ParticleFlags"/> for options).</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.GetParticleFlag(Godot.CPUParticles3D.ParticleFlags)">
            <summary>
            <para>Returns the enabled state of the given particle flag (see <see cref="T:Godot.CPUParticles3D.ParticleFlags"/> for options).</para>
            </summary>
        </member>
        <member name="M:Godot.CPUParticles3D.ConvertFromParticles(Godot.Node)">
            <summary>
            <para>Sets this node's properties to match a given <see cref="T:Godot.GPUParticles3D"/> node with an assigned <see cref="T:Godot.ParticlesMaterial"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGBox3D">
            <summary>
            <para>This node allows you to create a box for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox3D.Size">
            <summary>
            <para>The box's width, height and depth.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGBox3D.Material">
            <summary>
            <para>The material used to render the box.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGCombiner3D">
            <summary>
            <para>For complex arrangements of shapes, it is sometimes needed to add structure to your CSG nodes. The CSGCombiner3D node allows you to create this structure. The node encapsulates the result of the CSG operations of its children. In this way, it is possible to do operations on one set of shapes that are children of one CSGCombiner3D node, and a set of separate operations on a second set of shapes that are children of a second CSGCombiner3D node, and then do an operation that takes the two end results as its input to create the final shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGCylinder3D">
            <summary>
            <para>This node allows you to create a cylinder (or cone) for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.Radius">
            <summary>
            <para>The radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.Height">
            <summary>
            <para>The height of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.Sides">
            <summary>
            <para>The number of sides of the cylinder, the higher this number the more detail there will be in the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.Cone">
            <summary>
            <para>If <c>true</c> a cone is created, the <see cref="P:Godot.CSGCylinder3D.Radius"/> will only apply to one side.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.SmoothFaces">
            <summary>
            <para>If <c>true</c> the normals of the cylinder are set to give a smooth effect making the cylinder seem rounded. If <c>false</c> the cylinder will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGCylinder3D.Material">
            <summary>
            <para>The material used to render the cylinder.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGMesh3D">
            <summary>
            <para>This CSG node allows you to use any mesh resource as a CSG shape, provided it is closed, does not self-intersect, does not contain internal faces and has no edges that connect to more then two faces.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGMesh3D.Mesh">
            <summary>
            <para>The <see cref="T:Godot.Mesh"/> resource to use as a CSG shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGMesh3D.Material">
            <summary>
            <para>The <see cref="T:Godot.Material"/> used in drawing the CSG shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGPolygon3D">
            <summary>
            <para>This node takes a 2D polygon shape and extrudes it to create a 3D mesh.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.PathRotationEnum.Polygon">
            <summary>
            <para>Slice is not rotated.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.PathRotationEnum.Path">
            <summary>
            <para>Slice is rotated around the up vector of the path.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.PathRotationEnum.PathFollow">
            <summary>
            <para>Slice is rotate to match the path exactly.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.ModeEnum.Depth">
            <summary>
            <para>Shape3D is extruded to <see cref="P:Godot.CSGPolygon3D.Depth"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.ModeEnum.Spin">
            <summary>
            <para>Shape3D is extruded by rotating it around an axis.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGPolygon3D.ModeEnum.Path">
            <summary>
            <para>Shape3D is extruded along a path set by a <see cref="T:Godot.Shape3D"/> set in <see cref="P:Godot.CSGPolygon3D.PathNode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.Polygon">
            <summary>
            <para>Point array that defines the shape that we'll extrude.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.Mode">
            <summary>
            <para>Extrusion mode.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.Depth">
            <summary>
            <para>Extrusion depth when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.SpinDegrees">
            <summary>
            <para>Degrees to rotate our extrusion for each slice when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.SpinSides">
            <summary>
            <para>Number of extrusion when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathNode">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> object containing the path along which we extrude when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathInterval">
            <summary>
            <para>Interval at which a new extrusion slice is added along the path when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathRotation">
            <summary>
            <para>The method by which each slice is rotated along the path when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathLocal">
            <summary>
            <para>If <c>false</c> we extrude centered on our path, if <c>true</c> we extrude in relation to the position of our CSGPolygon3D when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathContinuousU">
            <summary>
            <para>If <c>true</c> the u component of our uv will continuously increase in unison with the distance traveled along our path when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.PathJoined">
            <summary>
            <para>If <c>true</c> the start and end of our path are joined together ensuring there is no seam when <see cref="P:Godot.CSGPolygon3D.Mode"/> is .</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.SmoothFaces">
            <summary>
            <para>Generates smooth normals so smooth shading is applied to our mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPolygon3D.Material">
            <summary>
            <para>Material to use for the resulting mesh.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGPrimitive3D">
            <summary>
            <para>Parent class for various CSG primitives. It contains code and functionality that is common between them. It cannot be used directly. Instead use one of the various classes that inherit from it.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGPrimitive3D.InvertFaces">
            <summary>
            <para>Invert the faces of the mesh.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGShape3D">
            <summary>
            <para>This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape3D.OperationEnum.Union">
            <summary>
            <para>Geometry of both primitives is merged, intersecting geometry is removed.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape3D.OperationEnum.Intersection">
            <summary>
            <para>Only intersecting geometry remains, the rest is removed.</para>
            </summary>
        </member>
        <member name="F:Godot.CSGShape3D.OperationEnum.Subtraction">
            <summary>
            <para>The second shape is subtracted from the first, leaving a dent with its shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.Operation">
            <summary>
            <para>The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.Snap">
            <summary>
            <para>Snap makes the mesh snap to a given distance so that the faces of two meshes can be perfectly aligned. A lower value results in greater precision but may be harder to adjust.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.CalculateTangents">
            <summary>
            <para>Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.UseCollision">
            <summary>
            <para>Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGShape3D.CollisionMask">
            <summary>
            <para>The physics layers this CSG shape scans for collisions. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.IsRootShape">
            <summary>
            <para>Returns <c>true</c> if this is a root shape and is thus the object that is rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.CSGShape3D.GetMeshes">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> with two elements, the first is the <see cref="T:Godot.Transform"/> of this node and the second is the root <see cref="T:Godot.Mesh"/> of this node. Only works when this node is the root shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGSphere3D">
            <summary>
            <para>This node allows you to create a sphere for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere3D.Radius">
            <summary>
            <para>Radius of the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere3D.RadialSegments">
            <summary>
            <para>Number of vertical slices for the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere3D.Rings">
            <summary>
            <para>Number of horizontal slices for the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere3D.SmoothFaces">
            <summary>
            <para>If <c>true</c> the normals of the sphere are set to give a smooth effect making the sphere seem rounded. If <c>false</c> the sphere will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGSphere3D.Material">
            <summary>
            <para>The material used to render the sphere.</para>
            </summary>
        </member>
        <member name="T:Godot.CSGTorus3D">
            <summary>
            <para>This node allows you to create a torus for use with the CSG system.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.InnerRadius">
            <summary>
            <para>The inner radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.OuterRadius">
            <summary>
            <para>The outer radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.Sides">
            <summary>
            <para>The number of slices the torus is constructed of.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.RingSides">
            <summary>
            <para>The number of edges each ring of the torus is constructed of.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.SmoothFaces">
            <summary>
            <para>If <c>true</c> the normals of the torus are set to give a smooth effect making the torus seem rounded. If <c>false</c> the torus will have a flat shaded look.</para>
            </summary>
        </member>
        <member name="P:Godot.CSGTorus3D.Material">
            <summary>
            <para>The material used to render the torus.</para>
            </summary>
        </member>
        <member name="T:Godot.CSharpScript">
            <summary>
            <para>This class represents a C# script. It is the C# equivalent of the <see cref="T:Godot.GDScript"/> class and is only available in Mono-enabled Godot builds.</para>
            <para>See also <see cref="T:Godot.GodotSharp"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CSharpScript.New(System.Object[])">
            <summary>
            <para>Returns a new instance of the script.</para>
            </summary>
        </member>
        <member name="T:Godot.Camera2D">
            <summary>
            <para>Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of <see cref="T:Godot.CanvasItem"/>-based nodes.</para>
            <para>This node is intended to be a simple helper to get things going quickly and it may happen that more functionality is desired to change how the camera works. To make your own custom camera node, inherit from <see cref="T:Godot.Node2D"/> and change the transform of the canvas by setting <see cref="P:Godot.Viewport.CanvasTransform"/> in <see cref="T:Godot.Viewport"/> (you can obtain the current <see cref="T:Godot.Viewport"/> by using <see cref="M:Godot.Node.GetViewport"/>).</para>
            <para>Note that the <see cref="T:Godot.Camera2D"/> node's <c>position</c> doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use <see cref="M:Godot.Camera2D.GetCameraScreenCenter"/> to get the real position.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.Camera2DProcessMode.Physics">
            <summary>
            <para>The camera updates with the <c>_physics_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.Camera2DProcessMode.Idle">
            <summary>
            <para>The camera updates with the <c>_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.AnchorModeEnum.FixedTopLeft">
            <summary>
            <para>The camera's position is fixed so that the top-left corner is always at the origin.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera2D.AnchorModeEnum.DragCenter">
            <summary>
            <para>The camera's position takes into account vertical/horizontal offsets and the screen size.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Offset">
            <summary>
            <para>The camera's offset, useful for looking around or camera shake animations.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.AnchorMode">
            <summary>
            <para>The Camera2D's anchor point. See <see cref="T:Godot.Camera2D.AnchorModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Rotating">
            <summary>
            <para>If <c>true</c>, the camera rotates with the target.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Current">
            <summary>
            <para>If <c>true</c>, the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera <c>current</c> will disable this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Zoom">
            <summary>
            <para>The camera's zoom relative to the viewport. Values larger than <c>Vector2(1, 1)</c> zoom out and smaller values zoom in. For an example, use <c>Vector2(0.5, 0.5)</c> for a 2× zoom-in, and <c>Vector2(4, 4)</c> for a 4× zoom-out.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.CustomViewport">
            <summary>
            <para>The custom <see cref="T:Godot.Viewport"/> node attached to the <see cref="T:Godot.Camera2D"/>. If <c>null</c> or not a <see cref="T:Godot.Viewport"/>, uses the default viewport instead.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.ProcessMode">
            <summary>
            <para>The camera's process callback. See <see cref="T:Godot.Camera2D.Camera2DProcessMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitLeft">
            <summary>
            <para>Left scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitTop">
            <summary>
            <para>Top scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitRight">
            <summary>
            <para>Right scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitBottom">
            <summary>
            <para>Bottom scroll limit in pixels. The camera stops moving when reaching this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitSmoothed">
            <summary>
            <para>If <c>true</c>, the camera smoothly stops when reaches its limits.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingEnabled">
            <summary>
            <para>If <c>true</c>, the camera smoothly moves towards the target at <see cref="P:Godot.Camera2D.SmoothingSpeed"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingSpeed">
            <summary>
            <para>Speed in pixels per second of the camera's smoothing effect when <see cref="P:Godot.Camera2D.SmoothingEnabled"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragHorizontalEnabled">
            <summary>
            <para>If <c>true</c>, the camera only moves when reaching the horizontal (left and right) drag margins. If <c>false</c>, the camera moves horizontally regardless of margins.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragVerticalEnabled">
            <summary>
            <para>If <c>true</c>, the camera only moves when reaching the vertical (top and bottom) drag margins. If <c>false</c>, the camera moves vertically regardless of the drag margins.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragHorizontalOffset">
            <summary>
            <para>The relative horizontal drag offset of the camera between the right (<c>-1</c>) and left (<c>1</c>) drag margins.</para>
            <para>Note: Used to set the initial horizontal drag offset; determine the current offset; or force the current offset. It's not automatically updated when the horizontal drag margin is enabled or the drag margins are changed.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragVerticalOffset">
            <summary>
            <para>The relative vertical drag offset of the camera between the bottom (<c>-1</c>) and top (<c>1</c>) drag margins.</para>
            <para>Note: Used to set the initial vertical drag offset; determine the current offset; or force the current offset. It's not automatically updated when the vertical drag margin is enabled or the drag margins are changed.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragLeftMargin">
            <summary>
            <para>Left margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the left edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragTopMargin">
            <summary>
            <para>Top margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the top edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragRightMargin">
            <summary>
            <para>Right margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the right edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragBottomMargin">
            <summary>
            <para>Bottom margin needed to drag the camera. A value of <c>1</c> makes the camera move only when reaching the bottom edge of the screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawScreen">
            <summary>
            <para>If <c>true</c>, draws the camera's screen rectangle in the editor.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawLimits">
            <summary>
            <para>If <c>true</c>, draws the camera's limits rectangle in the editor.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawDragMargin">
            <summary>
            <para>If <c>true</c>, draws the camera's drag margin rectangle in the editor.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.MakeCurrent">
            <summary>
            <para>Make this the current 2D camera for the scene (viewport and layer), in case there are many cameras in the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ClearCurrent">
            <summary>
            <para>Removes any <see cref="T:Godot.Camera2D"/> from the ancestor <see cref="T:Godot.Viewport"/>'s internal currently-assigned camera.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.SetLimit(Godot.Side,System.Int32)">
            <summary>
            <para>Sets the camera limit for the specified <see cref="T:Godot.Side"/>. See also <see cref="P:Godot.Camera2D.LimitBottom"/>, <see cref="P:Godot.Camera2D.LimitTop"/>, <see cref="P:Godot.Camera2D.LimitLeft"/>, and <see cref="P:Godot.Camera2D.LimitRight"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetLimit(Godot.Side)">
            <summary>
            <para>Returns the camera limit for the specified <see cref="T:Godot.Side"/>. See also <see cref="P:Godot.Camera2D.LimitBottom"/>, <see cref="P:Godot.Camera2D.LimitTop"/>, <see cref="P:Godot.Camera2D.LimitLeft"/>, and <see cref="P:Godot.Camera2D.LimitRight"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.SetDragMargin(Godot.Side,System.Single)">
            <summary>
            <para>Sets the specified <see cref="T:Godot.Side"/>'s margin. See also <see cref="P:Godot.Camera2D.DragBottomMargin"/>, <see cref="P:Godot.Camera2D.DragTopMargin"/>, <see cref="P:Godot.Camera2D.DragLeftMargin"/>, and <see cref="P:Godot.Camera2D.DragRightMargin"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetDragMargin(Godot.Side)">
            <summary>
            <para>Returns the specified <see cref="T:Godot.Side"/>'s margin. See also <see cref="P:Godot.Camera2D.DragBottomMargin"/>, <see cref="P:Godot.Camera2D.DragTopMargin"/>, <see cref="P:Godot.Camera2D.DragLeftMargin"/>, and <see cref="P:Godot.Camera2D.DragRightMargin"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraPosition">
            <summary>
            <para>Returns the camera position.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraScreenCenter">
            <summary>
            <para>Returns the location of the <see cref="T:Godot.Camera2D"/>'s screen-center, relative to the origin.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ForceUpdateScroll">
            <summary>
            <para>Forces the camera to update scroll immediately.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ResetSmoothing">
            <summary>
            <para>Sets the camera's position immediately to its current smoothing destination.</para>
            <para>This has no effect if smoothing is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera2D.Align">
            <summary>
            <para>Aligns the camera to the tracked node.</para>
            </summary>
        </member>
        <member name="T:Godot.Camera3D">
            <summary>
            <para><see cref="T:Godot.Camera3D"/> is a special node that displays what is visible from its current location. Cameras register themselves in the nearest <see cref="T:Godot.Viewport"/> node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a <see cref="T:Godot.Viewport"/>, and, without one, a scene registered in that <see cref="T:Godot.Viewport"/> (or higher viewports) can't be displayed.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.KeepAspectEnum.Width">
            <summary>
            <para>Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.KeepAspectEnum.Height">
            <summary>
            <para>Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.ProjectionEnum.Perspective">
            <summary>
            <para>Perspective projection. Objects on the screen becomes smaller when they are far away.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.ProjectionEnum.Orthogonal">
            <summary>
            <para>Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.ProjectionEnum.Frustum">
            <summary>
            <para>Frustum projection. This mode allows adjusting <see cref="P:Godot.Camera3D.FrustumOffset"/> to create "tilted frustum" effects.</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.DopplerTrackingEnum.Disabled">
            <summary>
            <para>Disables <a href="https://en.wikipedia.org/wiki/Doppler_effect">Doppler effect</a> simulation (default).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.DopplerTrackingEnum.IdleStep">
            <summary>
            <para>Simulate <a href="https://en.wikipedia.org/wiki/Doppler_effect">Doppler effect</a> by tracking positions of objects that are changed in <c>_process</c>. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's <c>pitch shift</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.Camera3D.DopplerTrackingEnum.PhysicsStep">
            <summary>
            <para>Simulate <a href="https://en.wikipedia.org/wiki/Doppler_effect">Doppler effect</a> by tracking positions of objects that are changed in <c>_physics_process</c>. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's <c>pitch shift</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.KeepAspect">
            <summary>
            <para>The axis to lock during <see cref="P:Godot.Camera3D.Fov"/>/<see cref="P:Godot.Camera3D.Size"/> adjustments. Can be either  or .</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.CullMask">
            <summary>
            <para>The culling mask that describes which 3D render layers are rendered by this camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Environment">
            <summary>
            <para>The <see cref="T:Godot.Environment"/> to use for this camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Effects">
            <summary>
            <para>The <see cref="T:Godot.CameraEffects"/> to use for this camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.HOffset">
            <summary>
            <para>The horizontal (X) offset of the camera viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.VOffset">
            <summary>
            <para>The vertical (Y) offset of the camera viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.DopplerTracking">
            <summary>
            <para>If not , this camera will simulate the <a href="https://en.wikipedia.org/wiki/Doppler_effect">Doppler effect</a> for objects changed in particular <c>_process</c> methods. See <see cref="T:Godot.Camera3D.DopplerTrackingEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Projection">
            <summary>
            <para>The camera's projection mode. In  mode, objects' Z distance from the camera's local space scales their perceived size.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Current">
            <summary>
            <para>If <c>true</c>, the ancestor <see cref="T:Godot.Viewport"/> is currently using this camera.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Fov">
            <summary>
            <para>The camera's field of view angle (in degrees). Only applicable in perspective mode. Since <see cref="P:Godot.Camera3D.KeepAspect"/> locks one axis, <c>fov</c> sets the other axis' field of view angle.</para>
            <para>For reference, the default vertical field of view value (<c>75.0</c>) is equivalent to an horizontal FOV of:</para>
            <para>- ~91.31 degrees in a 4:3 viewport</para>
            <para>- ~101.67 degrees in a 16:10 viewport</para>
            <para>- ~107.51 degrees in a 16:9 viewport</para>
            <para>- ~121.63 degrees in a 21:9 viewport</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Size">
            <summary>
            <para>The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since <see cref="P:Godot.Camera3D.KeepAspect"/> locks on axis, <c>size</c> sets the other axis' size length.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.FrustumOffset">
            <summary>
            <para>The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as <a href="https://zdoom.org/wiki/Y-shearing">Y-shearing</a>.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Near">
            <summary>
            <para>The distance to the near culling boundary for this camera relative to its local Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.Camera3D.Far">
            <summary>
            <para>The distance to the far culling boundary for this camera relative to its local Z axis.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.ProjectRayNormal(Godot.Vector2)">
            <summary>
            <para>Returns a normal vector in worldspace, that is the result of projecting a point on the <see cref="T:Godot.Viewport"/> rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.ProjectLocalRayNormal(Godot.Vector2)">
            <summary>
            <para>Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.ProjectRayOrigin(Godot.Vector2)">
            <summary>
            <para>Returns a 3D position in worldspace, that is the result of projecting a point on the <see cref="T:Godot.Viewport"/> rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.UnprojectPosition(Godot.Vector3)">
            <summary>
            <para>Returns the 2D coordinate in the <see cref="T:Godot.Viewport"/> rectangle that maps to the given 3D point in worldspace.</para>
            <para>Note: When using this to position GUI elements over a 3D viewport, use <see cref="M:Godot.Camera3D.IsPositionBehind(Godot.Vector3)"/> to prevent them from appearing if the 3D point is behind the camera:</para>
            <para><code>
            # This code block is part of a script that inherits from Node3D.
            # `control` is a reference to a node inheriting from Control.
            control.visible = not get_viewport().get_camera().is_position_behind(global_transform.origin)
            control.rect_position = get_viewport().get_camera().unproject_position(global_transform.origin)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.IsPositionBehind(Godot.Vector3)">
            <summary>
            <para>Returns <c>true</c> if the given position is behind the camera.</para>
            <para>Note: A position which returns <c>false</c> may still be outside the camera's field of view.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.ProjectPosition(Godot.Vector2,System.Single)">
            <summary>
            <para>Returns the 3D point in worldspace that maps to the given 2D coordinate in the <see cref="T:Godot.Viewport"/> rectangle on a plane that is the given <c>z_depth</c> distance into the scene away from the camera.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.SetPerspective(System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the camera projection to perspective mode (see ), by specifying a <c>fov</c> (field of view) angle in degrees, and the <c>z_near</c> and <c>z_far</c> clip planes in world-space units.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.SetOrthogonal(System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the camera projection to orthogonal mode (see ), by specifying a <c>size</c>, and the <c>z_near</c> and <c>z_far</c> clip planes in world-space units. (As a hint, 2D games often use this projection, with values specified in pixels.)</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.SetFrustum(System.Single,Godot.Vector2,System.Single,System.Single)">
            <summary>
            <para>Sets the camera projection to frustum mode (see ), by specifying a <c>size</c>, an <c>offset</c>, and the <c>z_near</c> and <c>z_far</c> clip planes in world-space units.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.MakeCurrent">
            <summary>
            <para>Makes this camera the current camera for the <see cref="T:Godot.Viewport"/> (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.ClearCurrent(System.Boolean)">
            <summary>
            <para>If this is the current camera, remove it from being current. If <c>enable_next</c> is <c>true</c>, request to make the next camera current, if any.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.GetCameraTransform">
            <summary>
            <para>Gets the camera transform. Subclassed cameras such as <see cref="T:Godot.ClippedCamera3D"/> may provide different transforms than the <see cref="T:Godot.Node"/> transform.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.GetFrustum">
            <summary>
            <para>Returns the camera's frustum planes in world-space units as an array of <see cref="T:Godot.Plane"/>s in the following order: near, far, left, top, right, bottom. Not to be confused with <see cref="P:Godot.Camera3D.FrustumOffset"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.GetCameraRid">
            <summary>
            <para>Returns the camera's RID from the <see cref="T:Godot.RenderingServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.SetCullMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Enables or disables the given <c>layer</c> in the <see cref="P:Godot.Camera3D.CullMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Camera3D.GetCullMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given <c>layer</c> in the <see cref="P:Godot.Camera3D.CullMask"/> is enabled, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="T:Godot.CameraEffects">
            <summary>
            <para>Contains camera-specific effects such as depth of field and exposure override.</para>
            <para>See also <see cref="T:Godot.Environment"/> for general 3D environment settings.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurFarEnabled">
            <summary>
            <para>If <c>true</c>, enables the depth-of-field far blur effect. This has a significant performance cost. Consider disabling it in scenes where there are no far away objects.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurFarDistance">
            <summary>
            <para>The distance from the camera where the far blur effect affects the rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurFarTransition">
            <summary>
            <para>The length of the transition between the no-blur area and far blur.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurNearEnabled">
            <summary>
            <para>If <c>true</c>, enables the depth-of-field near blur effect. This has a significant performance cost. Consider disabling it in scenes where there are no nearby objects.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurNearDistance">
            <summary>
            <para>Distance from the camera where the near blur effect affects the rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurNearTransition">
            <summary>
            <para>The length of the transition between the near blur and no-blur area.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.DofBlurAmount">
            <summary>
            <para>The amount of blur for both near and far depth-of-field effects. The amount of blur increases the radius of the blur effect, making the affected area blurrier. However, If the amount is too high, you might start to see lines appearing, especially when using a low quality blur.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.OverrideExposureEnabled">
            <summary>
            <para>If <c>true</c>, overrides the manual or automatic exposure defined in the <see cref="T:Godot.Environment"/> with the value in <see cref="P:Godot.CameraEffects.OverrideExposure"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraEffects.OverrideExposure">
            <summary>
            <para>The exposure override value to use. Higher values will result in a brighter scene. Only effective if <see cref="P:Godot.CameraEffects.OverrideExposureEnabled"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.CameraFeed">
            <summary>
            <para>A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used. See also <see cref="T:Godot.CameraServer"/>.</para>
            <para>Note: Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background.</para>
            </summary>
        </member>
        <member name="T:Godot.CameraServer">
            <summary>
            <para>The <see cref="T:Godot.CameraServer"/> keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.</para>
            <para>It is notably used to provide AR modules with a video feed from the camera.</para>
            <para>Note: This class is currently only implemented on macOS and iOS. On other platforms, no <see cref="T:Godot.CameraFeed"/>s will be available.</para>
            </summary>
        </member>
        <member name="F:Godot.CameraServer.FeedImage.RgbaImage">
            <summary>
            <para>The RGBA camera image.</para>
            </summary>
        </member>
        <member name="F:Godot.CameraServer.FeedImage.YcbcrImage">
            <summary>
            <para>The <a href="https://en.wikipedia.org/wiki/YCbCr">YCbCr</a> camera image.</para>
            </summary>
        </member>
        <member name="F:Godot.CameraServer.FeedImage.YImage">
            <summary>
            <para>The Y component camera image.</para>
            </summary>
        </member>
        <member name="F:Godot.CameraServer.FeedImage.CbcrImage">
            <summary>
            <para>The CbCr component camera image.</para>
            </summary>
        </member>
        <member name="M:Godot.CameraServer.GetFeed(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.CameraFeed"/> corresponding to the camera with the given <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CameraServer.GetFeedCount">
            <summary>
            <para>Returns the number of <see cref="T:Godot.CameraFeed"/>s registered.</para>
            </summary>
        </member>
        <member name="M:Godot.CameraServer.Feeds">
            <summary>
            <para>Returns an array of <see cref="T:Godot.CameraFeed"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.CameraServer.AddFeed(Godot.CameraFeed)">
            <summary>
            <para>Adds the camera <c>feed</c> to the camera server.</para>
            </summary>
        </member>
        <member name="M:Godot.CameraServer.RemoveFeed(Godot.CameraFeed)">
            <summary>
            <para>Removes the specified camera <c>feed</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.CameraServer.CameraFeedRemovedHandler">
            <summary>
            <para>Emitted when a <see cref="T:Godot.CameraFeed"/> is removed (e.g. a webcam is unplugged).</para>
            </summary>
        </member>
        <member name="T:Godot.CameraServer.CameraFeedAddedHandler">
            <summary>
            <para>Emitted when a <see cref="T:Godot.CameraFeed"/> is added (e.g. a webcam is plugged in).</para>
            </summary>
        </member>
        <member name="T:Godot.CameraTexture">
            <summary>
            <para>This texture gives access to the camera texture provided by a <see cref="T:Godot.CameraFeed"/>.</para>
            <para>Note: Many cameras supply YCbCr images which need to be converted in a shader.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraTexture.CameraFeedId">
            <summary>
            <para>The ID of the <see cref="T:Godot.CameraFeed"/> for which we want to display the image.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraTexture.WhichFeed">
            <summary>
            <para>Which image within the <see cref="T:Godot.CameraFeed"/> we want access to, important if the camera image is split in a Y and CbCr component.</para>
            </summary>
        </member>
        <member name="P:Godot.CameraTexture.CameraIsActive">
            <summary>
            <para>Convenience property that gives access to the active property of the <see cref="T:Godot.CameraFeed"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem">
            <summary>
            <para>Base class of anything 2D. Canvas items are laid out in a tree; children inherit and extend their parent's transform. <see cref="T:Godot.CanvasItem"/> is extended by <see cref="T:Godot.Control"/> for anything GUI-related, and by <see cref="T:Godot.Node2D"/> for anything related to the 2D engine.</para>
            <para>Any <see cref="T:Godot.CanvasItem"/> can draw. For this, <see cref="M:Godot.CanvasItem.Update"/> must be called, then  will be received on idle time to request redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the <see cref="T:Godot.CanvasItem"/> are provided (see <c>draw_*</c> functions). However, they can only be used inside the <see cref="M:Godot.Object._Notification(System.Int32)"/>, signal or <see cref="M:Godot.CanvasItem._Draw"/> virtual functions.</para>
            <para>Canvas items are drawn in tree order. By default, children are on top of their parents so a root <see cref="T:Godot.CanvasItem"/> will be drawn behind everything. This behavior can be changed on a per-item basis.</para>
            <para>A <see cref="T:Godot.CanvasItem"/> can also be hidden, which will also hide its children. It provides many ways to change parameters such as modulation (for itself and its children) and self modulation (only for itself), as well as its blend mode.</para>
            <para>Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.</para>
            <para>Note: Unless otherwise specified, all methods that have angle parameters must have angles specified as radians. To convert degrees to radians, use <c>@GDScript.deg2rad</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationTransformChanged">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/>'s transform has changed. This notification is only received if enabled by <see cref="M:Godot.CanvasItem.SetNotifyTransform(System.Boolean)"/> or <see cref="M:Godot.CanvasItem.SetNotifyLocalTransform(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationDraw">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/> is requested to draw.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationVisibilityChanged">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/>'s visibility has changed.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationEnterCanvas">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/> has entered the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.NotificationExitCanvas">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/> has exited the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.ParentNode">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/> will inherit the filter from its parent.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.Nearest">
            <summary>
            <para>The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering. Useful for pixel art.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.Linear">
            <summary>
            <para>The texture filter blends between the nearest four pixels. Use this for most cases where you want to avoid a pixelated style.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.NearestWithMipmaps">
            <summary>
            <para>The texture filter reads from the nearest pixel in the nearest mipmap. This is the fastest way to read from textures with mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.LinearWithMipmaps">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps. Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to <see cref="T:Godot.Camera2D"/> zoom), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.NearestWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter reads from the nearest pixel, but selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera.</para>
            <para>Note: This texture filter is rarely useful in 2D projects.  is usually more appropriate.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.LinearWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera. This is the slowest of the filtering options, but results in the highest quality texturing.</para>
            <para>Note: This texture filter is rarely useful in 2D projects.  is usually more appropriate.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureFilterEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CanvasItem.TextureFilterEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureRepeatEnum.ParentNode">
            <summary>
            <para>The <see cref="T:Godot.CanvasItem"/> will inherit the filter from its parent.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureRepeatEnum.Disabled">
            <summary>
            <para>Texture will not repeat.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureRepeatEnum.Enabled">
            <summary>
            <para>Texture will repeat normally.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureRepeatEnum.Mirror">
            <summary>
            <para>Texture will repeat in a 2x2 tiled mode, where elements at even positions are mirrored.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItem.TextureRepeatEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.CanvasItem.TextureRepeatEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Visible">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.CanvasItem"/> is drawn. The node is only visible if all of its antecedents are visible as well (in other words, <see cref="M:Godot.CanvasItem.IsVisibleInTree"/> must return <c>true</c>).</para>
            <para>Note: For controls that inherit <see cref="T:Godot.Popup"/>, the correct way to make them visible is to call one of the multiple <c>popup*()</c> functions instead.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Modulate">
            <summary>
            <para>The color applied to textures on this <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.SelfModulate">
            <summary>
            <para>The color applied to textures on this <see cref="T:Godot.CanvasItem"/>. This is not inherited by children <see cref="T:Godot.CanvasItem"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowBehindParent">
            <summary>
            <para>If <c>true</c>, the object draws behind its parent.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.TopLevel">
            <summary>
            <para>If <c>true</c>, the node will not inherit its transform from parent <see cref="T:Godot.CanvasItem"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowOnTop">
            <summary>
            <para>If <c>true</c>, the object draws on top of its parent.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.LightMask">
            <summary>
            <para>The rendering layers in which this <see cref="T:Godot.CanvasItem"/> responds to <see cref="T:Godot.Light2D"/> nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.TextureFilter">
            <summary>
            <para>The texture filtering mode to use on this <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.TextureRepeat">
            <summary>
            <para>The texture repeating mode to use on this <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Material">
            <summary>
            <para>The material applied to textures on this <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.UseParentMaterial">
            <summary>
            <para>If <c>true</c>, the parent <see cref="T:Godot.CanvasItem"/>'s <see cref="P:Godot.CanvasItem.Material"/> property is used as this one's material.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem._Draw">
            <summary>
            <para>Overridable function called by the engine (if defined) to draw the canvas item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasItem">
            <summary>
            <para>Returns the canvas item RID used by <see cref="T:Godot.RenderingServer"/> for this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsVisibleInTree">
            <summary>
            <para>Returns <c>true</c> if the node is present in the <see cref="T:Godot.SceneTree"/>, its <see cref="P:Godot.CanvasItem.Visible"/> property is <c>true</c> and all its antecedents are also visible. If any antecedent is hidden, this node will not be visible in the scene tree.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Show">
            <summary>
            <para>Show the <see cref="T:Godot.CanvasItem"/> if it's currently hidden. For controls that inherit <see cref="T:Godot.Popup"/>, the correct way to make them visible is to call one of the multiple <c>popup*()</c> functions instead.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Hide">
            <summary>
            <para>Hide the <see cref="T:Godot.CanvasItem"/> if it's currently visible.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Update">
            <summary>
            <para>Queue the <see cref="T:Godot.CanvasItem"/> for update.  will be called on idle time to request redraw.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawLine(Godot.Vector2,Godot.Vector2,Godot.Color,System.Single)">
            <summary>
            <para>Draws a line from a 2D point to another, with a given color and width.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolyline(Godot.Vector2[],Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Draws interconnected line segments with a uniform <c>color</c> and <c>width</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolylineColors(Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            <para>Draws interconnected line segments with a uniform <c>width</c> and segment-by-segment coloring. Colors assigned to line segments match by index between <c>points</c> and <c>colors</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawArc(Godot.Vector2,System.Single,System.Single,System.Single,System.Int32,Godot.Color,System.Single,System.Boolean)">
            <summary>
            <para>Draws an arc between the given angles. The larger the value of <c>point_count</c>, the smoother the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultiline(Godot.Vector2[],Godot.Color,System.Single)">
            <summary>
            <para>Draws multiple, parallel lines with a uniform <c>color</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultilineColors(Godot.Vector2[],Godot.Color[],System.Single)">
            <summary>
            <para>Draws multiple, parallel lines with a uniform <c>width</c> and segment-by-segment coloring. Colors assigned to line segments match by index between <c>points</c> and <c>colors</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawRect(Godot.Rect2,Godot.Color,System.Boolean,System.Single)">
            <summary>
            <para>Draws a rectangle. If <c>filled</c> is <c>true</c>, the rectangle will be filled with the <c>color</c> specified. If <c>filled</c> is <c>false</c>, the rectangle will be drawn as a stroke with the <c>color</c> and <c>width</c> specified.</para>
            <para>Note: <c>width</c> is only effective if <c>filled</c> is <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawCircle(Godot.Vector2,System.Single,Godot.Color)">
            <summary>
            <para>Draws a colored circle.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTexture(Godot.Texture2D,Godot.Vector2,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws a texture at a given position.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRect(Godot.Texture2D,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean)">
            <summary>
            <para>Draws a textured rectangle at a given position, optionally modulated by a color. If <c>transpose</c> is <c>true</c>, the texture will have its X and Y coordinates swapped.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRectRegion(Godot.Texture2D,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,System.Boolean)">
            <summary>
            <para>Draws a textured rectangle region at a given position, optionally modulated by a color. If <c>transpose</c> is <c>true</c>, the texture will have its X and Y coordinates swapped.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawStyleBox(Godot.StyleBox,Godot.Rect2)">
            <summary>
            <para>Draws a styled rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPrimitive(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture2D,System.Single)">
            <summary>
            <para>Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle, and 4 points for a quad.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolygon(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture2D)">
            <summary>
            <para>Draws a polygon of any amount of points, convex or concave.</para>
            </summary>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawColoredPolygon(Godot.Vector2[],Godot.Color,Godot.Vector2[],Godot.Texture2D)">
            <summary>
            <para>Draws a colored polygon of any amount of points, convex or concave.</para>
            </summary>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawString(Godot.Font,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)">
            <summary>
            <para>Draws <c>text</c> using the specified <c>font</c> at the <c>position</c> (top-left corner). The text will have its color multiplied by <c>modulate</c>. If <c>clip_w</c> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</para>
            <para>Example using the default project font:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># If using this method in a script that redraws constantly, move the</para>
            <para># `default_font` declaration to a member variable assigned in `_ready()`</para>
            <para># so the Control is only created once.</para>
            <para>var default_font = Control.new().get_font("font")</para>
            <para>var default_font_size = Control.new().get_font_size("font_size")</para>
            <para>draw_string(default_font, Vector2(64, 64), "Hello world", HALIGN_LEFT, -1, font_size)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// If using this method in a script that redraws constantly, move the</para>
            <para>// `default_font` declaration to a member variable assigned in `_ready()`</para>
            <para>// so the Control is only created once.</para>
            <para>Font defaultFont = new Control().GetFont("font");</para>
            <para>int defaultFontSize = new Control().GetFontSize("font_size");</para>
            <para>DrawString(defaultFont, new Vector2(64, 64), "Hello world", HALIGN_LEFT, -1, defaultFontSize);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>See also <see cref="M:Godot.Font.DrawString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultilineString(Godot.Font,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)">
            <summary>
            <para>Breaks <c>text</c> to the lines and draws it using the specified <c>font</c> at the <c>position</c> (top-left corner). The text will have its color multiplied by <c>modulate</c>. If <c>clip_w</c> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawChar(Godot.Font,Godot.Vector2,System.String,System.String,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws a string character using a custom font. Returns the advance, depending on the character width and kerning with an optional next character.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawMesh(Godot.Mesh,Godot.Texture2D,System.Nullable{Godot.Transform2D},System.Nullable{Godot.Color})">
            <summary>
            <para>Draws a <see cref="T:Godot.Mesh"/> in 2D, using the provided texture. See <see cref="T:Godot.MeshInstance2D"/> for related documentation.</para>
            </summary>
            <param name="transform">If the parameter is null, then the default value is Transform2D.Identity</param>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultimesh(Godot.MultiMesh,Godot.Texture2D)">
            <summary>
            <para>Draws a <see cref="T:Godot.MultiMesh"/> in 2D with the provided texture. See <see cref="T:Godot.MultiMeshInstance2D"/> for related documentation.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransform(Godot.Vector2,System.Single,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.</para>
            </summary>
            <param name="scale">If the parameter is null, then the default value is new Vector2(1, 1)</param>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransformMatrix(Godot.Transform2D)">
            <summary>
            <para>Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetTransform">
            <summary>
            <para>Returns the transform matrix of this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransform">
            <summary>
            <para>Returns the global transform matrix of this item.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransformWithCanvas">
            <summary>
            <para>Returns the global transform matrix of this item in relation to the canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportTransform">
            <summary>
            <para>Returns this item's transform in relation to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportRect">
            <summary>
            <para>Returns the viewport's boundaries as a <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasTransform">
            <summary>
            <para>Returns the transform matrix of this item's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetLocalMousePosition">
            <summary>
            <para>Returns the mouse position relative to this item's position.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalMousePosition">
            <summary>
            <para>Returns the global position of the mouse.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvas">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the <see cref="T:Godot.World2D"/> canvas where this item is in.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetWorld2d">
            <summary>
            <para>Returns the <see cref="T:Godot.World2D"/> where this item is in.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, children will be updated with local transform data.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsLocalTransformNotificationEnabled">
            <summary>
            <para>Returns <c>true</c> if local transform notifications are communicated to children.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyTransform(System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, children will be updated with global transform data.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsTransformNotificationEnabled">
            <summary>
            <para>Returns <c>true</c> if global transform notifications are communicated to children.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.ForceUpdateTransform">
            <summary>
            <para>Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeCanvasPositionLocal(Godot.Vector2)">
            <summary>
            <para>Assigns <c>screen_point</c> as this node's new local transform.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeInputLocal(Godot.InputEvent)">
            <summary>
            <para>Transformations issued by <c>event</c>'s inputs are applied in local space instead of global space.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem.HiddenHandler">
            <summary>
            <para>Emitted when becoming hidden.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem.ItemRectChangedHandler">
            <summary>
            <para>Emitted when the item's <see cref="T:Godot.Rect2"/> boundaries (position or size) have changed, or when an action is taking place that may have impacted these boundaries (e.g. changing <see cref="P:Godot.Sprite2D.Texture"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem.DrawHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.CanvasItem"/> must redraw. This can only be connected realtime, as deferred will not allow drawing.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItem.VisibilityChangedHandler">
            <summary>
            <para>Emitted when the visibility (hidden/visible) changes.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasItemMaterial">
            <summary>
            <para><see cref="T:Godot.CanvasItemMaterial"/>s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a <see cref="T:Godot.ShaderMaterial"/> to more fully customize a material's interactions with a <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.Normal">
            <summary>
            <para>Render the material using both light and non-light sensitive material properties.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.Unshaded">
            <summary>
            <para>Render the material as if there were no light.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.LightModeEnum.LightOnly">
            <summary>
            <para>Render the material as if there were only light.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Mix">
            <summary>
            <para>Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Add">
            <summary>
            <para>Additive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Sub">
            <summary>
            <para>Subtractive blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.Mul">
            <summary>
            <para>Multiplicative blending mode.</para>
            </summary>
        </member>
        <member name="F:Godot.CanvasItemMaterial.BlendModeEnum.PremultAlpha">
            <summary>
            <para>Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.BlendMode">
            <summary>
            <para>The manner in which a material's rendering is applied to underlying textures.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.LightMode">
            <summary>
            <para>The manner in which material reacts to lighting.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimation">
            <summary>
            <para>If <c>true</c>, enable spritesheet-based animation features when assigned to <see cref="T:Godot.GPUParticles2D"/> and <see cref="T:Godot.CPUParticles2D"/> nodes. The <see cref="P:Godot.ParticlesMaterial.AnimSpeed"/> or <see cref="P:Godot.CPUParticles2D.AnimSpeed"/> should also be set to a positive value for the animation to play.</para>
            <para>This property (and other <c>particles_anim_*</c> properties that depend on it) has no effect on other types of nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimHFrames">
            <summary>
            <para>The number of columns in the spritesheet assigned as <see cref="T:Godot.Texture2D"/> for a <see cref="T:Godot.GPUParticles2D"/> or <see cref="T:Godot.CPUParticles2D"/>.</para>
            <para>Note: This property is only used and visible in the editor if <see cref="P:Godot.CanvasItemMaterial.ParticlesAnimation"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimVFrames">
            <summary>
            <para>The number of rows in the spritesheet assigned as <see cref="T:Godot.Texture2D"/> for a <see cref="T:Godot.GPUParticles2D"/> or <see cref="T:Godot.CPUParticles2D"/>.</para>
            <para>Note: This property is only used and visible in the editor if <see cref="P:Godot.CanvasItemMaterial.ParticlesAnimation"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.ParticlesAnimLoop">
            <summary>
            <para>If <c>true</c>, the particles animation will loop.</para>
            <para>Note: This property is only used and visible in the editor if <see cref="P:Godot.CanvasItemMaterial.ParticlesAnimation"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasLayer">
            <summary>
            <para>Canvas drawing layer. <see cref="T:Godot.CanvasItem"/> nodes that are direct or indirect children of a <see cref="T:Godot.CanvasLayer"/> will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a <see cref="T:Godot.CanvasLayer"/> with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Layer">
            <summary>
            <para>Layer index for draw order. Lower values are drawn first.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Offset">
            <summary>
            <para>The layer's base offset.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.RotationDegrees">
            <summary>
            <para>The layer's rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Rotation">
            <summary>
            <para>The layer's rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Scale">
            <summary>
            <para>The layer's scale.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Transform">
            <summary>
            <para>The layer's transform.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.CustomViewport">
            <summary>
            <para>The custom <see cref="T:Godot.Viewport"/> node assigned to the <see cref="T:Godot.CanvasLayer"/>. If <c>null</c>, uses the default viewport instead.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.FollowViewportEnable">
            <summary>
            <para>Sets the layer to follow the viewport in order to simulate a pseudo 3D effect.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.FollowViewportScale">
            <summary>
            <para>Scales the layer when using <see cref="P:Godot.CanvasLayer.FollowViewportEnable"/>. Layers moving into the foreground should have increasing scales, while layers moving into the background should have decreasing scales.</para>
            </summary>
        </member>
        <member name="M:Godot.CanvasLayer.GetCanvas">
            <summary>
            <para>Returns the RID of the canvas used by this layer.</para>
            </summary>
        </member>
        <member name="T:Godot.CanvasModulate">
            <summary>
            <para><see cref="T:Godot.CanvasModulate"/> tints the canvas elements using its assigned <see cref="P:Godot.CanvasModulate.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CanvasModulate.Color">
            <summary>
            <para>The tint color to apply.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleMesh">
            <summary>
            <para>Class representing a capsule-shaped <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Radius">
            <summary>
            <para>Radius of the capsule mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.MidHeight">
            <summary>
            <para>Height of the capsule mesh from the center point.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the capsule mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Rings">
            <summary>
            <para>Number of rings along the height of the capsule.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape2D">
            <summary>
            <para>Capsule shape for 2D collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Radius">
            <summary>
            <para>The capsule's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Height">
            <summary>
            <para>The capsule's height.</para>
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape3D">
            <summary>
            <para>Capsule shape for collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape3D.Radius">
            <summary>
            <para>The capsule's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape3D.Height">
            <summary>
            <para>The capsule's height.</para>
            </summary>
        </member>
        <member name="T:Godot.CenterContainer">
            <summary>
            <para>CenterContainer keeps children controls centered. This container keeps all children to their minimum size, in the center.</para>
            </summary>
        </member>
        <member name="P:Godot.CenterContainer.UseTopLeft">
            <summary>
            <para>If <c>true</c>, centers children relative to the <see cref="T:Godot.CenterContainer"/>'s top left corner.</para>
            </summary>
        </member>
        <member name="T:Godot.CharFXTransform">
            <summary>
            <para>By setting various properties on this object, you can control how individual characters will be displayed in a <see cref="T:Godot.RichTextEffect"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Range">
            <summary>
            <para>Absolute character range in the string, corresponding to the glyph. Setting this property won't affect drawing.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.ElapsedTime">
            <summary>
            <para>The time elapsed since the <see cref="T:Godot.RichTextLabel"/> was added to the scene tree (in seconds). Time stops when the project is paused, unless the <see cref="T:Godot.RichTextLabel"/>'s <see cref="P:Godot.Node.PauseMode"/> is set to .</para>
            <para>Note: Time still passes while the <see cref="T:Godot.RichTextLabel"/> is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Visible">
            <summary>
            <para>If <c>true</c>, the character will be drawn. If <c>false</c>, the character will be hidden. Characters around hidden characters will reflow to take the space of hidden characters. If this is not desired, set their <see cref="P:Godot.CharFXTransform.Color"/> to <c>Color(1, 1, 1, 0)</c> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Outline">
            <summary>
            <para>If <c>ture</c>, FX transform is called for outline drawing. Setting this property won't affect drawing.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Offset">
            <summary>
            <para>The position offset the character will be drawn with (in pixels).</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Color">
            <summary>
            <para>The color the character will be drawn with.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Env">
            <summary>
            <para>Contains the arguments passed in the opening BBCode tag. By default, arguments are strings; if their contents match a type such as <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/> or <see cref="T:System.Single"/>, they will be converted automatically. Color codes in the form <c>#rrggbb</c> or <c>#rgb</c> will be converted to an opaque <see cref="T:Godot.Color"/>. String arguments may not contain spaces, even if they're quoted. If present, quotes will also be present in the final string.</para>
            <para>For example, the opening BBCode tag <c>[example foo=hello bar=true baz=42 color=#ffffff]</c> will map to the following <see cref="T:Godot.Collections.Dictionary"/>:</para>
            <para><code>
            {"foo": "hello", "bar": true, "baz": 42, "color": Color(1, 1, 1, 1)}
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.GlyphIndex">
            <summary>
            <para>Font specific glyph index.</para>
            </summary>
        </member>
        <member name="P:Godot.CharFXTransform.Font">
            <summary>
            <para>Font resource used to render glyph.</para>
            </summary>
        </member>
        <member name="T:Godot.CheckBox">
            <summary>
            <para>A checkbox allows the user to make a binary choice (choosing only one of two possible options). It's similar to <see cref="T:Godot.CheckButton"/> in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckBox when toggling it has no immediate effect on something. For instance, it should be used when toggling it will only do something once a confirmation button is pressed.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="T:Godot.CheckButton">
            <summary>
            <para>CheckButton is a toggle button displayed as a check field. It's similar to <see cref="T:Godot.CheckBox"/> in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckButton when toggling it has an immediate effect on something. For instance, it should be used if toggling it enables/disables a setting without requiring the user to press a confirmation button.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="T:Godot.CircleShape2D">
            <summary>
            <para>Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.</para>
            </summary>
        </member>
        <member name="P:Godot.CircleShape2D.Radius">
            <summary>
            <para>The circle's radius.</para>
            </summary>
        </member>
        <member name="T:Godot.ClippedCamera3D">
            <summary>
            <para>This node extends <see cref="T:Godot.Camera3D"/> to add collisions with <see cref="T:Godot.Area3D"/> and/or <see cref="T:Godot.PhysicsBody3D"/> nodes. The camera cannot move through colliding objects.</para>
            </summary>
        </member>
        <member name="F:Godot.ClippedCamera3D.ProcessModeEnum.Physics">
            <summary>
            <para>The camera updates with the <c>_physics_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.ClippedCamera3D.ProcessModeEnum.Idle">
            <summary>
            <para>The camera updates with the <c>_process</c> callback.</para>
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera3D.Margin">
            <summary>
            <para>The camera's collision margin. The camera can't get closer than this distance to a colliding object.</para>
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera3D.ProcessMode">
            <summary>
            <para>The camera's process callback. See <see cref="T:Godot.ClippedCamera3D.ProcessModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera3D.CollisionMask">
            <summary>
            <para>The camera's collision mask. Only objects in at least one collision layer matching the mask will be detected. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera3D.ClipToAreas">
            <summary>
            <para>If <c>true</c>, the camera stops on contact with <see cref="T:Godot.Area3D"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.ClippedCamera3D.ClipToBodies">
            <summary>
            <para>If <c>true</c>, the camera stops on contact with <see cref="T:Godot.PhysicsBody3D"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the specified bit index to the <c>value</c>.</para>
            <para>Note: Bit indices range from 0-19.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified bit index is on.</para>
            <para>Note: Bit indices range from 0-19.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.AddExceptionRid(Godot.RID)">
            <summary>
            <para>Adds a collision exception so the camera does not collide with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.AddException(Godot.Object)">
            <summary>
            <para>Adds a collision exception so the camera does not collide with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.RemoveExceptionRid(Godot.RID)">
            <summary>
            <para>Removes a collision exception with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.RemoveException(Godot.Object)">
            <summary>
            <para>Removes a collision exception with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.GetClipOffset">
            <summary>
            <para>Returns the distance the camera has been offset due to a collision.</para>
            </summary>
        </member>
        <member name="M:Godot.ClippedCamera3D.ClearExceptions">
            <summary>
            <para>Removes all collision exceptions.</para>
            </summary>
        </member>
        <member name="T:Godot.CodeEdit">
            <summary>
            <para>Note: By default <see cref="T:Godot.CodeEdit"/> always use left-to-right text direction to correcly display source code.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D">
            <summary>
            <para>CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision <see cref="T:Godot.Shape2D"/>s. Each shape must be assigned to a shape owner. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the <c>shape_owner_*</c> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject2D.InputPickable">
            <summary>
            <para>If <c>true</c>, this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one <c>collision_layer</c> bit to be set.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D._InputEvent(Godot.Object,Godot.InputEvent,System.Int32)">
            <summary>
            <para>Accepts unhandled <see cref="T:Godot.InputEvent"/>s. Requires <see cref="P:Godot.CollisionObject2D.InputPickable"/> to be <c>true</c>. <c>shape_idx</c> is the child index of the clicked <see cref="T:Godot.Shape2D"/>. Connect to the <c>input_event</c> signal to easily pick up these events.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetRid">
            <summary>
            <para>Returns the object's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.CreateShapeOwner(Godot.Object)">
            <summary>
            <para>Creates a new shape owner for the given object. Returns <c>owner_id</c> of the new owner for future reference.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.RemoveShapeOwner(System.UInt32)">
            <summary>
            <para>Removes the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetShapeOwners">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <c>owner_id</c> identifiers. You can use these ids in other methods that take <c>owner_id</c> as an argument.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetTransform(System.UInt32,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform2D"/> of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetTransform(System.UInt32)">
            <summary>
            <para>Returns the shape owner's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetOwner(System.UInt32)">
            <summary>
            <para>Returns the parent object of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetDisabled(System.UInt32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, disables the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerDisabled(System.UInt32)">
            <summary>
            <para>If <c>true</c>, the shape owner and its shapes are disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetOneWayCollision(System.UInt32,System.Boolean)">
            <summary>
            <para>If <c>enable</c> is <c>true</c>, collisions for the shape owner originating from this <see cref="T:Godot.CollisionObject2D"/> will not be reported to collided with <see cref="T:Godot.CollisionObject2D"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerOneWayCollisionEnabled(System.UInt32)">
            <summary>
            <para>Returns <c>true</c> if collisions for the shape owner originating from this <see cref="T:Godot.CollisionObject2D"/> will not be reported to collided with <see cref="T:Godot.CollisionObject2D"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetOneWayCollisionMargin(System.UInt32,System.Single)">
            <summary>
            <para>Sets the <c>one_way_collision_margin</c> of the shape owner identified by given <c>owner_id</c> to <c>margin</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetShapeOwnerOneWayCollisionMargin(System.UInt32)">
            <summary>
            <para>Returns the <c>one_way_collision_margin</c> of the shape owner identified by given <c>owner_id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerAddShape(System.UInt32,Godot.Shape2D)">
            <summary>
            <para>Adds a <see cref="T:Godot.Shape2D"/> to the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeCount(System.UInt32)">
            <summary>
            <para>Returns the number of shapes the given shape owner contains.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShape(System.UInt32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Shape2D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeIndex(System.UInt32,System.Int32)">
            <summary>
            <para>Returns the child index of the <see cref="T:Godot.Shape2D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerRemoveShape(System.UInt32,System.Int32)">
            <summary>
            <para>Removes a shape from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerClearShapes(System.UInt32)">
            <summary>
            <para>Removes all shapes from the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeFindOwner(System.Int32)">
            <summary>
            <para>Returns the <c>owner_id</c> of the given shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D.MouseExitedHandler">
            <summary>
            <para>Emitted when the mouse pointer exits all this object's shapes. Requires <see cref="P:Godot.CollisionObject2D.InputPickable"/> to be <c>true</c> and at least one <c>collision_layer</c> bit to be set.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D.MouseEnteredHandler">
            <summary>
            <para>Emitted when the mouse pointer enters any of this object's shapes. Requires <see cref="P:Godot.CollisionObject2D.InputPickable"/> to be <c>true</c> and at least one <c>collision_layer</c> bit to be set.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D.InputEventHandler">
            <summary>
            <para>Emitted when an input event occurs. Requires <see cref="P:Godot.CollisionObject2D.InputPickable"/> to be <c>true</c> and at least one <c>collision_layer</c> bit to be set. See <see cref="M:Godot.CollisionObject2D._InputEvent(Godot.Object,Godot.InputEvent,System.Int32)"/> for details.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject3D">
            <summary>
            <para>CollisionObject3D is the base class for physics objects. It can hold any number of collision <see cref="T:Godot.Shape3D"/>s. Each shape must be assigned to a shape owner. The CollisionObject3D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the <c>shape_owner_*</c> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject3D.InputRayPickable">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.CollisionObject3D"/>'s shapes will respond to <see cref="T:Godot.RayCast3D"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionObject3D.InputCaptureOnDrag">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.CollisionObject3D"/> will continue to receive input events as the mouse is dragged across its shapes.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D._InputEvent(Godot.Object,Godot.InputEvent,Godot.Vector3,Godot.Vector3,System.Int32)">
            <summary>
            <para>Accepts unhandled <see cref="T:Godot.InputEvent"/>s. <c>click_position</c> is the clicked location in world space and <c>click_normal</c> is the normal vector extending from the clicked surface of the <see cref="T:Godot.Shape3D"/> at <c>shape_idx</c>. Connect to the <c>input_event</c> signal to easily pick up these events.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.GetRid">
            <summary>
            <para>Returns the object's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.CreateShapeOwner(Godot.Object)">
            <summary>
            <para>Creates a new shape owner for the given object. Returns <c>owner_id</c> of the new owner for future reference.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.RemoveShapeOwner(System.UInt32)">
            <summary>
            <para>Removes the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.GetShapeOwners">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <c>owner_id</c> identifiers. You can use these ids in other methods that take <c>owner_id</c> as an argument.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerSetTransform(System.UInt32,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerGetTransform(System.UInt32)">
            <summary>
            <para>Returns the shape owner's <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerGetOwner(System.UInt32)">
            <summary>
            <para>Returns the parent object of the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerSetDisabled(System.UInt32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, disables the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.IsShapeOwnerDisabled(System.UInt32)">
            <summary>
            <para>If <c>true</c>, the shape owner and its shapes are disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerAddShape(System.UInt32,Godot.Shape3D)">
            <summary>
            <para>Adds a <see cref="T:Godot.Shape3D"/> to the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerGetShapeCount(System.UInt32)">
            <summary>
            <para>Returns the number of shapes the given shape owner contains.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerGetShape(System.UInt32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Shape3D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerGetShapeIndex(System.UInt32,System.Int32)">
            <summary>
            <para>Returns the child index of the <see cref="T:Godot.Shape3D"/> with the given id from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerRemoveShape(System.UInt32,System.Int32)">
            <summary>
            <para>Removes a shape from the given shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeOwnerClearShapes(System.UInt32)">
            <summary>
            <para>Removes all shapes from the shape owner.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionObject3D.ShapeFindOwner(System.Int32)">
            <summary>
            <para>Returns the <c>owner_id</c> of the given shape.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject3D.MouseExitedHandler">
            <summary>
            <para>Emitted when the mouse pointer exits all this object's shapes.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject3D.MouseEnteredHandler">
            <summary>
            <para>Emitted when the mouse pointer enters any of this object's shapes.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionObject3D.InputEventHandler">
            <summary>
            <para>Emitted when <see cref="M:Godot.CollisionObject3D._InputEvent(Godot.Object,Godot.InputEvent,Godot.Vector3,Godot.Vector3,System.Int32)"/> receives an event. See its description for details.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon2D">
            <summary>
            <para>Provides a 2D collision polygon to a <see cref="T:Godot.CollisionObject2D"/> parent. Polygons can be drawn in the editor or specified by a list of vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.CollisionPolygon2D.BuildModeEnum.Solids">
            <summary>
            <para>Collisions will include the polygon and its contained area.</para>
            </summary>
        </member>
        <member name="F:Godot.CollisionPolygon2D.BuildModeEnum.Segments">
            <summary>
            <para>Collisions will only include the polygon edges.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.BuildMode">
            <summary>
            <para>Collision build mode. Use one of the <see cref="T:Godot.CollisionPolygon2D.BuildModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Polygon">
            <summary>
            <para>The polygon's list of vertices. The final point will be connected to the first. The returned value is a clone of the <see cref="T:Godot.Vector2[]"/>, not a reference.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Disabled">
            <summary>
            <para>If <c>true</c>, no collisions will be detected.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.OneWayCollision">
            <summary>
            <para>If <c>true</c>, only edges that face up, relative to <see cref="T:Godot.CollisionPolygon2D"/>'s rotation, will collide with other objects.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.OneWayCollisionMargin">
            <summary>
            <para>The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the polygon at a high velocity.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon3D">
            <summary>
            <para>Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at run-time. Creates a <see cref="T:Godot.Shape3D"/> for gameplay. Properties modified during gameplay will have no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon3D.Depth">
            <summary>
            <para>Length that the resulting collision extends in either direction perpendicular to its polygon.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon3D.Disabled">
            <summary>
            <para>If <c>true</c>, no collision will be produced.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon3D.Polygon">
            <summary>
            <para>Array of vertices which define the polygon.</para>
            <para>Note: The returned value is a copy of the original. Methods which mutate the size or properties of the return value will not impact the original polygon. To change properties of the polygon, assign it to a temporary variable and make changes before reassigning the <c>polygon</c> member.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionShape2D">
            <summary>
            <para>Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an <see cref="T:Godot.Area2D"/> to give it a detection shape, or add it to a <see cref="T:Godot.PhysicsBody2D"/> to create a solid object. IMPORTANT: this is an Editor-only helper to create shapes, use <see cref="M:Godot.CollisionObject2D.ShapeOwnerGetShape(System.UInt32,System.Int32)"/> to get the actual shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Shape">
            <summary>
            <para>The actual shape owned by this collision shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Disabled">
            <summary>
            <para>A disabled collision shape has no effect in the world. This property should be changed with <see cref="M:Godot.Object.SetDeferred(Godot.StringName,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.OneWayCollision">
            <summary>
            <para>Sets whether this collision shape should only detect collision on one side (top or bottom).</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.OneWayCollisionMargin">
            <summary>
            <para>The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the shape at a high velocity.</para>
            </summary>
        </member>
        <member name="T:Godot.CollisionShape3D">
            <summary>
            <para>Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an <see cref="T:Godot.Area3D"/> to give it a detection shape, or add it to a <see cref="T:Godot.PhysicsBody3D"/> to create a solid object. IMPORTANT: this is an Editor-only helper to create shapes, use <see cref="M:Godot.CollisionObject3D.ShapeOwnerGetShape(System.UInt32,System.Int32)"/> to get the actual shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape3D.Shape">
            <summary>
            <para>The actual shape owned by this collision shape.</para>
            </summary>
        </member>
        <member name="P:Godot.CollisionShape3D.Disabled">
            <summary>
            <para>A disabled collision shape has no effect in the world.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionShape3D.ResourceChanged(Godot.Resource)">
            <summary>
            <para>If this method exists within a script it will be called whenever the shape resource has been modified.</para>
            </summary>
        </member>
        <member name="M:Godot.CollisionShape3D.MakeConvexFromSiblings">
            <summary>
            <para>Sets the collision shape's shape to the addition of all its convexed <see cref="T:Godot.MeshInstance3D"/> siblings geometry.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPicker">
            <summary>
            <para>Displays a color picker widget. Useful for selecting a color from an RGB/RGBA colorspace.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.Color">
            <summary>
            <para>The currently selected color.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.EditAlpha">
            <summary>
            <para>If <c>true</c>, shows an alpha channel slider (transparency).</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.HsvMode">
            <summary>
            <para>If <c>true</c>, allows editing the color with Hue/Saturation/Value sliders.</para>
            <para>Note: Cannot be enabled if raw mode is on.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.RawMode">
            <summary>
            <para>If <c>true</c>, allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).</para>
            <para>Note: Cannot be enabled if HSV mode is on.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.DeferredMode">
            <summary>
            <para>If <c>true</c>, the color will apply only after the user releases the mouse button, otherwise it will apply immediately even in mouse motion event (which can cause performance issues).</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.PresetsEnabled">
            <summary>
            <para>If <c>true</c>, the "add preset" button is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.PresetsVisible">
            <summary>
            <para>If <c>true</c>, saved color presets are visible.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.AddPreset(Godot.Color)">
            <summary>
            <para>Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.</para>
            <para>Note: the presets list is only for this color picker.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.ErasePreset(Godot.Color)">
            <summary>
            <para>Removes the given color from the list of color presets of this color picker.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.GetPresets">
            <summary>
            <para>Returns the list of colors in the presets of the color picker.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPicker.PresetRemovedHandler">
            <summary>
            <para>Emitted when a preset is removed.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPicker.PresetAddedHandler">
            <summary>
            <para>Emitted when a preset is added.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPicker.ColorChangedHandler">
            <summary>
            <para>Emitted when the color is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton">
            <summary>
            <para>Encapsulates a <see cref="T:Godot.ColorPicker"/> making it accessible by pressing a button. Pressing the button will toggle the <see cref="T:Godot.ColorPicker"/> visibility.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.Color">
            <summary>
            <para>The currently selected color.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.EditAlpha">
            <summary>
            <para>If <c>true</c>, the alpha channel in the displayed <see cref="T:Godot.ColorPicker"/> will be visible.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPicker">
            <summary>
            <para>Returns the <see cref="T:Godot.ColorPicker"/> that this node toggles.</para>
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPopup">
            <summary>
            <para>Returns the control's <see cref="T:Godot.PopupPanel"/> which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton.PickerCreatedHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.ColorPicker"/> is created (the button is pressed for the first time).</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton.PopupClosedHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.ColorPicker"/> is closed.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton.ColorChangedHandler">
            <summary>
            <para>Emitted when the color changes.</para>
            </summary>
        </member>
        <member name="T:Godot.ColorRect">
            <summary>
            <para>Displays a rectangle filled with a solid <see cref="P:Godot.ColorRect.Color"/>. If you need to display the border alone, consider using <see cref="T:Godot.ReferenceRect"/> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.ColorRect.Color">
            <summary>
            <para>The fill color.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>$ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect's color to red.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GetNode&lt;ColorRect&gt;("ColorRect").Color = new Color(1, 0, 0, 1); // Set ColorRect's color to red.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape2D">
            <summary>
            <para>Concave polygon 2D shape resource for physics. It is made out of segments and is optimal for complex polygonal concave collisions. However, it is not advised to use for <see cref="T:Godot.RigidBody2D"/> nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.</para>
            <para>The main difference between a <see cref="T:Godot.ConvexPolygonShape2D"/> and a <see cref="T:Godot.ConcavePolygonShape2D"/> is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.ConcavePolygonShape2D.Segments">
            <summary>
            <para>The array of points that make up the <see cref="T:Godot.ConcavePolygonShape2D"/>'s line segments.</para>
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape3D">
            <summary>
            <para>Concave polygon shape resource, which can be set into a <see cref="T:Godot.PhysicsBody3D"/> or area. This shape is created by feeding a list of triangles.</para>
            <para>Note: when used for collision, <see cref="T:Godot.ConcavePolygonShape3D"/> is intended to work with static <see cref="T:Godot.PhysicsBody3D"/> nodes like <see cref="T:Godot.StaticBody3D"/> and will not work with <see cref="T:Godot.KinematicBody3D"/> or <see cref="T:Godot.RigidBody3D"/> with a mode other than Static.</para>
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape3D.SetFaces(Godot.Vector3[])">
            <summary>
            <para>Sets the faces (an array of triangles).</para>
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape3D.GetFaces">
            <summary>
            <para>Returns the faces (an array of triangles).</para>
            </summary>
        </member>
        <member name="T:Godot.ConeTwistJoint3D">
            <summary>
            <para>The joint can rotate the bodies across an axis defined by the local x-axes of the <see cref="T:Godot.Joint3D"/>.</para>
            <para>The twist axis is initiated as the X axis of the <see cref="T:Godot.Joint3D"/>.</para>
            <para>Once the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint3D in the local space of the two Bodies. See also <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected along the swing axis.</para>
            <para>Could be defined as looseness in the <see cref="T:Godot.ConeTwistJoint3D"/>.</para>
            <para>If below 0.05, this behavior is locked.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.Softness">
            <summary>
            <para>The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="F:Godot.ConeTwistJoint3D.Param.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.ConeTwistJoint3D.Param"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint3D.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected along the swing axis.</para>
            <para>Could be defined as looseness in the <see cref="T:Godot.ConeTwistJoint3D"/>.</para>
            <para>If below 0.05, this behavior is locked.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint3D.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint3D.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint3D.Softness">
            <summary>
            <para>The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.</para>
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint3D.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="T:Godot.ConfigFile">
            <summary>
            <para>This helper class can be used to store <c>Variant</c> values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:</para>
            <para><code>
            [section]
            some_key=42
            string_example="Hello World3D!"
            a_vector=Vector3( 1, 0, 2 )
            </code></para>
            <para>The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.</para>
            <para>The following example shows how to parse an INI-style file from the system, read its contents and store new values in it:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var config = ConfigFile.new()</para>
            <para>var err = config.load("user://settings.cfg")</para>
            <para>if err == OK: # If not, something went wrong with the file loading</para>
            <para>    # Look for the display/width pair, and default to 1024 if missing</para>
            <para>    var screen_width = config.get_value("display", "width", 1024)</para>
            <para>    # Store a variable if and only if it hasn't been defined yet</para>
            <para>    if not config.has_section_key("audio", "mute"):</para>
            <para>        config.set_value("audio", "mute", false)</para>
            <para>    # Save the changes by overwriting the previous file</para>
            <para>    config.save("user://settings.cfg")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var config = new ConfigFile();</para>
            <para>Error err = config.Load("user://settings.cfg");</para>
            <para>if (err == Error.Ok) // If not, something went wrong with the file loading</para>
            <para>{</para>
            <para>    // Look for the display/width pair, and default to 1024 if missing</para>
            <para>    int screenWidth = (int)config.GetValue("display", "width", 1024);</para>
            <para>    // Store a variable if and only if it hasn't been defined yet</para>
            <para>    if (!config.HasSectionKey("audio", "mute"))</para>
            <para>    {</para>
            <para>        config.SetValue("audio", "mute", false);</para>
            <para>    }</para>
            <para>    // Save the changes by overwriting the previous file</para>
            <para>    config.Save("user://settings.cfg");</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.</para>
            <para>ConfigFiles can also contain manually written comment lines starting with a semicolon (<c>;</c>). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.SetValue(System.String,System.String,System.Object)">
            <summary>
            <para>Assigns a value to the specified key of the specified section. If either the section or the key do not exist, they are created. Passing a <c>null</c> value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetValue(System.String,System.String,System.Object)">
            <summary>
            <para>Returns the current value for the specified section and key. If either the section or the key do not exist, the method returns the fallback <c>default</c> value. If <c>default</c> is not specified or set to <c>null</c>, an error is also raised.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSection(System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified section exists.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSectionKey(System.String,System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified section-key pair exists.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSections">
            <summary>
            <para>Returns an array of all defined section identifiers.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSectionKeys(System.String)">
            <summary>
            <para>Returns an array of all defined key identifiers in the specified section. Raises an error and returns an empty array if the section does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.EraseSection(System.String)">
            <summary>
            <para>Deletes the specified section along with all the key-value pairs inside. Raises an error if the section does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.EraseSectionKey(System.String,System.String)">
            <summary>
            <para>Deletes the specified key in a section. Raises an error if either the section or the key do not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Load(System.String)">
            <summary>
            <para>Loads the config file specified as a parameter. The file's contents are parsed and loaded in the <see cref="T:Godot.ConfigFile"/> object which the method was called on.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Parse(System.String)">
            <summary>
            <para>Parses the the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Save(System.String)">
            <summary>
            <para>Saves the contents of the <see cref="T:Godot.ConfigFile"/> object to the file specified as a parameter. The output file uses an INI-style structure.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.LoadEncrypted(System.String,System.Byte[])">
            <summary>
            <para>Loads the encrypted config file specified as a parameter, using the provided <c>key</c> to decrypt it. The file's contents are parsed and loaded in the <see cref="T:Godot.ConfigFile"/> object which the method was called on.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.LoadEncryptedPass(System.String,System.String)">
            <summary>
            <para>Loads the encrypted config file specified as a parameter, using the provided <c>password</c> to decrypt it. The file's contents are parsed and loaded in the <see cref="T:Godot.ConfigFile"/> object which the method was called on.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.SaveEncrypted(System.String,System.Byte[])">
            <summary>
            <para>Saves the contents of the <see cref="T:Godot.ConfigFile"/> object to the AES-256 encrypted file specified as a parameter, using the provided <c>key</c> to encrypt it. The output file uses an INI-style structure.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.SaveEncryptedPass(System.String,System.String)">
            <summary>
            <para>Saves the contents of the <see cref="T:Godot.ConfigFile"/> object to the AES-256 encrypted file specified as a parameter, using the provided <c>password</c> to encrypt it. The output file uses an INI-style structure.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="T:Godot.ConfirmationDialog">
            <summary>
            <para>Dialog for confirmation of actions. This dialog inherits from <see cref="T:Godot.AcceptDialog"/>, but has by default an OK and Cancel button (in host OS order).</para>
            <para>To get cancel action, you can use:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>get_cancel().connect("pressed", self, "cancelled")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GetCancel().Connect("pressed", this, nameof(Cancelled));</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ConfirmationDialog.GetCancelButton">
            <summary>
            <para>Returns the cancel button.</para>
            </summary>
        </member>
        <member name="T:Godot.Container">
            <summary>
            <para>Base node for containers. A <see cref="T:Godot.Container"/> contains other controls and automatically arranges them in a certain way.</para>
            <para>A Control can inherit this to create custom container classes.</para>
            </summary>
        </member>
        <member name="F:Godot.Container.NotificationSortChildren">
            <summary>
            <para>Notification for when sorting the children, it must be obeyed immediately.</para>
            </summary>
        </member>
        <member name="M:Godot.Container.QueueSort">
            <summary>
            <para>Queue resort of the contained children. This is called automatically anyway, but can be called upon request.</para>
            </summary>
        </member>
        <member name="M:Godot.Container.FitChildInRect(Godot.Control,Godot.Rect2)">
            <summary>
            <para>Fit a child control in a given rect. This is mainly a helper for creating custom container classes.</para>
            </summary>
        </member>
        <member name="T:Godot.Container.SortChildrenHandler">
            <summary>
            <para>Emitted when sorting the children is needed.</para>
            </summary>
        </member>
        <member name="T:Godot.Control">
            <summary>
            <para>Base class for all UI-related nodes. <see cref="T:Godot.Control"/> features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and offsets relative to the anchor. The offsets update automatically when the node, any of its parents, or the screen size change.</para>
            <para>For more information on Godot's UI system, anchors, offsets, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from <see cref="T:Godot.Control"/> and <see cref="T:Godot.Container"/> nodes.</para>
            <para>User Interface nodes and input</para>
            <para>Godot sends input events to the scene's root node first, by calling <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>. <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls <c>MainLoop._input_event</c>.</para>
            <para>FIXME: No longer valid after DisplayServer split and Input refactoring.</para>
            <para>Call <see cref="M:Godot.Control.AcceptEvent"/> so no other node receives the event. Once you accepted an input, it becomes handled so <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> will not process it.</para>
            <para>Only one <see cref="T:Godot.Control"/> node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call <see cref="M:Godot.Control.GrabFocus"/>. <see cref="T:Godot.Control"/> nodes lose focus when another node grabs it, or if you hide the node in focus.</para>
            <para>Sets <see cref="P:Godot.Control.MouseFilter"/> to  to tell a <see cref="T:Godot.Control"/> node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.</para>
            <para><see cref="T:Godot.Theme"/> resources change the Control's appearance. If you change the <see cref="T:Godot.Theme"/> on a <see cref="T:Godot.Control"/> node, it affects all of its children. To override some of the theme's parameters, call one of the <c>add_theme_*_override</c> methods, like <see cref="M:Godot.Control.AddThemeFontOverride(Godot.StringName,Godot.Font)"/>. You can override the theme with the inspector.</para>
            <para>Note: Theme items are not <see cref="T:Godot.Object"/> properties. This means you can't access their values using <see cref="M:Godot.Object.Get(System.String)"/> and <see cref="M:Godot.Object.Set(System.String,System.Object)"/>. Instead, use the <c>get_theme_*</c> and <c>add_theme_*_override</c> methods provided by this class.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationResized">
            <summary>
            <para>Sent when the node changes size. Use <see cref="P:Godot.Control.RectSize"/> to get the new size.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationMouseEnter">
            <summary>
            <para>Sent when the mouse pointer enters the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationMouseExit">
            <summary>
            <para>Sent when the mouse pointer exits the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationFocusEnter">
            <summary>
            <para>Sent when the node grabs focus.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationFocusExit">
            <summary>
            <para>Sent when the node loses focus.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationThemeChanged">
            <summary>
            <para>Sent when the node's <see cref="P:Godot.Control.Theme"/> changes, right before Godot redraws the control. Happens when you call one of the <c>add_theme_*_override</c> methods.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationScrollBegin">
            <summary>
            <para>Sent when this node is inside a <see cref="T:Godot.ScrollContainer"/> which has begun being scrolled.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationScrollEnd">
            <summary>
            <para>Sent when this node is inside a <see cref="T:Godot.ScrollContainer"/> which has stopped being scrolled.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.NotificationLayoutDirectionChanged">
            <summary>
            <para>Sent when control layout direction is changed.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.Anchor.Begin">
            <summary>
            <para>Snaps one of the 4 anchor's sides to the origin of the node's <c>Rect</c>, in the top left. Use it with one of the <c>anchor_*</c> member variables, like <see cref="P:Godot.Control.AnchorLeft"/>. To change all 4 anchors at once, use <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.Anchor.End">
            <summary>
            <para>Snaps one of the 4 anchor's sides to the end of the node's <c>Rect</c>, in the bottom right. Use it with one of the <c>anchor_*</c> member variables, like <see cref="P:Godot.Control.AnchorLeft"/>. To change all 4 anchors at once, use <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.None">
            <summary>
            <para>The node cannot grab focus. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.Click">
            <summary>
            <para>The node can only grab focus on mouse clicks. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.FocusModeEnum.All">
            <summary>
            <para>The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.TextDirection.Inherited">
            <summary>
            <para>Text writing direction is the same as layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.TextDirection.Auto">
            <summary>
            <para>Automatic text writing direction, determined from the current locale and text content.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.TextDirection.Ltr">
            <summary>
            <para>Left-to-right text writing direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.TextDirection.Rtl">
            <summary>
            <para>Right-to-left text writing direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.Minsize">
            <summary>
            <para>The control will be resized to its minimum size.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepWidth">
            <summary>
            <para>The control's width will not change.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepHeight">
            <summary>
            <para>The control's height will not change.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPresetMode.KeepSize">
            <summary>
            <para>The control's size will not change.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.Default">
            <summary>
            <para>Use default behavior. Same as <c>STRUCTURED_TEXT_NONE</c> unless specified otherwise in the control description.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.Uri">
            <summary>
            <para>BiDi override for URI.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.File">
            <summary>
            <para>BiDi override for file path.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.Email">
            <summary>
            <para>BiDi override for email.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.List">
            <summary>
            <para>BiDi override for lists.</para>
            <para>Structured text options: list separator <c>String</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.None">
            <summary>
            <para>Use default Unicode BiDi algorithm.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.StructuredTextParser.Custom">
            <summary>
            <para>User defined structured text BiDi override function.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutDirectionEnum.Inherited">
            <summary>
            <para>Automatic layout direction, determined from the parent control layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutDirectionEnum.Locale">
            <summary>
            <para>Automatic layout direction, determined from the current locale.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutDirectionEnum.Ltr">
            <summary>
            <para>Left-to-right layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutDirectionEnum.Rtl">
            <summary>
            <para>Right-to-left layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Stop">
            <summary>
            <para>The control will receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> if clicked on. And the control will receive the <c>mouse_entered</c> and <c>mouse_exited</c> signals. These events are automatically marked as handled, and they will not propagate further to other controls. This also results in blocking signals in other controls.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Pass">
            <summary>
            <para>The control will receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> if clicked on. And the control will receive the <c>mouse_entered</c> and <c>mouse_exited</c> signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. Even if no control handled it at all, the event will still be handled automatically, so unhandled input will not be fired.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.MouseFilterEnum.Ignore">
            <summary>
            <para>The control will not receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>. The control will also not receive the <c>mouse_entered</c> nor <c>mouse_exited</c> signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Arrow">
            <summary>
            <para>Show the system's arrow mouse cursor when the user hovers the node. Use with <see cref="P:Godot.Control.MouseDefaultCursorShape"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Ibeam">
            <summary>
            <para>Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.PointingHand">
            <summary>
            <para>Show the system's pointing hand mouse cursor when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Cross">
            <summary>
            <para>Show the system's cross mouse cursor when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Wait">
            <summary>
            <para>Show the system's wait mouse cursor, often an hourglass, when the user hovers the node.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Busy">
            <summary>
            <para>Show the system's busy mouse cursor when the user hovers the node. Often an hourglass.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Drag">
            <summary>
            <para>Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.CanDrop">
            <summary>
            <para>Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Forbidden">
            <summary>
            <para>Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Vsize">
            <summary>
            <para>Show the system's vertical resize mouse cursor when the user hovers the node. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Hsize">
            <summary>
            <para>Show the system's horizontal resize mouse cursor when the user hovers the node. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Bdiagsize">
            <summary>
            <para>Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Fdiagsize">
            <summary>
            <para>Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of . It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Move">
            <summary>
            <para>Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Vsplit">
            <summary>
            <para>Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as .</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Hsplit">
            <summary>
            <para>Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as .</para>
            </summary>
        </member>
        <member name="F:Godot.Control.CursorShape.Help">
            <summary>
            <para>Show the system's help mouse cursor when the user hovers the node, a question mark.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.Begin">
            <summary>
            <para>The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.End">
            <summary>
            <para>The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.GrowDirection.Both">
            <summary>
            <para>The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.Fill">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to expand the bounds of this node to fill all the available space without pushing any other node. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.Expand">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See <see cref="P:Godot.Control.SizeFlagsStretchRatio"/>. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ExpandFill">
            <summary>
            <para>Sets the node's size flags to both fill and expand. See the 2 constants above for more information.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ShrinkCenter">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.SizeFlags.ShrinkEnd">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopLeft">
            <summary>
            <para>Snap all 4 anchors to the top-left of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopRight">
            <summary>
            <para>Snap all 4 anchors to the top-right of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomLeft">
            <summary>
            <para>Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomRight">
            <summary>
            <para>Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterLeft">
            <summary>
            <para>Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterTop">
            <summary>
            <para>Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterRight">
            <summary>
            <para>Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.CenterBottom">
            <summary>
            <para>Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.Center">
            <summary>
            <para>Snap all 4 anchors to the center of the parent control's bounds. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.LeftWide">
            <summary>
            <para>Snap all 4 anchors to the left edge of the parent control. The left offset becomes relative to the left edge and the top offset relative to the top left corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.TopWide">
            <summary>
            <para>Snap all 4 anchors to the top edge of the parent control. The left offset becomes relative to the top left corner, the top offset relative to the top edge, and the right offset relative to the top right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.RightWide">
            <summary>
            <para>Snap all 4 anchors to the right edge of the parent control. The right offset becomes relative to the right edge and the top offset relative to the top right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.BottomWide">
            <summary>
            <para>Snap all 4 anchors to the bottom edge of the parent control. The left offset becomes relative to the bottom left corner, the bottom offset relative to the bottom edge, and the right offset relative to the bottom right corner of the node's parent. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.VcenterWide">
            <summary>
            <para>Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.HcenterWide">
            <summary>
            <para>Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Control.LayoutPreset.Wide">
            <summary>
            <para>Snap all 4 anchors to the respective corners of the parent control. Set all 4 offsets to 0 after you applied this preset and the <see cref="T:Godot.Control"/> will fit its parent control. This is equivalent to the "Full Rect" layout option in the editor. Use with <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorLeft">
            <summary>
            <para>Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left offset updates when the node moves or changes size. You can use one of the <see cref="T:Godot.Control.Anchor"/> constants for convenience.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorTop">
            <summary>
            <para>Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top offset updates when the node moves or changes size. You can use  one of the <see cref="T:Godot.Control.Anchor"/> constants for convenience.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorRight">
            <summary>
            <para>Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right offset updates when the node moves or changes size. You can use one of the <see cref="T:Godot.Control.Anchor"/> constants for convenience.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorBottom">
            <summary>
            <para>Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom offset updates when the node moves or changes size. You can use one of the <see cref="T:Godot.Control.Anchor"/> constants for convenience.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.OffsetLeft">
            <summary>
            <para>Distance between the node's left edge and its parent control, based on <see cref="P:Godot.Control.AnchorLeft"/>.</para>
            <para>Offsets are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Offsets update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.OffsetTop">
            <summary>
            <para>Distance between the node's top edge and its parent control, based on <see cref="P:Godot.Control.AnchorTop"/>.</para>
            <para>Offsets are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Offsets update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.OffsetRight">
            <summary>
            <para>Distance between the node's right edge and its parent control, based on <see cref="P:Godot.Control.AnchorRight"/>.</para>
            <para>Offsets are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Offsets update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.OffsetBottom">
            <summary>
            <para>Distance between the node's bottom edge and its parent control, based on <see cref="P:Godot.Control.AnchorBottom"/>.</para>
            <para>Offsets are often controlled by one or multiple parent <see cref="T:Godot.Container"/> nodes, so you should not modify them manually if your node is a direct child of a <see cref="T:Godot.Container"/>. Offsets update automatically when you move or resize the node.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.GrowHorizontal">
            <summary>
            <para>Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.GrowVertical">
            <summary>
            <para>Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.LayoutDirection">
            <summary>
            <para>Controls layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew).</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectPosition">
            <summary>
            <para>The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by <see cref="P:Godot.Control.RectPivotOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectGlobalPosition">
            <summary>
            <para>The node's global position, relative to the world (usually to the top-left corner of the window).</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectSize">
            <summary>
            <para>The size of the node's bounding rectangle, in pixels. <see cref="T:Godot.Container"/> nodes update this property automatically.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectMinSize">
            <summary>
            <para>The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectRotation">
            <summary>
            <para>The node's rotation around its pivot, in radians. See <see cref="P:Godot.Control.RectPivotOffset"/> to change the pivot's position.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectRotationDegrees">
            <summary>
            <para>The node's rotation around its pivot, in degrees. See <see cref="P:Godot.Control.RectPivotOffset"/> to change the pivot's position.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectScale">
            <summary>
            <para>The node's scale, relative to its <see cref="P:Godot.Control.RectSize"/>. Change this property to scale the node around its <see cref="P:Godot.Control.RectPivotOffset"/>. The Control's <see cref="P:Godot.Control.HintTooltip"/> will also scale according to this value.</para>
            <para>Note: This property is mainly intended to be used for animation purposes. Text inside the Control will look pixelated or blurry when the Control is scaled. To support multiple resolutions in your project, use an appropriate viewport stretch mode as described in the <a href="https://docs.godotengine.org/en/latest/tutorials/viewports/multiple_resolutions.html">documentation</a> instead of scaling Controls individually.</para>
            <para>Note: If the Control node is a child of a <see cref="T:Godot.Container"/> node, the scale will be reset to <c>Vector2(1, 1)</c> when the scene is instanced. To set the Control's scale when it's instanced, wait for one frame using <c>yield(get_tree(), "idle_frame")</c> then set its <see cref="P:Godot.Control.RectScale"/> property.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectPivotOffset">
            <summary>
            <para>By default, the node's pivot is its top-left corner. When you change its <see cref="P:Godot.Control.RectScale"/>, it will scale around this pivot. Set this property to <see cref="P:Godot.Control.RectSize"/> / 2 to center the pivot in the node's rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.RectClipContent">
            <summary>
            <para>Enables whether rendering of <see cref="T:Godot.CanvasItem"/> based children should be clipped to this control's rectangle. If <c>true</c>, parts of a child which would be visibly outside of this control's rectangle will not be rendered.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.HintTooltip">
            <summary>
            <para>Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the <see cref="P:Godot.Control.MouseFilter"/> property is not . You can change the time required for the tooltip to appear with <c>gui/timers/tooltip_delay_sec</c> option in Project Settings.</para>
            <para>The tooltip popup will use either a default implementation, or a custom one that you can provide by overriding <see cref="M:Godot.Control._MakeCustomTooltip(System.String)"/>. The default tooltip includes a <see cref="T:Godot.PopupPanel"/> and <see cref="T:Godot.Label"/> whose theme properties can be customized using <see cref="T:Godot.Theme"/> methods with the <c>"TooltipPanel"</c> and <c>"TooltipLabel"</c> respectively. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var style_box = StyleBoxFlat.new()</para>
            <para>style_box.set_bg_color(Color(1, 1, 0))</para>
            <para>style_box.set_border_width_all(2)</para>
            <para># We assume here that the `theme` property has been assigned a custom Theme beforehand.</para>
            <para>theme.set_stylebox("panel", "TooltipPanel", style_box)</para>
            <para>theme.set_color("font_color", "TooltipLabel", Color(0, 1, 1))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var styleBox = new StyleBoxFlat();</para>
            <para>styleBox.SetBgColor(new Color(1, 1, 0));</para>
            <para>styleBox.SetBorderWidthAll(2);</para>
            <para>// We assume here that the `Theme` property has been assigned a custom Theme beforehand.</para>
            <para>Theme.SetStyleBox("panel", "TooltipPanel", styleBox);</para>
            <para>Theme.SetColor("font_color", "TooltipLabel", new Color(0, 1, 1));</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighborLeft">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the <c>ui_left</c> input action. The node must be a <see cref="T:Godot.Control"/>. If this property is not set, Godot will give focus to the closest <see cref="T:Godot.Control"/> to the left of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighborTop">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the <c>ui_top</c> input action. The node must be a <see cref="T:Godot.Control"/>. If this property is not set, Godot will give focus to the closest <see cref="T:Godot.Control"/> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighborRight">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad  by default. You can change the key by editing the <c>ui_right</c> input action. The node must be a <see cref="T:Godot.Control"/>. If this property is not set, Godot will give focus to the closest <see cref="T:Godot.Control"/> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighborBottom">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the <c>ui_down</c> input action. The node must be a <see cref="T:Godot.Control"/>. If this property is not set, Godot will give focus to the closest <see cref="T:Godot.Control"/> to the bottom of this one.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNext">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the <c>ui_focus_next</c> input action.</para>
            <para>If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusPrevious">
            <summary>
            <para>Tells Godot which node it should give keyboard focus to if the user presses Shift + Tab on a keyboard by default. You can change the key by editing the <c>ui_focus_prev</c> input action.</para>
            <para>If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusMode">
            <summary>
            <para>The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MouseFilter">
            <summary>
            <para>Controls whether the control will be able to receive mouse button input events through <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> and how these events should be handled. Also controls whether the control can receive the <c>mouse_entered</c>, and <c>mouse_exited</c> signals. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.MouseDefaultCursorShape">
            <summary>
            <para>The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.</para>
            <para>Note: On Linux, shapes may vary depending on the cursor theme of the system.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsHorizontal">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> nodes how they should resize and place the node on the X axis. Use one of the <see cref="T:Godot.Control.SizeFlags"/> constants to change the flags. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsVertical">
            <summary>
            <para>Tells the parent <see cref="T:Godot.Container"/> nodes how they should resize and place the node on the Y axis. Use one of the <see cref="T:Godot.Control.SizeFlags"/> constants to change the flags. See the constants to learn what each does.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsStretchRatio">
            <summary>
            <para>If the node and at least one of its neighbors uses the  size flag, the parent <see cref="T:Godot.Container"/> will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbor a ratio of 1, this node will take two thirds of the available space.</para>
            </summary>
        </member>
        <member name="P:Godot.Control.Theme">
            <summary>
            <para>Changing this property replaces the current <see cref="T:Godot.Theme"/> resource this node and all its <see cref="T:Godot.Control"/> children use.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._ClipsInput">
            <summary>
            <para>Virtual method to be implemented by the user. Returns whether <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/> should not be called for children controls outside this control's rectangle. Input will be clipped to the Rect of this <see cref="T:Godot.Control"/>. Similar to <see cref="P:Godot.Control.RectClipContent"/>, but doesn't affect visibility.</para>
            <para>If not overridden, defaults to <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._GetMinimumSize">
            <summary>
            <para>Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to <see cref="P:Godot.Control.RectMinSize"/> for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).</para>
            <para>If not overridden, defaults to .</para>
            </summary>
        </member>
        <member name="M:Godot.Control._GuiInput(Godot.InputEvent)">
            <summary>
            <para>Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See <see cref="M:Godot.Control.AcceptEvent"/>.</para>
            <para>Example: clicking a control.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _gui_input(event):</para>
            <para>    if event is InputEventMouseButton:</para>
            <para>        if event.button_index == BUTTON_LEFT and event.pressed:</para>
            <para>            print("I've been clicked D:")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _GuiInput(InputEvent @event)</para>
            <para>{</para>
            <para>    if (@event is InputEventMouseButton)</para>
            <para>    {</para>
            <para>        var mb = @event as InputEventMouseButton;</para>
            <para>        if (mb.ButtonIndex == (int)ButtonList.Left &amp;&amp; mb.Pressed)</para>
            <para>        {</para>
            <para>            GD.Print("I've been clicked D:");</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The event won't trigger if:</para>
            <para>* clicking outside the control (see <see cref="M:Godot.Control.HasPoint(Godot.Vector2)"/>);</para>
            <para>* control has <see cref="P:Godot.Control.MouseFilter"/> set to ;</para>
            <para>* control is obstructed by another <see cref="T:Godot.Control"/> on top of it, which doesn't have <see cref="P:Godot.Control.MouseFilter"/> set to ;</para>
            <para>* control's parent has <see cref="P:Godot.Control.MouseFilter"/> set to  or has accepted the event;</para>
            <para>* it happens outside parent's rectangle and the parent has either <see cref="P:Godot.Control.RectClipContent"/> or <see cref="M:Godot.Control._ClipsInput"/> enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Control._MakeCustomTooltip(System.String)">
            <summary>
            <para>Virtual method to be implemented by the user. Returns a <see cref="T:Godot.Control"/> node that should be used as a tooltip instead of the default one. The <c>for_text</c> includes the contents of the <see cref="P:Godot.Control.HintTooltip"/> property.</para>
            <para>The returned node must be of type <see cref="T:Godot.Control"/> or Control-derived. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance (if you want to use a pre-existing node from your scene tree, you can duplicate it and pass the duplicated instance).When <c>null</c> or a non-Control node is returned, the default tooltip will be used instead.</para>
            <para>The returned node will be added as child to a <see cref="T:Godot.PopupPanel"/>, so you should only provide the contents of that panel. That <see cref="T:Godot.PopupPanel"/> can be themed using <see cref="M:Godot.Theme.SetStylebox(Godot.StringName,Godot.StringName,Godot.StyleBox)"/> for the type <c>"TooltipPanel"</c> (see <see cref="P:Godot.Control.HintTooltip"/> for an example).</para>
            <para>Note: The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its <see cref="P:Godot.Control.RectMinSize"/> to some non-zero value.</para>
            <para>Note: The node (and any relevant children) should be <see cref="P:Godot.CanvasItem.Visible"/> when returned, otherwise the viewport that instantiates it will not be able to calculate its minimum size reliably.</para>
            <para>Example of usage with a custom-constructed node:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _make_custom_tooltip(for_text):</para>
            <para>    var label = Label.new()</para>
            <para>    label.text = for_text</para>
            <para>    return label</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override Godot.Control _MakeCustomTooltip(String forText)</para>
            <para>{</para>
            <para>    var label = new Label();</para>
            <para>    label.Text = forText;</para>
            <para>    return label;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Example of usage with a custom scene instance:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _make_custom_tooltip(for_text):</para>
            <para>    var tooltip = preload("res://SomeTooltipScene.tscn").instance()</para>
            <para>    tooltip.get_node("Label").text = for_text</para>
            <para>    return tooltip</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override Godot.Control _MakeCustomTooltip(String forText)</para>
            <para>{</para>
            <para>    Node tooltip = ResourceLoader.Load&lt;PackedScene&gt;("res://SomeTooltipScene.tscn").Instance();</para>
            <para>    tooltip.GetNode&lt;Label&gt;("Label").Text = forText;</para>
            <para>    return tooltip;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control._StructuredTextParser(Godot.Collections.Array,System.String)">
            <summary>
            <para>User defined BiDi algorithm override function.</para>
            <para>Return <c>Array</c> of <c>Vector2i</c> text ranges, in the left-to-right order. Ranges should cover full source <c>text</c> without overlaps. BiDi algorithm will be used on each range separately.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)">
            <summary>
            <para>Godot calls this method to test if <c>data</c> from a control's <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> can be dropped at <c>position</c>. <c>position</c> is local to this control.</para>
            <para>This method should only be used to test the data. Process the data in <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func can_drop_data(position, data):</para>
            <para>    # Check position if it is relevant to you</para>
            <para>    # Otherwise, just check data</para>
            <para>    return typeof(data) == TYPE_DICTIONARY and data.has("expected")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override bool CanDropData(Vector2 position, object data)</para>
            <para>{</para>
            <para>    // Check position if it is relevant to you</para>
            <para>    // Otherwise, just check data</para>
            <para>    return data is Godot.Collections.Dictionary &amp;&amp; (data as Godot.Collections.Dictionary).Contains("expected");</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.DropData(Godot.Vector2,System.Object)">
            <summary>
            <para>Godot calls this method to pass you the <c>data</c> from a control's <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> result. Godot first calls <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> to test if <c>data</c> is allowed to drop at <c>position</c> where <c>position</c> is local to this control.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func can_drop_data(position, data):</para>
            <para>    return typeof(data) == TYPE_DICTIONARY and data.has("color")</para>
            <para>func drop_data(position, data):</para>
            <para>    var color = data["color"]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override bool CanDropData(Vector2 position, object data)</para>
            <para>{</para>
            <para>    return data is Godot.Collections.Dictionary &amp;&amp; (data as Godot.Collections.Dictionary).Contains("color");</para>
            <para>}</para>
            <para>public override void DropData(Vector2 position, object data)</para>
            <para>{</para>
            <para>    Color color = (Color)(data as Godot.Collections.Dictionary)["color"];</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetDragData(Godot.Vector2)">
            <summary>
            <para>Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns <c>null</c> if there is no data to drag. Controls that want to receive drop data should implement <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/>. <c>position</c> is local to this control. Drag may be forced with <see cref="M:Godot.Control.ForceDrag(System.Object,Godot.Control)"/>.</para>
            <para>A preview that will follow the mouse that should represent the data can be set with <see cref="M:Godot.Control.SetDragPreview(Godot.Control)"/>. A good time to set the preview is in this method.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func get_drag_data(position):</para>
            <para>    var mydata = make_data() # This is your custom method generating the drag data.</para>
            <para>    set_drag_preview(make_preview(mydata)) # This is your custom method generating the preview of the drag data.</para>
            <para>    return mydata</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override object GetDragData(Vector2 position)</para>
            <para>{</para>
            <para>    object mydata = MakeData(); // This is your custom method generating the drag data.</para>
            <para>    SetDragPreview(MakePreview(mydata)); // This is your custom method generating the preview of the drag data.</para>
            <para>    return mydata;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasPoint(Godot.Vector2)">
            <summary>
            <para>Virtual method to be implemented by the user. Returns whether the given <c>point</c> is inside this control.</para>
            <para>If not overridden, default behavior is checking if the point is within control's Rect.</para>
            <para>Note: If you want to check if a point is inside the control, you can use <c>get_rect().has_point(point)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AcceptEvent">
            <summary>
            <para>Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to <see cref="M:Godot.Node._UnhandledInput(Godot.InputEvent)"/> or <see cref="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetMinimumSize">
            <summary>
            <para>Returns the minimum size for this control. See <see cref="P:Godot.Control.RectMinSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetCombinedMinimumSize">
            <summary>
            <para>Returns combined minimum size from <see cref="P:Godot.Control.RectMinSize"/> and <see cref="M:Godot.Control.GetMinimumSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)">
            <summary>
            <para>Sets the anchors to a <c>preset</c> from <see cref="T:Godot.Control.LayoutPreset"/> enum. This is code equivalent of using the Layout menu in 2D editor.</para>
            <para>If <c>keep_offsets</c> is <c>true</c>, control's position will also be updated.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetOffsetsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            <para>Sets the offsets to a <c>preset</c> from <see cref="T:Godot.Control.LayoutPreset"/> enum. This is code equivalent of using the Layout menu in 2D editor.</para>
            <para>Use parameter <c>resize_mode</c> with constants from <see cref="T:Godot.Control.LayoutPresetMode"/> to better determine the resulting size of the <see cref="T:Godot.Control"/>. Constant size will be ignored if used with presets that change size, e.g. <c>PRESET_LEFT_WIDE</c>.</para>
            <para>Use parameter <c>margin</c> to determine the gap between the <see cref="T:Godot.Control"/> and the edges.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsAndOffsetsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            <para>Sets both anchor preset and offset preset. See <see cref="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)"/> and <see cref="M:Godot.Control.SetOffsetsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchor(Godot.Side,System.Single,System.Boolean,System.Boolean)">
            <summary>
            <para>Sets the anchor for the specified <see cref="T:Godot.Side"/> to <c>anchor</c>. A setter method for <see cref="P:Godot.Control.AnchorBottom"/>, <see cref="P:Godot.Control.AnchorLeft"/>, <see cref="P:Godot.Control.AnchorRight"/> and <see cref="P:Godot.Control.AnchorTop"/>.</para>
            <para>If <c>keep_offset</c> is <c>true</c>, offsets aren't updated after this operation.</para>
            <para>If <c>push_opposite_anchor</c> is <c>true</c> and the opposite anchor overlaps this anchor, the opposite one will have its value overridden. For example, when setting left anchor to 1 and the right anchor has value of 0.5, the right anchor will also get value of 1. If <c>push_opposite_anchor</c> was <c>false</c>, the left anchor would get value 0.5.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetAnchor(Godot.Side)">
            <summary>
            <para>Returns the anchor for the specified <see cref="T:Godot.Side"/>. A getter method for <see cref="P:Godot.Control.AnchorBottom"/>, <see cref="P:Godot.Control.AnchorLeft"/>, <see cref="P:Godot.Control.AnchorRight"/> and <see cref="P:Godot.Control.AnchorTop"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetOffset(Godot.Side,System.Single)">
            <summary>
            <para>Sets the offset for the specified <see cref="T:Godot.Side"/> to <c>offset</c>. A setter method for <see cref="P:Godot.Control.OffsetBottom"/>, <see cref="P:Godot.Control.OffsetLeft"/>, <see cref="P:Godot.Control.OffsetRight"/> and <see cref="P:Godot.Control.OffsetTop"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorAndOffset(Godot.Side,System.Single,System.Single,System.Boolean)">
            <summary>
            <para>Works the same as <see cref="M:Godot.Control.SetAnchor(Godot.Side,System.Single,System.Boolean,System.Boolean)"/>, but instead of <c>keep_offset</c> argument and automatic update of offset, it allows to set the offset yourself (see <see cref="M:Godot.Control.SetOffset(Godot.Side,System.Single)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetBegin(Godot.Vector2)">
            <summary>
            <para>Sets <see cref="P:Godot.Control.OffsetLeft"/> and <see cref="P:Godot.Control.OffsetTop"/> at the same time. Equivalent of changing <see cref="P:Godot.Control.RectPosition"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetEnd(Godot.Vector2)">
            <summary>
            <para>Sets <see cref="P:Godot.Control.OffsetRight"/> and <see cref="P:Godot.Control.OffsetBottom"/> at the same time.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetPosition(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Sets the <see cref="P:Godot.Control.RectPosition"/> to given <c>position</c>.</para>
            <para>If <c>keep_offsets</c> is <c>true</c>, control's anchors will be updated instead of offsets.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetSize(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Sets the size (see <see cref="P:Godot.Control.RectSize"/>).</para>
            <para>If <c>keep_offsets</c> is <c>true</c>, control's anchors will be updated instead of offsets.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetGlobalPosition(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Sets the <see cref="P:Godot.Control.RectGlobalPosition"/> to given <c>position</c>.</para>
            <para>If <c>keep_offsets</c> is <c>true</c>, control's anchors will be updated instead of offsets.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetOffset(Godot.Side)">
            <summary>
            <para>Returns the anchor for the specified <see cref="T:Godot.Side"/>. A getter method for <see cref="P:Godot.Control.OffsetBottom"/>, <see cref="P:Godot.Control.OffsetLeft"/>, <see cref="P:Godot.Control.OffsetRight"/> and <see cref="P:Godot.Control.OffsetTop"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetBegin">
            <summary>
            <para>Returns <see cref="P:Godot.Control.OffsetLeft"/> and <see cref="P:Godot.Control.OffsetTop"/>. See also <see cref="P:Godot.Control.RectPosition"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetEnd">
            <summary>
            <para>Returns <see cref="P:Godot.Control.OffsetRight"/> and <see cref="P:Godot.Control.OffsetBottom"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetParentAreaSize">
            <summary>
            <para>Returns the width/height occupied in the parent control.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetRect">
            <summary>
            <para>Returns the position and size of the control relative to the top-left corner of the parent Control. See <see cref="P:Godot.Control.RectPosition"/> and <see cref="P:Godot.Control.RectSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetGlobalRect">
            <summary>
            <para>Returns the position and size of the control relative to the top-left corner of the screen. See <see cref="P:Godot.Control.RectPosition"/> and <see cref="P:Godot.Control.RectSize"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasFocus">
            <summary>
            <para>Returns <c>true</c> if this is the current focused control. See <see cref="P:Godot.Control.FocusMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GrabFocus">
            <summary>
            <para>Steal the focus from another control and become the focused control (see <see cref="P:Godot.Control.FocusMode"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Control.ReleaseFocus">
            <summary>
            <para>Give up the focus. No other control will be able to receive keyboard input.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetFocusOwner">
            <summary>
            <para>Returns the control that has the keyboard focus or <c>null</c> if none.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeIconOverride(Godot.StringName,Godot.Texture2D)">
            <summary>
            <para>Overrides the icon with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses. If <c>icon</c> is <c>null</c> or invalid, the override is cleared and the icon from assigned <see cref="T:Godot.Theme"/> is used.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeStyleboxOverride(Godot.StringName,Godot.StyleBox)">
            <summary>
            <para>Overrides the <see cref="T:Godot.StyleBox"/> with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses. If <c>stylebox</c> is empty or invalid, the override is cleared and the <see cref="T:Godot.StyleBox"/> from assigned <see cref="T:Godot.Theme"/> is used.</para>
            <para>Example of modifying a property in a StyleBox by duplicating it:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.</para>
            <para># Resources are shared across instances, so we need to duplicate it</para>
            <para># to avoid modifying the appearance of all other buttons.</para>
            <para>var new_stylebox_normal = $MyButton.get_theme_stylebox("normal").duplicate()</para>
            <para>new_stylebox_normal.border_width_top = 3</para>
            <para>new_stylebox_normal.border_color = Color(0, 1, 0.5)</para>
            <para>$MyButton.add_theme_stylebox_override("normal", new_stylebox_normal)</para>
            <para># Remove the stylebox override:</para>
            <para>$MyButton.add_theme_stylebox_override("normal", null)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.</para>
            <para>// Resources are shared across instances, so we need to duplicate it</para>
            <para>// to avoid modifying the appearance of all other buttons.</para>
            <para>StyleBoxFlat newStyleboxNormal = GetNode&lt;Button&gt;("MyButton").GetThemeStylebox("normal").Duplicate() as StyleBoxFlat;</para>
            <para>newStyleboxNormal.BorderWidthTop = 3;</para>
            <para>newStyleboxNormal.BorderColor = new Color(0, 1, 0.5f);</para>
            <para>GetNode&lt;Button&gt;("MyButton").AddThemeStyleboxOverride("normal", newStyleboxNormal);</para>
            <para>// Remove the stylebox override:</para>
            <para>GetNode&lt;Button&gt;("MyButton").AddThemeStyleboxOverride("normal", null);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeFontOverride(Godot.StringName,Godot.Font)">
            <summary>
            <para>Overrides the font with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses. If <c>font</c> is <c>null</c> or invalid, the override is cleared and the font from assigned <see cref="T:Godot.Theme"/> is used.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeFontSizeOverride(Godot.StringName,System.Int32)">
            <summary>
            <para>Overrides the font size with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses. If <c>font_size</c> is <c>-1</c>, the override is cleared and the font size from assigned <see cref="T:Godot.Theme"/> is used.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeColorOverride(Godot.StringName,Godot.Color)">
            <summary>
            <para>Overrides the <see cref="T:Godot.Color"/> with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses.</para>
            <para>Note: Unlike other theme overrides, there is no way to undo a color override without manually assigning the previous color.</para>
            <para>Example of overriding a label's color and resetting it later:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Override the child node "MyLabel"'s font color to orange.</para>
            <para>$MyLabel.add_theme_color_override("font_color", Color(1, 0.5, 0))</para>
            <para># Reset the color by creating a new node to get the default value:</para>
            <para>var default_label_color = Label.new().get_theme_color("font_color")</para>
            <para>$MyLabel.add_theme_color_override("font_color", default_label_color)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Override the child node "MyLabel"'s font color to orange.</para>
            <para>GetNode&lt;Label&gt;("MyLabel").AddThemeColorOverride("font_color", new Color(1, 0.5f, 0));</para>
            <para>// Reset the color by creating a new node to get the default value:</para>
            <para>var defaultLabelColor = new Label().GetThemeColor("font_color");</para>
            <para>GetNode&lt;Label&gt;("MyLabel").AddThemeColorOverride("font_color", defaultLabelColor);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.AddThemeConstantOverride(Godot.StringName,System.Int32)">
            <summary>
            <para>Overrides an integer constant with given <c>name</c> in the <see cref="P:Godot.Control.Theme"/> resource the control uses. If the <c>constant</c> is <c>0</c>, the override is cleared and the constant from assigned <see cref="T:Godot.Theme"/> is used.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetThemeIcon(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns an icon from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetThemeStylebox(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a <see cref="T:Godot.StyleBox"/> from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetThemeFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a font from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetThemeFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a font size from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>type</c>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetThemeColor(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a color from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _ready():</para>
            <para>    modulate = get_theme_color("font_color", "Button") #get the color defined for button fonts</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    Modulate = GetThemeColor("font_color", "Button"); //get the color defined for button fonts</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetThemeConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a constant from assigned <see cref="T:Godot.Theme"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeIconOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if icon with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeStyleboxOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.StyleBox"/> with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeFontOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeFontSizeOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font size with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeColorOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Color"/> with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeConstantOverride(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if constant with given <c>name</c> has a valid override in this <see cref="T:Godot.Control"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.HasThemeIcon(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if icon with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeStylebox(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.StyleBox"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font size with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeColor(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Color"/> with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.HasThemeConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if constant with given <c>name</c> and associated with <see cref="T:Godot.Control"/> of given <c>node_type</c> exists in assigned <see cref="T:Godot.Theme"/>.</para>
            </summary>
            <param name="nodeType">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Control.GetParentControl">
            <summary>
            <para>Returns the parent control node.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetTooltip(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Returns the tooltip, which will appear when the cursor is resting over this control. See <see cref="P:Godot.Control.HintTooltip"/>.</para>
            </summary>
            <param name="atPosition">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.Control.GetCursorShape(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Returns the mouse cursor shape the control displays on mouse hover. See <see cref="T:Godot.Control.CursorShape"/>.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.Control.SetFocusNeighbor(Godot.Side,Godot.NodePath)">
            <summary>
            <para>Sets the anchor for the specified <see cref="T:Godot.Side"/> to the <see cref="T:Godot.Control"/> at <c>neighbor</c> node path. A setter method for <see cref="P:Godot.Control.FocusNeighborBottom"/>, <see cref="P:Godot.Control.FocusNeighborLeft"/>, <see cref="P:Godot.Control.FocusNeighborRight"/> and <see cref="P:Godot.Control.FocusNeighborTop"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GetFocusNeighbor(Godot.Side)">
            <summary>
            <para>Returns the focus neighbor for the specified <see cref="T:Godot.Side"/>. A getter method for <see cref="P:Godot.Control.FocusNeighborBottom"/>, <see cref="P:Godot.Control.FocusNeighborLeft"/>, <see cref="P:Godot.Control.FocusNeighborRight"/> and <see cref="P:Godot.Control.FocusNeighborTop"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.ForceDrag(System.Object,Godot.Control)">
            <summary>
            <para>Forces drag and bypasses <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/> and <see cref="M:Godot.Control.SetDragPreview(Godot.Control)"/> by passing <c>data</c> and <c>preview</c>. Drag will start even if the mouse is neither over nor pressed on this control.</para>
            <para>The methods <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/> must be implemented on controls that want to receive drop data.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.GrabClickFocus">
            <summary>
            <para>Creates an <see cref="T:Godot.InputEventMouseButton"/> that attempts to click the control. If the event is received, the control acquires focus.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _process(delta):</para>
            <para>    grab_click_focus() #when clicking another Control node, this node will be clicked instead</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Process(float delta)</para>
            <para>{</para>
            <para>    GrabClickFocus(); //when clicking another Control node, this node will be clicked instead</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragForwarding(Godot.Control)">
            <summary>
            <para>Forwards the handling of this control's drag and drop to <c>target</c> control.</para>
            <para>Forwarding can be implemented in the target control similar to the methods <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>, <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/>, and <see cref="M:Godot.Control.DropData(Godot.Vector2,System.Object)"/> but with two differences:</para>
            <para>1. The function name must be suffixed with _fw</para>
            <para>2. The function must take an extra argument that is the control doing the forwarding</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># ThisControl.gd</para>
            <para>extends Control</para>
            <para>export(Control) var target_control</para>
            <para></para>
            <para>func _ready():</para>
            <para>    set_drag_forwarding(target_control)</para>
            <para></para>
            <para># TargetControl.gd</para>
            <para>extends Control</para>
            <para></para>
            <para>func can_drop_data_fw(position, data, from_control):</para>
            <para>    return true</para>
            <para></para>
            <para>func drop_data_fw(position, data, from_control):</para>
            <para>    my_handle_data(data) # Your handler method.</para>
            <para></para>
            <para>func get_drag_data_fw(position, from_control):</para>
            <para>    set_drag_preview(my_preview)</para>
            <para>    return my_data()</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// ThisControl.cs</para>
            <para>public class ThisControl : Control</para>
            <para>{</para>
            <para>    [Export]</para>
            <para>    public Control TargetControl { get; set; }</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        SetDragForwarding(TargetControl);</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>// TargetControl.cs</para>
            <para>public class TargetControl : Control</para>
            <para>{</para>
            <para>    public void CanDropDataFw(Vector2 position, object data, Control fromControl)</para>
            <para>    {</para>
            <para>        return true;</para>
            <para>    }</para>
            <para></para>
            <para>    public void DropDataFw(Vector2 position, object data, Control fromControl)</para>
            <para>    {</para>
            <para>        MyHandleData(data); // Your handler method.</para>
            <para>    }</para>
            <para></para>
            <para>    public void GetDragDataFw(Vector2 position, Control fromControl)</para>
            <para>    {</para>
            <para>        SetDragPreview(MyPreview);</para>
            <para>        return MyData();</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragPreview(Godot.Control)">
            <summary>
            <para>Shows the given control at the mouse pointer. A good time to call this method is in <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>. The control must not be in the scene tree.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>export (Color, RGBA) var color = Color(1, 0, 0, 1)</para>
            <para></para>
            <para>func get_drag_data(position):</para>
            <para>    # Use a control that is not in the tree</para>
            <para>    var cpb = ColorPickerButton.new()</para>
            <para>    cpb.color = color</para>
            <para>    cpb.rect_size = Vector2(50, 50)</para>
            <para>    set_drag_preview(cpb)</para>
            <para>    return color</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>[Export]</para>
            <para>public Color Color = new Color(1, 0, 0, 1);</para>
            <para></para>
            <para>public override object GetDragData(Vector2 position)</para>
            <para>{</para>
            <para>    // Use a control that is not in the tree</para>
            <para>    var cpb = new ColorPickerButton();</para>
            <para>    cpb.Color = Color;</para>
            <para>    cpb.RectSize = new Vector2(50, 50);</para>
            <para>    SetDragPreview(cpb);</para>
            <para>    return Color;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Control.WarpMouse(Godot.Vector2)">
            <summary>
            <para>Moves the mouse cursor to <c>to_position</c>, relative to <see cref="P:Godot.Control.RectPosition"/> of this <see cref="T:Godot.Control"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.MinimumSizeChanged">
            <summary>
            <para>Invalidates the size cache in this node and in parent nodes up to top_level. Intended to be used with <see cref="M:Godot.Control.GetMinimumSize"/> when the return value is changed. Setting <see cref="P:Godot.Control.RectMinSize"/> directly calls this method automatically.</para>
            </summary>
        </member>
        <member name="M:Godot.Control.IsLayoutRtl">
            <summary>
            <para>Returns <c>true</c> if layout is right-to-left.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.MouseExitedHandler">
            <summary>
            <para>Emitted when the mouse leaves the control's <c>Rect</c> area, provided its <see cref="P:Godot.Control.MouseFilter"/> lets the event reach it.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.GuiInputHandler">
            <summary>
            <para>Emitted when the node receives an <see cref="T:Godot.InputEvent"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.FocusEnteredHandler">
            <summary>
            <para>Emitted when the node gains keyboard focus.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.ResizedHandler">
            <summary>
            <para>Emitted when the control changes size.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.MinimumSizeChangedSignalHandler">
            <summary>
            <para>Emitted when the node's minimum size changes.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.MouseEnteredHandler">
            <summary>
            <para>Emitted when the mouse enters the control's <c>Rect</c> area, provided its <see cref="P:Godot.Control.MouseFilter"/> lets the event reach it.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.SizeFlagsChangedHandler">
            <summary>
            <para>Emitted when one of the size flags changes. See <see cref="P:Godot.Control.SizeFlagsHorizontal"/> and <see cref="P:Godot.Control.SizeFlagsVertical"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Control.FocusExitedHandler">
            <summary>
            <para>Emitted when the node loses keyboard focus.</para>
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape2D">
            <summary>
            <para>Convex polygon shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).</para>
            <para>The main difference between a <see cref="T:Godot.ConvexPolygonShape2D"/> and a <see cref="T:Godot.ConcavePolygonShape2D"/> is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape2D.Points">
            <summary>
            <para>The polygon's list of vertices. Can be in either clockwise or counterclockwise order.</para>
            </summary>
        </member>
        <member name="M:Godot.ConvexPolygonShape2D.SetPointCloud(Godot.Vector2[])">
            <summary>
            <para>Based on the set of points provided, this creates and assigns the <see cref="P:Godot.ConvexPolygonShape2D.Points"/> property using the convex hull algorithm. Removing all unneeded points. See <see cref="M:Godot.Geometry2D.ConvexHull(Godot.Vector2[])"/> for details.</para>
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape3D">
            <summary>
            <para>Convex polygon shape resource, which can be added to a <see cref="T:Godot.PhysicsBody3D"/> or area.</para>
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape3D.Points">
            <summary>
            <para>The list of 3D points forming the convex polygon shape.</para>
            </summary>
        </member>
        <member name="T:Godot.Crypto">
            <summary>
            <para>The Crypto class allows you to access some more advanced cryptographic functionalities in Godot.</para>
            <para>For now, this includes generating cryptographically secure random bytes, RSA keys and self-signed X509 certificates generation, asymmetric key encryption/decryption, and signing/verification.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>extends Node</para>
            <para>var crypto = Crypto.new()</para>
            <para>var key = CryptoKey.new()</para>
            <para>var cert = X509Certificate.new()</para>
            <para>func _ready():</para>
            <para>    # Generate new RSA key.</para>
            <para>    key = crypto.generate_rsa(4096)</para>
            <para>    # Generate new self-signed certificate with the given key.</para>
            <para>    cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")</para>
            <para>    # Save key and certificate in the user folder.</para>
            <para>    key.save("user://generated.key")</para>
            <para>    cert.save("user://generated.crt")</para>
            <para>    # Encryption</para>
            <para>    var data = "Some data"</para>
            <para>    var encrypted = crypto.encrypt(key, data.to_utf8())</para>
            <para>    # Decryption</para>
            <para>    var decrypted = crypto.decrypt(key, encrypted)</para>
            <para>    # Signing</para>
            <para>    var signature = crypto.sign(HashingContext.HASH_SHA256, data.sha256_buffer(), key)</para>
            <para>    # Verifying</para>
            <para>    var verified = crypto.verify(HashingContext.HASH_SHA256, data.sha256_buffer(), signature, key)</para>
            <para>    # Checks</para>
            <para>    assert(verified)</para>
            <para>    assert(data.to_utf8() == decrypted)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para>using System.Diagnostics;</para>
            <para></para>
            <para>public class CryptoNode : Node</para>
            <para>{</para>
            <para>    public Crypto Crypto = new Crypto();</para>
            <para>    public CryptoKey Key = new CryptoKey();</para>
            <para>    public X509Certificate Cert = new X509Certificate();</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        // Generate new RSA key.</para>
            <para>        Key = Crypto.GenerateRsa(4096);</para>
            <para>        // Generate new self-signed certificate with the given key.</para>
            <para>        Cert = Crypto.GenerateSelfSignedCertificate(Key, "CN=mydomain.com,O=My Game Company,C=IT");</para>
            <para>        // Save key and certificate in the user folder.</para>
            <para>        Key.Save("user://generated.key");</para>
            <para>        Cert.Save("user://generated.crt");</para>
            <para>        // Encryption</para>
            <para>        string data = "Some data";</para>
            <para>        byte[] encrypted = Crypto.Encrypt(Key, data.ToUTF8());</para>
            <para>        // Decryption</para>
            <para>        byte[] decrypted = Crypto.Decrypt(Key, encrypted);</para>
            <para>        // Signing</para>
            <para>        byte[] signature = Crypto.Sign(HashingContext.HashType.Sha256, Data.SHA256Buffer(), Key);</para>
            <para>        // Verifying</para>
            <para>        bool verified = Crypto.Verify(HashingContext.HashType.Sha256, Data.SHA256Buffer(), signature, Key);</para>
            <para>        // Checks</para>
            <para>        Debug.Assert(verified);</para>
            <para>        Debug.Assert(data.ToUTF8() == decrypted);</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.GenerateRandomBytes(System.Int32)">
            <summary>
            <para>Generates a <see cref="T:byte[]"/> of cryptographically secure random bytes with given <c>size</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.GenerateRsa(System.Int32)">
            <summary>
            <para>Generates an RSA <see cref="T:Godot.CryptoKey"/> that can be used for creating self-signed certificates and passed to <see cref="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer,Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.GenerateSelfSignedCertificate(Godot.CryptoKey,System.String,System.String,System.String)">
            <summary>
            <para>Generates a self-signed <see cref="T:Godot.X509Certificate"/> from the given <see cref="T:Godot.CryptoKey"/> and <c>issuer_name</c>. The certificate validity will be defined by <c>not_before</c> and <c>not_after</c> (first valid date and last valid date). The <c>issuer_name</c> must contain at least "CN=" (common name, i.e. the domain name), "O=" (organization, i.e. your company name), "C=" (country, i.e. 2 lettered ISO-3166 code of the country the organization is based in).</para>
            <para>A small example to generate an RSA key and a X509 self-signed certificate.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var crypto = Crypto.new()</para>
            <para># Generate 4096 bits RSA key.</para>
            <para>var key = crypto.generate_rsa(4096)</para>
            <para># Generate self-signed certificate using the given key.</para>
            <para>var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var crypto = new Crypto();</para>
            <para>// Generate 4096 bits RSA key.</para>
            <para>CryptoKey key = crypto.GenerateRsa(4096);</para>
            <para>// Generate self-signed certificate using the given key.</para>
            <para>X509Certificate cert = crypto.GenerateSelfSignedCertificate(key, "CN=mydomain.com,O=My Game Company,C=IT");</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.Sign(Godot.HashingContext.HashType,System.Byte[],Godot.CryptoKey)">
            <summary>
            <para>Sign a given <c>hash</c> of type <c>hash_type</c> with the provided private <c>key</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.Verify(Godot.HashingContext.HashType,System.Byte[],System.Byte[],Godot.CryptoKey)">
            <summary>
            <para>Verify that a given <c>signature</c> for <c>hash</c> of type <c>hash_type</c> against the provided public <c>key</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.Encrypt(Godot.CryptoKey,System.Byte[])">
            <summary>
            <para>Encrypt the given <c>plaintext</c> with the provided public <c>key</c>.</para>
            <para>Note: The maximum size of accepted plaintext is limited by the key size.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.Decrypt(Godot.CryptoKey,System.Byte[])">
            <summary>
            <para>Decrypt the given <c>ciphertext</c> with the provided private <c>key</c>.</para>
            <para>Note: The maximum size of accepted ciphertext is limited by the key size.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.HmacDigest(Godot.HashingContext.HashType,System.Byte[],System.Byte[])">
            <summary>
            <para>Generates an <a href="https://en.wikipedia.org/wiki/HMAC">HMAC</a> digest of <c>msg</c> using <c>key</c>. The <c>hash_type</c> parameter is the hashing algorithm that is used for the inner and outer hashes.</para>
            <para>Currently, only  and  are supported.</para>
            </summary>
        </member>
        <member name="M:Godot.Crypto.ConstantTimeCompare(System.Byte[],System.Byte[])">
            <summary>
            <para>Compares two <see cref="T:byte[]"/>s for equality without leaking timing information in order to prevent timing attacks.</para>
            <para>See <a href="https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy">this blog post</a> for more information.</para>
            </summary>
        </member>
        <member name="T:Godot.CryptoKey">
            <summary>
            <para>The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other <see cref="T:Godot.Resource"/>.</para>
            <para>They can be used to generate a self-signed <see cref="T:Godot.X509Certificate"/> via <see cref="M:Godot.Crypto.GenerateSelfSignedCertificate(Godot.CryptoKey,System.String,System.String,System.String)"/> and as private key in <see cref="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer,Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)"/> along with the appropriate certificate.</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="M:Godot.CryptoKey.Save(System.String,System.Boolean)">
            <summary>
            <para>Saves a key to the given <c>path</c>. If <c>public_only</c> is <c>true</c>, only the public key will be saved.</para>
            <para>Note: <c>path</c> should should be a "*.pub" file if <c>public_only</c> is <c>true</c>, a "*.key" file otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.CryptoKey.Load(System.String,System.Boolean)">
            <summary>
            <para>Loads a key from <c>path</c>. If <c>public_only</c> is <c>true</c>, only the public key will be loaded.</para>
            <para>Note: <c>path</c> should should be a "*.pub" file if <c>public_only</c> is <c>true</c>, a "*.key" file otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.CryptoKey.IsPublicOnly">
            <summary>
            <para>Return <c>true</c> if this CryptoKey only has the public part, and not the private one.</para>
            </summary>
        </member>
        <member name="M:Godot.CryptoKey.SaveToString(System.Boolean)">
            <summary>
            <para>Returns a string containing the key in PEM format. If <c>public_only</c> is <c>true</c>, only the public key will be included.</para>
            </summary>
        </member>
        <member name="M:Godot.CryptoKey.LoadFromString(System.String,System.Boolean)">
            <summary>
            <para>Loads a key from the given <c>string</c>. If <c>public_only</c> is <c>true</c>, only the public key will be loaded.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve">
            <summary>
            <para>A curve that can be saved and re-used for other objects. By default, it ranges between <c>0</c> and <c>1</c> on the Y axis and positions points relative to the <c>0.5</c> Y position.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.Free">
            <summary>
            <para>The tangent on this side of the point is user-defined.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.Linear">
            <summary>
            <para>The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point.</para>
            </summary>
        </member>
        <member name="F:Godot.Curve.TangentMode.ModeCount">
            <summary>
            <para>The total number of available tangent modes.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.MinValue">
            <summary>
            <para>The minimum value the curve can reach.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.MaxValue">
            <summary>
            <para>The maximum value the curve can reach.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve.BakeResolution">
            <summary>
            <para>The number of points to include in the baked (i.e. cached) curve data.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.AddPoint(Godot.Vector2,System.Single,System.Single,Godot.Curve.TangentMode,Godot.Curve.TangentMode)">
            <summary>
            <para>Adds a point to the curve. For each side, if the <c>*_mode</c> is , the <c>*_tangent</c> angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the <c>*_tangent</c> angle if <c>*_mode</c> is set to .</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point at <c>index</c> from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the curve coordinates for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointValue(System.Int32,System.Single)">
            <summary>
            <para>Assigns the vertical position <c>y</c> to the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointOffset(System.Int32,System.Single)">
            <summary>
            <para>Sets the offset from <c>0.5</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.Interpolate(System.Single)">
            <summary>
            <para>Returns the Y value for the point that would exist at the X position <c>offset</c> along the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.InterpolateBaked(System.Single)">
            <summary>
            <para>Returns the Y value for the point that would exist at the X position <c>offset</c> along the curve using the baked cache. Bakes the curve's points if not already baked.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftTangent(System.Int32)">
            <summary>
            <para>Returns the left tangent angle (in degrees) for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightTangent(System.Int32)">
            <summary>
            <para>Returns the right tangent angle (in degrees) for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftMode(System.Int32)">
            <summary>
            <para>Returns the left <see cref="T:Godot.Curve.TangentMode"/> for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightMode(System.Int32)">
            <summary>
            <para>Returns the right <see cref="T:Godot.Curve.TangentMode"/> for the point at <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftTangent(System.Int32,System.Single)">
            <summary>
            <para>Sets the left tangent angle for the point at <c>index</c> to <c>tangent</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightTangent(System.Int32,System.Single)">
            <summary>
            <para>Sets the right tangent angle for the point at <c>index</c> to <c>tangent</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            <para>Sets the left <see cref="T:Godot.Curve.TangentMode"/> for the point at <c>index</c> to <c>mode</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            <para>Sets the right <see cref="T:Godot.Curve.TangentMode"/> for the point at <c>index</c> to <c>mode</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.CleanDupes">
            <summary>
            <para>Removes points that are closer than <c>CMP_EPSILON</c> (0.00001) units to their neighbor on the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve.Bake">
            <summary>
            <para>Recomputes the baked cache of points for the curve.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve.RangeChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.Curve.MaxValue"/> or <see cref="P:Godot.Curve.MinValue"/> is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve2D">
            <summary>
            <para>This class describes a Bézier curve in 2D space. It is mainly used to give a shape to a <see cref="T:Godot.Path2D"/>, but can be manually sampled for other purposes.</para>
            <para>It keeps a cache of precalculated points along the curve, to speed up further calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve2D.BakeInterval">
            <summary>
            <para>The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the <see cref="M:Godot.Curve2D.GetBakedPoints"/> or <see cref="M:Godot.Curve2D.GetBakedLength"/> function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.AddPoint(Godot.Vector2,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2},System.Int32)">
            <summary>
            <para>Adds a point to a curve at <c>position</c>, with control points <c>in</c> and <c>out</c>.</para>
            <para>If <c>at_position</c> is given, the point is inserted before the point number <c>at_position</c>, moving that point (and every point after) after the inserted point. If <c>at_position</c> is not given, or is an illegal value (<c>at_position &lt;0</c> or <c>at_position &gt;= [method get_point_count]</c>), the point will be appended at the end of the point list.</para>
            </summary>
            <param name="in">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="out">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.Curve2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position for the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointIn(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointIn(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading to the vertex <c>idx</c>. The returned position is relative to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointOut(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointOut(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading out of the vertex <c>idx</c>. The returned position is relative to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.RemovePoint(System.Int32)">
            <summary>
            <para>Deletes the point <c>idx</c> from the curve. Sends an error to the console if <c>idx</c> is out of bounds.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the position between the vertex <c>idx</c> and the vertex <c>idx + 1</c>, where <c>t</c> controls if the point is the first vertex (<c>t = 0.0</c>), the last vertex (<c>t = 1.0</c>), or in between. Values of <c>t</c> outside the range (<c>0.0 &gt;= t &lt;=1</c>) give strange, but predictable results.</para>
            <para>If <c>idx</c> is out of bounds it is truncated to the first or last vertex, and <c>t</c> is ignored. If the curve has no points, the function sends an error to the console, and returns <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolatef(System.Single)">
            <summary>
            <para>Returns the position at the vertex <c>fofs</c>. It calls <see cref="M:Godot.Curve2D.Interpolate(System.Int32,System.Single)"/> using the integer part of <c>fofs</c> as <c>idx</c>, and its fractional part as <c>t</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedLength">
            <summary>
            <para>Returns the total length of the curve, based on the cached points. Given enough density (see <see cref="P:Godot.Curve2D.BakeInterval"/>), it should be approximate enough.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            <para>Returns a point within the curve at position <c>offset</c>, where <c>offset</c> is measured as a pixel distance along the curve.</para>
            <para>To do that, it finds the two cached points where the <c>offset</c> lies between, then interpolates the values. This interpolation is cubic if <c>cubic</c> is set to <c>true</c>, or linear if set to <c>false</c>.</para>
            <para>Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedPoints">
            <summary>
            <para>Returns the cache of points as a <see cref="T:Godot.Vector2[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetClosestPoint(Godot.Vector2)">
            <summary>
            <para>Returns the closest point (in curve's local space) to <c>to_point</c>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetClosestOffset(Godot.Vector2)">
            <summary>
            <para>Returns the closest offset to <c>to_point</c>. This offset is meant to be used in <see cref="M:Godot.Curve2D.InterpolateBaked(System.Single,System.Boolean)"/>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Tessellate(System.Int32,System.Single)">
            <summary>
            <para>Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.</para>
            <para>This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.</para>
            <para><c>max_stages</c> controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!</para>
            <para><c>tolerance_degrees</c> controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.</para>
            </summary>
        </member>
        <member name="T:Godot.Curve3D">
            <summary>
            <para>This class describes a Bézier curve in 3D space. It is mainly used to give a shape to a <see cref="T:Godot.Path3D"/>, but can be manually sampled for other purposes.</para>
            <para>It keeps a cache of precalculated points along the curve, to speed up further calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve3D.BakeInterval">
            <summary>
            <para>The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the <see cref="M:Godot.Curve3D.GetBakedPoints"/> or <see cref="M:Godot.Curve3D.GetBakedLength"/> function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.</para>
            </summary>
        </member>
        <member name="P:Godot.Curve3D.UpVectorEnabled">
            <summary>
            <para>If <c>true</c>, the curve will bake up vectors used for orientation. This is used when <see cref="P:Godot.PathFollow3D.RotationMode"/> is set to . Changing it forces the cache to be recomputed.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointCount">
            <summary>
            <para>Returns the number of points describing the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.AddPoint(Godot.Vector3,System.Nullable{Godot.Vector3},System.Nullable{Godot.Vector3},System.Int32)">
            <summary>
            <para>Adds a point to a curve at <c>position</c>, with control points <c>in</c> and <c>out</c>.</para>
            <para>If <c>at_position</c> is given, the point is inserted before the point number <c>at_position</c>, moving that point (and every point after) after the inserted point. If <c>at_position</c> is not given, or is an illegal value (<c>at_position &lt;0</c> or <c>at_position &gt;= [method get_point_count]</c>), the point will be appended at the end of the point list.</para>
            </summary>
            <param name="in">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
            <param name="out">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.Curve3D.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position for the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns the position of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointTilt(System.Int32,System.Single)">
            <summary>
            <para>Sets the tilt angle in radians for the point <c>idx</c>. If the index is out of bounds, the function sends an error to the console.</para>
            <para>The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a <see cref="T:Godot.PathFollow3D"/>, this tilt is an offset over the natural tilt the <see cref="T:Godot.PathFollow3D"/> calculates.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointTilt(System.Int32)">
            <summary>
            <para>Returns the tilt angle in radians for the point <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointIn(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of the control point leading to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointIn(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading to the vertex <c>idx</c>. The returned position is relative to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointOut(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of the control point leading out of the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointOut(System.Int32)">
            <summary>
            <para>Returns the position of the control point leading out of the vertex <c>idx</c>. The returned position is relative to the vertex <c>idx</c>. If the index is out of bounds, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.RemovePoint(System.Int32)">
            <summary>
            <para>Deletes the point <c>idx</c> from the curve. Sends an error to the console if <c>idx</c> is out of bounds.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.ClearPoints">
            <summary>
            <para>Removes all points from the curve.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolate(System.Int32,System.Single)">
            <summary>
            <para>Returns the position between the vertex <c>idx</c> and the vertex <c>idx + 1</c>, where <c>t</c> controls if the point is the first vertex (<c>t = 0.0</c>), the last vertex (<c>t = 1.0</c>), or in between. Values of <c>t</c> outside the range (<c>0.0 &gt;= t &lt;=1</c>) give strange, but predictable results.</para>
            <para>If <c>idx</c> is out of bounds it is truncated to the first or last vertex, and <c>t</c> is ignored. If the curve has no points, the function sends an error to the console, and returns <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolatef(System.Single)">
            <summary>
            <para>Returns the position at the vertex <c>fofs</c>. It calls <see cref="M:Godot.Curve3D.Interpolate(System.Int32,System.Single)"/> using the integer part of <c>fofs</c> as <c>idx</c>, and its fractional part as <c>t</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedLength">
            <summary>
            <para>Returns the total length of the curve, based on the cached points. Given enough density (see <see cref="P:Godot.Curve3D.BakeInterval"/>), it should be approximate enough.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            <para>Returns a point within the curve at position <c>offset</c>, where <c>offset</c> is measured as a distance in 3D units along the curve.</para>
            <para>To do that, it finds the two cached points where the <c>offset</c> lies between, then interpolates the values. This interpolation is cubic if <c>cubic</c> is set to <c>true</c>, or linear if set to <c>false</c>.</para>
            <para>Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.InterpolateBakedUpVector(System.Single,System.Boolean)">
            <summary>
            <para>Returns an up vector within the curve at position <c>offset</c>, where <c>offset</c> is measured as a distance in 3D units along the curve.</para>
            <para>To do that, it finds the two cached up vectors where the <c>offset</c> lies between, then interpolates the values. If <c>apply_tilt</c> is <c>true</c>, an interpolated tilt is applied to the interpolated up vector.</para>
            <para>If the curve has no up vectors, the function sends an error to the console, and returns <c>(0, 1, 0)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedPoints">
            <summary>
            <para>Returns the cache of points as a <see cref="T:Godot.Vector3[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedTilts">
            <summary>
            <para>Returns the cache of tilts as a <see cref="T:float[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedUpVectors">
            <summary>
            <para>Returns the cache of up vectors as a <see cref="T:Godot.Vector3[]"/>.</para>
            <para>If <see cref="P:Godot.Curve3D.UpVectorEnabled"/> is <c>false</c>, the cache will be empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetClosestPoint(Godot.Vector3)">
            <summary>
            <para>Returns the closest point (in curve's local space) to <c>to_point</c>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetClosestOffset(Godot.Vector3)">
            <summary>
            <para>Returns the closest offset to <c>to_point</c>. This offset is meant to be used in <see cref="M:Godot.Curve3D.InterpolateBaked(System.Single,System.Boolean)"/> or <see cref="M:Godot.Curve3D.InterpolateBakedUpVector(System.Single,System.Boolean)"/>.</para>
            <para><c>to_point</c> must be in this curve's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Tessellate(System.Int32,System.Single)">
            <summary>
            <para>Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.</para>
            <para>This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.</para>
            <para><c>max_stages</c> controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!</para>
            <para><c>tolerance_degrees</c> controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.</para>
            </summary>
        </member>
        <member name="T:Godot.CurveTexture">
            <summary>
            <para>Renders a given <see cref="T:Godot.Curve"/> provided to it. Simplifies the task of drawing curves and/or saving them as image files.</para>
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Width">
            <summary>
            <para>The width of the texture.</para>
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Curve">
            <summary>
            <para>The <c>curve</c> rendered onto the texture.</para>
            </summary>
        </member>
        <member name="T:Godot.CylinderMesh">
            <summary>
            <para>Class representing a cylindrical <see cref="T:Godot.PrimitiveMesh"/>. This class can be used to create cones by setting either the <see cref="P:Godot.CylinderMesh.TopRadius"/> or <see cref="P:Godot.CylinderMesh.BottomRadius"/> properties to 0.0.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.TopRadius">
            <summary>
            <para>Top radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.BottomRadius">
            <summary>
            <para>Bottom radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Height">
            <summary>
            <para>Full height of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the cylinder.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Rings">
            <summary>
            <para>Number of edge rings along the height of the cylinder.</para>
            </summary>
        </member>
        <member name="T:Godot.CylinderShape3D">
            <summary>
            <para>Cylinder shape for collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderShape3D.Radius">
            <summary>
            <para>The cylinder's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.CylinderShape3D.Height">
            <summary>
            <para>The cylinder's height.</para>
            </summary>
        </member>
        <member name="T:Godot.DTLSServer">
            <summary>
            <para>This class is used to store the state of a DTLS server. Upon <see cref="M:Godot.DTLSServer.Setup(Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)"/> it converts connected <see cref="T:Godot.PacketPeerUDP"/> to <see cref="T:Godot.PacketPeerDTLS"/> accepting them via <see cref="M:Godot.DTLSServer.TakeConnection(Godot.PacketPeerUDP)"/> as DTLS clients. Under the hood, this class is used to store the DTLS state and cookies of the server. The reason of why the state and cookies are needed is outside of the scope of this documentation.</para>
            <para>Below a small example of how to use it:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># ServerNode.gd</para>
            <para>extends Node</para>
            <para></para>
            <para>var dtls := DTLSServer.new()</para>
            <para>var server := UDPServer.new()</para>
            <para>var peers = []</para>
            <para></para>
            <para>func _ready():</para>
            <para>    server.listen(4242)</para>
            <para>    var key = load("key.key") # Your private key.</para>
            <para>    var cert = load("cert.crt") # Your X509 certificate.</para>
            <para>    dtls.setup(key, cert)</para>
            <para></para>
            <para>func _process(delta):</para>
            <para>    while server.is_connection_available():</para>
            <para>        var peer : PacketPeerUDP = server.take_connection()</para>
            <para>        var dtls_peer : PacketPeerDTLS = dtls.take_connection(peer)</para>
            <para>        if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:</para>
            <para>            continue # It is normal that 50% of the connections fails due to cookie exchange.</para>
            <para>        print("Peer connected!")</para>
            <para>        peers.append(dtls_peer)</para>
            <para></para>
            <para>    for p in peers:</para>
            <para>        p.poll() # Must poll to update the state.</para>
            <para>        if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:</para>
            <para>            while p.get_available_packet_count() &gt; 0:</para>
            <para>                print("Received message from client: %s" % p.get_packet().get_string_from_utf8())</para>
            <para>                p.put_packet("Hello DTLS client".to_utf8())</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para>// ServerNode.cs</para>
            <para>public class ServerNode : Node</para>
            <para>{</para>
            <para>    public DTLSServer Dtls = new DTLSServer();</para>
            <para>    public UDPServer Server = new UDPServer();</para>
            <para>    public Godot.Collections.Array&lt;PacketPeerDTLS&gt; Peers = new Godot.Collections.Array&lt;PacketPeerDTLS&gt;();</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        Server.Listen(4242);</para>
            <para>        var key = GD.Load&lt;CryptoKey&gt;("key.key"); // Your private key.</para>
            <para>        var cert = GD.Load&lt;X509Certificate&gt;("cert.crt"); // Your X509 certificate.</para>
            <para>        Dtls.Setup(key, cert);</para>
            <para>    }</para>
            <para></para>
            <para>    public override void _Process(float delta)</para>
            <para>    {</para>
            <para>        while (Server.IsConnectionAvailable())</para>
            <para>        {</para>
            <para>            PacketPeerUDP peer = Server.TakeConnection();</para>
            <para>            PacketPeerDTLS dtlsPeer = Dtls.TakeConnection(peer);</para>
            <para>            if (dtlsPeer.GetStatus() != PacketPeerDTLS.Status.Handshaking)</para>
            <para>            {</para>
            <para>                continue; // It is normal that 50% of the connections fails due to cookie exchange.</para>
            <para>            }</para>
            <para>            GD.Print("Peer connected!");</para>
            <para>            Peers.Add(dtlsPeer);</para>
            <para>        }</para>
            <para></para>
            <para>        foreach (var p in Peers)</para>
            <para>        {</para>
            <para>            p.Poll(); // Must poll to update the state.</para>
            <para>            if (p.GetStatus() == PacketPeerDTLS.Status.Connected)</para>
            <para>            {</para>
            <para>                while (p.GetAvailablePacketCount() &gt; 0)</para>
            <para>                {</para>
            <para>                    GD.Print("Received Message From Client: " + p.GetPacket().GetStringFromUTF8());</para>
            <para>                    p.PutPacket("Hello Dtls Client".ToUTF8());</para>
            <para>                }</para>
            <para>            }</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># ClientNode.gd</para>
            <para>extends Node</para>
            <para></para>
            <para>var dtls := PacketPeerDTLS.new()</para>
            <para>var udp := PacketPeerUDP.new()</para>
            <para>var connected = false</para>
            <para></para>
            <para>func _ready():</para>
            <para>    udp.connect_to_host("127.0.0.1", 4242)</para>
            <para>    dtls.connect_to_peer(udp, false) # Use true in production for certificate validation!</para>
            <para></para>
            <para>func _process(delta):</para>
            <para>    dtls.poll()</para>
            <para>    if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:</para>
            <para>        if !connected:</para>
            <para>            # Try to contact server</para>
            <para>            dtls.put_packet("The answer is... 42!".to_utf8())</para>
            <para>        while dtls.get_available_packet_count() &gt; 0:</para>
            <para>            print("Connected: %s" % dtls.get_packet().get_string_from_utf8())</para>
            <para>            connected = true</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System.Text;</para>
            <para>// ClientNode.cs</para>
            <para>public class ClientNode : Node</para>
            <para>{</para>
            <para>    public PacketPeerDTLS Dtls = new PacketPeerDTLS();</para>
            <para>    public PacketPeerUDP Udp = new PacketPeerUDP();</para>
            <para>    public bool Connected = false;</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        Udp.ConnectToHost("127.0.0.1", 4242);</para>
            <para>        Dtls.ConnectToPeer(Udp, false); // Use true in production for certificate validation!</para>
            <para>    }</para>
            <para></para>
            <para>    public override void _Process(float delta)</para>
            <para>    {</para>
            <para>        Dtls.Poll();</para>
            <para>        if (Dtls.GetStatus() == PacketPeerDTLS.Status.Connected)</para>
            <para>        {</para>
            <para>            if (!Connected)</para>
            <para>            {</para>
            <para>                // Try to contact server</para>
            <para>                Dtls.PutPacket("The Answer Is..42!".ToUTF8());</para>
            <para>            }</para>
            <para>            while (Dtls.GetAvailablePacketCount() &gt; 0)</para>
            <para>            {</para>
            <para>                GD.Print("Connected: " + Dtls.GetPacket().GetStringFromUTF8());</para>
            <para>                Connected = true;</para>
            <para>            }</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.DTLSServer.Setup(Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)">
            <summary>
            <para>Setup the DTLS server to use the given <c>private_key</c> and provide the given <c>certificate</c> to clients. You can pass the optional <c>chain</c> parameter to provide additional CA chain information along with the certificate.</para>
            </summary>
        </member>
        <member name="M:Godot.DTLSServer.TakeConnection(Godot.PacketPeerUDP)">
            <summary>
            <para>Try to initiate the DTLS handshake with the given <c>udp_peer</c> which must be already connected (see <see cref="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)"/>).</para>
            <para>Note: You must check that the state of the return PacketPeerUDP is , as it is normal that 50% of the new connections will be invalid due to cookie exchange.</para>
            </summary>
        </member>
        <member name="T:Godot.DampedSpringJoint2D">
            <summary>
            <para>Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.</para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Length">
            <summary>
            <para>The spring joint's maximum length. The two attached bodies cannot stretch it past this value.</para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.RestLength">
            <summary>
            <para>When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length.</para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Stiffness">
            <summary>
            <para>The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length.</para>
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Damping">
            <summary>
            <para>The spring joint's damping ratio. A value between <c>0</c> and <c>1</c>. When the two bodies move into different directions the system tries to align them to the spring axis again. A high <c>damping</c> value forces the attached bodies to align faster.</para>
            </summary>
        </member>
        <member name="T:Godot.Decal">
            <summary>
            <para><see cref="T:Godot.Decal"/>s are used to project a texture onto a <see cref="T:Godot.Mesh"/> in the scene. Use Decals to add detail to a scene without affecting the underlying <see cref="T:Godot.Mesh"/>. They are often used to add weathering to building, add dirt or mud to the ground, or add variety to props. Decals can be moved at any time, making them suitable for things like blob shadows or laser sight dots.</para>
            <para>They are made of an <see cref="T:Godot.AABB"/> and a group of <see cref="T:Godot.Texture2D"/>s specifying <see cref="T:Godot.Color"/>, normal, ORM (ambient occlusion, roughness, metallic), and emission. Decals are projected within their <see cref="T:Godot.AABB"/> so altering the orientation of the Decal affects the direction in which they are projected. By default, Decals are projected down (i.e. from positive Y to negative Y).</para>
            <para>The <see cref="T:Godot.Texture2D"/>s associated with the Decal are automatically stored in a texture atlas which is used for drawing the decals so all decals can be drawn at once. Godot uses clustered decals, meaning they are stored in cluster data and drawn when the mesh is drawn, they are not drawn as a postprocessing effect after.</para>
            </summary>
        </member>
        <member name="F:Godot.Decal.DecalTexture.Albedo">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> corresponding to <see cref="P:Godot.Decal.TextureAlbedo"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Decal.DecalTexture.Normal">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> corresponding to <see cref="P:Godot.Decal.TextureNormal"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Decal.DecalTexture.Orm">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> corresponding to <see cref="P:Godot.Decal.TextureOrm"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Decal.DecalTexture.Emission">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> corresponding to <see cref="P:Godot.Decal.TextureEmission"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Decal.DecalTexture.Max">
            <summary>
            <para>Max size of <see cref="T:Godot.Decal.DecalTexture"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.Extents">
            <summary>
            <para>Sets the size of the <see cref="T:Godot.AABB"/> used by the decal. The AABB goes from <c>-extents</c> to <c>extents</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.TextureAlbedo">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> with the base <see cref="T:Godot.Color"/> of the Decal. Either this or the <see cref="P:Godot.Decal.TextureEmission"/> must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.TextureNormal">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> with the per-pixel normal map for the decal. Use this to add extra detail to decals.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.TextureOrm">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> storing ambient occlusion, roughness, and metallic for the decal. Use this to add extra detail to decals.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.TextureEmission">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> with the emission <see cref="T:Godot.Color"/> of the Decal. Either this or the <see cref="P:Godot.Decal.TextureEmission"/> must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.EmissionEnergy">
            <summary>
            <para>Energy multiplier for the emission texture. This will make the decal emit light at a higher intensity.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.Modulate">
            <summary>
            <para>Changes the <see cref="T:Godot.Color"/> of the Decal by multiplying it with this value.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.AlbedoMix">
            <summary>
            <para>Blends the albedo <see cref="T:Godot.Color"/> of the decal with albedo <see cref="T:Godot.Color"/> of the underlying mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.NormalFade">
            <summary>
            <para>Fades the Decal if the angle between the Decal's <see cref="T:Godot.AABB"/> and the target surface becomes too large. A value of <c>0</c> projects the Decal regardless of angle, a value of <c>1</c> limits the Decal to surfaces that are nearly perpendicular.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.UpperFade">
            <summary>
            <para>Sets the curve over which the decal will fade as the surface gets further from the center of the <see cref="T:Godot.AABB"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.LowerFade">
            <summary>
            <para>Sets the curve over which the decal will fade as the surface gets further from the center of the <see cref="T:Godot.AABB"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.DistanceFadeEnabled">
            <summary>
            <para>If <c>true</c>, decals will smoothly fade away when far from the active <see cref="T:Godot.Camera3D"/> starting at <see cref="P:Godot.Decal.DistanceFadeBegin"/>. The Decal will fade out over <see cref="P:Godot.Decal.DistanceFadeLength"/>, after which it will be culled and not sent to the shader at all. Use this to reduce the number of active Decals in a scene and thus improve performance.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.DistanceFadeBegin">
            <summary>
            <para>Distance from the camera at which the Decal begins to fade away.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.DistanceFadeLength">
            <summary>
            <para>Distance over which the Decal fades. The Decal becomes slowly more transparent over this distance and is completely invisible at the end.</para>
            </summary>
        </member>
        <member name="P:Godot.Decal.CullMask">
            <summary>
            <para>Specifies which <see cref="P:Godot.VisualInstance3D.Layers"/> this decal will project on. By default, Decals affect all layers. This is used so you can specify which types of objects receive the Decal and which do not. This is especially useful so you an ensure that dynamic objects don't accidentally receive a Decal intended for the terrain under them.</para>
            </summary>
        </member>
        <member name="M:Godot.Decal.SetTexture(Godot.Decal.DecalTexture,Godot.Texture2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Texture2D"/> associated with the specified <see cref="T:Godot.Decal.DecalTexture"/>. This is a convenience method, in most cases you should access the texture directly.</para>
            <para>For example, instead of <c>$Decal.set_texture(Decal.TEXTURE_ALBEDO, albedo_tex)</c>, use <c>$Decal.texture_albedo = albedo_tex</c>.</para>
            <para>One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>for i in Decal.TEXTURE_MAX:</para>
            <para>    $NewDecal.set_texture(i, $OldDecal.get_texture(i))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>for (int i = 0; i &lt; (int)Decal.DecalTexture.Max; i++)</para>
            <para>{</para>
            <para>    GetNode&lt;Decal&gt;("NewDecal").SetTexture(i, GetNode&lt;Decal&gt;("OldDecal").GetTexture(i));</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Decal.GetTexture(Godot.Decal.DecalTexture)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> associated with the specified <see cref="T:Godot.Decal.DecalTexture"/>. This is a convenience method, in most cases you should access the texture directly.</para>
            <para>For example, instead of <c>albedo_tex = $Decal.get_texture(Decal.TEXTURE_ALBEDO)</c>, use <c>albedo_tex = $Decal.texture_albedo</c>.</para>
            <para>One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>for i in Decal.TEXTURE_MAX:</para>
            <para>    $NewDecal.set_texture(i, $OldDecal.get_texture(i))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>for (int i = 0; i &lt; (int)Decal.DecalTexture.Max; i++)</para>
            <para>{</para>
            <para>    GetNode&lt;Decal&gt;("NewDecal").SetTexture(i, GetNode&lt;Decal&gt;("OldDecal").GetTexture(i));</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight2D.Height">
            <summary>
            <para>The height of the light. Used with 2D normal mapping.</para>
            </summary>
        </member>
        <member name="T:Godot.DirectionalLight3D">
            <summary>
            <para>A directional light is a type of <see cref="T:Godot.Light3D"/> node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight3D transform (origin) is ignored. Only the basis is used to determine light direction.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight3D.ShadowMode.Orthogonal">
            <summary>
            <para>Renders the entire scene's shadow map from an orthogonal point of view. This is the fastest directional shadow mode. May result in blurrier shadows on close objects.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight3D.ShadowMode.Parallel2Splits">
            <summary>
            <para>Splits the view frustum in 2 areas, each with its own shadow map. This shadow mode is a compromise between  and  in terms of performance.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight3D.ShadowMode.Parallel4Splits">
            <summary>
            <para>Splits the view frustum in 4 areas, each with its own shadow map. This is the slowest directional shadow mode.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight3D.ShadowDepthRange.Stable">
            <summary>
            <para>Keeps the shadow stable when the camera moves, at the cost of lower effective shadow resolution.</para>
            </summary>
        </member>
        <member name="F:Godot.DirectionalLight3D.ShadowDepthRange.Optimized">
            <summary>
            <para>Tries to achieve maximum shadow resolution. May result in saw effect on shadow edges. This mode typically works best in games where the camera will often move at high speeds, such as most racing games.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowMode">
            <summary>
            <para>The light's shadow rendering algorithm. See <see cref="T:Godot.DirectionalLight3D.ShadowMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowSplit1">
            <summary>
            <para>The distance from camera to shadow split 1. Relative to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMode"/> is <c>SHADOW_PARALLEL_2_SPLITS</c> or <c>SHADOW_PARALLEL_4_SPLITS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowSplit2">
            <summary>
            <para>The distance from shadow split 1 to split 2. Relative to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMode"/> is <c>SHADOW_PARALLEL_2_SPLITS</c> or <c>SHADOW_PARALLEL_4_SPLITS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowSplit3">
            <summary>
            <para>The distance from shadow split 2 to split 3. Relative to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/>. Only used when <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMode"/> is <c>SHADOW_PARALLEL_4_SPLITS</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowFadeStart">
            <summary>
            <para>Proportion of <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/> at which point the shadow starts to fade. At <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/> the shadow will disappear.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowBlendSplits">
            <summary>
            <para>If <c>true</c>, shadow detail is sacrificed in exchange for smoother transitions between splits.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowDepthRange">
            <summary>
            <para>Optimizes shadow rendering for detail versus movement. See <see cref="T:Godot.DirectionalLight3D.ShadowDepthRange"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance">
            <summary>
            <para>The maximum distance for shadow splits.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.DirectionalShadowPancakeSize">
            <summary>
            <para>Sets the size of the directional shadow pancake. The pancake offsets the start of the shadow's camera frustum to provide a higher effective depth resolution for the shadow. However, a high pancake size can cause artifacts in the shadows of large objects that are close to the edge of the frustum. Reducing the pancake size can help. Setting the size to <c>0</c> turns off the pancaking effect.</para>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight3D.UseInSkyOnly">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.DirectionalLight3D"/> will not be used for anything except sky shaders. Use this for lights that impact your sky shader that you may want to hide from affecting the rest of the scene. For example, you may want to enable this when the sun in your sky shader falls below the horizon.</para>
            </summary>
        </member>
        <member name="F:Godot.DisplayServer.WindowMode.Fullscreen">
            <summary>
            <para>Fullscreen window mode. Note that this is not exclusive fullscreen. On Windows and Linux, a borderless window is used to emulate fullscreen. On macOS, a new desktop is used to display the running project.</para>
            <para>Regardless of the platform, enabling fullscreen will change the window size to match the monitor's size. Therefore, make sure your project supports <a href="https://docs.godotengine.org/en/latest/tutorials/rendering/multiple_resolutions.html">multiple resolutions</a> when enabling fullscreen mode.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.ScreenGetDpi(System.Int32)">
            <summary>
            <para>Returns the dots per inch density of the specified screen. If <c>screen</c> is [/code]SCREEN_OF_MAIN_WINDOW[/code] (the default value), a screen with the main window will be used.</para>
            <para>Note: On macOS, returned value is inaccurate if fractional display scaling mode is used.</para>
            <para>Note: On Android devices, the actual screen densities are grouped into six generalized densities:</para>
            <para><code>
               ldpi - 120 dpi
               mdpi - 160 dpi
               hdpi - 240 dpi
              xhdpi - 320 dpi
             xxhdpi - 480 dpi
            xxxhdpi - 640 dpi
            </code></para>
            <para>Note: This method is implemented on Android, Linux, macOS and Windows. Returns <c>72</c> on unsupported platforms.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.ScreenGetScale(System.Int32)">
            <summary>
            <para>Return the scale factor of the specified screen by index.</para>
            <para>Note: On macOS returned value is <c>2.0</c> for hiDPI (Retina) screen, and <c>1.0</c> for all other cases.</para>
            <para>Note: This method is implemented on macOS.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.ScreenGetMaxScale">
            <summary>
            <para>Return the greatest scale factor of all screens.</para>
            <para>Note: On macOS returned value is <c>2.0</c> if there is at least one hiDPI (Retina) screen in the system, and <c>1.0</c> in all other cases.</para>
            <para>Note: This method is implemented on macOS.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.CreateSubWindow(Godot.DisplayServer.WindowMode,System.UInt32,System.Nullable{Godot.Rect2i})">
            <param name="rect">If the parameter is null, then the default value is new Rect2i(0, 0, 0, 0)</param>
        </member>
        <member name="M:Godot.DisplayServer.WindowSetMousePassthrough(Godot.Vector2[],System.Int32)">
            <summary>
            <para>Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through.</para>
            <para>Passing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Set region, using Path2D node.</para>
            <para>DisplayServer.window_set_mouse_passthrough($Path2D.curve.get_baked_points())</para>
            <para></para>
            <para># Set region, using Polygon2D node.</para>
            <para>DisplayServer.window_set_mouse_passthrough($Polygon2D.polygon)</para>
            <para></para>
            <para># Reset region to default.</para>
            <para>DisplayServer.window_set_mouse_passthrough([])</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Set region, using Path2D node.</para>
            <para>DisplayServer.WindowSetMousePassthrough(GetNode&lt;Path2D&gt;("Path2D").Curve.GetBakedPoints());</para>
            <para></para>
            <para>// Set region, using Polygon2D node.</para>
            <para>DisplayServer.WindowSetMousePassthrough(GetNode&lt;Polygon2D&gt;("Polygon2D").Polygon);</para>
            <para></para>
            <para>// Reset region to default.</para>
            <para>DisplayServer.WindowSetMousePassthrough(new Vector2[] {});</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: On Windows, the portion of a window that lies outside the region is not drawn, while on Linux and macOS it is.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.VirtualKeyboardShow(System.String,System.Nullable{Godot.Rect2},System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Shows the virtual keyboard if the platform has one.</para>
            <para><c>existing_text</c> parameter is useful for implementing your own <see cref="T:Godot.LineEdit"/> or <see cref="T:Godot.TextEdit"/>, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).</para>
            <para><c>position</c> parameter is the screen space <see cref="T:Godot.Rect2"/> of the edited text.</para>
            <para><c>multiline</c> parameter needs to be set to <c>true</c> to be able to enter multiple lines of text, as in <see cref="T:Godot.TextEdit"/>.</para>
            <para><c>max_length</c> limits the number of characters that can be entered if different from <c>-1</c>.</para>
            <para><c>cursor_start</c> can optionally define the current text cursor position if <c>cursor_end</c> is not set.</para>
            <para><c>cursor_start</c> and <c>cursor_end</c> can optionally define the current text selection.</para>
            <para>Note: This method is implemented on Android, iOS and UWP.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
        </member>
        <member name="M:Godot.DisplayServer.VirtualKeyboardHide">
            <summary>
            <para>Hides the virtual keyboard if it is shown, does nothing otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.VirtualKeyboardGetHeight">
            <summary>
            <para>Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.CursorSetCustomImage(Godot.Resource,Godot.DisplayServer.CursorShape,System.Nullable{Godot.Vector2})">
            <param name="hotspot">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.DisplayServer.KeyboardGetLayoutCount">
            <summary>
            <para>Returns the number of keyboard layouts.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.KeyboardGetCurrentLayout">
            <summary>
            <para>Returns active keyboard layout index.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.KeyboardSetCurrentLayout(System.Int32)">
            <summary>
            <para>Sets active keyboard layout.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.KeyboardGetLayoutLanguage(System.Int32)">
            <summary>
            <para>Returns the ISO-639/BCP-47 language code of the keyboard layout at position <c>index</c>.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.DisplayServer.KeyboardGetLayoutName(System.Int32)">
            <summary>
            <para>Returns the localized name of the keyboard layout at position <c>index</c>.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="T:Godot.EncodedObjectAsID">
            <summary>
            <para>Utility class which holds a reference to the internal identifier of an <see cref="T:Godot.Object"/> instance, as given by <see cref="M:Godot.Object.GetInstanceId"/>. This ID can then be used to retrieve the object instance with <c>@GDScript.instance_from_id</c>.</para>
            <para>This class is used internally by the editor inspector and script debugger, but can also be used in plugins to pass and display objects as their IDs.</para>
            </summary>
        </member>
        <member name="P:Godot.EncodedObjectAsID.ObjectId">
            <summary>
            <para>The <see cref="T:Godot.Object"/> identifier stored in this <see cref="T:Godot.EncodedObjectAsID"/> instance. The object instance can be retrieved with <c>@GDScript.instance_from_id</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Environment">
            <summary>
            <para>Resource for environment nodes (like <see cref="T:Godot.WorldEnvironment"/>) that define multiple environment operations (such as background <see cref="T:Godot.Sky"/> or <see cref="T:Godot.Color"/>, ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:</para>
            <para>- Depth of Field Blur</para>
            <para>- Glow</para>
            <para>- Tonemap (Auto Exposure)</para>
            <para>- Adjustments</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Additive">
            <summary>
            <para>Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Screen">
            <summary>
            <para>Screen glow blending mode. Increases brightness, used frequently with bloom.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Softlight">
            <summary>
            <para>Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom).</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Replace">
            <summary>
            <para>Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.GlowBlendModeEnum.Mix">
            <summary>
            <para>Mixes the glow with the underlying color to avoid increasing brightness as much while still maintaining a glow effect.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Linear">
            <summary>
            <para>Linear tonemapper operator. Reads the linear data and passes it on unmodified.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Reinhardt">
            <summary>
            <para>Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: <c>color = color / (1 + color)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Filmic">
            <summary>
            <para>Filmic tonemapper operator.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ToneMapper.Aces">
            <summary>
            <para>Academy Color Encoding System tonemapper operator.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ReflectionSource.Bg">
            <summary>
            <para>Use the background for reflections.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ReflectionSource.Disabled">
            <summary>
            <para>Disable reflections.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.ReflectionSource.Sky">
            <summary>
            <para>Use the <see cref="T:Godot.Sky"/> for reflections regardless of what the background is.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.ClearColor">
            <summary>
            <para>Clears the background using the clear color defined in .</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Color">
            <summary>
            <para>Clears the background using a custom clear color.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Sky">
            <summary>
            <para>Displays a user-defined sky in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Canvas">
            <summary>
            <para>Displays a <see cref="T:Godot.CanvasLayer"/> in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Keep">
            <summary>
            <para>Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.CameraFeed">
            <summary>
            <para>Displays a camera feed in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.BGMode.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Environment.BGMode"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.AmbientSource.Bg">
            <summary>
            <para>Gather ambient light from whichever source is specified as the background.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.AmbientSource.Disabled">
            <summary>
            <para>Disable ambient light.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.AmbientSource.Color">
            <summary>
            <para>Specify a specific <see cref="T:Godot.Color"/> for ambient light.</para>
            </summary>
        </member>
        <member name="F:Godot.Environment.AmbientSource.Sky">
            <summary>
            <para>Gather ambient light from the <see cref="T:Godot.Sky"/> regardless of what the background is.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundMode">
            <summary>
            <para>The background mode. See <see cref="T:Godot.Environment.BGMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundColor">
            <summary>
            <para>The <see cref="T:Godot.Color"/> displayed for clear areas of the scene. Only effective when using the  background mode.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundEnergy">
            <summary>
            <para>The power of the light emitted by the background.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundCanvasMaxLayer">
            <summary>
            <para>The maximum layer ID to display. Only effective when using the  background mode.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundCameraFeedId">
            <summary>
            <para>The ID of the camera feed to show in the background.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.Sky">
            <summary>
            <para>The <see cref="T:Godot.Sky"/> resource used for this <see cref="T:Godot.Environment"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightColor">
            <summary>
            <para>The ambient light's <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightSkyContribution">
            <summary>
            <para>Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightEnergy">
            <summary>
            <para>The ambient light's energy. The higher the value, the stronger the light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapMode">
            <summary>
            <para>The tonemapping mode to use. Tonemapping is the process that "converts" HDR values to be suitable for rendering on a LDR display. (Godot doesn't support rendering on HDR displays yet.)</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapExposure">
            <summary>
            <para>The default exposure used for tonemapping.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapWhite">
            <summary>
            <para>The white reference value for tonemapping. Only effective if the <see cref="P:Godot.Environment.TonemapMode"/> isn't set to .</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureEnabled">
            <summary>
            <para>If <c>true</c>, enables the tonemapping auto exposure mode of the scene renderer. If <c>true</c>, the renderer will automatically determine the exposure setting to adapt to the scene's illumination and the observed light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureScale">
            <summary>
            <para>The scale of the auto exposure effect. Affects the intensity of auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMinLuma">
            <summary>
            <para>The minimum luminance value for the auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMaxLuma">
            <summary>
            <para>The maximum luminance value for the auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureSpeed">
            <summary>
            <para>The speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsEnabled">
            <summary>
            <para>If <c>true</c>, screen-space reflections are enabled. Screen-space reflections are more accurate than reflections from <see cref="T:Godot.GIProbe"/>s or <see cref="T:Godot.ReflectionProbe"/>s, but are slower and can't reflect surfaces occluded by others.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsMaxSteps">
            <summary>
            <para>The maximum number of steps for screen-space reflections. Higher values are slower.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeIn">
            <summary>
            <para>The fade-in distance for screen-space reflections. Affects the area from the reflected material to the screen-space reflection).</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeOut">
            <summary>
            <para>The fade-out distance for screen-space reflections. Affects the area from the screen-space reflection to the "global" reflection.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsDepthTolerance">
            <summary>
            <para>The depth tolerance for screen-space reflections.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoEnabled">
            <summary>
            <para>If <c>true</c>, the screen-space ambient occlusion effect is enabled. This darkens objects' corners and cavities to simulate ambient light not reaching the entire object as in real life. This works well for small, dynamic objects, but baked lighting or ambient occlusion textures will do a better job at displaying ambient occlusion on large static objects. Godot uses a form of SSAO called Adaptive Screen Space Ambient Occlusion which is itself a form of Horizon Based Ambient Occlusion.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoRadius">
            <summary>
            <para>The distance at which objects can occlude each other when calculating screen-space ambient occlusion. Higher values will result in occlusion over a greater distance at the cost of performance and quality.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoIntensity">
            <summary>
            <para>The primary screen-space ambient occlusion intensity. Acts as a multiplier for the screen-space ambient occlusion effect. A higher value results in darker occlusion.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoPower">
            <summary>
            <para>The distribution of occlusion. A higher value results in darker occlusion, similar to <see cref="P:Godot.Environment.SsaoIntensity"/>, but with a sharper falloff.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoDetail">
            <summary>
            <para>Sets the strength of the additional level of detail for the screen-space ambient occlusion effect. A high value makes the detail pass more prominent, but it may contribute to aliasing in your final image.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoHorizon">
            <summary>
            <para>The threshold for considering whether a given point on a surface is occluded or not represented as an angle from the horizon mapped into the <c>0.0-1.0</c> range. A value of <c>1.0</c> results in no occlusion.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoSharpness">
            <summary>
            <para>Sharpness refers to the amount that the screen-space ambient occlusion effect is allowed to blur over the edges of objects. Setting too high will result in aliasing around the edges of objects. Setting too low will make object edges appear blurry.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoLightAffect">
            <summary>
            <para>The screen-space ambient occlusion intensity in direct light. In real life, ambient occlusion only applies to indirect light, which means its effects can't be seen in direct light. Values higher than <c>0</c> will make the SSAO effect visible in direct light.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoAoChannelAffect">
            <summary>
            <para>The screen-space ambient occlusion intensity on materials that have an AO texture defined. Values higher than <c>0</c> will make the SSAO effect visible in areas darkened by AO textures.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowEnabled">
            <summary>
            <para>If <c>true</c>, the glow effect is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowNormalized">
            <summary>
            <para>If <c>true</c>, glow levels will be normalized so that summed together their intensities equal <c>1.0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowIntensity">
            <summary>
            <para>The overall brightness multiplier of the glow effect. When using the GLES2 renderer, this should be increased to 1.5 to compensate for the lack of HDR rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowStrength">
            <summary>
            <para>The strength of the glow effect. This applies as the glow is blurred across the screen and increases the distance and intensity of the blur. When using the GLES2 renderer, this should be increased to 1.3 to compensate for the lack of HDR rendering.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBloom">
            <summary>
            <para>The bloom's intensity. If set to a value higher than <c>0</c>, this will make glow visible in areas darker than the <see cref="P:Godot.Environment.GlowHdrThreshold"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBlendMode">
            <summary>
            <para>The glow blending mode.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrThreshold">
            <summary>
            <para>The lower threshold of the HDR glow. When using the GLES2 renderer (which doesn't support HDR), this needs to be below <c>1.0</c> for glow to be visible. A value of <c>0.9</c> works well in this case.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrScale">
            <summary>
            <para>The bleed scale of the HDR glow.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrLuminanceCap">
            <summary>
            <para>The higher threshold of the HDR glow. Areas brighter than this threshold will be clamped for the purposes of the glow effect.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogEnabled">
            <summary>
            <para>If <c>true</c>, fog effects are enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.FogAerialPerspective">
            <summary>
            <para>Blend factor between the fog's color and the color of the background <see cref="T:Godot.Sky"/>. Must have <see cref="P:Godot.Environment.BackgroundMode"/> set to .</para>
            <para>This is useful to simulate <a href="https://en.wikipedia.org/wiki/Aerial_perspective">aerial perspective</a> in large scenes with low density fog. However, it is not very useful for high-density fog, as the sky will shine through. When set to <c>1.0</c>, the fog color comes completely from the <see cref="T:Godot.Sky"/>. If set to <c>0.0</c>, aerial perspective is disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentEnabled">
            <summary>
            <para>If <c>true</c>, enables the <c>adjustment_*</c> properties provided by this resource. If <c>false</c>, modifications to the <c>adjustment_*</c> properties will have no effect on the rendered scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentBrightness">
            <summary>
            <para>The global brightness value of the rendered scene. Effective only if <c>adjustment_enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentContrast">
            <summary>
            <para>The global contrast value of the rendered scene (default value is 1). Effective only if <c>adjustment_enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentSaturation">
            <summary>
            <para>The global color saturation value of the rendered scene (default value is 1). Effective only if <c>adjustment_enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentColorCorrection">
            <summary>
            <para>The <see cref="T:Godot.Texture2D"/> or <see cref="T:Godot.Texture3D"/> lookup table (LUT) to use for the built-in post-process color grading. Can use a <see cref="T:Godot.GradientTexture"/> for a 1-dimensional LUT, or a <see cref="T:Godot.Texture3D"/> for a more complex LUT. Effective only if <c>adjustment_enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Environment.SetGlowLevel(System.Int32,System.Single)">
            <summary>
            <para>Sets the intensity of the glow level <c>idx</c>. A value above <c>0.0</c> enables the level. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Environment.GetGlowLevel(System.Int32)">
            <summary>
            <para>Returns the intensity of the glow level <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Expression">
            <summary>
            <para>An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.</para>
            <para>An example expression text using the built-in math functions could be <c>sqrt(pow(3, 2) + pow(4, 2))</c>.</para>
            <para>In the following example we use a <see cref="T:Godot.LineEdit"/> node to write our expression and show the result.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var expression = Expression.new()</para>
            <para></para>
            <para>func _ready():</para>
            <para>    $LineEdit.connect("text_entered", self, "_on_text_entered")</para>
            <para></para>
            <para>func _on_text_entered(command):</para>
            <para>    var error = expression.parse(command)</para>
            <para>    if error != OK:</para>
            <para>        print(expression.get_error_text())</para>
            <para>        return</para>
            <para>    var result = expression.execute()</para>
            <para>    if not expression.has_execute_failed():</para>
            <para>        $LineEdit.text = str(result)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public Expression expression = new Expression();</para>
            <para></para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    GetNode("LineEdit").Connect("text_entered", this, nameof(OnTextEntered));</para>
            <para>}</para>
            <para></para>
            <para>private void OnTextEntered(string command)</para>
            <para>{</para>
            <para>    Error error = expression.Parse(command);</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.Print(expression.GetErrorText());</para>
            <para>        return;</para>
            <para>    }</para>
            <para>    object result = expression.Execute();</para>
            <para>    if (!expression.HasExecuteFailed())</para>
            <para>    {</para>
            <para>        GetNode&lt;LineEdit&gt;("LineEdit").Text = result.ToString();</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Expression.Parse(System.String,System.String[])">
            <summary>
            <para>Parses the expression and returns an <see cref="T:Godot.Error"/> code.</para>
            <para>You can optionally specify names of variables that may appear in the expression with <c>input_names</c>, so that you can bind them when it gets executed.</para>
            </summary>
            <param name="inputNames">If the parameter is null, then the default value is new string[] {}</param>
        </member>
        <member name="M:Godot.Expression.Execute(Godot.Collections.Array,Godot.Object,System.Boolean)">
            <summary>
            <para>Executes the expression that was previously parsed by <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/> and returns the result. Before you use the returned object, you should check if the method failed by calling <see cref="M:Godot.Expression.HasExecuteFailed"/>.</para>
            <para>If you defined input variables in <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/>, you can specify their values in the inputs array, in the same order.</para>
            </summary>
            <param name="inputs">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Expression.HasExecuteFailed">
            <summary>
            <para>Returns <c>true</c> if <see cref="M:Godot.Expression.Execute(Godot.Collections.Array,Godot.Object,System.Boolean)"/> has failed.</para>
            </summary>
        </member>
        <member name="M:Godot.Expression.GetErrorText">
            <summary>
            <para>Returns the error text if <see cref="M:Godot.Expression.Parse(System.String,System.String[])"/> has failed.</para>
            </summary>
        </member>
        <member name="T:Godot.FileDialog">
            <summary>
            <para>FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. The FileDialog automatically sets its window title according to the <see cref="P:Godot.FileDialog.FileMode"/>. If you want to use a custom title, disable this by setting <see cref="P:Godot.FileDialog.ModeOverridesTitle"/> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.FileModeEnum.OpenFile">
            <summary>
            <para>The dialog allows selecting one, and only one file.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.FileModeEnum.OpenFiles">
            <summary>
            <para>The dialog allows selecting multiple files.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.FileModeEnum.OpenDir">
            <summary>
            <para>The dialog only allows selecting a directory, disallowing the selection of any file.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.FileModeEnum.OpenAny">
            <summary>
            <para>The dialog allows selecting one file or directory.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.FileModeEnum.SaveFile">
            <summary>
            <para>The dialog will warn when a file exists.</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Resources">
            <summary>
            <para>The dialog only allows accessing files under the <see cref="T:Godot.Resource"/> path (<c>res://</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Userdata">
            <summary>
            <para>The dialog only allows accessing files under user data path (<c>user://</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.FileDialog.AccessEnum.Filesystem">
            <summary>
            <para>The dialog allows accessing files on the whole file system.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ModeOverridesTitle">
            <summary>
            <para>If <c>true</c>, changing the <c>Mode</c> property will set the window title accordingly (e.g. setting mode to  will change the window title to "Open a File").</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.FileMode">
            <summary>
            <para>The dialog's open or save mode, which affects the selection behavior. See <see cref="T:Godot.FileDialog.FileModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Access">
            <summary>
            <para>The file system access scope. See enum <c>Access</c> constants.</para>
            <para>Warning: Currently, in sandboxed environments such as HTML5 builds or sandboxed macOS apps, FileDialog cannot access the host file system. See <a href="https://github.com/godotengine/godot-proposals/issues/1123">godot-proposals#1123</a>.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Filters">
            <summary>
            <para>The available file type filters. For example, this shows only <c>.png</c> and <c>.gd</c> files: <c>set_filters(PackedStringArray(["*.png ; PNG Images","*.gd ; GDScript Files"]))</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ShowHiddenFiles">
            <summary>
            <para>If <c>true</c>, the dialog will show hidden files.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentDir">
            <summary>
            <para>The current working directory of the file dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentFile">
            <summary>
            <para>The currently selected file of the file dialog.</para>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentPath">
            <summary>
            <para>The currently selected file path of the file dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.ClearFilters">
            <summary>
            <para>Clear all the added filters in the dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.AddFilter(System.String)">
            <summary>
            <para>Adds <c>filter</c> as a custom filter; <c>filter</c> should be of the form <c>"filename.extension ; Description"</c>. For example, <c>"*.png ; PNG Images"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.GetVbox">
            <summary>
            <para>Returns the vertical box container of the dialog, custom controls can be added to it.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.GetLineEdit">
            <summary>
            <para>Returns the LineEdit for the selected file.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.DeselectAll">
            <summary>
            <para>Clear all currently selected items in the dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.Invalidate">
            <summary>
            <para>Invalidate and update the current dialog content list.</para>
            </summary>
        </member>
        <member name="T:Godot.FileDialog.FilesSelectedHandler">
            <summary>
            <para>Emitted when the user selects multiple files.</para>
            </summary>
        </member>
        <member name="T:Godot.FileDialog.DirSelectedHandler">
            <summary>
            <para>Emitted when the user selects a directory.</para>
            </summary>
        </member>
        <member name="T:Godot.FileDialog.FileSelectedHandler">
            <summary>
            <para>Emitted when the user selects a file by double-clicking it or pressing the OK button.</para>
            </summary>
        </member>
        <member name="T:Godot.Font">
            <summary>
            <para>Font contains a set of glyphs to represent Unicode characters, as well as the ability to draw it with variable width, ascent, descent and kerning.</para>
            <para>Note: A character is a symbol that represents an item (letter, digit etc.) in an abstract way.</para>
            <para>Note: A glyph is a bitmap or shape used to draw a one or more characters in a context-dependent manner. Glyph indices are bound to the specific font data source.</para>
            <para>Note: If a non of the font data sources contain glyphs for a character used in a string, the character in question will be replaced with a box displaying its hexadecimal code.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var font = Font.new()</para>
            <para>font.add_data(load("res://BarlowCondensed-Bold.ttf"))</para>
            <para>$"Label".set("custom_fonts/font", font)</para>
            <para>$"Label".set("custom_fonts/font_size", 64)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var font = new Font();</para>
            <para>font.AddData(ResourceLoader.Load&lt;FontData&gt;("res://BarlowCondensed-Bold.ttf"));</para>
            <para>GetNode("Label").Set("custom_fonts/font", font);</para>
            <para>GetNode("Label").Set("custom_font_sizes/font_size", 64);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>To control font substitution priority use <see cref="T:Godot.FontData"/> language and script support.</para>
            <para>Use language overrides to use same <see cref="T:Godot.Font"/> stack for multiple languages:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Use Naskh font for Persian and Nastaʼlīq font for Urdu text.</para>
            <para>var font_data_fa = load("res://NotoNaskhArabicUI_Regular.ttf");</para>
            <para>font_data_fa.set_language_support_override("fa", true);</para>
            <para>font_data_fa.set_language_support_override("ur", false);</para>
            <para></para>
            <para>var font_data_ur = load("res://NotoNastaliqUrdu_Regular.ttf");</para>
            <para>font_data_ur.set_language_support_override("fa", false);</para>
            <para>font_data_ur.set_language_support_override("ur", true);</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Use Naskh font for Persian and Nastaʼlīq font for Urdu text.</para>
            <para>var fontDataFA = ResourceLoader.Load&lt;FontData&gt;("res://NotoNaskhArabicUI_Regular.ttf");</para>
            <para>fontDataFA.SetLanguageSupportOverride("fa", true);</para>
            <para>fontDataFA.SetLanguageSupportOverride("ur", false);</para>
            <para></para>
            <para>var fontDataUR = ResourceLoader.Load&lt;FontData&gt;("res://NotoNastaliqUrdu_Regular.ttf");</para>
            <para>fontDataUR.SetLanguageSupportOverride("fa", false);</para>
            <para>fontDataUR.SetLanguageSupportOverride("ur", true);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Use script overrides to specify supported scripts for bitmap font or for less common scripts not directly supported by TrueType format:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Use specified font for Egyptian hieroglyphs.</para>
            <para>var font_data = load("res://unifont.ttf");</para>
            <para>font_data.set_script_support_override("Egyp", true);</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Use specified font for Egyptian hieroglyphs.</para>
            <para>var fontData = ResourceLoader.Load&lt;FontData&gt;("res://unifont.ttf");</para>
            <para>fontData.SetScriptSupportOverride("Egyp", true);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="F:Godot.Font.SpacingType.Top">
            <summary>
            <para>Spacing at the top of the line.</para>
            </summary>
        </member>
        <member name="F:Godot.Font.SpacingType.Bottom">
            <summary>
            <para>Spacing at the bottom of the line.</para>
            </summary>
        </member>
        <member name="P:Godot.Font.ExtraSpacingTop">
            <summary>
            <para>Extra character spacing in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.Font.ExtraSpacingBottom">
            <summary>
            <para>Extra spacing at the bottom in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.AddData(Godot.FontData)">
            <summary>
            <para>Add font data source to the set.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.SetData(System.Int32,Godot.FontData)">
            <summary>
            <para>Sets the font data source at index <c>idx</c>. If the index does not exist, nothing happens.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetDataCount">
            <summary>
            <para>Returns the number of font data sources.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetData(System.Int32)">
            <summary>
            <para>Returns the font data source at index <c>idx</c>. If the index does not exist, returns <c>null</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.RemoveData(System.Int32)">
            <summary>
            <para>Removes the font data source at index <c>idx</c>. If the index does not exist, nothing happens.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetHeight(System.Int32)">
            <summary>
            <para>Returns the total average font height (ascent plus descent) in pixels.</para>
            <para>Note: Real height of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the height of empty line).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetAscent(System.Int32)">
            <summary>
            <para>Returns the average font ascent (number of pixels above the baseline).</para>
            <para>Note: Real ascent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the ascent of empty line).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetDescent(System.Int32)">
            <summary>
            <para>Returns the average font descent (number of pixels below the baseline).</para>
            <para>Note: Real descent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the descent of empty line).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetUnderlinePosition(System.Int32)">
            <summary>
            <para>Return average pixel offset of the underline below the baseline.</para>
            <para>Note: Real underline position of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetUnderlineThickness(System.Int32)">
            <summary>
            <para>Return average thickness of the underline.</para>
            <para>Note: Real underline thickness of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetSpacing(System.Int32)">
            <summary>
            <para>Returns the spacing for the given <c>type</c> (see <see cref="T:Godot.Font.SpacingType"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.SetSpacing(System.Int32,System.Int32)">
            <summary>
            <para>Sets the spacing for <c>type</c> (see <see cref="T:Godot.Font.SpacingType"/>) to <c>value</c> in pixels (not relative to the font size).</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetStringSize(System.String,System.Int32)">
            <summary>
            <para>Returns the size size of a bounding box of a string, taking kerning and advance into account.</para>
            <para>See also <see cref="M:Godot.Font.DrawString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetMultilineStringSize(System.String,System.Single,System.Int32,System.Byte)">
            <summary>
            <para>Returns the size of a bounding box of a string broken into the lines, taking kerning and advance into account.</para>
            <para>See also <see cref="M:Godot.Font.DrawMultilineString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.DrawString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)">
            <summary>
            <para>Draw <c>text</c> into a canvas item using the font, at a given position, with <c>modulate</c> color, optionally clipping the width and aligning horizontally. <c>position</c> specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis.</para>
            <para>See also <see cref="M:Godot.CanvasItem.DrawString(Godot.Font,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Font.DrawMultilineString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)">
            <summary>
            <para>Breaks <c>text</c> to the lines using rules specified by <c>flags</c> and draws it into a canvas item using the font, at a given position, with <c>modulate</c> color, optionally clipping the width and aligning horizontally. <c>position</c> specifies the baseline of the first line, not the top. To draw from the top, ascent must be added to the Y axis.</para>
            <para>See also <see cref="M:Godot.CanvasItem.DrawMultilineString(Godot.Font,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Font.HasChar(System.Int32)">
            <summary>
            <para>Return <c>true</c> if a Unicode <c>char</c> is available in the font.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetSupportedChars">
            <summary>
            <para>Returns a string containing all the characters available in the font.</para>
            <para>If a given character is included in more than one font data source, it appears only once in the returned string.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.GetCharSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns the size of a character, optionally taking kerning into account if the next character is provided.</para>
            <para>Note: Do not use this function to calculate width of the string character by character, use <see cref="M:Godot.Font.GetStringSize(System.String,System.Int32)"/> or <see cref="T:Godot.TextLine"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Font.DrawChar(Godot.RID,Godot.Vector2,System.Int32,System.Int32,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw a single Unicode character <c>char</c> into a canvas item using the font, at a given position, with <c>modulate</c> color, and optionally kerning if <c>next</c> is passed. <c>position</c> specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis.</para>
            <para>Note: Do not use this function to draw strings character by character, use <see cref="M:Godot.Font.DrawString(Godot.RID,Godot.Vector2,System.String,Godot.HAlign,System.Single,System.Int32,System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color},System.Byte)"/> or <see cref="T:Godot.TextLine"/> instead.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineModulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Font.UpdateChanges">
            <summary>
            <para>After editing a font (changing data sources, etc.). Call this function to propagate changes to controls that might use it.</para>
            </summary>
        </member>
        <member name="T:Godot.FontData">
            <summary>
            <para>Built-in text servers support font data sources of the following formats:</para>
            <para>- Bitmap fonts in the <a href="https://www.angelcode.com/products/bmfont/">BMFont</a> format. Handles <c>.fnt, *.font</c> fonts containing texture atlases. Non-scalable. Supports distance fields. Complex text shaping support is limited.</para>
            <para>- Dynamic fonts using the <a href="https://www.freetype.org/">FreeType</a> and <a href="https://github.com/silnrsi/graphite/">Graphite</a> library for rasterization. Handles <c>*.ttf, *.otf</c> fonts. Scalable. Doesn't support distance fields. Supports complex text shaping and OpenType features.</para>
            </summary>
        </member>
        <member name="P:Godot.FontData.DataPath">
            <summary>
            <para>The path to the font data file. If font data was loaded from memory location is set to <c>"(Memory)"</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.FontData.Antialiased">
            <summary>
            <para>If <c>true</c>, the font is rendered with anti-aliasing.</para>
            </summary>
        </member>
        <member name="P:Godot.FontData.ForceAutohinter">
            <summary>
            <para>If <c>true</c>, default autohinter is used for font hinting.</para>
            </summary>
        </member>
        <member name="P:Godot.FontData.DistanceFieldHint">
            <summary>
            <para>If <c>true</c>, distance field hint is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.FontData.Hinting">
            <summary>
            <para>The font hinting mode used by FreeType. See <see cref="T:Godot.TextServer.Hinting"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.LoadResource(System.String,System.Int32)">
            <summary>
            <para>Creates new font from the file.</para>
            <para>Note: For non-scalable fonts <c>base_size</c> is ignored, use <see cref="M:Godot.FontData.GetBaseSize"/> to check actual font size.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.LoadMemory(System.Byte[],System.String,System.Int32)">
            <summary>
            <para>Creates new font from the data in memory.</para>
            <para>Note: For non-scalable fonts <c>base_size</c> is ignored, use <see cref="M:Godot.FontData.GetBaseSize"/> to check actual font size.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetHeight(System.Int32)">
            <summary>
            <para>Returns the total font height (ascent plus descent) in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetAscent(System.Int32)">
            <summary>
            <para>Returns the font ascent (number of pixels above the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetDescent(System.Int32)">
            <summary>
            <para>Returns the font descent (number of pixels below the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetUnderlinePosition(System.Int32)">
            <summary>
            <para>Returns underline offset (number of pixels below the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetUnderlineThickness(System.Int32)">
            <summary>
            <para>Returns underline thickness in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetVariationList">
            <summary>
            <para>Returns list of supported <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg">variation coordinates</a>, each coordinate is returned as <c>tag: Vector3i(min_value,max_value,default_value)</c>.</para>
            <para>Font variations allow for continuous change of glyph characteristics along some given design axis, such as weight, width or slant.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.SetVariation(System.String,System.Double)">
            <summary>
            <para>Sets variation coordinate <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetVariation(System.String)">
            <summary>
            <para>Returns variation coordinate <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.HasChar(System.Int32)">
            <summary>
            <para>Return <c>true</c> if a Unicode <c>char</c> is available in the font.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetSupportedChars">
            <summary>
            <para>Returns a string containing all the characters available in the font.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetGlyphAdvance(System.UInt32,System.Int32)">
            <summary>
            <para>Returns advance of the glyph for horizontal and vertical layouts.</para>
            <para>Note: Glyph index is bound to the font data, use only glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.FontData.GetGlyphIndex(System.Int32,System.Int32)"/> for this font data.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetGlyphKerning(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            <para>Returns a kerning of the pair of glyphs for horizontal and vertical layouts.</para>
            <para>Note: Glyph index is bound to the font data, use only glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.FontData.GetGlyphIndex(System.Int32,System.Int32)"/> for this font data.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetBaseSize">
            <summary>
            <para>Returns the base size of the font (the only size supported for non-scalable fonts, meaningless for scalable fonts).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.HasOutline">
            <summary>
            <para>Returns <c>true</c>, if font supports drawing glyph outlines.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.IsLanguageSupported(System.String)">
            <summary>
            <para>Returns <c>true</c>, if font supports given language (<a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639</a> code).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.SetLanguageSupportOverride(System.String,System.Boolean)">
            <summary>
            <para>Adds override for <see cref="M:Godot.FontData.IsLanguageSupported(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetLanguageSupportOverride(System.String)">
            <summary>
            <para>Returns <c>true</c> if support override is enabled for the <c>language</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.RemoveLanguageSupportOverride(System.String)">
            <summary>
            <para>Remove language support override.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetLanguageSupportOverrides">
            <summary>
            <para>Returns list of language support overrides.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.IsScriptSupported(System.String)">
            <summary>
            <para>Returns <c>true</c>, if font supports given script (<a href="https://en.wikipedia.org/wiki/ISO_15924">ISO 15924</a> code).</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.SetScriptSupportOverride(System.String,System.Boolean)">
            <summary>
            <para>Adds override for <see cref="M:Godot.FontData.IsScriptSupported(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetScriptSupportOverride(System.String)">
            <summary>
            <para>Returns <c>true</c> if support override is enabled for the <c>script</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.RemoveScriptSupportOverride(System.String)">
            <summary>
            <para>Removes script support override.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetScriptSupportOverrides">
            <summary>
            <para>Returns list of script support overrides.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.GetGlyphIndex(System.Int32,System.Int32)">
            <summary>
            <para>Return the glyph index of a <c>char</c>, optionally modified by the <c>variation_selector</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.FontData.DrawGlyph(Godot.RID,System.Int32,Godot.Vector2,System.UInt32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws single glyph into a canvas item at the position, using <c>font</c> at the size <c>size</c>.</para>
            <para>Returns advance of the glyph for horizontal and vertical layouts.</para>
            <para>Note: Glyph index is bound to the font data, use only glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.FontData.GetGlyphIndex(System.Int32,System.Int32)"/> for this font data.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.FontData.DrawGlyphOutline(Godot.RID,System.Int32,System.Int32,Godot.Vector2,System.UInt32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws single glyph outline of size <c>outline_size</c> into a canvas item at the position, using <c>font</c> at the size <c>size</c>. If outline drawing is not supported, nothing is drawn.</para>
            <para>Returns advance of the glyph for horizontal and vertical layouts (regardless of outline drawing support).</para>
            <para>Note: Glyph index is bound to the font data, use only glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.FontData.GetGlyphIndex(System.Int32,System.Int32)"/> for this font data.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="T:Godot.GDNativeLibrary">
            <summary>
            <para>A GDNative library can implement <see cref="T:Godot.NativeScript"/>s, global functions to call with the <see cref="T:Godot.GDNative"/> class, or low-level engine extensions through interfaces such as <see cref="T:Godot.XRInterfaceGDNative"/>. The library must be compiled for each platform and architecture that the project will run on.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.ConfigFile">
            <summary>
            <para>This resource in INI-style <see cref="T:Godot.ConfigFile"/> format, as in <c>.gdnlib</c> files.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.LoadOnce">
            <summary>
            <para>If <c>true</c>, Godot loads only one copy of the library and each script that references the library will share static data like static or global variables.</para>
            <para>If <c>false</c>, Godot loads a separate copy of the library into memory for each script that references it.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Singleton">
            <summary>
            <para>If <c>true</c>, Godot loads the library at startup rather than the first time a script uses the library, calling <c>{prefix}gdnative_singleton</c> after initializing the library (where <c>{prefix}</c> is the value of <see cref="P:Godot.GDNativeLibrary.SymbolPrefix"/>). The library remains loaded as long as Godot is running.</para>
            <para>Note: A singleton library cannot be <see cref="P:Godot.GDNativeLibrary.Reloadable"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.SymbolPrefix">
            <summary>
            <para>The prefix this library's entry point functions begin with. For example, a GDNativeLibrary would declare its <c>gdnative_init</c> function as <c>godot_gdnative_init</c> by default.</para>
            <para>On platforms that require statically linking libraries (currently only iOS), each library must have a different <c>symbol_prefix</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Reloadable">
            <summary>
            <para>If <c>true</c>, the editor will temporarily unload the library whenever the user switches away from the editor window, allowing the user to recompile the library without restarting Godot.</para>
            <para>Note: If the library defines tool scripts that run inside the editor, <c>reloadable</c> must be <c>false</c>. Otherwise, the editor will attempt to unload the tool scripts while they're in use and crash.</para>
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentLibraryPath">
            <summary>
            <para>Returns the path to the dynamic library file for the current platform and architecture.</para>
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentDependencies">
            <summary>
            <para>Returns paths to all dependency libraries for the current platform and architecture.</para>
            </summary>
        </member>
        <member name="T:Godot.GDScript">
            <summary>
            <para>A script implemented in the GDScript programming language. The script extends the functionality of all objects that instance it.</para>
            <para><see cref="M:Godot.GDScript.New(System.Object[])"/> creates a new instance of the script. <see cref="M:Godot.Object.SetScript(System.Object)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            </summary>
        </member>
        <member name="M:Godot.GDScript.New(System.Object[])">
            <summary>
            <para>Returns a new instance of the script.</para>
            <para>For example:</para>
            <para><code>
            var MyClass = load("myclass.gd")
            var instance = MyClass.new()
            assert(instance.get_script() == MyClass)
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.GDScript.GetAsByteCode">
            <summary>
            <para>Returns byte code for the script source code.</para>
            </summary>
        </member>
        <member name="T:Godot.GIProbe">
            <summary>
            <para><see cref="T:Godot.GIProbe"/>s are used to provide high-quality real-time indirect light to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. <see cref="T:Godot.GIProbe"/>s need to be baked before using, however, once baked, dynamic objects will receive light from them. Further, lights can be fully dynamic or baked.</para>
            <para>Having <see cref="T:Godot.GIProbe"/>s in a scene can be expensive, the quality of the probe can be turned down in exchange for better performance in the <see cref="T:Godot.ProjectSettings"/> using .</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv64">
            <summary>
            <para>Use 64 subdivisions. This is the lowest quality setting, but the fastest. Use it if you can, but especially use it on lower-end hardware.</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv128">
            <summary>
            <para>Use 128 subdivisions. This is the default quality setting.</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv256">
            <summary>
            <para>Use 256 subdivisions.</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Subdiv512">
            <summary>
            <para>Use 512 subdivisions. This is the highest quality setting, but the slowest. On lower-end hardware this could cause the GPU to stall.</para>
            </summary>
        </member>
        <member name="F:Godot.GIProbe.SubdivEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.GIProbe.SubdivEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Subdiv">
            <summary>
            <para>Number of times to subdivide the grid that the <see cref="T:Godot.GIProbe"/> operates on. A higher number results in finer detail and thus higher visual quality, while lower numbers result in better performance.</para>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Extents">
            <summary>
            <para>The size of the area covered by the <see cref="T:Godot.GIProbe"/>. If you make the extents larger without increasing the subdivisions with <see cref="P:Godot.GIProbe.Subdiv"/>, the size of each cell will increase and result in lower detailed lighting.</para>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Data">
            <summary>
            <para>The <see cref="T:Godot.GIProbeData"/> resource that holds the data for this <see cref="T:Godot.GIProbe"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GIProbe.Bake(Godot.Node,System.Boolean)">
            <summary>
            <para>Bakes the effect from all <see cref="T:Godot.GeometryInstance3D"/>s marked with  and <see cref="T:Godot.Light3D"/>s marked with either  or . If <c>create_visual_debug</c> is <c>true</c>, after baking the light, this will generate a <see cref="T:Godot.MultiMesh"/> that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the <see cref="T:Godot.GIProbe"/>'s data and debug any issues that may be occurring.</para>
            </summary>
        </member>
        <member name="M:Godot.GIProbe.DebugBake">
            <summary>
            <para>Calls <see cref="M:Godot.GIProbe.Bake(Godot.Node,System.Boolean)"/> with <c>create_visual_debug</c> enabled.</para>
            </summary>
        </member>
        <member name="T:Godot.GPUParticles2D">
            <summary>
            <para>2D particle node used to create a variety of particle systems and effects. <see cref="T:Godot.GPUParticles2D"/> features an emitter that generates some number of particles at a given rate.</para>
            <para>Use the <c>process_material</c> property to add a <see cref="T:Godot.ParticlesMaterial"/> to configure particle appearance and behavior. Alternatively, you can add a <see cref="T:Godot.ShaderMaterial"/> which will be applied to all particles.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles2D.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles2D.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Amount">
            <summary>
            <para>Number of particles emitted in one emission cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Lifetime">
            <summary>
            <para>Amount of time each particle will exist.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.OneShot">
            <summary>
            <para>If <c>true</c>, only one emission cycle occurs. If set <c>true</c> during a cycle, emission will stop at the cycle's end.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Preprocess">
            <summary>
            <para>Particle system starts as if it had already run for this many seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.SpeedScale">
            <summary>
            <para>Particle system's running speed scaling ratio. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Explosiveness">
            <summary>
            <para>How rapidly particles in an emission cycle are emitted. If greater than <c>0</c>, there will be a gap in emissions before the next cycle begins.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Randomness">
            <summary>
            <para>Emission lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.FixedFps">
            <summary>
            <para>The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.FractDelta">
            <summary>
            <para>If <c>true</c>, results in fractional delta calculation which has a smoother particles display effect.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.VisibilityRect">
            <summary>
            <para>Editor visibility helper.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <see cref="T:Godot.GPUParticles2D.DrawOrderEnum"/> values.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.ProcessMaterial">
            <summary>
            <para><see cref="T:Godot.Material"/> for processing particles. Can be a <see cref="T:Godot.ParticlesMaterial"/> or a <see cref="T:Godot.ShaderMaterial"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles2D.Texture">
            <summary>
            <para>Particle texture. If <c>null</c>, particles will be squares.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles2D.CaptureRect">
            <summary>
            <para>Returns a rectangle containing the positions of all existing particles.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles2D.Restart">
            <summary>
            <para>Restarts all the existing particles.</para>
            </summary>
        </member>
        <member name="T:Godot.GPUParticles3D">
            <summary>
            <para>3D particle node used to create a variety of particle systems and effects. <see cref="T:Godot.GPUParticles3D"/> features an emitter that generates some number of particles at a given rate.</para>
            <para>Use the <c>process_material</c> property to add a <see cref="T:Godot.ParticlesMaterial"/> to configure particle appearance and behavior. Alternatively, you can add a <see cref="T:Godot.ShaderMaterial"/> which will be applied to all particles.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles3D.MaxDrawPasses">
            <summary>
            <para>Maximum number of draw passes supported.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles3D.DrawOrderEnum.Index">
            <summary>
            <para>Particles are drawn in the order emitted.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles3D.DrawOrderEnum.Lifetime">
            <summary>
            <para>Particles are drawn in order of remaining lifetime.</para>
            </summary>
        </member>
        <member name="F:Godot.GPUParticles3D.DrawOrderEnum.ViewDepth">
            <summary>
            <para>Particles are drawn in order of depth.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Emitting">
            <summary>
            <para>If <c>true</c>, particles are being emitted.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Amount">
            <summary>
            <para>Number of particles to emit.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Lifetime">
            <summary>
            <para>Amount of time each particle will exist.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.OneShot">
            <summary>
            <para>If <c>true</c>, only <c>amount</c> particles will be emitted.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Preprocess">
            <summary>
            <para>Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.SpeedScale">
            <summary>
            <para>Speed scaling ratio. A value of <c>0</c> can be used to pause the particles.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Explosiveness">
            <summary>
            <para>Time ratio between each emission. If <c>0</c>, particles are emitted continuously. If <c>1</c>, all particles are emitted simultaneously.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.Randomness">
            <summary>
            <para>Emission randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.FixedFps">
            <summary>
            <para>The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.FractDelta">
            <summary>
            <para>If <c>true</c>, results in fractional delta calculation which has a smoother particles display effect.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.VisibilityAabb">
            <summary>
            <para>The <see cref="T:Godot.AABB"/> that determines the area of the world part of which needs to be visible on screen for the particle system to be active.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.LocalCoords">
            <summary>
            <para>If <c>true</c>, particles use the parent node's coordinate space. If <c>false</c>, they use global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawOrder">
            <summary>
            <para>Particle draw order. Uses <see cref="T:Godot.GPUParticles3D.DrawOrderEnum"/> values.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.ProcessMaterial">
            <summary>
            <para><see cref="T:Godot.Material"/> for processing particles. Can be a <see cref="T:Godot.ParticlesMaterial"/> or a <see cref="T:Godot.ShaderMaterial"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawPasses">
            <summary>
            <para>The number of draw passes when rendering particles.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawPass1">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the first draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawPass2">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the second draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawPass3">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the third draw pass.</para>
            </summary>
        </member>
        <member name="P:Godot.GPUParticles3D.DrawPass4">
            <summary>
            <para><see cref="T:Godot.Mesh"/> that is drawn for the fourth draw pass.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles3D.SetDrawPassMesh(System.Int32,Godot.Mesh)">
            <summary>
            <para>Sets the <see cref="T:Godot.Mesh"/> that is drawn at index <c>pass</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles3D.GetDrawPassMesh(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Mesh"/> that is drawn at index <c>pass</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles3D.Restart">
            <summary>
            <para>Restarts the particle emission, clearing existing particles.</para>
            </summary>
        </member>
        <member name="M:Godot.GPUParticles3D.CaptureAabb">
            <summary>
            <para>Returns the axis-aligned bounding box that contains all the particles that are active in the current frame.</para>
            </summary>
        </member>
        <member name="T:Godot.Generic6DOFJoint3D">
            <summary>
            <para>The first 3 DOF axes are linear axes, which represent translation of Bodies, and the latter 3 DOF axes represent the angular motion. Each axis can be either locked, or limited.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearLowerLimit">
            <summary>
            <para>The minimum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearUpperLimit">
            <summary>
            <para>The maximum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the axes. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearRestitution">
            <summary>
            <para>The amount of restitution on the axes' movement. The lower, the more momentum gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearDamping">
            <summary>
            <para>The amount of damping that happens at the linear motion across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearMotorTargetVelocity">
            <summary>
            <para>The velocity the linear motor will try to reach.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.LinearMotorForceLimit">
            <summary>
            <para>The maximum force the linear motor will apply while trying to reach the velocity target.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularLowerLimit">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularUpperLimit">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularLimitSoftness">
            <summary>
            <para>The speed of all rotations across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularDamping">
            <summary>
            <para>The amount of rotational damping across the axes. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularRestitution">
            <summary>
            <para>The amount of rotational restitution across the axes. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularForceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularErp">
            <summary>
            <para>When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularMotorTargetVelocity">
            <summary>
            <para>Target speed for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.AngularMotorForceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Param.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Generic6DOFJoint3D.Param"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Flag.EnableLinearLimit">
            <summary>
            <para>If enabled, linear motion is possible within the given limits.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Flag.EnableAngularLimit">
            <summary>
            <para>If enabled, rotational motion is possible within the given limits.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Flag.EnableMotor">
            <summary>
            <para>If enabled, there is a rotational motor across these axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Flag.EnableLinearMotor">
            <summary>
            <para>If enabled, there is a linear motor across these axes.</para>
            </summary>
        </member>
        <member name="F:Godot.Generic6DOFJoint3D.Flag.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Generic6DOFJoint3D.Flag"/> enum.</para>
            </summary>
        </member>
        <member name="T:Godot.GeometryInstance3D">
            <summary>
            <para>Base node for geometry-based visual instances. Shares some common functionality like visibility and custom materials.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance3D.ShadowCastingSetting.Off">
            <summary>
            <para>Will not cast any shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance3D.ShadowCastingSetting.On">
            <summary>
            <para>Will cast shadows from all visible faces in the GeometryInstance3D.</para>
            <para>Will take culling into account, so faces not being rendered will not be taken into account when shadow casting.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance3D.ShadowCastingSetting.DoubleSided">
            <summary>
            <para>Will cast shadows from all visible faces in the GeometryInstance3D.</para>
            <para>Will not take culling into account, so all faces will be taken into account when shadow casting.</para>
            </summary>
        </member>
        <member name="F:Godot.GeometryInstance3D.ShadowCastingSetting.ShadowsOnly">
            <summary>
            <para>Will only show the shadows casted from this object.</para>
            <para>In other words, the actual mesh will not be visible, only the shadows casted from the mesh will be.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.MaterialOverride">
            <summary>
            <para>The material override for the whole geometry.</para>
            <para>If a material is assigned to this property, it will be used instead of any material set in any material slot of the mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.CastShadow">
            <summary>
            <para>The selected shadow casting flag. See <see cref="T:Godot.GeometryInstance3D.ShadowCastingSetting"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.ExtraCullMargin">
            <summary>
            <para>The extra distance added to the GeometryInstance3D's bounding box (<see cref="T:Godot.AABB"/>) to increase its cull box.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.LodMinDistance">
            <summary>
            <para>The GeometryInstance3D's min LOD distance.</para>
            <para>Note: This property currently has no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.LodMinHysteresis">
            <summary>
            <para>The GeometryInstance3D's min LOD margin.</para>
            <para>Note: This property currently has no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.LodMaxDistance">
            <summary>
            <para>The GeometryInstance3D's max LOD distance.</para>
            <para>Note: This property currently has no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance3D.LodMaxHysteresis">
            <summary>
            <para>The GeometryInstance3D's max LOD margin.</para>
            <para>Note: This property currently has no effect.</para>
            </summary>
        </member>
        <member name="M:Godot.GeometryInstance3D.SetCustomAabb(Godot.AABB)">
            <summary>
            <para>Overrides the bounding box of this node with a custom one. To remove it, set an <see cref="T:Godot.AABB"/> with all fields set to zero.</para>
            </summary>
        </member>
        <member name="T:Godot.Gradient">
            <summary>
            <para>Given a set of colors, this resource will interpolate them in order. This means that if you have color 1, color 2 and color 3, the gradient will interpolate from color 1 to color 2 and from color 2 to color 3. The gradient will initially have 2 colors (black and white), one (black) at gradient lower offset 0 and the other (white) at the gradient higher offset 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Gradient.Offsets">
            <summary>
            <para>Gradient's offsets returned as a <see cref="T:float[]"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Gradient.Colors">
            <summary>
            <para>Gradient's colors returned as a <see cref="T:Godot.Color[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.AddPoint(System.Single,Godot.Color)">
            <summary>
            <para>Adds the specified color to the end of the gradient, with the specified offset.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the color at the index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetOffset(System.Int32,System.Single)">
            <summary>
            <para>Sets the offset for the gradient color at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the gradient color at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color of the gradient color at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetColor(System.Int32)">
            <summary>
            <para>Returns the color of the gradient color at index <c>point</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.Interpolate(System.Single)">
            <summary>
            <para>Returns the interpolated color specified by <c>offset</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetPointCount">
            <summary>
            <para>Returns the number of colors in the gradient.</para>
            </summary>
        </member>
        <member name="T:Godot.GradientTexture">
            <summary>
            <para>GradientTexture uses a <see cref="T:Godot.Gradient"/> to fill the texture data. The gradient will be filled from left to right using colors obtained from the gradient. This means the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see <see cref="P:Godot.GradientTexture.Width"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Gradient">
            <summary>
            <para>The <see cref="T:Godot.Gradient"/> that will be used to fill the texture.</para>
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Width">
            <summary>
            <para>The number of color samples that will be obtained from the <see cref="T:Godot.Gradient"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit">
            <summary>
            <para>GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNode slots is disabled by default.</para>
            <para>It is greatly advised to enable low-processor usage mode (see <see cref="P:Godot.OS.LowProcessorUsageMode"/>) when using GraphEdits.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.RightDisconnects">
            <summary>
            <para>If <c>true</c>, enables disconnection of existing connections in the GraphEdit by dragging the right end.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.ScrollOffset">
            <summary>
            <para>The scroll offset.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.SnapDistance">
            <summary>
            <para>The snapping distance in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.UseSnap">
            <summary>
            <para>If <c>true</c>, enables snapping.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.Zoom">
            <summary>
            <para>The current zoom value.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.ConnectionLinesThickness">
            <summary>
            <para>The thickness of the lines between the nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.ConnectionLinesAntialiased">
            <summary>
            <para>If <c>true</c>, the lines between nodes will use antialiasing.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.MinimapEnabled">
            <summary>
            <para>If <c>true</c>, the minimap is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.MinimapSize">
            <summary>
            <para>The size of the minimap rectangle. The map itself is based on the size of the grid area and is scaled to fit this rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.MinimapOpacity">
            <summary>
            <para>The opacity of the minimap rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ConnectNode(Godot.StringName,System.Int32,Godot.StringName,System.Int32)">
            <summary>
            <para>Create a connection between the <c>from_port</c> slot of the <c>from</c> GraphNode and the <c>to_port</c> slot of the <c>to</c> GraphNode. If the connection already exists, no connection is created.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsNodeConnected(Godot.StringName,System.Int32,Godot.StringName,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the <c>from_port</c> slot of the <c>from</c> GraphNode is connected to the <c>to_port</c> slot of the <c>to</c> GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.DisconnectNode(Godot.StringName,System.Int32,Godot.StringName,System.Int32)">
            <summary>
            <para>Removes the connection between the <c>from_port</c> slot of the <c>from</c> GraphNode and the <c>to_port</c> slot of the <c>to</c> GraphNode. If the connection does not exist, no connection is removed.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.SetConnectionActivity(Godot.StringName,System.Int32,Godot.StringName,System.Int32,System.Single)">
            <summary>
            <para>Sets the coloration of the connection between <c>from</c>'s <c>from_port</c> and <c>to</c>'s <c>to_port</c> with the color provided in the <c>activity</c> theme property.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.GetConnectionList">
            <summary>
            <para>Returns an Array containing the list of connections. A connection consists in a structure of the form <c>{ from_port: 0, from: "GraphNode name 0", to_port: 1, to: "GraphNode name 1" }</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ClearConnections">
            <summary>
            <para>Removes all connections between nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidRightDisconnectType(System.Int32)">
            <summary>
            <para>Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidRightDisconnectType(System.Int32)">
            <summary>
            <para>Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidLeftDisconnectType(System.Int32)">
            <summary>
            <para>Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidLeftDisconnectType(System.Int32)">
            <summary>
            <para>Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Makes possible the connection between two different slot types. The type is defined with the <see cref="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture2D,Godot.Texture2D)"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Makes it not possible to connect between two different slot types. The type is defined with the <see cref="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture2D,Godot.Texture2D)"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsValidConnectionType(System.Int32,System.Int32)">
            <summary>
            <para>Returns whether it's possible to connect slots of the specified types.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.GetZoomHbox">
            <summary>
            <para>Gets the <see cref="T:Godot.HBoxContainer"/> that contains the zooming and grid snap controls in the top left of the graph.</para>
            <para>Warning: The intended usage of this function is to allow you to reposition or add your own custom controls to the container. This is an internal control and as such should not be freed. If you wish to hide this or any of it's children use their <see cref="P:Godot.CanvasItem.Visible"/> property instead.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.SetSelected(Godot.Node)">
            <summary>
            <para>Sets the specified <c>node</c> as the one selected.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.DeleteNodesRequestHandler">
            <summary>
            <para>Emitted when a GraphNode is attempted to be removed from the GraphEdit.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.CopyNodesRequestHandler">
            <summary>
            <para>Emitted when the user presses Ctrl + C.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.DuplicateNodesRequestHandler">
            <summary>
            <para>Emitted when a GraphNode is attempted to be duplicated in the GraphEdit.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.PopupRequestHandler">
            <summary>
            <para>Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. <c>position</c> is the position of the mouse pointer when the signal is sent.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.PasteNodesRequestHandler">
            <summary>
            <para>Emitted when the user presses Ctrl + V.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.ScrollOffsetChangedHandler">
            <summary>
            <para>Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.NodeSelectedHandler">
            <summary>
            <para>Emitted when a GraphNode is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.BeginNodeMoveHandler">
            <summary>
            <para>Emitted at the beginning of a GraphNode movement.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.ConnectionToEmptyHandler">
            <summary>
            <para>Emitted when user dragging connection from output port into empty space of the graph.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.DisconnectionRequestHandler">
            <summary>
            <para>Emitted to the GraphEdit when the connection between <c>from_slot</c> slot of <c>from</c> GraphNode and <c>to_slot</c> slot of <c>to</c> GraphNode is attempted to be removed.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.ConnectionRequestHandler">
            <summary>
            <para>Emitted to the GraphEdit when the connection between the <c>from_slot</c> slot of the <c>from</c> GraphNode and the <c>to_slot</c> slot of the <c>to</c> GraphNode is attempted to be created.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.ConnectionFromEmptyHandler">
            <summary>
            <para>Emitted when user dragging connection from input port into empty space of the graph.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphEdit.EndNodeMoveHandler">
            <summary>
            <para>Emitted at the end of a GraphNode movement.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode">
            <summary>
            <para>A GraphNode is a container. Each GraphNode can have several input and output slots, sometimes referred to as ports, allowing connections between GraphNodes. To add a slot to GraphNode, add any <see cref="T:Godot.Control"/>-derived child node to it.</para>
            <para>After adding at least one child to GraphNode new sections will be automatically created in the Inspector called 'Slot'. When 'Slot' is expanded you will see list with index number for each slot. You can click on each of them to expand further.</para>
            <para>In the Inspector you can enable (show) or disable (hide) slots. By default all slots are disabled so you may not see any slots on your GraphNode initially. You can assign a type to each slot. Only slots of the same type will be able to connect to each other. You can also assign colors to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input connections are on the left and output connections are on the right side of GraphNode. Only enabled slots are counted as connections.</para>
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Disabled">
            <summary>
            <para>No overlay is shown.</para>
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Breakpoint">
            <summary>
            <para>Show overlay set in the <c>breakpoint</c> theme property.</para>
            </summary>
        </member>
        <member name="F:Godot.GraphNode.OverlayEnum.Position">
            <summary>
            <para>Show overlay set in the <c>position</c> theme property.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Title">
            <summary>
            <para>The text displayed in the GraphNode's title bar.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.PositionOffset">
            <summary>
            <para>The offset of the GraphNode, relative to the scroll offset of the <see cref="T:Godot.GraphEdit"/>.</para>
            <para>Note: You cannot use position offset directly, as <see cref="T:Godot.GraphEdit"/> is a <see cref="T:Godot.Container"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.ShowClose">
            <summary>
            <para>If <c>true</c>, the close button will be visible.</para>
            <para>Note: Pressing it will only emit the <c>close_request</c> signal, the GraphNode needs to be removed manually.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Resizable">
            <summary>
            <para>If <c>true</c>, the user can resize the GraphNode.</para>
            <para>Note: Dragging the handle will only emit the <c>resize_request</c> signal, the GraphNode needs to be resized manually.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Selected">
            <summary>
            <para>If <c>true</c>, the GraphNode is selected.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Comment">
            <summary>
            <para>If <c>true</c>, the GraphNode is a comment node.</para>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Overlay">
            <summary>
            <para>Sets the overlay shown above the GraphNode. See <see cref="T:Godot.GraphNode.OverlayEnum"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture2D,Godot.Texture2D)">
            <summary>
            <para>Sets properties of the slot with ID <c>idx</c>.</para>
            <para>If <c>enable_left</c>/<c>right</c>, a port will appear and the slot will be able to be connected from this side.</para>
            <para><c>type_left</c>/<c>right</c> is an arbitrary type of the port. Only ports with the same type values can be connected.</para>
            <para><c>color_left</c>/<c>right</c> is the tint of the port's icon on this side.</para>
            <para><c>custom_left</c>/<c>right</c> is a custom texture for this side's port.</para>
            <para>Note: This method only sets properties of the slot. To create the slot, add a <see cref="T:Godot.Control"/>-derived child to the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearSlot(System.Int32)">
            <summary>
            <para>Disables input and output slot whose index is <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearAllSlots">
            <summary>
            <para>Disables all input and output slots of the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledLeft(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if left (input) slot <c>idx</c> is enabled, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeLeft(System.Int32)">
            <summary>
            <para>Returns the (integer) type of left (input) <c>idx</c> slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorLeft(System.Int32)">
            <summary>
            <para>Returns the color set to <c>idx</c> left (input) slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledRight(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if right (output) slot <c>idx</c> is enabled, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeRight(System.Int32)">
            <summary>
            <para>Returns the (integer) type of right (output) <c>idx</c> slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorRight(System.Int32)">
            <summary>
            <para>Returns the color set to <c>idx</c> right (output) slot.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputCount">
            <summary>
            <para>Returns the number of enabled output slots (connections) of the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputCount">
            <summary>
            <para>Returns the number of enabled input slots (connections) to the GraphNode.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputPosition(System.Int32)">
            <summary>
            <para>Returns the position of the output connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputType(System.Int32)">
            <summary>
            <para>Returns the type of the output connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputColor(System.Int32)">
            <summary>
            <para>Returns the color of the output connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputPosition(System.Int32)">
            <summary>
            <para>Returns the position of the input connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputType(System.Int32)">
            <summary>
            <para>Returns the type of the input connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputColor(System.Int32)">
            <summary>
            <para>Returns the color of the input connection <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode.RaiseRequestHandler">
            <summary>
            <para>Emitted when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode.PositionOffsetChangedHandler">
            <summary>
            <para>Emitted when the GraphNode is moved.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode.CloseRequestHandler">
            <summary>
            <para>Emitted when the GraphNode is requested to be closed. Happens on clicking the close button (see <see cref="P:Godot.GraphNode.ShowClose"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode.DraggedHandler">
            <summary>
            <para>Emitted when the GraphNode is dragged.</para>
            </summary>
        </member>
        <member name="T:Godot.GraphNode.ResizeRequestHandler">
            <summary>
            <para>Emitted when the GraphNode is requested to be resized. Happens on dragging the resizer handle (see <see cref="P:Godot.GraphNode.Resizable"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.GridContainer">
            <summary>
            <para>GridContainer will arrange its Control-derived children in a grid like structure, the grid columns are specified using the <see cref="P:Godot.GridContainer.Columns"/> property and the number of rows will be equal to the number of children in the container divided by the number of columns. For example, if the container has 5 children, and 2 columns, there will be 3 rows in the container.</para>
            <para>Notice that grid layout will preserve the columns and rows for every size of the container, and that empty columns will be expanded automatically.</para>
            <para>Note: GridContainer only works with child nodes inheriting from Control. It won't rearrange child nodes inheriting from Node2D.</para>
            </summary>
        </member>
        <member name="P:Godot.GridContainer.Columns">
            <summary>
            <para>The number of columns in the <see cref="T:Godot.GridContainer"/>. If modified, <see cref="T:Godot.GridContainer"/> reorders its Control-derived children to accommodate the new layout.</para>
            </summary>
        </member>
        <member name="T:Godot.GridMap">
            <summary>
            <para>GridMap lets you place meshes on a grid interactively. It works both from the editor and from scripts, which can help you create in-game level editors.</para>
            <para>GridMaps use a <see cref="T:Godot.MeshLibrary"/> which contains a list of tiles. Each tile is a mesh with materials plus optional collision and navigation shapes.</para>
            <para>A GridMap contains a collection of cells. Each grid cell refers to a tile in the <see cref="T:Godot.MeshLibrary"/>. All cells in the map have the same dimensions.</para>
            <para>Internally, a GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells.</para>
            </summary>
        </member>
        <member name="F:Godot.GridMap.InvalidCellItem">
            <summary>
            <para>Invalid cell item that can be used in <see cref="M:Godot.GridMap.SetCellItem(Godot.Vector3i,System.Int32,System.Int32)"/> to clear cells (or represent an empty cell in <see cref="M:Godot.GridMap.GetCellItem(Godot.Vector3i)"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.MeshLibrary">
            <summary>
            <para>The assigned <see cref="T:Godot.MeshLibrary"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellSize">
            <summary>
            <para>The dimensions of the grid's cells.</para>
            <para>This does not affect the size of the meshes. See <see cref="P:Godot.GridMap.CellScale"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellOctantSize">
            <summary>
            <para>The size of each octant measured in number of cells. This applies to all three axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterX">
            <summary>
            <para>If <c>true</c>, grid items are centered on the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterY">
            <summary>
            <para>If <c>true</c>, grid items are centered on the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterZ">
            <summary>
            <para>If <c>true</c>, grid items are centered on the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellScale">
            <summary>
            <para>The scale of the cell items.</para>
            <para>This does not affect the size of the grid cells themselves, only the items in them. This can be used to make cell items overlap their neighbors.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionLayer">
            <summary>
            <para>The physics layers this GridMap is in.</para>
            <para>GridMaps act as static bodies, meaning they aren't affected by gravity or other forces. They only affect other physics bodies that collide with them.</para>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionMask">
            <summary>
            <para>The physics layers this GridMap detects collisions in. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets an individual bit on the <see cref="P:Godot.GridMap.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.GridMap.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets an individual bit on the <see cref="P:Godot.GridMap.CollisionLayer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.GridMap.CollisionLayer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCellItem(Godot.Vector3i,System.Int32,System.Int32)">
            <summary>
            <para>Sets the mesh index for the cell referenced by its grid coordinates.</para>
            <para>A negative item index such as  will clear the cell.</para>
            <para>Optionally, the item's orientation can be passed. For valid orientation values, see <c>Basis.get_orthogonal_index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItem(Godot.Vector3i)">
            <summary>
            <para>The <see cref="T:Godot.MeshLibrary"/> item index located at the given grid coordinates. If the cell is empty,  will be returned.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItemOrientation(Godot.Vector3i)">
            <summary>
            <para>The orientation of the cell at the given grid coordinates. <c>-1</c> is returned if the cell is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.WorldToMap(Godot.Vector3)">
            <summary>
            <para>Returns the coordinates of the grid cell containing the given point.</para>
            <para><c>pos</c> should be in the GridMap's local coordinate space.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.MapToWorld(Godot.Vector3i)">
            <summary>
            <para>Returns the position of a grid cell in the GridMap's local coordinate space.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.Clear">
            <summary>
            <para>Clear all cells.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetUsedCells">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Vector3"/> with the non-empty cell coordinates in the grid map.</para>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetMeshes">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Transform"/> and <see cref="T:Godot.Mesh"/> references corresponding to the non-empty cells in the grid. The transforms are specified in world space.</para>
            </summary>
        </member>
        <member name="T:Godot.GridMap.CellSizeChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.GridMap.CellSize"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.GrooveJoint2D">
            <summary>
            <para>Groove constraint for 2D physics. This is useful for making a body "slide" through a segment placed in another.</para>
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.Length">
            <summary>
            <para>The groove's length. The groove is from the joint's origin towards <see cref="P:Godot.GrooveJoint2D.Length"/> along the joint's local Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.InitialOffset">
            <summary>
            <para>The body B's initial anchor position defined by the joint's origin and a local offset <see cref="P:Godot.GrooveJoint2D.InitialOffset"/> along the joint's Y axis (along the groove).</para>
            </summary>
        </member>
        <member name="T:Godot.HBoxContainer">
            <summary>
            <para>Horizontal box container. See <see cref="T:Godot.BoxContainer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.HMACContext">
            <summary>
            <para>The HMACContext class is useful for advanced HMAC use cases, such as streaming the message as it supports creating the message over time rather than providing it all at once.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>extends Node</para>
            <para>var ctx = HMACContext.new()</para>
            <para></para>
            <para>func _ready():</para>
            <para>    var key = "supersecret".to_utf8()</para>
            <para>    var err = ctx.start(HashingContext.HASH_SHA256, key)</para>
            <para>    assert(err == OK)</para>
            <para>    var msg1 = "this is ".to_utf8()</para>
            <para>    var msg2 = "vewy vewy secret".to_utf8()</para>
            <para>    err = ctx.update(msg1)</para>
            <para>    assert(err == OK)</para>
            <para>    err = ctx.update(msg2)</para>
            <para>    assert(err == OK)</para>
            <para>    var hmac = ctx.finish()</para>
            <para>    print(hmac.hex_encode())</para>
            <para></para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para>using System.Diagnostics;</para>
            <para></para>
            <para>public class CryptoNode : Node</para>
            <para>{</para>
            <para>    private HMACContext ctx = new HMACContext();</para>
            <para>    public override void _Ready()</para>
            <para>    {</para>
            <para>        PackedByteArray key = String("supersecret").to_utf8();</para>
            <para>        Error err = ctx.Start(HashingContext.HASH_SHA256, key);</para>
            <para>        GD.Assert(err == OK);</para>
            <para>        PackedByteArray msg1 = String("this is ").to_utf8();</para>
            <para>        PackedByteArray msg2 = String("vewy vew secret").to_utf8();</para>
            <para>        err = ctx.Update(msg1);</para>
            <para>        GD.Assert(err == OK);</para>
            <para>        err = ctx.Update(msg2);</para>
            <para>        GD.Assert(err == OK);</para>
            <para>        PackedByteArray hmac = ctx.Finish();</para>
            <para>        GD.Print(hmac.HexEncode());</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="M:Godot.HMACContext.Start(Godot.HashingContext.HashType,System.Byte[])">
            <summary>
            <para>Initializes the HMACContext. This method cannot be called again on the same HMACContext until <see cref="M:Godot.HMACContext.Finish"/> has been called.</para>
            </summary>
        </member>
        <member name="M:Godot.HMACContext.Update(System.Byte[])">
            <summary>
            <para>Updates the message to be HMACed. This can be called multiple times before <see cref="M:Godot.HMACContext.Finish"/> is called to append <c>data</c> to the message, but cannot be called until <see cref="M:Godot.HMACContext.Start(Godot.HashingContext.HashType,System.Byte[])"/> has been called.</para>
            </summary>
        </member>
        <member name="M:Godot.HMACContext.Finish">
            <summary>
            <para>Returns the resulting HMAC. If the HMAC failed, an empty <see cref="T:byte[]"/> is returned.</para>
            </summary>
        </member>
        <member name="T:Godot.HScrollBar">
            <summary>
            <para>Horizontal version of <see cref="T:Godot.ScrollBar"/>, which goes from left (min) to right (max).</para>
            </summary>
        </member>
        <member name="T:Godot.HSeparator">
            <summary>
            <para>Horizontal separator. See <see cref="T:Godot.Separator"/>. Even though it looks horizontal, it is used to separate objects vertically.</para>
            </summary>
        </member>
        <member name="T:Godot.HSlider">
            <summary>
            <para>Horizontal slider. See <see cref="T:Godot.Slider"/>. This one goes from left (min) to right (max).</para>
            <para>Note: The <c>Range.changed</c> and <c>Range.value_changed</c> signals are part of the <see cref="T:Godot.Range"/> class which this class inherits from.</para>
            </summary>
        </member>
        <member name="T:Godot.HSplitContainer">
            <summary>
            <para>Horizontal split container. See <see cref="T:Godot.SplitContainer"/>. This goes from left to right.</para>
            </summary>
        </member>
        <member name="T:Godot.HTTPClient">
            <summary>
            <para>Hyper-text transfer protocol client (sometimes called "User Agent"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases. See the <see cref="T:Godot.HTTPRequest"/> node for an higher-level alternative.</para>
            <para>Note: This client only needs to connect to a host once (see <see cref="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)"/>) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See <see cref="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)"/> for a full example and to get started.</para>
            <para>A <see cref="T:Godot.HTTPClient"/> should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. "try again, but over here"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.</para>
            <para>For more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).</para>
            <para>Note: When performing HTTP requests from a project exported to HTML5, keep in mind the remote server may not allow requests from foreign origins due to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a>. If you host the server in question, you should modify its backend to allow requests from foreign origins by adding the <c>Access-Control-Allow-Origin: *</c> HTTP header.</para>
            <para>Note: SSL/TLS support is currently limited to TLS 1.0, TLS 1.1, and TLS 1.2. Attempting to connect to a TLS 1.3-only server will return an error.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Disconnected">
            <summary>
            <para>Status: Disconnected from the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Resolving">
            <summary>
            <para>Status: Currently resolving the hostname for the given URL into an IP.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.CantResolve">
            <summary>
            <para>Status: DNS failure: Can't resolve the hostname for the given URL.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Connecting">
            <summary>
            <para>Status: Currently connecting to server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.CantConnect">
            <summary>
            <para>Status: Can't connect to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Connected">
            <summary>
            <para>Status: Connection established.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Requesting">
            <summary>
            <para>Status: Currently sending request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.Body">
            <summary>
            <para>Status: HTTP body received.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.ConnectionError">
            <summary>
            <para>Status: Error in HTTP connection.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Status.SslHandshakeError">
            <summary>
            <para>Status: Error in SSL handshake.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Get">
            <summary>
            <para>HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Head">
            <summary>
            <para>HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Post">
            <summary>
            <para>HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Put">
            <summary>
            <para>HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of POST as "create or update" and PUT as "update", although many services tend to not make a clear distinction or change their meaning).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Delete">
            <summary>
            <para>HTTP DELETE method. The DELETE method requests to delete the specified resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Options">
            <summary>
            <para>HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Trace">
            <summary>
            <para>HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Connect">
            <summary>
            <para>HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Patch">
            <summary>
            <para>HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.Method.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.HTTPClient.Method"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Continue">
            <summary>
            <para>HTTP status code <c>100 Continue</c>. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SwitchingProtocols">
            <summary>
            <para>HTTP status code <c>101 Switching Protocol</c>. Sent in response to an <c>Upgrade</c> request header by the client. Indicates the protocol the server is switching to.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Processing">
            <summary>
            <para>HTTP status code <c>102 Processing</c> (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Ok">
            <summary>
            <para>HTTP status code <c>200 OK</c>. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Created">
            <summary>
            <para>HTTP status code <c>201 Created</c>. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Accepted">
            <summary>
            <para>HTTP status code <c>202 Accepted</c>. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NonAuthoritativeInformation">
            <summary>
            <para>HTTP status code <c>203 Non-Authoritative Information</c>. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NoContent">
            <summary>
            <para>HTTP status code <c>204 No Content</c>. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ResetContent">
            <summary>
            <para>HTTP status code <c>205 Reset Content</c>. The server has fulfilled the request and desires that the client resets the "document view" that caused the request to be sent to its original state as received from the origin server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PartialContent">
            <summary>
            <para>HTTP status code <c>206 Partial Content</c>. This response code is used because of a range header sent by the client to separate download into multiple streams.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MultiStatus">
            <summary>
            <para>HTTP status code <c>207 Multi-Status</c> (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.AlreadyReported">
            <summary>
            <para>HTTP status code <c>208 Already Reported</c> (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ImUsed">
            <summary>
            <para>HTTP status code <c>226 IM Used</c> (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MultipleChoices">
            <summary>
            <para>HTTP status code <c>300 Multiple Choice</c>. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MovedPermanently">
            <summary>
            <para>HTTP status code <c>301 Moved Permanently</c>. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Found">
            <summary>
            <para>HTTP status code <c>302 Found</c>. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SeeOther">
            <summary>
            <para>HTTP status code <c>303 See Other</c>. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotModified">
            <summary>
            <para>HTTP status code <c>304 Not Modified</c>. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UseProxy">
            <summary>
            <para>HTTP status code <c>305 Use Proxy</c>. Deprecated. Do not use.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.SwitchProxy">
            <summary>
            <para>HTTP status code <c>306 Switch Proxy</c>. Deprecated. Do not use.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.TemporaryRedirect">
            <summary>
            <para>HTTP status code <c>307 Temporary Redirect</c>. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PermanentRedirect">
            <summary>
            <para>HTTP status code <c>308 Permanent Redirect</c>. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.BadRequest">
            <summary>
            <para>HTTP status code <c>400 Bad Request</c>. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Unauthorized">
            <summary>
            <para>HTTP status code <c>401 Unauthorized</c>. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PaymentRequired">
            <summary>
            <para>HTTP status code <c>402 Payment Required</c>. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Forbidden">
            <summary>
            <para>HTTP status code <c>403 Forbidden</c>. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike <c>401</c>, the client's identity is known to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotFound">
            <summary>
            <para>HTTP status code <c>404 Not Found</c>. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MethodNotAllowed">
            <summary>
            <para>HTTP status code <c>405 Method Not Allowed</c>. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotAcceptable">
            <summary>
            <para>HTTP status code <c>406 Not Acceptable</c>. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ProxyAuthenticationRequired">
            <summary>
            <para>HTTP status code <c>407 Proxy Authentication Required</c>. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestTimeout">
            <summary>
            <para>HTTP status code <c>408 Request Timeout</c>. The server did not receive a complete request message within the time that it was prepared to wait.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Conflict">
            <summary>
            <para>HTTP status code <c>409 Conflict</c>. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Gone">
            <summary>
            <para>HTTP status code <c>410 Gone</c>. The target resource is no longer available at the origin server and this condition is likely permanent.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.LengthRequired">
            <summary>
            <para>HTTP status code <c>411 Length Required</c>. The server refuses to accept the request without a defined Content-Length header.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PreconditionFailed">
            <summary>
            <para>HTTP status code <c>412 Precondition Failed</c>. One or more conditions given in the request header fields evaluated to <c>false</c> when tested on the server.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestEntityTooLarge">
            <summary>
            <para>HTTP status code <c>413 Entity Too Large</c>. The server is refusing to process a request because the request payload is larger than the server is willing or able to process.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestUriTooLong">
            <summary>
            <para>HTTP status code <c>414 Request-URI Too Long</c>. The server is refusing to service the request because the request-target is longer than the server is willing to interpret.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnsupportedMediaType">
            <summary>
            <para>HTTP status code <c>415 Unsupported Media Type</c>. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestedRangeNotSatisfiable">
            <summary>
            <para>HTTP status code <c>416 Requested Range Not Satisfiable</c>. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ExpectationFailed">
            <summary>
            <para>HTTP status code <c>417 Expectation Failed</c>. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ImATeapot">
            <summary>
            <para>HTTP status code <c>418 I'm A Teapot</c>. Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.MisdirectedRequest">
            <summary>
            <para>HTTP status code <c>421 Misdirected Request</c>. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnprocessableEntity">
            <summary>
            <para>HTTP status code <c>422 Unprocessable Entity</c> (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.Locked">
            <summary>
            <para>HTTP status code <c>423 Locked</c> (WebDAV). The source or destination resource of a method is locked.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.FailedDependency">
            <summary>
            <para>HTTP status code <c>424 Failed Dependency</c> (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UpgradeRequired">
            <summary>
            <para>HTTP status code <c>426 Upgrade Required</c>. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.PreconditionRequired">
            <summary>
            <para>HTTP status code <c>428 Precondition Required</c>. The origin server requires the request to be conditional.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.TooManyRequests">
            <summary>
            <para>HTTP status code <c>429 Too Many Requests</c>. The user has sent too many requests in a given amount of time (see "rate limiting"). Back off and increase time between requests or try again later.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.RequestHeaderFieldsTooLarge">
            <summary>
            <para>HTTP status code <c>431 Request Header Fields Too Large</c>. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.UnavailableForLegalReasons">
            <summary>
            <para>HTTP status code <c>451 Response Unavailable For Legal Reasons</c>. The server is denying access to the resource as a consequence of a legal demand.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.InternalServerError">
            <summary>
            <para>HTTP status code <c>500 Internal Server Error</c>. The server encountered an unexpected condition that prevented it from fulfilling the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotImplemented">
            <summary>
            <para>HTTP status code <c>501 Not Implemented</c>. The server does not support the functionality required to fulfill the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.BadGateway">
            <summary>
            <para>HTTP status code <c>502 Bad Gateway</c>. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.ServiceUnavailable">
            <summary>
            <para>HTTP status code <c>503 Service Unavailable</c>. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.GatewayTimeout">
            <summary>
            <para>HTTP status code <c>504 Gateway Timeout</c>. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.HttpVersionNotSupported">
            <summary>
            <para>HTTP status code <c>505 HTTP Version Not Supported</c>. The server does not support, or refuses to support, the major version of HTTP that was used in the request message.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.VariantAlsoNegotiates">
            <summary>
            <para>HTTP status code <c>506 Variant Also Negotiates</c>. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.InsufficientStorage">
            <summary>
            <para>HTTP status code <c>507 Insufficient Storage</c>. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.LoopDetected">
            <summary>
            <para>HTTP status code <c>508 Loop Detected</c>. The server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". This status indicates that the entire operation failed.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NotExtended">
            <summary>
            <para>HTTP status code <c>510 Not Extended</c>. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPClient.ResponseCode.NetworkAuthRequired">
            <summary>
            <para>HTTP status code <c>511 Network Authentication Required</c>. The client needs to authenticate to gain network access.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.BlockingModeEnabled">
            <summary>
            <para>If <c>true</c>, execution will block until all data is read from the response.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.Connection">
            <summary>
            <para>The connection to use for this client.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.ReadChunkSize">
            <summary>
            <para>The size of the buffer used and maximum bytes to read per iteration. See <see cref="M:Godot.HTTPClient.ReadResponseBodyChunk"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Connects to a host. This needs to be done before any requests are sent.</para>
            <para>The host should not have http:// prepended but will strip the protocol identifier if provided.</para>
            <para>If no <c>port</c> is specified (or <c>-1</c> is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if <c>use_ssl</c> is enabled).</para>
            <para><c>verify_host</c> will check the SSL identity of the host if set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.RequestRaw(Godot.HTTPClient.Method,System.String,System.String[],System.Byte[])">
            <summary>
            <para>Sends a raw request to the connected host. The URL parameter is just the part after the host, so for <c>http://somehost.com/index.php</c>, it is <c>index.php</c>.</para>
            <para>Headers are HTTP request headers. For available HTTP methods, see <see cref="T:Godot.HTTPClient.Method"/>.</para>
            <para>Sends the body data raw, as a byte array and does not encode it in any way.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)">
            <summary>
            <para>Sends a request to the connected host. The URL parameter is just the part after the host, so for <c>http://somehost.com/index.php</c>, it is <c>index.php</c>.</para>
            <para>Headers are HTTP request headers. For available HTTP methods, see <see cref="T:Godot.HTTPClient.Method"/>.</para>
            <para>To create a POST request with query strings to push to the server, do:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var fields = {"username" : "user", "password" : "pass"}</para>
            <para>var query_string = http_client.query_string_from_dict(fields)</para>
            <para>var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(query_string.length())]</para>
            <para>var result = http_client.request(http_client.METHOD_POST, "index.php", headers, query_string)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };</para>
            <para>string queryString = new HTTPClient().QueryStringFromDict(fields);</para>
            <para>string[] headers = {"Content-Type: application/x-www-form-urlencoded", "Content-Length: " + queryString.Length};</para>
            <para>var result = new HTTPClient().Request(HTTPClient.Method.Post, "index.php", headers, queryString);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: The <c>request_data</c> parameter is ignored if <c>method</c> is . This is because GET methods can't contain request data. As a workaround, you can pass request data as a query string in the URL. See <c>String.http_escape</c> for an example.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Close">
            <summary>
            <para>Closes the current connection, allowing reuse of this <see cref="T:Godot.HTTPClient"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.HasResponse">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.HTTPClient"/> has a response available.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.IsResponseChunked">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.HTTPClient"/> has a response that is chunked.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseCode">
            <summary>
            <para>Returns the response's HTTP status code.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeaders">
            <summary>
            <para>Returns the response headers.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeadersAsDictionary">
            <summary>
            <para>Returns all response headers as a Dictionary of structure <c>{ "key": "value1; value2" }</c> where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where "; " is used as separator.</para>
            <para>Example:</para>
            <para><code>
            {
                "content-length": 12,
                "Content-Type": "application/json; charset=UTF-8",
            }
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseBodyLength">
            <summary>
            <para>Returns the response's body length.</para>
            <para>Note: Some Web servers may not send a body length. In this case, the value returned will be <c>-1</c>. If using chunked transfer encoding, the body length will also be <c>-1</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ReadResponseBodyChunk">
            <summary>
            <para>Reads one chunk from the response.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetStatus">
            <summary>
            <para>Returns a <see cref="T:Godot.HTTPClient.Status"/> constant. Need to call <see cref="M:Godot.HTTPClient.Poll"/> in order to get status updates.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Poll">
            <summary>
            <para>This needs to be called in order to have any request processed. Check results with <see cref="M:Godot.HTTPClient.GetStatus"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.QueryStringFromDict(Godot.Collections.Dictionary)">
            <summary>
            <para>Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var fields = {"username": "user", "password": "pass"}</para>
            <para>var query_string = http_client.query_string_from_dict(fields)</para>
            <para># Returns "username=user&amp;password=pass"</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };</para>
            <para>string queryString = new HTTPClient().QueryStringFromDict(fields);</para>
            <para>// Returns "username=user&amp;password=pass"</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Furthermore, if a key has a <c>null</c> value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}</para>
            <para>var query_string = http_client.query_string_from_dict(fields)</para>
            <para># Returns "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var fields = new Godot.Collections.Dictionary{{"single", 123}, {"notValued", null}, {"multiple", new Godot.Collections.Array{22, 33, 44}}};</para>
            <para>string queryString = new HTTPClient().QueryStringFromDict(fields);</para>
            <para>// Returns "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.HTTPRequest">
            <summary>
            <para>A node with the ability to send HTTP requests. Uses <see cref="T:Godot.HTTPClient"/> internally.</para>
            <para>Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP.</para>
            <para>Example of contacting a REST API and printing one of its returned fields:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _ready():</para>
            <para>    # Create an HTTP request node and connect its completion signal.</para>
            <para>    var http_request = HTTPRequest.new()</para>
            <para>    add_child(http_request)</para>
            <para>    http_request.connect("request_completed", self, "_http_request_completed")</para>
            <para></para>
            <para>    # Perform a GET request. The URL below returns JSON as of writing.</para>
            <para>    var error = http_request.request("https://httpbin.org/get")</para>
            <para>    if error != OK:</para>
            <para>        push_error("An error occurred in the HTTP request.")</para>
            <para></para>
            <para>    # Perform a POST request. The URL below returns JSON as of writing.</para>
            <para>    # Note: Don't make simultaneous requests using a single HTTPRequest node.</para>
            <para>    # The snippet below is provided for reference only.</para>
            <para>    var body = {"name": "Godette"}</para>
            <para>    error = http_request.request("https://httpbin.org/post", [], true, HTTPClient.METHOD_POST, body)</para>
            <para>    if error != OK:</para>
            <para>        push_error("An error occurred in the HTTP request.")</para>
            <para></para>
            <para></para>
            <para># Called when the HTTP request is completed.</para>
            <para>func _http_request_completed(result, response_code, headers, body):</para>
            <para>    var response = parse_json(body.get_string_from_utf8())</para>
            <para></para>
            <para>    # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).</para>
            <para>    print(response.headers["User-Agent"])</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    // Create an HTTP request node and connect its completion signal.</para>
            <para>    var httpRequest = new HTTPRequest();</para>
            <para>    AddChild(httpRequest);</para>
            <para>    httpRequest.Connect("request_completed", this, nameof(HttpRequestCompleted));</para>
            <para></para>
            <para>    // Perform a GET request. The URL below returns JSON as of writing.</para>
            <para>    Error error = httpRequest.Request("https://httpbin.org/get");</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.PushError("An error occurred in the HTTP request.");</para>
            <para>    }</para>
            <para></para>
            <para>    // Perform a POST request. The URL below returns JSON as of writing.</para>
            <para>    // Note: Don't make simultaneous requests using a single HTTPRequest node.</para>
            <para>    // The snippet below is provided for reference only.</para>
            <para>    string[] body = { "name", "Godette" };</para>
            <para>    // GDScript to_json is non existent, so we use JSON.Print() here.</para>
            <para>    error = httpRequest.Request("https://httpbin.org/post", null, true, HTTPClient.Method.Post, JSON.Print(body));</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.PushError("An error occurred in the HTTP request.");</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>// Called when the HTTP request is completed.</para>
            <para>private void HttpRequestCompleted(int result, int response_code, string[] headers, byte[] body)</para>
            <para>{</para>
            <para>    // GDScript parse_json is non existent so we have to use JSON.parse, which has a slightly different syntax.</para>
            <para>    var response = JSON.Parse(body.GetStringFromUTF8()).Result as Godot.Collections.Dictionary;</para>
            <para>    // Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).</para>
            <para>    GD.Print((response["headers"] as Godot.Collections.Dictionary)["User-Agent"]);</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Example of loading and displaying an image using HTTPRequest:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _ready():</para>
            <para>    # Create an HTTP request node and connect its completion signal.</para>
            <para>    var http_request = HTTPRequest.new()</para>
            <para>    add_child(http_request)</para>
            <para>    http_request.connect("request_completed", self, "_http_request_completed")</para>
            <para></para>
            <para>    # Perform the HTTP request. The URL below returns a PNG image as of writing.</para>
            <para>    var error = http_request.request("https://via.placeholder.com/512")</para>
            <para>    if error != OK:</para>
            <para>        push_error("An error occurred in the HTTP request.")</para>
            <para></para>
            <para></para>
            <para># Called when the HTTP request is completed.</para>
            <para>func _http_request_completed(result, response_code, headers, body):</para>
            <para>    if result != HTTPRequest.RESULT_SUCCESS:</para>
            <para>        push_error("Image couldn't be downloaded. Try a different image.")</para>
            <para></para>
            <para>    var image = Image.new()</para>
            <para>    var error = image.load_png_from_buffer(body)</para>
            <para>    if error != OK:</para>
            <para>        push_error("Couldn't load the image.")</para>
            <para></para>
            <para>    var texture = ImageTexture.new()</para>
            <para>    texture.create_from_image(image)</para>
            <para></para>
            <para>    # Display the image in a TextureRect node.</para>
            <para>    var texture_rect = TextureRect.new()</para>
            <para>    add_child(texture_rect)</para>
            <para>    texture_rect.texture = texture</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    // Create an HTTP request node and connect its completion signal.</para>
            <para>    var httpRequest = new HTTPRequest();</para>
            <para>    AddChild(httpRequest);</para>
            <para>    httpRequest.Connect("request_completed", this, nameof(HttpRequestCompleted));</para>
            <para></para>
            <para>    // Perform the HTTP request. The URL below returns a PNG image as of writing.</para>
            <para>    Error error = httpRequest.Request("https://via.placeholder.com/512");</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.PushError("An error occurred in the HTTP request.");</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>// Called when the HTTP request is completed.</para>
            <para>private void HttpRequestCompleted(int result, int response_code, string[] headers, byte[] body)</para>
            <para>{</para>
            <para>    if (result != (int)HTTPRequest.Result.Success)</para>
            <para>    {</para>
            <para>        GD.PushError("Image couldn't be downloaded. Try a different image.");</para>
            <para>    }</para>
            <para>    var image = new Image();</para>
            <para>    Error error = image.LoadPngFromBuffer(body);</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.PushError("Couldn't load the image.");</para>
            <para>    }</para>
            <para></para>
            <para>    var texture = new ImageTexture();</para>
            <para>    texture.CreateFromImage(image);</para>
            <para></para>
            <para>    // Display the image in a TextureRect node.</para>
            <para>    var textureRect = new TextureRect();</para>
            <para>    AddChild(textureRect);</para>
            <para>    textureRect.Texture = texture;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para></para>
            <para>Gzipped response bodies: HTTPRequest will automatically handle decompression of response bodies. A <c>Accept-Encoding</c> header will be automatically added to each of your requests, unless one is already specified. Any response with a <c>Content-Encoding: gzip</c> header will automatically be decompressed and delivered to you as uncompressed bytes.</para>
            <para>Note: When performing HTTP requests from a project exported to HTML5, keep in mind the remote server may not allow requests from foreign origins due to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a>. If you host the server in question, you should modify its backend to allow requests from foreign origins by adding the <c>Access-Control-Allow-Origin: *</c> HTTP header.</para>
            <para>Note: SSL/TLS support is currently limited to TLS 1.0, TLS 1.1, and TLS 1.2. Attempting to connect to a TLS 1.3-only server will return an error.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.Success">
            <summary>
            <para>Request successful.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.CantConnect">
            <summary>
            <para>Request failed while connecting.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.CantResolve">
            <summary>
            <para>Request failed while resolving.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.ConnectionError">
            <summary>
            <para>Request failed due to connection (read/write) error.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.SslHandshakeError">
            <summary>
            <para>Request failed on SSL handshake.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.NoResponse">
            <summary>
            <para>Request does not have a response (yet).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.BodySizeLimitExceeded">
            <summary>
            <para>Request exceeded its maximum size limit, see <see cref="P:Godot.HTTPRequest.BodySizeLimit"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.RequestFailed">
            <summary>
            <para>Request failed (currently unused).</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.DownloadFileCantOpen">
            <summary>
            <para>HTTPRequest couldn't open the download file.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.DownloadFileWriteError">
            <summary>
            <para>HTTPRequest couldn't write to the download file.</para>
            </summary>
        </member>
        <member name="F:Godot.HTTPRequest.Result.RedirectLimitReached">
            <summary>
            <para>Request reached its maximum redirect limit, see <see cref="P:Godot.HTTPRequest.MaxRedirects"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.DownloadFile">
            <summary>
            <para>The file to download into. Will output any received file into it.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.DownloadChunkSize">
            <summary>
            <para>The size of the buffer used and maximum bytes to read per iteration. See <see cref="P:Godot.HTTPClient.ReadChunkSize"/>.</para>
            <para>Set this to a lower value (e.g. 4096 for 4 KiB) when downloading small files to decrease memory usage at the cost of download speeds.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.UseThreads">
            <summary>
            <para>If <c>true</c>, multithreading is used to improve performance.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.AcceptGzip">
            <summary>
            <para>If <c>true</c>, this header will be added to each request: <c>Accept-Encoding: gzip, deflate</c> telling servers that it's okay to compress response bodies.</para>
            <para>Any Response body declaring a <c>Content-Encoding</c> of either <c>gzip</c> or <c>deflate</c> will then be automatically decompressed, and the uncompressed bytes will be delivered via <c>request_completed</c>.</para>
            <para>If the user has specified their own <c>Accept-Encoding</c> header, then no header will be added regaurdless of <c>accept_gzip</c>.</para>
            <para>If <c>false</c> no header will be added, and no decompression will be performed on response bodies. The raw bytes of the response body will be returned via <c>request_completed</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.BodySizeLimit">
            <summary>
            <para>Maximum allowed size for response bodies. If the response body is compressed, this will be used as the maximum allowed size for the decompressed body.</para>
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.MaxRedirects">
            <summary>
            <para>Maximum number of allowed redirects.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.Request(System.String,System.String[],System.Boolean,Godot.HTTPClient.Method,System.String)">
            <summary>
            <para>Creates request on the underlying <see cref="T:Godot.HTTPClient"/>. If there is no configuration errors, it tries to connect using <see cref="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)"/> and passes parameters onto <see cref="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)"/>.</para>
            <para>Returns  if request is successfully created. (Does not imply that the server has responded),  if not in the tree,  if still processing previous request,  if given string is not a valid URL format, or  if not using thread and the <see cref="T:Godot.HTTPClient"/> cannot connect to host.</para>
            <para>Note: The <c>request_data</c> parameter is ignored if <c>method</c> is . This is because GET methods can't contain request data. As a workaround, you can pass request data as a query string in the URL. See <c>String.http_escape</c> for an example.</para>
            </summary>
            <param name="customHeaders">If the parameter is null, then the default value is new string[] {}</param>
        </member>
        <member name="M:Godot.HTTPRequest.RequestRaw(System.String,System.String[],System.Boolean,Godot.HTTPClient.Method,System.Byte[])">
            <summary>
            <para>Creates request on the underlying <see cref="T:Godot.HTTPClient"/> using a raw array of bytes for the request body. If there is no configuration errors, it tries to connect using <see cref="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)"/> and passes parameters onto <see cref="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)"/>.</para>
            <para>Returns  if request is successfully created. (Does not imply that the server has responded),  if not in the tree,  if still processing previous request,  if given string is not a valid URL format, or  if not using thread and the <see cref="T:Godot.HTTPClient"/> cannot connect to host.</para>
            </summary>
            <param name="customHeaders">If the parameter is null, then the default value is new string[] {}</param>
            <param name="requestDataRaw">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.HTTPRequest.CancelRequest">
            <summary>
            <para>Cancels the current request.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetHttpClientStatus">
            <summary>
            <para>Returns the current status of the underlying <see cref="T:Godot.HTTPClient"/>. See <see cref="T:Godot.HTTPClient.Status"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetDownloadedBytes">
            <summary>
            <para>Returns the amount of bytes this HTTPRequest downloaded.</para>
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetBodySize">
            <summary>
            <para>Returns the response body length.</para>
            <para>Note: Some Web servers may not send a body length. In this case, the value returned will be <c>-1</c>. If using chunked transfer encoding, the body length will also be <c>-1</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.HTTPRequest.RequestCompletedHandler">
            <summary>
            <para>Emitted when a request is completed.</para>
            </summary>
        </member>
        <member name="T:Godot.HashingContext">
            <summary>
            <para>The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. This is useful for example when computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).</para>
            <para>The <see cref="T:Godot.HashingContext.HashType"/> enum shows the supported hashing algorithms.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>const CHUNK_SIZE = 102</para>
            <para></para>
            <para>func hash_file(path):</para>
            <para>    var ctx = HashingContext.new()</para>
            <para>    var file = File.new()</para>
            <para>    # Start a SHA-256 context.</para>
            <para>    ctx.start(HashingContext.HASH_SHA256)</para>
            <para>    # Check that file exists.</para>
            <para>    if not file.file_exists(path):</para>
            <para>        return</para>
            <para>    # Open the file to hash.</para>
            <para>    file.open(path, File.READ)</para>
            <para>    # Update the context after reading each chunk.</para>
            <para>    while not file.eof_reached():</para>
            <para>        ctx.update(file.get_buffer(CHUNK_SIZE))</para>
            <para>    # Get the computed hash.</para>
            <para>    var res = ctx.finish()</para>
            <para>    # Print the result as hex string and array.</para>
            <para>    printt(res.hex_encode(), Array(res))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public const int ChunkSize = 1024;</para>
            <para></para>
            <para>public void HashFile(string path)</para>
            <para>{</para>
            <para>    var ctx = new HashingContext();</para>
            <para>    var file = new File();</para>
            <para>    // Start a SHA-256 context.</para>
            <para>    ctx.Start(HashingContext.HashType.Sha256);</para>
            <para>    // Check that file exists.</para>
            <para>    if (!file.FileExists(path))</para>
            <para>    {</para>
            <para>        return;</para>
            <para>    }</para>
            <para>    // Open the file to hash.</para>
            <para>    file.Open(path, File.ModeFlags.Read);</para>
            <para>    // Update the context after reading each chunk.</para>
            <para>    while (!file.EofReached())</para>
            <para>    {</para>
            <para>        ctx.Update(file.GetBuffer(ChunkSize));</para>
            <para>    }</para>
            <para>    // Get the computed hash.</para>
            <para>    byte[] res = ctx.Finish();</para>
            <para>    // Print the result as hex string and array.</para>
            <para></para>
            <para>    GD.PrintT(res.HexEncode(), res);</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="F:Godot.HashingContext.HashType.Md5">
            <summary>
            <para>Hashing algorithm: MD5.</para>
            </summary>
        </member>
        <member name="F:Godot.HashingContext.HashType.Sha1">
            <summary>
            <para>Hashing algorithm: SHA-1.</para>
            </summary>
        </member>
        <member name="F:Godot.HashingContext.HashType.Sha256">
            <summary>
            <para>Hashing algorithm: SHA-256.</para>
            </summary>
        </member>
        <member name="M:Godot.HashingContext.Start(Godot.HashingContext.HashType)">
            <summary>
            <para>Starts a new hash computation of the given <c>type</c> (e.g.  to start computation of a SHA-256).</para>
            </summary>
        </member>
        <member name="M:Godot.HashingContext.Update(System.Byte[])">
            <summary>
            <para>Updates the computation with the given <c>chunk</c> of data.</para>
            </summary>
        </member>
        <member name="M:Godot.HashingContext.Finish">
            <summary>
            <para>Closes the current context, and return the computed hash.</para>
            </summary>
        </member>
        <member name="T:Godot.HeightMapShape3D">
            <summary>
            <para>Height map shape resource, which can be added to a <see cref="T:Godot.PhysicsBody3D"/> or <see cref="T:Godot.Area3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape3D.MapWidth">
            <summary>
            <para>Width of the height map data. Changing this will resize the <see cref="P:Godot.HeightMapShape3D.MapData"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape3D.MapDepth">
            <summary>
            <para>Depth of the height map data. Changing this will resize the <see cref="P:Godot.HeightMapShape3D.MapData"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.HeightMapShape3D.MapData">
            <summary>
            <para>Height map data, pool array must be of <see cref="P:Godot.HeightMapShape3D.MapWidth"/> * <see cref="P:Godot.HeightMapShape3D.MapDepth"/> size.</para>
            </summary>
        </member>
        <member name="T:Godot.HingeJoint3D">
            <summary>
            <para>A HingeJoint3D normally uses the Z axis of body A as the hinge axis, another axis can be specified when adding it manually though. See also <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.Bias">
            <summary>
            <para>The speed with which the two bodies get pulled together when they move in different directions.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.LimitUpper">
            <summary>
            <para>The maximum rotation. Only active if  is <c>true</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.LimitLower">
            <summary>
            <para>The minimum rotation. Only active if  is <c>true</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.LimitBias">
            <summary>
            <para>The speed with which the rotation across the axis perpendicular to the hinge gets corrected.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.LimitRelaxation">
            <summary>
            <para>The lower this value, the more the rotation gets slowed down.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.MotorTargetVelocity">
            <summary>
            <para>Target speed for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.MotorMaxImpulse">
            <summary>
            <para>Maximum acceleration for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Param.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.HingeJoint3D.Param"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Flag.UseLimit">
            <summary>
            <para>If <c>true</c>, the hinges maximum and minimum rotation, defined by  and  has effects.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Flag.EnableMotor">
            <summary>
            <para>When activated, a motor turns the hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.HingeJoint3D.Flag.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.HingeJoint3D.Flag"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.HingeJoint3D.SetParam(Godot.HingeJoint3D.Param,System.Single)">
            <summary>
            <para>Sets the value of the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.HingeJoint3D.GetParam(Godot.HingeJoint3D.Param)">
            <summary>
            <para>Returns the value of the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.HingeJoint3D.SetFlag(Godot.HingeJoint3D.Flag,System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables the specified flag.</para>
            </summary>
        </member>
        <member name="M:Godot.HingeJoint3D.GetFlag(Godot.HingeJoint3D.Flag)">
            <summary>
            <para>Returns the value of the specified flag.</para>
            </summary>
        </member>
        <member name="T:Godot.IP">
            <summary>
            <para>IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see <see cref="T:Godot.StreamPeerTCP"/> and <see cref="T:Godot.TCP_Server"/>). IP provides DNS hostname resolution support, both blocking and threaded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverMaxQueries">
            <summary>
            <para>Maximum number of concurrent DNS resolver queries allowed,  is returned if exceeded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverInvalidId">
            <summary>
            <para>Invalid ID constant. Returned if  is exceeded.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.None">
            <summary>
            <para>DNS hostname resolver status: No status.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Waiting">
            <summary>
            <para>DNS hostname resolver status: Waiting.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Done">
            <summary>
            <para>DNS hostname resolver status: Done.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.ResolverStatus.Error">
            <summary>
            <para>DNS hostname resolver status: Error.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.None">
            <summary>
            <para>Address type: None.</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Ipv4">
            <summary>
            <para>Address type: Internet protocol version 4 (IPv4).</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Ipv6">
            <summary>
            <para>Address type: Internet protocol version 6 (IPv6).</para>
            </summary>
        </member>
        <member name="F:Godot.IP.Type.Any">
            <summary>
            <para>Address type: Any.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostname(System.String,Godot.IP.Type)">
            <summary>
            <para>Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the <see cref="T:Godot.IP.Type"/> constant given as <c>ip_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostnameQueueItem(System.String,Godot.IP.Type)">
            <summary>
            <para>Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the <see cref="T:Godot.IP.Type"/> constant given as <c>ip_type</c>. Returns the queue ID if successful, or  on error.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemStatus(System.Int32)">
            <summary>
            <para>Returns a queued hostname's status as a <see cref="T:Godot.IP.ResolverStatus"/> constant, given its queue <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemAddress(System.Int32)">
            <summary>
            <para>Returns a queued hostname's IP address, given its queue <c>id</c>. Returns an empty string on error or if resolution hasn't happened yet (see <see cref="M:Godot.IP.GetResolveItemStatus(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.IP.EraseResolveItem(System.Int32)">
            <summary>
            <para>Removes a given item <c>id</c> from the queue. This should be used to free a queue after it has completed to enable more queries to happen.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetLocalAddresses">
            <summary>
            <para>Returns all of the user's current IPv4 and IPv6 addresses as an array.</para>
            </summary>
        </member>
        <member name="M:Godot.IP.GetLocalInterfaces">
            <summary>
            <para>Returns all network adapters as an array.</para>
            <para>Each adapter is a dictionary of the form:</para>
            <para><code>
            {
                "index": "1", # Interface index.
                "name": "eth0", # Interface name.
                "friendly": "Ethernet One", # A friendly name (might be empty).
                "addresses": ["192.168.1.101"], # An array of IP addresses associated to this interface.
            }
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.IP.ClearCache(System.String)">
            <summary>
            <para>Removes all of a <c>hostname</c>'s cached references. If no <c>hostname</c> is given, all cached IP addresses are removed.</para>
            </summary>
        </member>
        <member name="T:Godot.Image">
            <summary>
            <para>Native image datatype. Contains image data which can be converted to an <see cref="T:Godot.ImageTexture"/> and provides commonly used image processing methods. The maximum width and height for an <see cref="T:Godot.Image"/> are  and .</para>
            <para>An <see cref="T:Godot.Image"/> cannot be assigned to a <c>texture</c> property of an object directly (such as <see cref="T:Godot.Sprite2D"/>), and has to be converted manually to an <see cref="T:Godot.ImageTexture"/> first.</para>
            <para>Note: The maximum image size is 16384×16384 pixels due to graphics hardware limitations. Larger images may fail to import.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.MaxWidth">
            <summary>
            <para>The maximal width allowed for <see cref="T:Godot.Image"/> resources.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.MaxHeight">
            <summary>
            <para>The maximal height allowed for <see cref="T:Godot.Image"/> resources.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.None">
            <summary>
            <para>Image does not have alpha.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.Bit">
            <summary>
            <para>Image stores alpha in a single bit.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.AlphaMode.Blend">
            <summary>
            <para>Image uses alpha.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Generic">
            <summary>
            <para>Source texture (before compression) is a regular texture. Default for all textures.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Srgb">
            <summary>
            <para>Source texture (before compression) is in sRGB space.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressSource.Normal">
            <summary>
            <para>Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels).</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Nearest">
            <summary>
            <para>Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Bilinear">
            <summary>
            <para>Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than , but it results in lower quality.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Cubic">
            <summary>
            <para>Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to , at the cost of being slower.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Trilinear">
            <summary>
            <para>Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.</para>
            <para>It's slower than , but produces higher-quality results with much less aliasing artifacts.</para>
            <para>If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.</para>
            <para>Note: If you intend to scale multiple copies of the original image, it's better to call <see cref="M:Godot.Image.GenerateMipmaps(System.Boolean)"/>] on it in advance, to avoid wasting processing power in generating them again and again.</para>
            <para>On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Interpolation.Lanczos">
            <summary>
            <para>Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscalng images.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.S3tc">
            <summary>
            <para>Use S3TC compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Pvrtc14">
            <summary>
            <para>Use PVRTC1 4-bpp compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Etc">
            <summary>
            <para>Use ETC compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Etc2">
            <summary>
            <para>Use ETC2 compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.CompressMode.Bptc">
            <summary>
            <para>Use BPTC compression.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.L8">
            <summary>
            <para>Texture format with a single 8-bit depth representing luminance.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.La8">
            <summary>
            <para>OpenGL texture format with two values, luminance and alpha each stored with 8 bits.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.R8">
            <summary>
            <para>OpenGL texture format <c>RED</c> with a single component and a bitdepth of 8.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rg8">
            <summary>
            <para>OpenGL texture format <c>RG</c> with two components and a bitdepth of 8 for each.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgb8">
            <summary>
            <para>OpenGL texture format <c>RGB</c> with three components, each with a bitdepth of 8.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgba8">
            <summary>
            <para>OpenGL texture format <c>RGBA</c> with four components, each with a bitdepth of 8.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgba4444">
            <summary>
            <para>OpenGL texture format <c>RGBA</c> with four components, each with a bitdepth of 4.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rf">
            <summary>
            <para>OpenGL texture format <c>GL_R32F</c> where there's one component, a 32-bit floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgf">
            <summary>
            <para>OpenGL texture format <c>GL_RG32F</c> where there are two components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbf">
            <summary>
            <para>OpenGL texture format <c>GL_RGB32F</c> where there are three components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbaf">
            <summary>
            <para>OpenGL texture format <c>GL_RGBA32F</c> where there are four components, each a 32-bit floating-point values.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rh">
            <summary>
            <para>OpenGL texture format <c>GL_R32F</c> where there's one component, a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgh">
            <summary>
            <para>OpenGL texture format <c>GL_RG32F</c> where there are two components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbh">
            <summary>
            <para>OpenGL texture format <c>GL_RGB32F</c> where there are three components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbah">
            <summary>
            <para>OpenGL texture format <c>GL_RGBA32F</c> where there are four components, each a 16-bit "half-precision" floating-point value.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Rgbe9995">
            <summary>
            <para>A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt1">
            <summary>
            <para>The <a href="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</a> texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt3">
            <summary>
            <para>The <a href="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</a> texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Dxt5">
            <summary>
            <para>The <a href="https://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC</a> texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.RgtcR">
            <summary>
            <para>Texture format that uses <a href="https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression">Red Green Texture Compression</a>, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.RgtcRg">
            <summary>
            <para>Texture format that uses <a href="https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression">Red Green Texture Compression</a>, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgba">
            <summary>
            <para>Texture format that uses <a href="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC</a> compression with unsigned normalized RGBA components.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgbf">
            <summary>
            <para>Texture format that uses <a href="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC</a> compression with signed floating-point RGB components.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.BptcRgbfu">
            <summary>
            <para>Texture format that uses <a href="https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression">BPTC</a> compression with unsigned floating-point RGB components.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc12">
            <summary>
            <para>Texture format used on PowerVR-supported mobile platforms, uses 2-bit color depth with no alpha. More information can be found <a href="https://en.wikipedia.org/wiki/PVRTC">here</a>.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc12a">
            <summary>
            <para>Same as , but with an alpha component.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc14">
            <summary>
            <para>Texture format used on PowerVR-supported mobile platforms, uses 4-bit color depth with no alpha. More information can be found <a href="https://en.wikipedia.org/wiki/PVRTC">here</a>.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Pvrtc14a">
            <summary>
            <para>Same as , but with an alpha component.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1">Ericsson Texture Compression format 1</a>, also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2R11">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>R11_EAC</c> variant), which provides one channel of unsigned data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2R11s">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>SIGNED_R11_EAC</c> variant), which provides one channel of signed data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rg11">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>RG11_EAC</c> variant), which provides two channels of unsigned data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rg11s">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>SIGNED_RG11_EAC</c> variant), which provides two channels of signed data.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgb8">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>RGB8</c> variant), which is a follow-up of ETC1 and compresses RGB888 data.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgba8">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>RGBA8</c>variant), which compresses RGBA8888 data with full alpha support.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Etc2Rgb8a1">
            <summary>
            <para><a href="https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC">Ericsson Texture Compression format 2</a> (<c>RGB8_PUNCHTHROUGH_ALPHA1</c> variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.</para>
            <para>Note: When creating an <see cref="T:Godot.ImageTexture"/>, an sRGB to linear color space conversion is performed.</para>
            </summary>
        </member>
        <member name="F:Godot.Image.Format.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Image.Format"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Image.Data">
            <summary>
            <para>Holds all of the image's color data in a given format. See <see cref="T:Godot.Image.Format"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetWidth">
            <summary>
            <para>Returns the image's width.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetHeight">
            <summary>
            <para>Returns the image's height.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetSize">
            <summary>
            <para>Returns the image's size (width and height).</para>
            </summary>
        </member>
        <member name="M:Godot.Image.HasMipmaps">
            <summary>
            <para>Returns <c>true</c> if the image has generated mipmaps.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetFormat">
            <summary>
            <para>Returns the image's format. See <see cref="T:Godot.Image.Format"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetData">
            <summary>
            <para>Returns a copy of the image's raw data.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Convert(Godot.Image.Format)">
            <summary>
            <para>Converts the image's format. See <see cref="T:Godot.Image.Format"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetMipmapOffset(System.Int32)">
            <summary>
            <para>Returns the offset where the image's mipmap with index <c>mipmap</c> is stored in the <c>data</c> dictionary.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ResizeToPo2(System.Boolean,Godot.Image.Interpolation)">
            <summary>
            <para>Resizes the image to the nearest power of 2 for the width and height. If <c>square</c> is <c>true</c> then set width and height to be the same. New pixels are calculated using the <c>interpolation</c> mode defined via <see cref="T:Godot.Image.Interpolation"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Resize(System.Int32,System.Int32,Godot.Image.Interpolation)">
            <summary>
            <para>Resizes the image to the given <c>width</c> and <c>height</c>. New pixels are calculated using the <c>interpolation</c> mode defined via <see cref="T:Godot.Image.Interpolation"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ShrinkX2">
            <summary>
            <para>Shrinks the image by a factor of 2.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Crop(System.Int32,System.Int32)">
            <summary>
            <para>Crops the image to the given <c>width</c> and <c>height</c>. If the specified size is larger than the current size, the extra area is filled with black pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FlipX">
            <summary>
            <para>Flips the image horizontally.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FlipY">
            <summary>
            <para>Flips the image vertically.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GenerateMipmaps(System.Boolean)">
            <summary>
            <para>Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.ClearMipmaps">
            <summary>
            <para>Removes the image's mipmaps.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Create(System.Int32,System.Int32,System.Boolean,Godot.Image.Format)">
            <summary>
            <para>Creates an empty image of given size and format. See <see cref="T:Godot.Image.Format"/> constants. If <c>use_mipmaps</c> is <c>true</c> then generate mipmaps for this image. See the <see cref="M:Godot.Image.GenerateMipmaps(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.CreateFromData(System.Int32,System.Int32,System.Boolean,Godot.Image.Format,System.Byte[])">
            <summary>
            <para>Creates a new image of given size and format. See <see cref="T:Godot.Image.Format"/> constants. Fills the image with the given raw data. If <c>use_mipmaps</c> is <c>true</c> then loads mipmaps for this image from <c>data</c>. See <see cref="M:Godot.Image.GenerateMipmaps(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsEmpty">
            <summary>
            <para>Returns <c>true</c> if the image has no data.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Load(System.String)">
            <summary>
            <para>Loads an image from file <c>path</c>. See <a href="https://docs.godotengine.org/en/latest/getting_started/workflow/assets/importing_images.html#supported-image-formats">Supported image formats</a> for a list of supported image formats and limitations.</para>
            <para>Warning: This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the <c>user://</c> directory, and may not work in exported projects.</para>
            <para>See also <see cref="T:Godot.ImageTexture"/> description for usage examples.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SavePng(System.String)">
            <summary>
            <para>Saves the image as a PNG file to <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SaveExr(System.String,System.Boolean)">
            <summary>
            <para>Saves the image as an EXR file to <c>path</c>. If <c>grayscale</c> is <c>true</c> and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return  if Godot was compiled without the TinyEXR module.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.DetectAlpha">
            <summary>
            <para>Returns  if the image has data for alpha values. Returns  if all the alpha values are stored in a single bit. Returns  if no data for alpha values is found.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsInvisible">
            <summary>
            <para>Returns <c>true</c> if all the image's pixels have an alpha value of 0. Returns <c>false</c> if any pixel has an alpha value higher than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Compress(Godot.Image.CompressMode,Godot.Image.CompressSource,System.Single)">
            <summary>
            <para>Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See <see cref="T:Godot.Image.CompressMode"/> and <see cref="T:Godot.Image.CompressSource"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Decompress">
            <summary>
            <para>Decompresses the image if it is compressed. Returns an error if decompress function is not available.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.IsCompressed">
            <summary>
            <para>Returns <c>true</c> if the image is compressed.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.FixAlphaEdges">
            <summary>
            <para>Blends low-alpha pixels with nearby pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.PremultiplyAlpha">
            <summary>
            <para>Multiplies color values with alpha values. Resulting color values for a pixel are <c>(color * alpha)/256</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SrgbToLinear">
            <summary>
            <para>Converts the raw data from the sRGB colorspace to a linear scale.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.NormalMapToXy">
            <summary>
            <para>Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normal map. A normal map can add lots of detail to a 3D surface without increasing the polygon count.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.RgbeToSrgb">
            <summary>
            <para>Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BumpMapToNormalMap(System.Single)">
            <summary>
            <para>Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Copies <c>src_rect</c> from <c>src</c> image to this image at coordinates <c>dst</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Blits <c>src_rect</c> area from <c>src</c> image to this image at the coordinates given by <c>dst</c>. <c>src</c> pixel is copied onto <c>dst</c> if the corresponding <c>mask</c> pixel's alpha value is not 0. <c>src</c> image and <c>mask</c> image must have the same size (width and height) but they can have different formats.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Alpha-blends <c>src_rect</c> from <c>src</c> image to this image at coordinates <c>dest</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            <para>Alpha-blends <c>src_rect</c> from <c>src</c> image to this image using <c>mask</c> image at coordinates <c>dst</c>. Alpha channels are required for both <c>src</c> and <c>mask</c>. <c>dst</c> pixels and <c>src</c> pixels will blend if the corresponding mask pixel's alpha value is not 0. <c>src</c> image and <c>mask</c> image must have the same size (width and height) but they can have different formats.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.Fill(Godot.Color)">
            <summary>
            <para>Fills the image with a given <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetUsedRect">
            <summary>
            <para>Returns a <see cref="T:Godot.Rect2"/> enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetRect(Godot.Rect2)">
            <summary>
            <para>Returns a new image that is a copy of the image's area specified with <c>rect</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.CopyFrom(Godot.Image)">
            <summary>
            <para>Copies <c>src</c> image to this image.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetPixelv(Godot.Vector2i)">
            <summary>
            <para>Returns the color of the pixel at <c>point</c>.</para>
            <para>This is the same as <see cref="M:Godot.Image.GetPixel(System.Int32,System.Int32)"/>, but with a <see cref="T:Godot.Vector2i"/> argument instead of two integer arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            <para>Returns the color of the pixel at <c>(x, y)</c>.</para>
            <para>This is the same as <see cref="M:Godot.Image.GetPixelv(Godot.Vector2i)"/>, but with two integer arguments instead of a <see cref="T:Godot.Vector2i"/> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SetPixelv(Godot.Vector2i,Godot.Color)">
            <summary>
            <para>Sets the <see cref="T:Godot.Color"/> of the pixel at <c>point</c> to <c>color</c>. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var img_width = 10</para>
            <para>var img_height = 5</para>
            <para>var img = Image.new()</para>
            <para>img.create(img_width, img_height, false, Image.FORMAT_RGBA8)</para>
            <para></para>
            <para>img.set_pixelv(Vector2i(1, 2), Color.red) # Sets the color at (1, 2) to red.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>int imgWidth = 10;</para>
            <para>int imgHeight = 5;</para>
            <para>var img = new Image();</para>
            <para>img.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);</para>
            <para></para>
            <para>img.SetPixelv(new Vector2i(1, 2), Colors.Red); // Sets the color at (1, 2) to red.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>This is the same as <see cref="M:Godot.Image.SetPixel(System.Int32,System.Int32,Godot.Color)"/>, but with a <see cref="T:Godot.Vector2i"/> argument instead of two integer arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.SetPixel(System.Int32,System.Int32,Godot.Color)">
            <summary>
            <para>Sets the <see cref="T:Godot.Color"/> of the pixel at <c>(x, y)</c> to <c>color</c>. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var img_width = 10</para>
            <para>var img_height = 5</para>
            <para>var img = Image.new()</para>
            <para>img.create(img_width, img_height, false, Image.FORMAT_RGBA8)</para>
            <para></para>
            <para>img.set_pixel(1, 2, Color.red) # Sets the color at (1, 2) to red.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>int imgWidth = 10;</para>
            <para>int imgHeight = 5;</para>
            <para>var img = new Image();</para>
            <para>img.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);</para>
            <para></para>
            <para>img.SetPixel(1, 2, Colors.Red); // Sets the color at (1, 2) to red.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>This is the same as <see cref="M:Godot.Image.SetPixelv(Godot.Vector2i,Godot.Color)"/>, but with a two integer arguments instead of a <see cref="T:Godot.Vector2i"/> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadPngFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a PNG file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadJpgFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a JPEG file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadWebpFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a WebP file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadTgaFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a TGA file.</para>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadBmpFromBuffer(System.Byte[])">
            <summary>
            <para>Loads an image from the binary contents of a BMP file.</para>
            <para>Note: Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.</para>
            </summary>
        </member>
        <member name="T:Godot.ImageTexture">
            <summary>
            <para>A <see cref="T:Godot.Texture2D"/> based on an <see cref="T:Godot.Image"/>. For an image to be displayed, an <see cref="T:Godot.ImageTexture"/> has to be created from it using the <see cref="M:Godot.ImageTexture.CreateFromImage(Godot.Image)"/> method:</para>
            <para><code>
            var texture = ImageTexture.new()
            var image = Image.new()
            image.load("res://icon.png")
            texture.create_from_image(image)
            $Sprite2D.texture = texture
            </code></para>
            <para>This way, textures can be created at run-time by loading images both from within the editor and externally.</para>
            <para>Warning: Prefer to load imported textures with <c>@GDScript.load</c> over loading them from within the filesystem dynamically with <see cref="M:Godot.Image.Load(System.String)"/>, as it may not work in exported projects:</para>
            <para><code>
            var texture = load("res://icon.png")
            $Sprite2D.texture = texture
            </code></para>
            <para>This is because images have to be imported as <see cref="T:Godot.StreamTexture2D"/> first to be loaded with <c>@GDScript.load</c>. If you'd still like to load an image file just like any other <see cref="T:Godot.Resource"/>, import it as an <see cref="T:Godot.Image"/> resource instead, and then load it normally using the <c>@GDScript.load</c> method.</para>
            <para>But do note that the image data can still be retrieved from an imported texture as well using the <see cref="M:Godot.Texture2D.GetData"/> method, which returns a copy of the data:</para>
            <para><code>
            var texture = load("res://icon.png")
            var image : Image = texture.get_data()
            </code></para>
            <para>An <see cref="T:Godot.ImageTexture"/> is not meant to be operated from within the editor interface directly, and is mostly useful for rendering images on screen dynamically via code. If you need to generate images procedurally from within the editor, consider saving and importing images as custom texture resources implementing a new <see cref="!:Godot.EditorImportPlugin"/>.</para>
            <para>Note: The maximum texture size is 16384×16384 pixels due to graphics hardware limitations.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.CreateFromImage(Godot.Image)">
            <summary>
            <para>Initializes the texture by allocating and setting the data from an <see cref="T:Godot.Image"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.GetFormat">
            <summary>
            <para>Returns the format of the texture, one of <see cref="T:Godot.Image.Format"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.Update(Godot.Image,System.Boolean)">
            <summary>
            <para>Replaces the texture's data with a new <see cref="T:Godot.Image"/>. If <c>immediate</c> is <c>true</c>, it will take effect immediately after the call.</para>
            <para>Note: The texture has to be initialized first with the <see cref="M:Godot.ImageTexture.CreateFromImage(Godot.Image)"/> method before it can be updated. The new image dimensions, format, and mipmaps configuration should match the existing texture's image configuration, otherwise it has to be re-created with the <see cref="M:Godot.ImageTexture.CreateFromImage(Godot.Image)"/> method.</para>
            <para>Use this method over <see cref="M:Godot.ImageTexture.CreateFromImage(Godot.Image)"/> if you need to update the texture frequently, which is faster than allocating additional memory for a new texture each time.</para>
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.SetSizeOverride(Godot.Vector2)">
            <summary>
            <para>Resizes the texture to the specified dimensions.</para>
            </summary>
        </member>
        <member name="T:Godot.ImmediateGeometry3D">
            <summary>
            <para>Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.</para>
            <para>See also <see cref="T:Godot.ArrayMesh"/>, <see cref="T:Godot.MeshDataTool"/> and <see cref="T:Godot.SurfaceTool"/> for procedural geometry generation.</para>
            <para>Note: ImmediateGeometry3D is best suited to small amounts of mesh data that change every frame. It will be slow when handling large amounts of mesh data. If mesh data doesn't change often, use <see cref="T:Godot.ArrayMesh"/>, <see cref="T:Godot.MeshDataTool"/> or <see cref="T:Godot.SurfaceTool"/> instead.</para>
            <para>Note: Godot uses clockwise <a href="https://learnopengl.com/Advanced-OpenGL/Face-culling">winding order</a> for front faces of triangle primitive modes.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.Begin(Godot.Mesh.PrimitiveType,Godot.Texture2D)">
            <summary>
            <para>Begin drawing (and optionally pass a texture override). When done call <see cref="M:Godot.ImmediateGeometry3D.End"/>. For more information on how this works, search for <c>glBegin()</c> and <c>glEnd()</c> references.</para>
            <para>For the type of primitive, see the <see cref="T:Godot.Mesh.PrimitiveType"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.SetNormal(Godot.Vector3)">
            <summary>
            <para>The next vertex's normal.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.SetTangent(Godot.Plane)">
            <summary>
            <para>The next vertex's tangent (and binormal facing).</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.SetColor(Godot.Color)">
            <summary>
            <para>The current drawing color.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.SetUv(Godot.Vector2)">
            <summary>
            <para>The next vertex's UV.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.SetUv2(Godot.Vector2)">
            <summary>
            <para>The next vertex's second layer UV.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.AddVertex(Godot.Vector3)">
            <summary>
            <para>Adds a vertex in local coordinate space with the currently set color/uv/etc.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.AddSphere(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Simple helper to draw an UV sphere with given latitude, longitude and radius.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.End">
            <summary>
            <para>Ends a drawing context and displays the results.</para>
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry3D.Clear">
            <summary>
            <para>Clears everything that was drawn using begin/end.</para>
            </summary>
        </member>
        <member name="T:Godot.Input">
            <summary>
            <para>A singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Input Map tab in the Project &gt; Project Settings, or with the <see cref="T:Godot.InputMap"/> class.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Visible">
            <summary>
            <para>Makes the mouse cursor visible if it is hidden.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Hidden">
            <summary>
            <para>Makes the mouse cursor hidden if it is visible.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Captured">
            <summary>
            <para>Captures the mouse. The mouse will be hidden and its position locked at the center of the screen.</para>
            <para>Note: If you want to process the mouse's movement in this mode, you need to use <see cref="P:Godot.InputEventMouseMotion.Relative"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.MouseMode.Confined">
            <summary>
            <para>Makes the mouse cursor visible but confines it to the game window.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Arrow">
            <summary>
            <para>Arrow cursor. Standard, default pointing cursor.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Ibeam">
            <summary>
            <para>I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.PointingHand">
            <summary>
            <para>Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Cross">
            <summary>
            <para>Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Wait">
            <summary>
            <para>Wait cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application is still usable during the operation.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Busy">
            <summary>
            <para>Busy cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application isn't usable during the operation (e.g. something is blocking its main thread).</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Drag">
            <summary>
            <para>Drag cursor. Usually displayed when dragging something.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.CanDrop">
            <summary>
            <para>Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Forbidden">
            <summary>
            <para>Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Vsize">
            <summary>
            <para>Vertical resize mouse cursor. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Hsize">
            <summary>
            <para>Horizontal resize mouse cursor. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Bdiagsize">
            <summary>
            <para>Window resize mouse cursor. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Fdiagsize">
            <summary>
            <para>Window resize mouse cursor. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of . It tells the user they can resize the window or the panel both horizontally and vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Move">
            <summary>
            <para>Move cursor. Indicates that something can be moved.</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Vsplit">
            <summary>
            <para>Vertical split mouse cursor. On Windows, it's the same as .</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Hsplit">
            <summary>
            <para>Horizontal split mouse cursor. On Windows, it's the same as .</para>
            </summary>
        </member>
        <member name="F:Godot.Input.CursorShape.Help">
            <summary>
            <para>Help cursor. Usually a question mark.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsKeyPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the key in the current keyboard layout. You can pass a <see cref="T:Godot.KeyList"/> constant.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsMouseButtonPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the mouse button specified with <see cref="T:Godot.ButtonList"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyButtonPressed(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the joypad button (see <see cref="T:Godot.JoyButtonList"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionPressed(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if you are pressing the action event. Note that if an action has multiple buttons assigned and more than one of them is pressed, releasing one button will release the action, even if some other button assigned to this action is still pressed.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustPressed(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> when the user starts pressing the action event, meaning it's <c>true</c> only on the frame that the user pressed down the button.</para>
            <para>This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustReleased(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> when the user stops pressing the action event, meaning it's <c>true</c> only on the frame that the user released the button.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetActionStrength(Godot.StringName)">
            <summary>
            <para>Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis as the keyboard, the value returned will be 0 or 1.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetActionRawStrength(Godot.StringName)">
            <summary>
            <para>Returns a value between 0 and 1 representing the raw intensity of the given action, ignoring the action's deadzone. In most cases, you should use <see cref="M:Godot.Input.GetActionStrength(Godot.StringName)"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetAxis(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Get axis input by specifying two actions, one negative and one positive.</para>
            <para>This is a horthand for writing <c>Input.get_action_strength("positive_action") - Input.get_action_strength("negative_action")</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetVector(Godot.StringName,Godot.StringName,Godot.StringName,Godot.StringName,System.Single)">
            <summary>
            <para>Get vector input by specifying four actions, two for the X axis and two for the Y axis, negative and positive.</para>
            <para>This method is useful when getting vector input, such as from a joystick, directional pad, arrows, or WASD. The vector has its length limited to 1 and has a circular deadzone, which is useful for using vector input as movement.</para>
            <para>By default, the deadzone is automatically calculated from the average of the action deadzones. However, you can override the deadzone to be whatever you want (on the range of 0 to 1).</para>
            </summary>
        </member>
        <member name="M:Godot.Input.AddJoyMapping(System.String,System.Boolean)">
            <summary>
            <para>Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.RemoveJoyMapping(System.String)">
            <summary>
            <para>Removes all mappings from the internal database that match the given GUID.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.JoyConnectionChanged(System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            <para>Notifies the <see cref="T:Godot.Input"/> singleton that a connection has changed, to update the state for the <c>device</c> index.</para>
            <para>This is used internally and should not have to be called from user scripts. See <c>joy_connection_changed</c> for the signal emitted when this is triggered internally.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyKnown(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the system knows the specified device. This means that it sets all button and axis indices. Unknown joypads are not expected to match these constants, but you can still retrieve events from them.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxis(System.Int32,System.Int32)">
            <summary>
            <para>Returns the current value of the joypad axis at given index (see <see cref="T:Godot.JoyAxisList"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyName(System.Int32)">
            <summary>
            <para>Returns the name of the joypad at the specified device index.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyGuid(System.Int32)">
            <summary>
            <para>Returns a SDL2-compatible device GUID on platforms that use gamepad remapping. Returns <c>"Default Gamepad"</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetConnectedJoypads">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> containing the device IDs of all currently connected joypads.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationStrength(System.Int32)">
            <summary>
            <para>Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationDuration(System.Int32)">
            <summary>
            <para>Returns the duration of the current vibration effect in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.StartJoyVibration(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. <c>weak_magnitude</c> is the strength of the weak motor (between 0 and 1) and <c>strong_magnitude</c> is the strength of the strong motor (between 0 and 1). <c>duration</c> is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).</para>
            <para>Note: Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.StopJoyVibration(System.Int32)">
            <summary>
            <para>Stops the vibration of the joypad.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.VibrateHandheld(System.Int32)">
            <summary>
            <para>Vibrate Android and iOS devices.</para>
            <para>Note: It needs <c>VIBRATE</c> permission for Android at export settings. iOS does not support duration.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetGravity">
            <summary>
            <para>Returns the gravity of the device's accelerometer sensor, if the device has one. Otherwise, the method returns .</para>
            <para>Note: This method only works on Android and iOS. On other platforms, it always returns .</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetAccelerometer">
            <summary>
            <para>Returns the acceleration of the device's accelerometer sensor, if the device has one. Otherwise, the method returns .</para>
            <para>Note this method returns an empty <see cref="T:Godot.Vector3"/> when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.</para>
            <para>Note: This method only works on iOS, Android, and UWP. On other platforms, it always returns .</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMagnetometer">
            <summary>
            <para>Returns the the magnetic field strength in micro-Tesla for all axes of the device's magnetometer sensor, if the device has one. Otherwise, the method returns .</para>
            <para>Note: This method only works on Android, iOS and UWP. On other platforms, it always returns .</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetGyroscope">
            <summary>
            <para>Returns the rotation rate in rad/s around a device's X, Y, and Z axes of the gyroscope sensor, if the device has one. Otherwise, the method returns .</para>
            <para>Note: This method only works on Android and iOS. On other platforms, it always returns .</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetLastMouseSpeed">
            <summary>
            <para>Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseButtonMask">
            <summary>
            <para>Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetMouseMode(Godot.Input.MouseMode)">
            <summary>
            <para>Sets the mouse mode. See the constants for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseMode">
            <summary>
            <para>Returns the mouse mode. See the constants for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.WarpMousePosition(Godot.Vector2)">
            <summary>
            <para>Sets the mouse position to the specified vector.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.ActionPress(Godot.StringName,System.Single)">
            <summary>
            <para>This will simulate pressing the specified action.</para>
            <para>The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.</para>
            <para>Note: This method will not cause any <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> calls. It is intended to be used with <see cref="M:Godot.Input.IsActionPressed(Godot.StringName)"/> and <see cref="M:Godot.Input.IsActionJustPressed(Godot.StringName)"/>. If you want to simulate <c>_input</c>, use <see cref="M:Godot.Input.ParseInputEvent(Godot.InputEvent)"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.ActionRelease(Godot.StringName)">
            <summary>
            <para>If the specified action is already pressed, this will release it.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetDefaultCursorShape(Godot.Input.CursorShape)">
            <summary>
            <para>Sets the default cursor shape to be used in the viewport instead of .</para>
            <para>Note: If you want to change the default cursor shape for <see cref="T:Godot.Control"/>'s nodes, use <see cref="P:Godot.Control.MouseDefaultCursorShape"/> instead.</para>
            <para>Note: This method generates an <see cref="T:Godot.InputEventMouseMotion"/> to update cursor immediately.</para>
            </summary>
        </member>
        <member name="M:Godot.Input.GetCurrentCursorShape">
            <summary>
            <para>Returns the currently assigned cursor shape (see <see cref="T:Godot.Input.CursorShape"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetCustomMouseCursor(Godot.Resource,Godot.Input.CursorShape,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing <c>null</c> to the image parameter resets to the system cursor. See <see cref="T:Godot.Input.CursorShape"/> for the list of shapes.</para>
            <para><c>image</c>'s size must be lower than 256×256.</para>
            <para><c>hotspot</c> must be within <c>image</c>'s size.</para>
            <para>Note: <see cref="T:Godot.AnimatedTexture"/>s aren't supported as custom mouse cursors. If using an <see cref="T:Godot.AnimatedTexture"/>, only the first frame will be displayed.</para>
            <para>Note: Only images imported with the Lossless, Lossy or Uncompressed compression modes are supported. The Video RAM compression mode can't be used for custom cursors.</para>
            </summary>
            <param name="hotspot">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.Input.ParseInputEvent(Godot.InputEvent)">
            <summary>
            <para>Feeds an <see cref="T:Godot.InputEvent"/> to the game. Can be used to artificially trigger input events from code. Also generates <see cref="M:Godot.Node._Input(Godot.InputEvent)"/> calls.</para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var cancel_event = InputEventAction.new()</para>
            <para>cancel_event.action = "ui_cancel"</para>
            <para>cancel_event.pressed = true</para>
            <para>Input.parse_input_event(cancel_event)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var cancelEvent = new InputEventAction();</para>
            <para>cancelEvent.Action = "ui_cancel";</para>
            <para>cancelEvent.Pressed = true;</para>
            <para>Input.ParseInputEvent(cancelEvent);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Input.SetUseAccumulatedInput(System.Boolean)">
            <summary>
            <para>Enables or disables the accumulation of similar input events sent by the operating system. When input accumulation is enabled, all input events generated during a frame will be merged and emitted when the frame is done rendering. Therefore, this limits the number of input method calls per second to the rendering FPS.</para>
            <para>Input accumulation is enabled by default. It can be disabled to get slightly more precise/reactive input at the cost of increased CPU usage. In applications where drawing freehand lines is required, input accumulation should generally be disabled while the user is drawing the line to get results that closely follow the actual input.</para>
            </summary>
        </member>
        <member name="T:Godot.Input.JoyConnectionChangedSignalHandler">
            <summary>
            <para>Emitted when a joypad device has been connected or disconnected.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEvent">
            <summary>
            <para>Base class of all sort of input event. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEvent.Device">
            <summary>
            <para>The event's device ID.</para>
            <para>Note: This device ID will always be <c>-1</c> for emulated mouse input from a touchscreen. This can be used to distinguish emulated mouse input from physical mouse input.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsAction(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if this input event matches a pre-defined action of any type.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionPressed(Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns <c>true</c> if the given action is being pressed (and is not an echo event for <see cref="T:Godot.InputEventKey"/> events, unless <c>allow_echo</c> is <c>true</c>). Not relevant for events of type <see cref="T:Godot.InputEventMouseMotion"/> or <see cref="T:Godot.InputEventScreenDrag"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionReleased(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given action is released (i.e. not pressed). Not relevant for events of type <see cref="T:Godot.InputEventMouseMotion"/> or <see cref="T:Godot.InputEventScreenDrag"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.GetActionStrength(Godot.StringName)">
            <summary>
            <para>Returns a value between 0.0 and 1.0 depending on the given actions' state. Useful for getting the value of events of type <see cref="T:Godot.InputEventJoypadMotion"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsPressed">
            <summary>
            <para>Returns <c>true</c> if this input event is pressed. Not relevant for events of type <see cref="T:Godot.InputEventMouseMotion"/> or <see cref="T:Godot.InputEventScreenDrag"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsEcho">
            <summary>
            <para>Returns <c>true</c> if this input event is an echo event (only for events of type <see cref="T:Godot.InputEventKey"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.AsText">
            <summary>
            <para>Returns a <see cref="T:System.String"/> representation of the event.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.ShortcutMatch(Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the given input event is checking for the same key (<see cref="T:Godot.InputEventKey"/>), button (<see cref="T:Godot.InputEventJoypadButton"/>) or action (<see cref="T:Godot.InputEventAction"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionType">
            <summary>
            <para>Returns <c>true</c> if this input event's type is one that can be assigned to an input action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.Accumulate(Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the given input event and this input event can be added together (only for events of type <see cref="T:Godot.InputEventMouseMotion"/>).</para>
            <para>The given input event's position, global position and speed will be copied. The resulting <c>relative</c> is a sum of both events. Both events' modifiers have to be identical.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.XformedBy(Godot.Transform2D,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Returns a copy of the given input event which has been offset by <c>local_ofs</c> and transformed by <c>xform</c>. Relevant for events of type <see cref="T:Godot.InputEventMouseButton"/>, <see cref="T:Godot.InputEventMouseMotion"/>, <see cref="T:Godot.InputEventScreenTouch"/>, <see cref="T:Godot.InputEventScreenDrag"/>, <see cref="T:Godot.InputEventMagnifyGesture"/> and <see cref="T:Godot.InputEventPanGesture"/>.</para>
            </summary>
            <param name="localOfs">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="T:Godot.InputEventAction">
            <summary>
            <para>Contains a generic action which can be targeted from several types of inputs. Actions can be created from the Input Map tab in the Project &gt; Project Settings menu. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Action">
            <summary>
            <para>The action's name. Actions are accessed via this <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Pressed">
            <summary>
            <para>If <c>true</c>, the action's state is pressed. If <c>false</c>, the action's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Strength">
            <summary>
            <para>The action's strength between 0 and 1. This value is considered as equal to 0 if pressed is <c>false</c>. The event strength allows faking analog joypad motion events, by precising how strongly is the joypad axis bent or pressed.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventGesture.Position">
            <summary>
            <para>The local gesture position relative to the <see cref="T:Godot.Viewport"/>. If used in <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>, the position is relative to the current <see cref="T:Godot.Control"/> that received this gesture.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadButton">
            <summary>
            <para>Input event type for gamepad buttons. For gamepad analog sticks and joysticks, see <see cref="T:Godot.InputEventJoypadMotion"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.ButtonIndex">
            <summary>
            <para>Button identifier. One of the <see cref="T:Godot.JoyButtonList"/> button constants.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressure">
            <summary>
            <para>Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from <c>0</c> to <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressed">
            <summary>
            <para>If <c>true</c>, the button's state is pressed. If <c>false</c>, the button's state is released.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadMotion">
            <summary>
            <para>Stores information about joystick motions. One <see cref="T:Godot.InputEventJoypadMotion"/> represents one axis at a time.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.Axis">
            <summary>
            <para>Axis identifier. Use one of the <see cref="T:Godot.JoyAxisList"/> axis constants.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.AxisValue">
            <summary>
            <para>Current position of the joystick on the given axis. The value ranges from <c>-1.0</c> to <c>1.0</c>. A value of <c>0</c> means the axis is in its resting position.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventKey">
            <summary>
            <para>Stores key presses on the keyboard. Supports key presses, key releases and <see cref="P:Godot.InputEventKey.Echo"/> events.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Pressed">
            <summary>
            <para>If <c>true</c>, the key's state is pressed. If <c>false</c>, the key's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Keycode">
            <summary>
            <para>The key keycode, which corresponds to one of the <see cref="T:Godot.KeyList"/> constants. Represent key in the current keyboard layout.</para>
            <para>To get a human-readable representation of the <see cref="T:Godot.InputEventKey"/>, use <c>OS.get_keycode_string(event.keycode)</c> where <c>event</c> is the <see cref="T:Godot.InputEventKey"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.PhysicalKeycode">
            <summary>
            <para>Key physical keycode, which corresponds to one of the <see cref="T:Godot.KeyList"/> constants. Represent the physical location of a key on the 101/102-key US QWERTY keyboard.</para>
            <para>To get a human-readable representation of the <see cref="T:Godot.InputEventKey"/>, use <c>OS.get_keycode_string(event.keycode)</c> where <c>event</c> is the <see cref="T:Godot.InputEventKey"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Unicode">
            <summary>
            <para>The key Unicode identifier (when relevant). Unicode identifiers for the composite characters and complex scripts may not be available unless IME input mode is active. See <see cref="M:Godot.Window.SetImeActive(System.Boolean)"/> for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Echo">
            <summary>
            <para>If <c>true</c>, the key was already pressed before this event. It means the user is holding the key down.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEventKey.GetKeycodeWithModifiers">
            <summary>
            <para>Returns the keycode combined with modifier keys such as Shift or Alt. See also <see cref="T:Godot.InputEventWithModifiers"/>.</para>
            <para>To get a human-readable representation of the <see cref="T:Godot.InputEventKey"/> with modifiers, use <c>OS.get_keycode_string(event.get_keycode_with_modifiers())</c> where <c>event</c> is the <see cref="T:Godot.InputEventKey"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputEventKey.GetPhysicalKeycodeWithModifiers">
            <summary>
            <para>Returns the physical keycode combined with modifier keys such as Shift or Alt. See also <see cref="T:Godot.InputEventWithModifiers"/>.</para>
            <para>To get a human-readable representation of the <see cref="T:Godot.InputEventKey"/> with modifiers, use <c>OS.get_keycode_string(event.get_physical_keycode_with_modifiers())</c> where <c>event</c> is the <see cref="T:Godot.InputEventKey"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouse">
            <summary>
            <para>Stores general mouse events information.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.ButtonMask">
            <summary>
            <para>The mouse button mask identifier, one of or a bitwise combination of the <see cref="T:Godot.ButtonList"/> button masks.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.Position">
            <summary>
            <para>The local mouse position relative to the <see cref="T:Godot.Viewport"/>. If used in <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>, the position is relative to the current <see cref="T:Godot.Control"/> which is under the mouse.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.GlobalPosition">
            <summary>
            <para>The global mouse position relative to the current <see cref="T:Godot.Viewport"/> when used in <see cref="M:Godot.Control._GuiInput(Godot.InputEvent)"/>, otherwise is at 0,0.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseButton">
            <summary>
            <para>Contains mouse click information. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Factor">
            <summary>
            <para>The amount (or delta) of the event. When used for high-precision scroll events, this indicates the scroll amount (vertical or horizontal). This is only supported on some platforms; the reported sensitivity varies depending on the platform. May be <c>0</c> if not supported.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.ButtonIndex">
            <summary>
            <para>The mouse button identifier, one of the <see cref="T:Godot.ButtonList"/> button or button wheel constants.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Pressed">
            <summary>
            <para>If <c>true</c>, the mouse button's state is pressed. If <c>false</c>, the mouse button's state is released.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Doubleclick">
            <summary>
            <para>If <c>true</c>, the mouse button's state is a double-click.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseMotion">
            <summary>
            <para>Contains mouse and pen motion information. Supports relative, absolute positions and speed. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            <para>Note: By default, this event is only emitted once per frame rendered at most. If you need more precise input reporting, call <see cref="M:Godot.Input.SetUseAccumulatedInput(System.Boolean)"/> with <c>false</c> to make events emitted as often as possible. If you use InputEventMouseMotion to draw lines, consider implementing <a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm">Bresenham's line algorithm</a> as well to avoid visible gaps in lines if the user is moving the mouse quickly.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Tilt">
            <summary>
            <para>Represents the angles of tilt of the pen. Positive X-coordinate value indicates a tilt to the right. Positive Y-coordinate value indicates a tilt toward the user. Ranges from <c>-1.0</c> to <c>1.0</c> for both axes.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Pressure">
            <summary>
            <para>Represents the pressure the user puts on the pen. Ranges from <c>0.0</c> to <c>1.0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Relative">
            <summary>
            <para>The mouse position relative to the previous position (position at the last frame).</para>
            <para>Note: Since <see cref="T:Godot.InputEventMouseMotion"/> is only emitted when the mouse moves, the last event won't have a relative position of <c>Vector2(0, 0)</c> when the user stops moving the mouse.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Speed">
            <summary>
            <para>The mouse speed in pixels per second.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenDrag">
            <summary>
            <para>Contains screen drag information. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Index">
            <summary>
            <para>The drag event index in the case of a multi-drag event.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Position">
            <summary>
            <para>The drag position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Relative">
            <summary>
            <para>The drag position relative to its start position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Speed">
            <summary>
            <para>The drag speed.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenTouch">
            <summary>
            <para>Stores multi-touch press/release information. Supports touch press, touch release and <see cref="P:Godot.InputEventScreenTouch.Index"/> for multi-touch count and order.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Index">
            <summary>
            <para>The touch index in the case of a multi-touch event. One index = one finger.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Position">
            <summary>
            <para>The touch position.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Pressed">
            <summary>
            <para>If <c>true</c>, the touch's state is pressed. If <c>false</c>, the touch's state is released.</para>
            </summary>
        </member>
        <member name="T:Godot.InputEventWithModifiers">
            <summary>
            <para>Contains keys events information with modifiers support like Shift or Alt. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.StoreCommand">
            <summary>
            <para>If <c>true</c>, pressing Cmd on macOS or Ctrl on all other platforms will both be serialized as <see cref="P:Godot.InputEventWithModifiers.Command"/>. If <c>false</c>, those same keys will be serialized as <see cref="P:Godot.InputEventWithModifiers.Meta"/> on macOS and <see cref="P:Godot.InputEventWithModifiers.Control"/> on all other platforms.</para>
            <para>This aids with cross-platform compatibility when developing e.g. on Windows for macOS, or vice-versa.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Alt">
            <summary>
            <para>State of the Alt modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Shift">
            <summary>
            <para>State of the Shift modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Control">
            <summary>
            <para>State of the Ctrl modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Meta">
            <summary>
            <para>State of the Meta modifier.</para>
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Command">
            <summary>
            <para>State of the Cmd modifier.</para>
            </summary>
        </member>
        <member name="T:Godot.InputMap">
            <summary>
            <para>Manages all <see cref="T:Godot.InputEventAction"/> which can be created/modified from the project settings menu Project &gt; Project Settings &gt; Input Map or in code with <see cref="M:Godot.InputMap.AddAction(Godot.StringName,System.Single)"/> and <see cref="M:Godot.InputMap.ActionAddEvent(Godot.StringName,Godot.InputEvent)"/>. See <see cref="M:Godot.Node._Input(Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.HasAction(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the <see cref="T:Godot.InputMap"/> has a registered action with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.GetActions">
            <summary>
            <para>Returns an array of all actions in the <see cref="T:Godot.InputMap"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.AddAction(Godot.StringName,System.Single)">
            <summary>
            <para>Adds an empty action to the <see cref="T:Godot.InputMap"/> with a configurable <c>deadzone</c>.</para>
            <para>An <see cref="T:Godot.InputEvent"/> can then be added to this action with <see cref="M:Godot.InputMap.ActionAddEvent(Godot.StringName,Godot.InputEvent)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.EraseAction(Godot.StringName)">
            <summary>
            <para>Removes an action from the <see cref="T:Godot.InputMap"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionSetDeadzone(Godot.StringName,System.Single)">
            <summary>
            <para>Sets a deadzone value for the action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionAddEvent(Godot.StringName,Godot.InputEvent)">
            <summary>
            <para>Adds an <see cref="T:Godot.InputEvent"/> to an action. This <see cref="T:Godot.InputEvent"/> will trigger the action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionHasEvent(Godot.StringName,Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the action has the given <see cref="T:Godot.InputEvent"/> associated with it.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionEraseEvent(Godot.StringName,Godot.InputEvent)">
            <summary>
            <para>Removes an <see cref="T:Godot.InputEvent"/> from an action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionEraseEvents(Godot.StringName)">
            <summary>
            <para>Removes all events from an action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionGetEvents(Godot.StringName)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.InputEvent"/>s associated with a given action.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.EventIsAction(Godot.InputEvent,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given event is part of an existing action. This method ignores keyboard modifiers if the given <see cref="T:Godot.InputEvent"/> is not pressed (for proper release detection). See <see cref="M:Godot.InputMap.ActionHasEvent(Godot.StringName,Godot.InputEvent)"/> if you don't want this behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.InputMap.LoadFromProjectSettings">
            <summary>
            <para>Clears all <see cref="T:Godot.InputEventAction"/> in the <see cref="T:Godot.InputMap"/> and load it anew from <see cref="T:Godot.ProjectSettings"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.InstancePlaceholder">
            <summary>
            <para>Turning on the option Load As Placeholder for an instanced scene in the editor causes it to be replaced by an <see cref="T:Godot.InstancePlaceholder"/> when running the game. This makes it possible to delay actually loading the scene until calling <see cref="M:Godot.InstancePlaceholder.CreateInstance(System.Boolean,Godot.PackedScene)"/>. This is useful to avoid loading large scenes all at once by loading parts of it selectively.</para>
            <para>The <see cref="T:Godot.InstancePlaceholder"/> does not have a transform. This causes any child nodes to be positioned relatively to the <see cref="T:Godot.Viewport"/> from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.</para>
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.CreateInstance(System.Boolean,Godot.PackedScene)">
            <summary>
            <para>Not thread-safe. Use <see cref="M:Godot.Object.CallDeferred(Godot.StringName,System.Object[])"/> if calling from a thread.</para>
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.GetInstancePath">
            <summary>
            <para>Gets the path to the <see cref="T:Godot.PackedScene"/> resource file that is loaded by default when calling <see cref="M:Godot.InstancePlaceholder.CreateInstance(System.Boolean,Godot.PackedScene)"/>. Not thread-safe. Use <see cref="M:Godot.Object.CallDeferred(Godot.StringName,System.Object[])"/> if calling from a thread.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList">
            <summary>
            <para>This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list.</para>
            <para>Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be "activated" by double-clicking them or by pressing Enter.</para>
            <para>Item text only supports single-line strings, newline characters (e.g. <c>\n</c>) in the string won't produce a newline. Text wrapping is enabled in  mode, but column's width is adjusted to fully fit its content by default. You need to set <see cref="P:Godot.ItemList.FixedColumnWidth"/> greater than zero to wrap the text.</para>
            </summary>
        </member>
        <member name="F:Godot.ItemList.SelectModeEnum.Single">
            <summary>
            <para>Only allow selecting a single item.</para>
            </summary>
        </member>
        <member name="F:Godot.ItemList.SelectModeEnum.Multi">
            <summary>
            <para>Allows selecting multiple items by holding Ctrl or Shift.</para>
            </summary>
        </member>
        <member name="F:Godot.ItemList.IconModeEnum.Top">
            <summary>
            <para>Icon is drawn above the text.</para>
            </summary>
        </member>
        <member name="F:Godot.ItemList.IconModeEnum.Left">
            <summary>
            <para>Icon is drawn to the left of the text.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.SelectMode">
            <summary>
            <para>Allows single or multiple item selection. See the <see cref="T:Godot.ItemList.SelectModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowReselect">
            <summary>
            <para>If <c>true</c>, the currently selected item can be selected again.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowRmbSelect">
            <summary>
            <para>If <c>true</c>, right mouse button click can select items.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxTextLines">
            <summary>
            <para>Maximum lines of text allowed in each item. Space will be reserved even when there is not enough lines of text to display.</para>
            <para>Note: This property takes effect only when <see cref="P:Godot.ItemList.IconMode"/> is . To make the text wrap, <see cref="P:Godot.ItemList.FixedColumnWidth"/> should be greater than zero.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AutoHeight">
            <summary>
            <para>If <c>true</c>, the control will automatically resize the height to fit its content.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxColumns">
            <summary>
            <para>Maximum columns the list will have.</para>
            <para>If greater than zero, the content will be split among the specified columns.</para>
            <para>A value of zero means unlimited columns, i.e. all items will be put in the same row.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.SameColumnWidth">
            <summary>
            <para>Whether all columns will have the same width.</para>
            <para>If <c>true</c>, the width is equal to the largest column width of all columns.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedColumnWidth">
            <summary>
            <para>The width all columns will be adjusted to.</para>
            <para>A value of zero disables the adjustment, each item will have a width equal to the width of its content and the columns will have an uneven width.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconMode">
            <summary>
            <para>The icon position, whether above or to the left of the text. See the <see cref="T:Godot.ItemList.IconModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconScale">
            <summary>
            <para>The scale of icon applied after <see cref="P:Godot.ItemList.FixedIconSize"/> and transposing takes effect.</para>
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedIconSize">
            <summary>
            <para>The size all icons will be adjusted to.</para>
            <para>If either X or Y component is not greater than zero, icon size won't be affected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddItem(System.String,Godot.Texture2D,System.Boolean)">
            <summary>
            <para>Adds an item to the item list with specified text. Specify an <c>icon</c>, or use <c>null</c> as the <c>icon</c> for a list item with no icon.</para>
            <para>If selectable is <c>true</c>, the list item will be selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddIconItem(Godot.Texture2D,System.Boolean)">
            <summary>
            <para>Adds an item to the item list with no text, only an icon.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets text of the item associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemText(System.Int32)">
            <summary>
            <para>Returns the text associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets (or replaces) the icon's <see cref="T:Godot.Texture2D"/> associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIcon(System.Int32)">
            <summary>
            <para>Returns the icon associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTextDirection(System.Int32,Godot.Control.TextDirection)">
            <summary>
            <para>Sets item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemTextDirection(System.Int32)">
            <summary>
            <para>Returns item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemOpentypeFeature(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c> for the item's text. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemOpentypeFeature(System.Int32,System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c> of the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.ClearItemOpentypeFeatures(System.Int32)">
            <summary>
            <para>Removes all OpenType features from the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemLanguage(System.Int32,System.String)">
            <summary>
            <para>Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemLanguage(System.Int32)">
            <summary>
            <para>Returns item's text language code.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconTransposed(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the item icon will be drawn transposed.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemIconTransposed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item icon will be drawn transposed, i.e. the X and Y axes are swapped.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            <para>Sets the region of item's icon used. The whole icon will be used if the region has no area.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIconRegion(System.Int32)">
            <summary>
            <para>Returns the region of item's icon used. The whole icon will be used if the region has no area.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconModulate(System.Int32,Godot.Color)">
            <summary>
            <para>Sets a modulating <see cref="T:Godot.Color"/> of the item associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIconModulate(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Color"/> modulating item's icon at the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemSelectable(System.Int32,System.Boolean)">
            <summary>
            <para>Allows or disallows selection of the item associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemSelectable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at the specified index is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disables (or enables) the item at the specified index.</para>
            <para>Disabled items cannot be selected and do not trigger activation signals (when double-clicking or pressing Enter).</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at the specified index is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            <para>Sets a value (of any type) to be stored with the item associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemMetadata(System.Int32)">
            <summary>
            <para>Returns the metadata value of the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemCustomBgColor(System.Int32,Godot.Color)">
            <summary>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var itemList = ItemList.new()</para>
            <para>some_string.set_item_custom_bg_color(0, Color.red) # This will set the background color of the first item of the control to red.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var itemList = new ItemList();</para>
            <para>itemList.SetItemCustomBgColor(0, Colors.Red); // This will set the background color of the first item of the control to red.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCustomBgColor(System.Int32)">
            <summary>
            <para>Returns the custom background color of the item specified by <c>idx</c> index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemCustomFgColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the foreground color of the item specified by <c>idx</c> index to the specified <see cref="T:Godot.Color"/>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var item_list = ItemList.new()</para>
            <para>item_list.set_item_custom_fg_color(0, Color.red) # This will set the foreground color of the first item of the control to red.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var itemList = new ItemList();</para>
            <para>itemList.SetItemCustomFgColor(0, Colors.Red); // This will set the foreground color of the first item of the control to red.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCustomFgColor(System.Int32)">
            <summary>
            <para>Returns the custom foreground color of the item specified by <c>idx</c> index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltipEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the tooltip hint is enabled for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemTooltipEnabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the tooltip is enabled for specified item index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltip(System.Int32,System.String)">
            <summary>
            <para>Sets the tooltip hint for the item associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemTooltip(System.Int32)">
            <summary>
            <para>Returns the tooltip hint associated with the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Select(System.Int32,System.Boolean)">
            <summary>
            <para>Select the item at the specified index.</para>
            <para>Note: This method does not trigger the item selection signal.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Deselect(System.Int32)">
            <summary>
            <para>Ensures the item associated with the specified index is not selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.DeselectAll">
            <summary>
            <para>Ensures there are no items selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsSelected(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at the specified index is currently selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetSelectedItems">
            <summary>
            <para>Returns an array with the indexes of the selected items.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.MoveItem(System.Int32,System.Int32)">
            <summary>
            <para>Moves item from index <c>from_idx</c> to <c>to_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCount">
            <summary>
            <para>Returns the number of items currently in the list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item specified by <c>idx</c> index from the list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SortItemsByText">
            <summary>
            <para>Sorts items in the list by their text.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsAnythingSelected">
            <summary>
            <para>Returns <c>true</c> if one or more items are selected.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemAtPosition(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the item index at the given <c>position</c>.</para>
            <para>When there is no item at that point, -1 will be returned if <c>exact</c> is <c>true</c>, and the closest item index will be returned otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.EnsureCurrentIsVisible">
            <summary>
            <para>Ensure current selection is visible, adjusting the scroll position as necessary.</para>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetVScroll">
            <summary>
            <para>Returns the <see cref="T:Godot.Object"/> ID associated with the list.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.ItemActivatedHandler">
            <summary>
            <para>Triggered when specified list item is activated via double-clicking or by pressing Enter.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.MultiSelectedHandler">
            <summary>
            <para>Triggered when a multiple selection is altered on a list allowing multiple selection.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.NothingSelectedHandler">
            <summary>
            <para>Triggered when a left mouse click is issued within the rect of the list but on empty space.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.RmbClickedHandler">
            <summary>
            <para>Triggered when a right mouse click is issued within the rect of the list but on empty space.</para>
            <para><see cref="P:Godot.ItemList.AllowRmbSelect"/> must be enabled.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.ItemRmbSelectedHandler">
            <summary>
            <para>Triggered when specified list item has been selected via right mouse clicking.</para>
            <para>The click position is also provided to allow appropriate popup of context menus at the correct location.</para>
            <para><see cref="P:Godot.ItemList.AllowRmbSelect"/> must be enabled.</para>
            </summary>
        </member>
        <member name="T:Godot.ItemList.ItemSelectedHandler">
            <summary>
            <para>Triggered when specified item has been selected.</para>
            <para><see cref="P:Godot.ItemList.AllowReselect"/> must be enabled to reselect an item.</para>
            </summary>
        </member>
        <member name="T:Godot.JSONParseResult">
            <summary>
            <para>Returned by <see cref="M:Godot.JSON.Parse(System.String)"/>, <see cref="T:Godot.JSONParseResult"/> contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with <c>if json_result.error == OK</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Error">
            <summary>
            <para>The error type if the JSON source was not successfully parsed. See the <see cref="T:Godot.Error"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorString">
            <summary>
            <para>The error message if the JSON source was not successfully parsed. See the <see cref="T:Godot.Error"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorLine">
            <summary>
            <para>The line number where the error occurred if the JSON source was not successfully parsed.</para>
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Result">
            <summary>
            <para>A <c>Variant</c> containing the parsed JSON. Use <c>@GDScript.typeof</c> or the <c>is</c> keyword to check if it is what you expect. For example, if the JSON source starts with curly braces (<c>{}</c>), a <see cref="T:Godot.Collections.Dictionary"/> will be returned. If the JSON source starts with brackets (<c>[]</c>), an <see cref="T:Godot.Collections.Array"/> will be returned.</para>
            <para>Note: The JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to <see cref="T:System.Single"/> types.</para>
            <para>Note: JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var p = JSON.parse('["hello", "world", "!"]')</para>
            <para>if typeof(p.result) == TYPE_ARRAY:</para>
            <para>    print(p.result[0]) # Prints "hello"</para>
            <para>else:</para>
            <para>    push_error("Unexpected results.")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>JSONParseResult p = JSON.Parse("[\"hello\"], \"world\", \"!\"]");</para>
            <para>if (p.Result is Godot.Collections.Array)</para>
            <para>{</para>
            <para>    GD.Print((p.Result as Godot.Collections.Array)[0]); // Prints "hello"</para>
            <para>}</para>
            <para>else</para>
            <para>{</para>
            <para>    GD.PushError("Unexpected results.");</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.JavaScript">
            <summary>
            <para>The JavaScript singleton is implemented only in the HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.</para>
            <para>Note: This singleton can be disabled at build-time to improve security. By default, the JavaScript singleton is enabled. Official export templates also have the JavaScript singleton enabled. See <a href="https://docs.godotengine.org/en/latest/development/compiling/compiling_for_web.html">Compiling for the Web</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.JavaScript.Eval(System.String,System.Boolean)">
            <summary>
            <para>Execute the string <c>code</c> as JavaScript code within the browser window. This is a call to the actual global JavaScript function <c>eval()</c>.</para>
            <para>If <c>use_global_execution_context</c> is <c>true</c>, the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.</para>
            </summary>
        </member>
        <member name="T:Godot.Joint2D">
            <summary>
            <para>Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeA">
            <summary>
            <para>The first body attached to the joint. Must derive from <see cref="T:Godot.PhysicsBody2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeB">
            <summary>
            <para>The second body attached to the joint. Must derive from <see cref="T:Godot.PhysicsBody2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.Bias">
            <summary>
            <para>When <see cref="P:Godot.Joint2D.NodeA"/> and <see cref="P:Godot.Joint2D.NodeB"/> move in different directions the <c>bias</c> controls how fast the joint pulls them back to their original position. The lower the <c>bias</c> the more the two bodies can pull on the joint.</para>
            </summary>
        </member>
        <member name="P:Godot.Joint2D.DisableCollision">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Joint2D.NodeA"/> and <see cref="P:Godot.Joint2D.NodeB"/> can not collide.</para>
            </summary>
        </member>
        <member name="T:Godot.Joint3D">
            <summary>
            <para>Joints are used to bind together two physics bodies. They have a solver priority and can define if the bodies of the two attached nodes should be able to collide with each other. See also <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicBody2D">
            <summary>
            <para>Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:</para>
            <para>Simulated motion: When these bodies are moved manually, either from code or from an <see cref="T:Godot.AnimationPlayer"/> (with <see cref="P:Godot.AnimationPlayer.PlaybackProcessMode"/> set to "physics"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).</para>
            <para>Kinematic characters: KinematicBody2D also has an API for moving objects (the <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but don't require advanced physics.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Moves the body along the vector <c>rel_vec</c>. The body will stop if it collides. Returns a <see cref="T:Godot.KinematicCollision2D"/>, which contains information about the collision.</para>
            <para>If <c>test_only</c> is <c>true</c>, the body does not move but the would-be collision information is given.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a <see cref="T:Godot.KinematicBody2D"/> or <see cref="T:Godot.RigidBody2D"/>, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.</para>
            <para>This method should be used in <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> (or in a method called by <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>), as it uses the physics step's <c>delta</c> value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.</para>
            <para><c>linear_velocity</c> is the velocity vector in pixels per second. Unlike in <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/>, you should not multiply it by <c>delta</c> — the physics engine handles applying the velocity.</para>
            <para><c>up_direction</c> is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of <c>Vector2(0, 0)</c>, everything is considered a wall. This is useful for topdown games.</para>
            <para>If <c>stop_on_slope</c> is <c>true</c>, body will not slide on slopes when you include gravity in <c>linear_velocity</c> and the body is standing still.</para>
            <para>If the body collides, it will change direction a maximum of <c>max_slides</c> times before it stops.</para>
            <para><c>floor_max_angle</c> is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.</para>
            <para>If <c>infinite_inertia</c> is <c>true</c>, body will be able to push <see cref="T:Godot.RigidBody2D"/> nodes, but it won't also detect any collisions with them. If <c>false</c>, it will interact with <see cref="T:Godot.RigidBody2D"/> nodes like with <see cref="T:Godot.StaticBody2D"/>.</para>
            <para>Returns the <c>linear_velocity</c> vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use <see cref="M:Godot.KinematicBody2D.GetSlideCollision(System.Int32)"/>.</para>
            </summary>
            <param name="upDirection">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body while keeping it attached to slopes. Similar to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            <para>As long as the <c>snap</c> vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting <c>snap</c> to <c>(0, 0)</c> or by using <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> instead.</para>
            </summary>
            <param name="upDirection">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.KinematicBody2D.TestMove(Godot.Transform2D,Godot.Vector2,System.Boolean)">
            <summary>
            <para>Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given <see cref="T:Godot.Transform2D"/>, then tries to move the body along the vector <c>rel_vec</c>. Returns <c>true</c> if a collision would occur.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnFloor">
            <summary>
            <para>Returns <c>true</c> if the body collided with the floor on the last call of <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnCeiling">
            <summary>
            <para>Returns <c>true</c> if the body collided with the ceiling on the last call of <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnWall">
            <summary>
            <para>Returns <c>true</c> if the body collided with a wall on the last call of <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetFloorNormal">
            <summary>
            <para>Returns the surface normal of the floor at the last collision point. Only valid after calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> and when <see cref="M:Godot.KinematicBody2D.IsOnFloor"/> returns <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetFloorVelocity">
            <summary>
            <para>Returns the linear velocity of the floor at the last collision point. Only valid after calling <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> and when <see cref="M:Godot.KinematicBody2D.IsOnFloor"/> returns <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCount">
            <summary>
            <para>Returns the number of times the body collided and changed direction during the last call to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCollision(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.KinematicCollision2D"/>, which contains information about a collision that occurred during the last call to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody2D.MoveAndSlideWithSnap(Godot.Vector2,Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Since the body can collide several times in a single call to <see cref="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Boolean,System.Int32,System.Single,System.Boolean)"/>, you must specify the index of the collision in the range 0 to (<see cref="M:Godot.KinematicBody2D.GetSlideCount"/> - 1).</para>
            <para>Example usage:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>for i in get_slide_count():</para>
            <para>    var collision = get_slide_collision(i)</para>
            <para>    print("Collided with: ", collision.collider.name)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>for (int i = 0; i &lt; GetSlideCount(); i++)</para>
            <para>{</para>
            <para>    KinematicCollision2D collision = GetSlideCollision(i);</para>
            <para>    GD.Print("Collided with: ", (collision.Collider as Node).Name);</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicBody3D">
            <summary>
            <para>Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:</para>
            <para>Simulated motion: When these bodies are moved manually, either from code or from an <see cref="T:Godot.AnimationPlayer"/> (with <see cref="P:Godot.AnimationPlayer.PlaybackProcessMode"/> set to "physics"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).</para>
            <para>Kinematic characters: KinematicBody3D also has an API for moving objects (the <see cref="M:Godot.KinematicBody3D.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but don't require advanced physics.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody3D.AxisLockMotionX">
            <summary>
            <para>Lock the body's X axis movement.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody3D.AxisLockMotionY">
            <summary>
            <para>Lock the body's Y axis movement.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody3D.AxisLockMotionZ">
            <summary>
            <para>Lock the body's Z axis movement.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Moves the body along the vector <c>rel_vec</c>. The body will stop if it collides. Returns a <see cref="T:Godot.KinematicCollision3D"/>, which contains information about the collision.</para>
            <para>If <c>test_only</c> is <c>true</c>, the body does not move but the would-be collision information is given.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a <see cref="T:Godot.KinematicBody3D"/> or <see cref="T:Godot.RigidBody3D"/>, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.</para>
            <para>This method should be used in <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> (or in a method called by <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>), as it uses the physics step's <c>delta</c> value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.</para>
            <para><c>linear_velocity</c> is the velocity vector (typically meters per second). Unlike in <see cref="M:Godot.KinematicBody3D.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/>, you should not multiply it by <c>delta</c> — the physics engine handles applying the velocity.</para>
            <para><c>up_direction</c> is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of <c>Vector3(0, 0, 0)</c>, everything is considered a wall.</para>
            <para>If <c>stop_on_slope</c> is <c>true</c>, body will not slide on slopes when you include gravity in <c>linear_velocity</c> and the body is standing still.</para>
            <para>If the body collides, it will change direction a maximum of <c>max_slides</c> times before it stops.</para>
            <para><c>floor_max_angle</c> is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.</para>
            <para>If <c>infinite_inertia</c> is <c>true</c>, body will be able to push <see cref="T:Godot.RigidBody3D"/> nodes, but it won't also detect any collisions with them. If <c>false</c>, it will interact with <see cref="T:Godot.RigidBody3D"/> nodes like with <see cref="T:Godot.StaticBody3D"/>.</para>
            <para>Returns the <c>linear_velocity</c> vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use <see cref="M:Godot.KinematicBody3D.GetSlideCollision(System.Int32)"/>.</para>
            </summary>
            <param name="upDirection">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)">
            <summary>
            <para>Moves the body while keeping it attached to slopes. Similar to <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            <para>As long as the <c>snap</c> vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting <c>snap</c> to <c>(0, 0, 0)</c> or by using <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> instead.</para>
            </summary>
            <param name="upDirection">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.KinematicBody3D.TestMove(Godot.Transform,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given <see cref="T:Godot.Transform"/>, then tries to move the body along the vector <c>rel_vec</c>. Returns <c>true</c> if a collision would occur.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.IsOnFloor">
            <summary>
            <para>Returns <c>true</c> if the body collided with the floor on the last call of <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.IsOnCeiling">
            <summary>
            <para>Returns <c>true</c> if the body collided with the ceiling on the last call of <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.IsOnWall">
            <summary>
            <para>Returns <c>true</c> if the body collided with a wall on the last call of <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.GetFloorNormal">
            <summary>
            <para>Returns the surface normal of the floor at the last collision point. Only valid after calling <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> and when <see cref="M:Godot.KinematicBody3D.IsOnFloor"/> returns <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.GetFloorVelocity">
            <summary>
            <para>Returns the linear velocity of the floor at the last collision point. Only valid after calling <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> and when <see cref="M:Godot.KinematicBody3D.IsOnFloor"/> returns <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.SetAxisLock(Godot.PhysicsServer3D.BodyAxis,System.Boolean)">
            <summary>
            <para>Locks or unlocks the specified <c>axis</c> depending on the value of <c>lock</c>. See also <see cref="P:Godot.KinematicBody3D.AxisLockMotionX"/>, <see cref="P:Godot.KinematicBody3D.AxisLockMotionY"/> and <see cref="P:Godot.KinematicBody3D.AxisLockMotionZ"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.GetAxisLock(Godot.PhysicsServer3D.BodyAxis)">
            <summary>
            <para>Returns <c>true</c> if the specified <c>axis</c> is locked. See also <see cref="P:Godot.KinematicBody3D.AxisLockMotionX"/>, <see cref="P:Godot.KinematicBody3D.AxisLockMotionY"/> and <see cref="P:Godot.KinematicBody3D.AxisLockMotionZ"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.GetSlideCount">
            <summary>
            <para>Returns the number of times the body collided and changed direction during the last call to <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.KinematicBody3D.GetSlideCollision(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.KinematicCollision3D"/>, which contains information about a collision that occurred during the last call to <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/> or <see cref="M:Godot.KinematicBody3D.MoveAndSlideWithSnap(Godot.Vector3,Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>. Since the body can collide several times in a single call to <see cref="M:Godot.KinematicBody3D.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean,System.Int32,System.Single,System.Boolean)"/>, you must specify the index of the collision in the range 0 to (<see cref="M:Godot.KinematicBody3D.GetSlideCount"/> - 1).</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision2D">
            <summary>
            <para>Contains collision data for <see cref="T:Godot.KinematicBody2D"/> collisions. When a <see cref="T:Godot.KinematicBody2D"/> is moved using <see cref="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2,System.Boolean,System.Boolean,System.Boolean)"/>, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.</para>
            <para>This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Position">
            <summary>
            <para>The point of collision, in global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Normal">
            <summary>
            <para>The colliding body's shape's normal at the point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Travel">
            <summary>
            <para>The distance the moving object traveled before collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Remainder">
            <summary>
            <para>The moving object's remaining movement vector.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.LocalShape">
            <summary>
            <para>The moving object's colliding shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Collider">
            <summary>
            <para>The colliding body.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderId">
            <summary>
            <para>The colliding body's unique instance ID. See <see cref="M:Godot.Object.GetInstanceId"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShape">
            <summary>
            <para>The colliding body's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShapeIndex">
            <summary>
            <para>The colliding shape's index. See <see cref="T:Godot.CollisionObject2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderVelocity">
            <summary>
            <para>The colliding object's velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderMetadata">
            <summary>
            <para>The colliding body's metadata. See <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision3D">
            <summary>
            <para>Contains collision data for <see cref="T:Godot.KinematicBody3D"/> collisions. When a <see cref="T:Godot.KinematicBody3D"/> is moved using <see cref="M:Godot.KinematicBody3D.MoveAndCollide(Godot.Vector3,System.Boolean,System.Boolean,System.Boolean)"/>, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision3D object is returned.</para>
            <para>This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.Position">
            <summary>
            <para>The point of collision, in global coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.Normal">
            <summary>
            <para>The colliding body's shape's normal at the point of collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.Travel">
            <summary>
            <para>The distance the moving object traveled before collision.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.Remainder">
            <summary>
            <para>The moving object's remaining movement vector.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.LocalShape">
            <summary>
            <para>The moving object's colliding shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.Collider">
            <summary>
            <para>The colliding body.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.ColliderId">
            <summary>
            <para>The colliding body's unique instance ID. See <see cref="M:Godot.Object.GetInstanceId"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.ColliderShape">
            <summary>
            <para>The colliding body's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.ColliderShapeIndex">
            <summary>
            <para>The colliding shape's index. See <see cref="T:Godot.CollisionObject3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.ColliderVelocity">
            <summary>
            <para>The colliding object's velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision3D.ColliderMetadata">
            <summary>
            <para>The colliding body's metadata. See <see cref="T:Godot.Object"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Label">
            <summary>
            <para>Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use <see cref="T:Godot.RichTextLabel"/> instead.</para>
            <para>Note: Contrarily to most other <see cref="T:Godot.Control"/>s, Label's <see cref="P:Godot.Control.MouseFilter"/> defaults to  (i.e. it doesn't react to mouse input events). This implies that a label won't display any configured <see cref="P:Godot.Control.HintTooltip"/>, unless you change its mouse filter.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Left">
            <summary>
            <para>Align rows to the left (default).</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Center">
            <summary>
            <para>Align rows centered.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Right">
            <summary>
            <para>Align rows to the right.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.AlignEnum.Fill">
            <summary>
            <para>Expand row to fit the width.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Top">
            <summary>
            <para>Align the whole text to the top.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Center">
            <summary>
            <para>Align the whole text to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Bottom">
            <summary>
            <para>Align the whole text to the bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.Label.VAlign.Fill">
            <summary>
            <para>Align the whole text by spreading the rows.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Text">
            <summary>
            <para>The text to display on screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Align">
            <summary>
            <para>Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the <see cref="T:Godot.Label.AlignEnum"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Valign">
            <summary>
            <para>Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the <see cref="T:Godot.Label.VAlign"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Autowrap">
            <summary>
            <para>If <c>true</c>, wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.ClipText">
            <summary>
            <para>If <c>true</c>, the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.Uppercase">
            <summary>
            <para>If <c>true</c>, all the text displays as UPPERCASE.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.VisibleCharacters">
            <summary>
            <para>Restricts the number of characters to display. Set to -1 to disable.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.PercentVisible">
            <summary>
            <para>Limits the amount of visible characters. If you set <c>percent_visible</c> to 0.5, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.LinesSkipped">
            <summary>
            <para>The node ignores the first <c>lines_skipped</c> lines before it starts to display text.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.MaxLinesVisible">
            <summary>
            <para>Limits the lines of text the node shows on screen.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.StructuredTextBidiOverride">
            <summary>
            <para>Set BiDi algorithm override for the structured text.</para>
            </summary>
        </member>
        <member name="P:Godot.Label.StructuredTextBidiOverrideOptions">
            <summary>
            <para>Set additional options for BiDi override.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineHeight(System.Int32)">
            <summary>
            <para>Returns the height of the line <c>line</c>.</para>
            <para>If <c>line</c> is set to <c>-1</c>, returns biggest line height.</para>
            <para>If there're no lines returns font size in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineCount">
            <summary>
            <para>Returns the amount of lines of text the Label has.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetVisibleLineCount">
            <summary>
            <para>Returns the number of lines shown. Useful if the <see cref="T:Godot.Label"/>'s height cannot currently display all lines.</para>
            </summary>
        </member>
        <member name="M:Godot.Label.GetTotalCharacterCount">
            <summary>
            <para>Returns the total number of printable characters in the text (excluding spaces and newlines).</para>
            </summary>
        </member>
        <member name="T:Godot.LargeTexture">
            <summary>
            <para>A <see cref="T:Godot.Texture2D"/> capable of storing many smaller textures with offsets.</para>
            <para>You can dynamically add pieces (<see cref="T:Godot.Texture2D"/>s) to this <see cref="T:Godot.LargeTexture"/> using different offsets.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.AddPiece(Godot.Vector2,Godot.Texture2D)">
            <summary>
            <para>Adds <c>texture</c> to this <see cref="T:Godot.LargeTexture"/>, starting on offset <c>ofs</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the offset of the piece with the index <c>idx</c> to <c>ofs</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceTexture(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Texture2D"/> of the piece with index <c>idx</c> to <c>texture</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetSize(Godot.Vector2)">
            <summary>
            <para>Sets the size of this <see cref="T:Godot.LargeTexture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.Clear">
            <summary>
            <para>Clears the <see cref="T:Godot.LargeTexture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceCount">
            <summary>
            <para>Returns the number of pieces currently in this <see cref="T:Godot.LargeTexture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the piece with the index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceTexture(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> of the piece with the index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Light2D">
            <summary>
            <para>Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).</para>
            <para>Note: Light2D can also be used as a mask.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.None">
            <summary>
            <para>No filter applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf5">
            <summary>
            <para>Percentage closer filtering (5 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.ShadowFilterEnum.Pcf13">
            <summary>
            <para>Percentage closer filtering (13 samples) applies to the shadow map. See <see cref="P:Godot.Light2D.ShadowFilter"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.BlendModeEnum.Add">
            <summary>
            <para>Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behavior of a light.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.BlendModeEnum.Sub">
            <summary>
            <para>Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect.</para>
            </summary>
        </member>
        <member name="F:Godot.Light2D.BlendModeEnum.Mix">
            <summary>
            <para>Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Enabled">
            <summary>
            <para>If <c>true</c>, Light2D will emit light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.EditorOnly">
            <summary>
            <para>If <c>true</c>, Light2D will only appear when editing the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Color">
            <summary>
            <para>The Light2D's <see cref="T:Godot.Color"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.Energy">
            <summary>
            <para>The Light2D's energy value. The larger the value, the stronger the light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.BlendMode">
            <summary>
            <para>The Light2D's blend mode. See <see cref="T:Godot.Light2D.BlendModeEnum"/> constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMin">
            <summary>
            <para>Minimum <c>z</c> value of objects that are affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMax">
            <summary>
            <para>Maximum <c>z</c> value of objects that are affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMin">
            <summary>
            <para>Minimum layer value of objects that are affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMax">
            <summary>
            <para>Maximum layer value of objects that are affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeItemCullMask">
            <summary>
            <para>The layer mask. Only objects with a matching mask will be affected by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowEnabled">
            <summary>
            <para>If <c>true</c>, the Light2D will cast shadows.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowColor">
            <summary>
            <para><see cref="T:Godot.Color"/> of shadows cast by the Light2D.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilter">
            <summary>
            <para>Shadow filter type. See <see cref="T:Godot.Light2D.ShadowFilterEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilterSmooth">
            <summary>
            <para>Smoothing value for shadows.</para>
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowItemCullMask">
            <summary>
            <para>The shadow mask. Used with <see cref="T:Godot.LightOccluder2D"/> to cast shadows. Only occluders with a matching light mask will cast shadows.</para>
            </summary>
        </member>
        <member name="T:Godot.Light3D">
            <summary>
            <para>Light3D is the abstract base class for light nodes. As it can't be instanced, it shouldn't be used directly. Other types of light nodes inherit from it. Light3D contains the common variables and parameters used for lighting.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.BakeMode.Disabled">
            <summary>
            <para>Light is ignored when baking.</para>
            <para>Note: Hiding a light does not affect baking.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Energy">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.LightEnergy"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.IndirectEnergy">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.LightIndirectEnergy"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Specular">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.LightSpecular"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Range">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.OmniLight3D.OmniRange"/> or <see cref="P:Godot.SpotLight3D.SpotRange"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Size">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.LightSize"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Attenuation">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.OmniLight3D.OmniAttenuation"/> or <see cref="P:Godot.SpotLight3D.SpotAttenuation"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.SpotAngle">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.SpotLight3D.SpotAngle"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.SpotAttenuation">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.SpotLight3D.SpotAngleAttenuation"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowMaxDistance">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMaxDistance"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowSplit1Offset">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowSplit1"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowSplit2Offset">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowSplit2"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowSplit3Offset">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowSplit3"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowFadeStart">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowFadeStart"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowNormalBias">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.ShadowNormalBias"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowBias">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.ShadowBias"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowPancakeSize">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.DirectionalLight3D.DirectionalShadowPancakeSize"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.ShadowBlur">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.ShadowBlur"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.TransmittanceBias">
            <summary>
            <para>Constant for accessing <see cref="P:Godot.Light3D.ShadowTransmittanceBias"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Light3D.Param.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Light3D.Param"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightColor">
            <summary>
            <para>The light's color. An overbright color can be used to achieve a result equivalent to increasing the light's <see cref="P:Godot.Light3D.LightEnergy"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightEnergy">
            <summary>
            <para>The light's strength multiplier (this is not a physical unit). For <see cref="T:Godot.OmniLight3D"/> and <see cref="T:Godot.SpotLight3D"/>, changing this value will only change the light color's intensity, not the light's radius.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightIndirectEnergy">
            <summary>
            <para>Secondary multiplier used with indirect light (light bounces). Used with <see cref="T:Godot.GIProbe"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightProjector">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> projected by light. <see cref="P:Godot.Light3D.ShadowEnabled"/> must be on for the projector to work. Light projectors make the light appear as if it is shining through a colored but transparent object, almost like light shining through stained glass.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightSize">
            <summary>
            <para>The size of the light in Godot units. Only available for <see cref="T:Godot.OmniLight3D"/>s and <see cref="T:Godot.SpotLight3D"/>s. Increasing this value will make the light fade out slower and shadows appear blurrier. This can be used to simulate area lights to an extent.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightAngularDistance">
            <summary>
            <para>The light's angular size in degrees. Only available for <see cref="T:Godot.DirectionalLight3D"/>s. For reference, the Sun from the Earth is approximately <c>0.5</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightNegative">
            <summary>
            <para>If <c>true</c>, the light's effect is reversed, darkening areas and casting bright shadows.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightSpecular">
            <summary>
            <para>The intensity of the specular blob in objects affected by the light. At <c>0</c>, the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightBakeMode">
            <summary>
            <para>The light's bake mode. See <see cref="T:Godot.Light3D.BakeMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.LightCullMask">
            <summary>
            <para>The light will affect objects in the selected layers.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowEnabled">
            <summary>
            <para>If <c>true</c>, the light will cast shadows.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowColor">
            <summary>
            <para>The color of shadows cast by this light.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowBias">
            <summary>
            <para>Used to adjust shadow appearance. Too small a value results in self-shadowing ("shadow acne"), while too large a value causes shadows to separate from casters ("peter-panning"). Adjust as needed.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowNormalBias">
            <summary>
            <para>Offsets the lookup into the shadow map by the object's normal. This can be used to reduce self-shadowing artifacts without using <see cref="P:Godot.Light3D.ShadowBias"/>. In practice, this value should be tweaked along with <see cref="P:Godot.Light3D.ShadowBias"/> to reduce artifacts as much as possible.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowReverseCullFace">
            <summary>
            <para>If <c>true</c>, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with .</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.ShadowBlur">
            <summary>
            <para>Blurs the edges of the shadow. Can be used to hide pixel artifacts in low-resolution shadow maps. A high value can impact performance, make shadows appear grainy and can cause other unwanted artifacts. Try to keep as near default as possible.</para>
            </summary>
        </member>
        <member name="P:Godot.Light3D.EditorOnly">
            <summary>
            <para>If <c>true</c>, the light only appears in the editor and will not be visible at runtime.</para>
            </summary>
        </member>
        <member name="M:Godot.Light3D.SetParam(Godot.Light3D.Param,System.Single)">
            <summary>
            <para>Sets the value of the specified <see cref="T:Godot.Light3D.Param"/> parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.Light3D.GetParam(Godot.Light3D.Param)">
            <summary>
            <para>Returns the value of the specified <see cref="T:Godot.Light3D.Param"/> parameter.</para>
            </summary>
        </member>
        <member name="T:Godot.LightOccluder2D">
            <summary>
            <para>Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an <see cref="T:Godot.OccluderPolygon2D"/> in order for the shadow to be computed.</para>
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.Occluder">
            <summary>
            <para>The <see cref="T:Godot.OccluderPolygon2D"/> used to compute the shadow.</para>
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.OccluderLightMask">
            <summary>
            <para>The LightOccluder2D's occluder light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s).</para>
            </summary>
        </member>
        <member name="T:Godot.Line2D">
            <summary>
            <para>A line through several points in 2D space.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.None">
            <summary>
            <para>Takes the left pixels of the texture and renders it over the whole line.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.Tile">
            <summary>
            <para>Tiles the texture over the line. The texture must be imported with Repeat enabled for it to work properly.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineTextureMode.Stretch">
            <summary>
            <para>Stretches the texture across the line. Import the texture with Repeat disabled for best results.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.None">
            <summary>
            <para>Don't draw a line cap.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.Box">
            <summary>
            <para>Draws the line cap as a box.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineCapMode.Round">
            <summary>
            <para>Draws the line cap as a circle.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Sharp">
            <summary>
            <para>The line's joints will be pointy. If <c>sharp_limit</c> is greater than the rotation of a joint, it becomes a bevel joint instead.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Bevel">
            <summary>
            <para>The line's joints will be bevelled/chamfered.</para>
            </summary>
        </member>
        <member name="F:Godot.Line2D.LineJointMode.Round">
            <summary>
            <para>The line's joints will be rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Points">
            <summary>
            <para>The points that form the lines. The line is drawn between every point set in this array. Points are interpreted as local vectors.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Width">
            <summary>
            <para>The line's width.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.WidthCurve">
            <summary>
            <para>The line's width varies with the curve. The original width is simply multiply by the value of the Curve.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.DefaultColor">
            <summary>
            <para>The line's color. Will not be used if a gradient is set.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Gradient">
            <summary>
            <para>The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Texture">
            <summary>
            <para>The texture used for the line's texture. Uses <c>texture_mode</c> for drawing style.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.TextureMode">
            <summary>
            <para>The style to render the <c>texture</c> on the line. Use <see cref="T:Godot.Line2D.LineTextureMode"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.JointMode">
            <summary>
            <para>The style for the points between the start and the end.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.BeginCapMode">
            <summary>
            <para>Controls the style of the line's first point. Use <see cref="T:Godot.Line2D.LineCapMode"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.EndCapMode">
            <summary>
            <para>Controls the style of the line's last point. Use <see cref="T:Godot.Line2D.LineCapMode"/> constants.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.SharpLimit">
            <summary>
            <para>The direction difference in radians between vector points. This value is only used if <c>joint mode</c> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.RoundPrecision">
            <summary>
            <para>The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.</para>
            </summary>
        </member>
        <member name="P:Godot.Line2D.Antialiased">
            <summary>
            <para>If <c>true</c>, the line's border will be anti-aliased.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            <para>Overwrites the position in point <c>i</c> with the supplied <c>position</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointPosition(System.Int32)">
            <summary>
            <para>Returns point <c>i</c>'s position.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointCount">
            <summary>
            <para>Returns the Line2D's amount of points.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.AddPoint(Godot.Vector2,System.Int32)">
            <summary>
            <para>Adds a point at the <c>position</c>. Appends the point at the end of the line.</para>
            <para>If <c>at_position</c> is given, the point is inserted before the point number <c>at_position</c>, moving that point (and every point after) after the inserted point. If <c>at_position</c> is not given, or is an illegal value (<c>at_position &lt; 0</c> or <c>at_position &gt;= [method get_point_count]</c>), the point will be appended at the end of the point list.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.RemovePoint(System.Int32)">
            <summary>
            <para>Removes the point at index <c>i</c> from the line.</para>
            </summary>
        </member>
        <member name="M:Godot.Line2D.ClearPoints">
            <summary>
            <para>Removes all points from the line.</para>
            </summary>
        </member>
        <member name="T:Godot.LineEdit">
            <summary>
            <para>LineEdit provides a single-line string editor, used for text fields.</para>
            <para>It features many built-in shortcuts which will always be available (Ctrl here maps to Cmd on macOS):</para>
            <para>- Ctrl + C: Copy</para>
            <para>- Ctrl + X: Cut</para>
            <para>- Ctrl + V or Ctrl + Y: Paste/"yank"</para>
            <para>- Ctrl + Z: Undo</para>
            <para>- Ctrl + ~: Swap input direction.</para>
            <para>- Ctrl + Shift + Z: Redo</para>
            <para>- Ctrl + U: Delete text from the cursor position to the beginning of the line</para>
            <para>- Ctrl + K: Delete text from the cursor position to the end of the line</para>
            <para>- Ctrl + A: Select all text</para>
            <para>- Up Arrow/Down Arrow: Move the cursor to the beginning/end of the line</para>
            <para>On macOS, some extra keyboard shortcuts are available:</para>
            <para>- Ctrl + F: Same as Right Arrow, move the cursor one character right</para>
            <para>- Ctrl + B: Same as Left Arrow, move the cursor one character left</para>
            <para>- Ctrl + P: Same as Up Arrow, move the cursor to the previous line</para>
            <para>- Ctrl + N: Same as Down Arrow, move the cursor to the next line</para>
            <para>- Ctrl + D: Same as Delete, delete the character on the right side of cursor</para>
            <para>- Ctrl + H: Same as Backspace, delete the character on the left side of the cursor</para>
            <para>- Ctrl + A: Same as Home, move the cursor to the beginning of the line</para>
            <para>- Ctrl + E: Same as End, move the cursor to the end of the line</para>
            <para>- Cmd + Left Arrow: Same as Home, move the cursor to the beginning of the line</para>
            <para>- Cmd + Right Arrow: Same as End, move the cursor to the end of the line</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Left">
            <summary>
            <para>Aligns the text on the left-hand side of the <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Center">
            <summary>
            <para>Centers the text in the middle of the <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Right">
            <summary>
            <para>Aligns the text on the right-hand side of the <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.AlignEnum.Fill">
            <summary>
            <para>Expand row to fit the <see cref="T:Godot.LineEdit"/>'s width.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Cut">
            <summary>
            <para>Cuts (copies and clears) the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Copy">
            <summary>
            <para>Copies the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Paste">
            <summary>
            <para>Pastes the clipboard text over the selected text (or at the cursor's position).</para>
            <para>Non-printable escape characters are automatically stripped from the OS clipboard via <c>String.strip_escapes</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Clear">
            <summary>
            <para>Erases the whole <see cref="T:Godot.LineEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.SelectAll">
            <summary>
            <para>Selects the whole <see cref="T:Godot.LineEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Undo">
            <summary>
            <para>Undoes the previous action.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Redo">
            <summary>
            <para>Reverse the last undo action.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.DirInherited">
            <summary>
            <para>Sets text direction to inherited.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.DirAuto">
            <summary>
            <para>Sets text direction to automatic.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.DirLtr">
            <summary>
            <para>Sets text direction to left-to-right.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.DirRtl">
            <summary>
            <para>Sets text direction to right-to-left.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.DisplayUcc">
            <summary>
            <para>Toggles control character display.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertLrm">
            <summary>
            <para>Inserts left-to-right mark (LRM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertRlm">
            <summary>
            <para>Inserts right-to-left mark (RLM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertLre">
            <summary>
            <para>Inserts start of left-to-right embedding (LRE) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertRle">
            <summary>
            <para>Inserts start of right-to-left embedding (RLE) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertLro">
            <summary>
            <para>Inserts start of left-to-right override (LRO) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertRlo">
            <summary>
            <para>Inserts start of right-to-left override (RLO) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertPdf">
            <summary>
            <para>Inserts pop direction formatting (PDF) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertAlm">
            <summary>
            <para>Inserts Arabic letter mark (ALM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertLri">
            <summary>
            <para>Inserts left-to-right isolate (LRI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertRli">
            <summary>
            <para>Inserts right-to-left isolate (RLI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertFsi">
            <summary>
            <para>Inserts first strong isolate (FSI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertPdi">
            <summary>
            <para>Inserts pop direction isolate (PDI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertZwj">
            <summary>
            <para>Inserts zero width joiner (ZWJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertZwnj">
            <summary>
            <para>Inserts zero width non-joiner (ZWNJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertWj">
            <summary>
            <para>Inserts word joiner (WJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.InsertShy">
            <summary>
            <para>Inserts soft hyphen (SHY) character.</para>
            </summary>
        </member>
        <member name="F:Godot.LineEdit.MenuItems.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.LineEdit.MenuItems"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Text">
            <summary>
            <para>String value of the <see cref="T:Godot.LineEdit"/>.</para>
            <para>Note: Changing text using this property won't emit the <c>text_changed</c> signal.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Align">
            <summary>
            <para>Text alignment as defined in the <see cref="T:Godot.LineEdit.AlignEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.MaxLength">
            <summary>
            <para>Maximum amount of characters that can be entered inside the <see cref="T:Godot.LineEdit"/>. If <c>0</c>, there is no limit.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Editable">
            <summary>
            <para>If <c>false</c>, existing text cannot be modified and new text cannot be added.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Secret">
            <summary>
            <para>If <c>true</c>, every character is replaced with the secret character (see <see cref="P:Godot.LineEdit.SecretCharacter"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.SecretCharacter">
            <summary>
            <para>The character to use to mask secret input (defaults to "*"). Only a single character can be used as the secret character.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ExpandToTextLength">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.LineEdit"/> width will increase to stay longer than the <see cref="P:Godot.LineEdit.Text"/>. It will not compress if the <see cref="P:Godot.LineEdit.Text"/> is shortened.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ContextMenuEnabled">
            <summary>
            <para>If <c>true</c>, the context menu will appear when right-clicked.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.VirtualKeyboardEnabled">
            <summary>
            <para>If <c>true</c>, the native virtual keyboard is shown when focused on platforms that support it.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ClearButtonEnabled">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.LineEdit"/> will show a clear button if <c>text</c> is not empty, which can be used to clear the text quickly.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ShortcutKeysEnabled">
            <summary>
            <para>If <c>false</c>, using shortcuts will be disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.SelectingEnabled">
            <summary>
            <para>If <c>false</c>, it's impossible to select the text using mouse nor keyboard.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.RightIcon">
            <summary>
            <para>Sets the icon that will appear in the right end of the <see cref="T:Godot.LineEdit"/> if there's no <see cref="P:Godot.LineEdit.Text"/>, or always, if <see cref="P:Godot.LineEdit.ClearButtonEnabled"/> is set to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.DrawControlChars">
            <summary>
            <para>If <c>true</c>, control characters are displayed.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.StructuredTextBidiOverride">
            <summary>
            <para>Set BiDi algorithm override for the structured text.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.StructuredTextBidiOverrideOptions">
            <summary>
            <para>Set additional options for BiDi override.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderText">
            <summary>
            <para>Text shown when the <see cref="T:Godot.LineEdit"/> is empty. It is not the <see cref="T:Godot.LineEdit"/>'s default value (see <see cref="P:Godot.LineEdit.Text"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderAlpha">
            <summary>
            <para>Opacity of the <see cref="P:Godot.LineEdit.PlaceholderText"/>. From <c>0</c> to <c>1</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlink">
            <summary>
            <para>If <c>true</c>, the caret (visual cursor) blinks.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlinkSpeed">
            <summary>
            <para>Duration (in seconds) of a caret's blinking cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretPosition">
            <summary>
            <para>The cursor's position inside the <see cref="T:Godot.LineEdit"/>. When set, the text may scroll to accommodate it.</para>
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretMidGrapheme">
            <summary>
            <para>Allow moving caret, selecting and removing the individual composite character components.</para>
            <para>Note: Backspace is always removing individual composite character components.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Clear">
            <summary>
            <para>Erases the <see cref="T:Godot.LineEdit"/>'s <see cref="P:Godot.LineEdit.Text"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Select(System.Int32,System.Int32)">
            <summary>
            <para>Selects characters inside <see cref="T:Godot.LineEdit"/> between <c>from</c> and <c>to</c>. By default, <c>from</c> is at the beginning and <c>to</c> at the end.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>text = "Welcome"</para>
            <para>select() # Will select "Welcome".</para>
            <para>select(4) # Will select "ome".</para>
            <para>select(2, 5) # Will select "lco".</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>Text = "Welcome";</para>
            <para>Select(); // Will select "Welcome".</para>
            <para>Select(4); // Will select "ome".</para>
            <para>Select(2, 5); // Will select "lco".</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.SelectAll">
            <summary>
            <para>Selects the whole <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Deselect">
            <summary>
            <para>Clears the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.GetScrollOffset">
            <summary>
            <para>Returns the scroll offset due to <see cref="P:Godot.LineEdit.CaretPosition"/>, as a number of characters.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.AppendAtCursor(System.String)">
            <summary>
            <para>Adds <c>text</c> after the cursor. If the resulting value is longer than <see cref="P:Godot.LineEdit.MaxLength"/>, nothing happens.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.DeleteCharAtCursor">
            <summary>
            <para>Deletes one character at the cursor's current position (equivalent to pressing Delete).</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.DeleteText(System.Int32,System.Int32)">
            <summary>
            <para>Deletes a section of the <see cref="P:Godot.LineEdit.Text"/> going from position <c>from_column</c> to <c>to_column</c>. Both parameters should be within the text's length.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.MenuOption(System.Int32)">
            <summary>
            <para>Executes a given action as defined in the <see cref="T:Godot.LineEdit.MenuItems"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.LineEdit.GetMenu">
            <summary>
            <para>Returns the <see cref="T:Godot.PopupMenu"/> of this <see cref="T:Godot.LineEdit"/>. By default, this menu is displayed when right-clicking on the <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.LineEdit.TextEnteredHandler">
            <summary>
            <para>Emitted when the user presses  on the <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.LineEdit.TextChangedHandler">
            <summary>
            <para>Emitted when the text changes.</para>
            </summary>
        </member>
        <member name="T:Godot.LineEdit.TextChangeRejectedHandler">
            <summary>
            <para>Emitted when trying to append text that would overflow the <see cref="P:Godot.LineEdit.MaxLength"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.LineShape2D">
            <summary>
            <para>Line shape for 2D collisions. It works like a 2D plane and will not allow any physics body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.</para>
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.Normal">
            <summary>
            <para>The line's normal.</para>
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.Distance">
            <summary>
            <para>The line's distance from the origin.</para>
            </summary>
        </member>
        <member name="T:Godot.LinkButton">
            <summary>
            <para>This kind of button is primarily used when the interaction with the button causes a context change (like linking to a web page).</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.Always">
            <summary>
            <para>The LinkButton will always show an underline at the bottom of its text.</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.OnHover">
            <summary>
            <para>The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it.</para>
            </summary>
        </member>
        <member name="F:Godot.LinkButton.UnderlineMode.Never">
            <summary>
            <para>The LinkButton will never show an underline at the bottom of its text.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Text">
            <summary>
            <para>The button's text that will be displayed inside the button's area.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Underline">
            <summary>
            <para>Determines when to show the underline. See <see cref="T:Godot.LinkButton.UnderlineMode"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.StructuredTextBidiOverride">
            <summary>
            <para>Set BiDi algorithm override for the structured text.</para>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.StructuredTextBidiOverrideOptions">
            <summary>
            <para>Set additional options for BiDi override.</para>
            </summary>
        </member>
        <member name="M:Godot.LinkButton.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.LinkButton.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.LinkButton.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="T:Godot.Listener3D">
            <summary>
            <para>Once added to the scene tree and enabled using <see cref="M:Godot.Listener3D.MakeCurrent"/>, this node will override the location sounds are heard from. This can be used to listen from a location different from the <see cref="T:Godot.Camera3D"/>.</para>
            <para>Note: There is no 2D equivalent for this node yet.</para>
            </summary>
        </member>
        <member name="M:Godot.Listener3D.MakeCurrent">
            <summary>
            <para>Enables the listener. This will override the current camera's listener.</para>
            </summary>
        </member>
        <member name="M:Godot.Listener3D.ClearCurrent">
            <summary>
            <para>Disables the listener to use the current camera's listener instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Listener3D.IsCurrent">
            <summary>
            <para>Returns <c>true</c> if the listener was made current using <see cref="M:Godot.Listener3D.MakeCurrent"/>, <c>false</c> otherwise.</para>
            <para>Note: There may be more than one Listener3D marked as "current" in the scene tree, but only the one that was made current last will be used.</para>
            </summary>
        </member>
        <member name="M:Godot.Listener3D.GetListenerTransform">
            <summary>
            <para>Returns the listener's global orthonormalized <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MainLoop">
            <summary>
            <para><see cref="T:Godot.MainLoop"/> is the abstract base class for a Godot project's game loop. It is inherited by <see cref="T:Godot.SceneTree"/>, which is the default game loop implementation used in Godot projects, though it is also possible to write and use one's own <see cref="T:Godot.MainLoop"/> subclass instead of the scene tree.</para>
            <para>Upon the application start, a <see cref="T:Godot.MainLoop"/> implementation must be provided to the OS; otherwise, the application will exit. This happens automatically (and a <see cref="T:Godot.SceneTree"/> is created) unless a main <see cref="T:Godot.Script"/> is provided from the command line (with e.g. <c>godot -s my_loop.gd</c>, which should then be a <see cref="T:Godot.MainLoop"/> implementation.</para>
            <para>Here is an example script implementing a simple <see cref="T:Godot.MainLoop"/>:</para>
            <para>FIXME: No longer valid after DisplayServer split and Input refactoring.</para>
            <para><code>
            extends MainLoop
            
            var time_elapsed = 0
            var keys_typed = []
            var quit = false
            
            func _initialize():
                print("Initialized:")
                print("  Starting time: %s" % str(time_elapsed))
            
            func _idle(delta):
                time_elapsed += delta
                # Return true to end the main loop.
                return quit
            
            func _input_event(event):
                # Record keys.
                if event is InputEventKey and event.pressed and !event.echo:
                    keys_typed.append(OS.get_keycode_string(event.keycode))
                    # Quit on Escape press.
                    if event.keycode == KEY_ESCAPE:
                        quit = true
                # Quit on any mouse click.
                if event is InputEventMouseButton:
                    quit = true
            
            func _finalize():
                print("Finalized:")
                print("  End time: %s" % str(time_elapsed))
                print("  Keys typed: %s" % var2str(keys_typed))
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationOsMemoryWarning">
            <summary>
            <para>Notification received from the OS when the application is exceeding its allocated memory.</para>
            <para>Specific to the iOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationTranslationChanged">
            <summary>
            <para>Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like <see cref="M:Godot.Object.Tr(Godot.StringName,Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationWmAbout">
            <summary>
            <para>Notification received from the OS when a request for "About" information is sent.</para>
            <para>Specific to the macOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationCrash">
            <summary>
            <para>Notification received from Godot's crash handler when the engine is about to crash.</para>
            <para>Implemented on desktop platforms if the crash handler is enabled.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationOsImeUpdate">
            <summary>
            <para>Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).</para>
            <para>Specific to the macOS platform.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationApplicationResumed">
            <summary>
            <para>Notification received from the OS when the application is resumed.</para>
            <para>Specific to the Android platform.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationApplicationPaused">
            <summary>
            <para>Notification received from the OS when the application is paused.</para>
            <para>Specific to the Android platform.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationApplicationFocusIn">
            <summary>
            <para>Notification received from the OS when the application is focused, i.e. when changing the focus from the OS desktop or a thirdparty application to any open window of the Godot instance.</para>
            <para>Implemented on desktop platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationApplicationFocusOut">
            <summary>
            <para>Notification received from the OS when the application is defocused, i.e. when changing the focus from any open window of the Godot instance to the OS desktop or a thirdparty application.</para>
            <para>Implemented on desktop platforms.</para>
            </summary>
        </member>
        <member name="F:Godot.MainLoop.NotificationTextServerChanged">
            <summary>
            <para>Notification received when text server is changed.</para>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Finalize">
            <summary>
            <para>Called before the program exits.</para>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Initialize">
            <summary>
            <para>Called once during initialization.</para>
            </summary>
        </member>
        <member name="T:Godot.MainLoop.OnRequestPermissionsResultHandler">
            <summary>
            <para>Emitted when a user responds to a permission request.</para>
            </summary>
        </member>
        <member name="T:Godot.MarginContainer">
            <summary>
            <para>Adds a top, left, bottom, and right margin to all <see cref="T:Godot.Control"/> nodes that are direct children of the container. To control the <see cref="T:Godot.MarginContainer"/>'s margin, use the <c>margin_*</c> theme properties listed below.</para>
            <para>Note: Be careful, <see cref="T:Godot.Control"/> margin values are different than the constant margin values. If you want to change the custom margin values of the <see cref="T:Godot.MarginContainer"/> by code, you should use the following examples:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var margin_value = 100</para>
            <para>set("custom_constants/margin_top", margin_value)</para>
            <para>set("custom_constants/margin_left", margin_value)</para>
            <para>set("custom_constants/margin_bottom", margin_value)</para>
            <para>set("custom_constants/margin_right", margin_value)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>int marginValue = 100;</para>
            <para>Set("custom_constants/margin_top", marginValue);</para>
            <para>Set("custom_constants/margin_left", marginValue);</para>
            <para>Set("custom_constants/margin_bottom", marginValue);</para>
            <para>Set("custom_constants/margin_right", marginValue);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.Material">
            <summary>
            <para>Material is a base <see cref="T:Godot.Resource"/> used for coloring and shading geometry. All materials inherit from it and almost all <see cref="T:Godot.VisualInstance3D"/> derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.</para>
            </summary>
        </member>
        <member name="F:Godot.Material.RenderPriorityMax">
            <summary>
            <para>Maximum value for the <see cref="P:Godot.Material.RenderPriority"/> parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.Material.RenderPriorityMin">
            <summary>
            <para>Minimum value for the <see cref="P:Godot.Material.RenderPriority"/> parameter.</para>
            </summary>
        </member>
        <member name="P:Godot.Material.RenderPriority">
            <summary>
            <para>Sets the render priority for transparent objects in 3D scenes. Higher priority objects will be sorted in front of lower priority objects.</para>
            <para>Note: this only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority).</para>
            </summary>
        </member>
        <member name="P:Godot.Material.NextPass">
            <summary>
            <para>Sets the <see cref="T:Godot.Material"/> to be used for the next pass. This renders the object again using a different material.</para>
            <para>Note: only applies to <see cref="T:Godot.StandardMaterial3D"/>s and <see cref="T:Godot.ShaderMaterial"/>s with type "Spatial".</para>
            </summary>
        </member>
        <member name="T:Godot.MenuButton">
            <summary>
            <para>Special button that brings up a <see cref="T:Godot.PopupMenu"/> when clicked.</para>
            <para>New items can be created inside this <see cref="T:Godot.PopupMenu"/> using <c>get_popup().add_item("My Item Name")</c>. You can also create them directly from the editor. To do so, select the <see cref="T:Godot.MenuButton"/> node, then in the toolbar at the top of the 2D editor, click Items then click Add in the popup. You will be able to give each items new properties.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="P:Godot.MenuButton.SwitchOnHover">
            <summary>
            <para>If <c>true</c>, when the cursor hovers above another <see cref="T:Godot.MenuButton"/> within the same parent which also has <c>switch_on_hover</c> enabled, it will close the current <see cref="T:Godot.MenuButton"/> and open the other one.</para>
            </summary>
        </member>
        <member name="M:Godot.MenuButton.GetPopup">
            <summary>
            <para>Returns the <see cref="T:Godot.PopupMenu"/> contained in this button.</para>
            </summary>
        </member>
        <member name="M:Godot.MenuButton.SetDisableShortcuts(System.Boolean)">
            <summary>
            <para>If <c>true</c>, shortcuts are disabled and cannot be used to trigger the button.</para>
            </summary>
        </member>
        <member name="T:Godot.MenuButton.AboutToPopupHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.PopupMenu"/> of this MenuButton is about to show.</para>
            </summary>
        </member>
        <member name="T:Godot.Mesh">
            <summary>
            <para>Mesh is a type of <see cref="T:Godot.Resource"/> that contains vertex array-based geometry, divided in surfaces. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayCustomFormat.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Mesh.ArrayCustomFormat"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Points">
            <summary>
            <para>Render array as points (one vertex equals one point).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Lines">
            <summary>
            <para>Render array as lines (every two vertices a line is created).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.LineStrip">
            <summary>
            <para>Render array as line strip.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.Triangles">
            <summary>
            <para>Render array as triangles (every three vertices a triangle is created).</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.PrimitiveType.TriangleStrip">
            <summary>
            <para>Render array as triangle strips.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatVertex">
            <summary>
            <para>Mesh array contains vertices. All meshes require a vertex array so this should always be present.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatNormal">
            <summary>
            <para>Mesh array contains normals.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTangent">
            <summary>
            <para>Mesh array contains tangents.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatColor">
            <summary>
            <para>Mesh array contains colors.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTexUv">
            <summary>
            <para>Mesh array contains UVs.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatTexUv2">
            <summary>
            <para>Mesh array contains second UV.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatBones">
            <summary>
            <para>Mesh array contains bones.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatWeights">
            <summary>
            <para>Mesh array contains bone weights.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FormatIndex">
            <summary>
            <para>Mesh array uses indices.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayFormat.FlagUse2dVertices">
            <summary>
            <para>Flag used to mark that the array contains 2D vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Vertex">
            <summary>
            <para><see cref="T:Godot.Vector3[]"/>, <see cref="T:Godot.Vector2[]"/>, or <see cref="T:Godot.Collections.Array"/> of vertex positions.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Normal">
            <summary>
            <para><see cref="T:Godot.Vector3[]"/> of vertex normals.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Tangent">
            <summary>
            <para><see cref="T:float[]"/> of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Color">
            <summary>
            <para><see cref="T:Godot.Color[]"/> of vertex colors.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.TexUv">
            <summary>
            <para><see cref="T:Godot.Vector2[]"/> for UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.TexUv2">
            <summary>
            <para><see cref="T:Godot.Vector2[]"/> for second UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Bones">
            <summary>
            <para><see cref="T:float[]"/> or <see cref="T:int[]"/> of bone indices. Each element is a group of 4 numbers.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Weights">
            <summary>
            <para><see cref="T:float[]"/> of bone weights. Each element in groups of 4 floats.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Index">
            <summary>
            <para><see cref="T:int[]"/> of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.</para>
            <para>For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.</para>
            </summary>
        </member>
        <member name="F:Godot.Mesh.ArrayType.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Mesh.ArrayType"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Mesh.LightmapSizeHint">
            <summary>
            <para>Sets a hint to be used for lightmap resolution.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetAabb">
            <summary>
            <para>Returns the smallest <see cref="T:Godot.AABB"/> enclosing this mesh in local space. Not affected by <c>custom_aabb</c>. See also <see cref="M:Godot.VisualInstance3D.GetTransformedAabb"/>.</para>
            <para>Note: This is only implemented for <see cref="T:Godot.ArrayMesh"/> and <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetSurfaceCount">
            <summary>
            <para>Returns the amount of surfaces that the <see cref="T:Godot.Mesh"/> holds.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetArrays(System.Int32)">
            <summary>
            <para>Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetBlendShapeArrays(System.Int32)">
            <summary>
            <para>Returns the blend shape arrays for the requested surface.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceSetMaterial(System.Int32,Godot.Material)">
            <summary>
            <para>Sets a <see cref="T:Godot.Material"/> for a given surface. Surface will be rendered using this material.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.SurfaceGetMaterial(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Material"/> in a given surface. Surface is rendered using this material.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateTrimeshShape">
            <summary>
            <para>Calculate a <see cref="T:Godot.ConcavePolygonShape3D"/> from the mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateConvexShape">
            <summary>
            <para>Calculate a <see cref="T:Godot.ConvexPolygonShape3D"/> from the mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateOutline(System.Single)">
            <summary>
            <para>Calculate an outline mesh at a defined offset (margin) from the original mesh.</para>
            <para>Note: This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise).</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetFaces">
            <summary>
            <para>Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.</para>
            </summary>
        </member>
        <member name="M:Godot.Mesh.GenerateTriangleMesh">
            <summary>
            <para>Generate a <see cref="T:Godot.TriangleMesh"/> from the mesh.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshDataTool">
            <summary>
            <para>MeshDataTool provides access to individual vertices in a <see cref="T:Godot.Mesh"/>. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.</para>
            <para>To use MeshDataTool, load a mesh with <see cref="M:Godot.MeshDataTool.CreateFromSurface(Godot.ArrayMesh,System.Int32)"/>. When you are finished editing the data commit the data to a mesh with <see cref="M:Godot.MeshDataTool.CommitToSurface(Godot.ArrayMesh)"/>.</para>
            <para>Below is an example of how MeshDataTool may be used.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var mesh = ArrayMesh.new()</para>
            <para>mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, BoxMesh.new().get_mesh_arrays())</para>
            <para>var mdt = MeshDataTool.new()</para>
            <para>mdt.create_from_surface(mesh, 0)</para>
            <para>for i in range(mdt.get_vertex_count()):</para>
            <para>    var vertex = mdt.get_vertex(i)</para>
            <para>    # In this example we extend the mesh by one unit, which results in seperated faces as it is flat shaded.</para>
            <para>    vertex += mdt.get_vertex_normal(i)</para>
            <para>    # Save your change.</para>
            <para>    mdt.set_vertex(i, vertex)</para>
            <para>mesh.surface_remove(0)</para>
            <para>mdt.commit_to_surface(mesh)</para>
            <para>var mi = MeshInstance.new()</para>
            <para>mi.mesh = mesh</para>
            <para>add_child(mi)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var mesh = new ArrayMesh();</para>
            <para>mesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, new BoxMesh().GetMeshArrays());</para>
            <para>var mdt = new MeshDataTool();</para>
            <para>mdt.CreateFromSurface(mesh, 0);</para>
            <para>for (var i = 0; i &lt; mdt.GetVertexCount(); i++)</para>
            <para>{</para>
            <para>    Vector3 vertex = mdt.GetVertex(i);</para>
            <para>    // In this example we extend the mesh by one unit, which results in seperated faces as it is flat shaded.</para>
            <para>    vertex += mdt.GetVertexNormal(i);</para>
            <para>    // Save your change.</para>
            <para>    mdt.SetVertex(i, vertex);</para>
            <para>}</para>
            <para>mesh.SurfaceRemove(0);</para>
            <para>mdt.CommitToSurface(mesh);</para>
            <para>var mi = new MeshInstance();</para>
            <para>mi.Mesh = mesh;</para>
            <para>AddChild(mi);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>See also <see cref="T:Godot.ArrayMesh"/>, <see cref="T:Godot.ImmediateGeometry3D"/> and <see cref="T:Godot.SurfaceTool"/> for procedural geometry generation.</para>
            <para>Note: Godot uses clockwise <a href="https://learnopengl.com/Advanced-OpenGL/Face-culling">winding order</a> for front faces of triangle primitive modes.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.Clear">
            <summary>
            <para>Clears all data currently in MeshDataTool.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CreateFromSurface(Godot.ArrayMesh,System.Int32)">
            <summary>
            <para>Uses specified surface of given <see cref="T:Godot.Mesh"/> to populate data for MeshDataTool.</para>
            <para>Requires <see cref="T:Godot.Mesh"/> with primitive type .</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CommitToSurface(Godot.ArrayMesh)">
            <summary>
            <para>Adds a new surface to specified <see cref="T:Godot.Mesh"/> with edited data.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFormat">
            <summary>
            <para>Returns the <see cref="T:Godot.Mesh"/>'s format. Format is an integer made up of <see cref="T:Godot.Mesh"/> format flags combined together. For example, a mesh containing both vertices and normals would return a format of <c>3</c> because  is <c>1</c> and  is <c>2</c>.</para>
            <para>See <see cref="T:Godot.Mesh.ArrayFormat"/> for a list of format flags.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexCount">
            <summary>
            <para>Returns the total number of vertices in <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeCount">
            <summary>
            <para>Returns the number of edges in this <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceCount">
            <summary>
            <para>Returns the number of faces in this <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertex(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the position of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertex(System.Int32)">
            <summary>
            <para>Returns the vertex at given index.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexNormal(System.Int32,Godot.Vector3)">
            <summary>
            <para>Sets the normal of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexNormal(System.Int32)">
            <summary>
            <para>Returns the normal of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexTangent(System.Int32,Godot.Plane)">
            <summary>
            <para>Sets the tangent of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexTangent(System.Int32)">
            <summary>
            <para>Returns the tangent of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the UV of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv(System.Int32)">
            <summary>
            <para>Returns the UV of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv2(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the UV2 of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv2(System.Int32)">
            <summary>
            <para>Returns the UV2 of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexColor(System.Int32)">
            <summary>
            <para>Returns the color of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexBones(System.Int32,System.Int32[])">
            <summary>
            <para>Sets the bones of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexBones(System.Int32)">
            <summary>
            <para>Returns the bones of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexWeights(System.Int32,System.Single[])">
            <summary>
            <para>Sets the bone weights of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexWeights(System.Int32)">
            <summary>
            <para>Returns bone weights of the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata associated with the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexMeta(System.Int32)">
            <summary>
            <para>Returns the metadata associated with the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexEdges(System.Int32)">
            <summary>
            <para>Returns an array of edges that share the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexFaces(System.Int32)">
            <summary>
            <para>Returns an array of faces that share the given vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeVertex(System.Int32,System.Int32)">
            <summary>
            <para>Returns index of specified vertex connected to given edge.</para>
            <para>Vertex argument can only be 0 or 1 because edges are comprised of two vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeFaces(System.Int32)">
            <summary>
            <para>Returns array of faces that touch given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetEdgeMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata of the given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeMeta(System.Int32)">
            <summary>
            <para>Returns meta information assigned to given edge.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceVertex(System.Int32,System.Int32)">
            <summary>
            <para>Returns the specified vertex of the given face.</para>
            <para>Vertex argument must be 2 or less because faces contain three vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceEdge(System.Int32,System.Int32)">
            <summary>
            <para>Returns specified edge associated with given face.</para>
            <para>Edge argument must 2 or less because a face only has three edges.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetFaceMeta(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata of the given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceMeta(System.Int32)">
            <summary>
            <para>Returns the metadata associated with the given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceNormal(System.Int32)">
            <summary>
            <para>Calculates and returns the face normal of the given face.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetMaterial(Godot.Material)">
            <summary>
            <para>Sets the material to be used by newly-constructed <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetMaterial">
            <summary>
            <para>Returns the material assigned to the <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshInstance2D">
            <summary>
            <para>Node used for displaying a <see cref="T:Godot.Mesh"/> in 2D. Can be constructed from an existing <see cref="T:Godot.Sprite2D"/> via a tool in the editor toolbar. Select "Sprite2D" then "Convert to Mesh2D", select settings in popup and press "Create Mesh2D".</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.Mesh">
            <summary>
            <para>The <see cref="T:Godot.Mesh"/> that will be drawn by the <see cref="T:Godot.MeshInstance2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.Texture">
            <summary>
            <para>The <see cref="T:Godot.Texture2D"/> that will be used if using the default <see cref="T:Godot.CanvasItemMaterial"/>. Can be accessed as <c>TEXTURE</c> in CanvasItem shader.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance2D.NormalMap">
            <summary>
            <para>The normal map that will be used if using the default <see cref="T:Godot.CanvasItemMaterial"/>.</para>
            <para>Note: Godot expects the normal map to use X+, Y-, and Z+ coordinates. See <a href="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">this page</a> for a comparison of normal map coordinates expected by popular engines.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshInstance2D.TextureChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.MeshInstance2D.Texture"/> is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshInstance3D">
            <summary>
            <para>MeshInstance3D is a node that takes a <see cref="T:Godot.Mesh"/> resource and adds it to the current scenario by creating an instance of it. This is the class most often used render 3D geometry and can be used to instance a single <see cref="T:Godot.Mesh"/> in many places. This allows reuse of geometry which can save on resources. When a <see cref="T:Godot.Mesh"/> has to be instanced more than thousands of times at close proximity, consider using a <see cref="T:Godot.MultiMesh"/> in a <see cref="T:Godot.MultiMeshInstance3D"/> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance3D.Mesh">
            <summary>
            <para>The <see cref="T:Godot.Mesh"/> resource for the instance.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance3D.Skin">
            <summary>
            <para>Sets the skin to be used by this instance.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshInstance3D.Skeleton">
            <summary>
            <para><see cref="T:Godot.NodePath"/> to the <see cref="T:Godot.Skeleton3D"/> associated with the instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.GetSurfaceMaterialCount">
            <summary>
            <para>Returns the number of surface materials.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.SetSurfaceMaterial(System.Int32,Godot.Material)">
            <summary>
            <para>Sets the override <see cref="T:Godot.Material"/> for the specified surface of the <see cref="T:Godot.Mesh"/> resource. This material is associated with this <see cref="T:Godot.MeshInstance3D"/> rather than with the <see cref="T:Godot.Mesh"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.GetSurfaceMaterial(System.Int32)">
            <summary>
            <para>Returns the override <see cref="T:Godot.Material"/> for the specified surface of the <see cref="T:Godot.Mesh"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.GetActiveMaterial(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Material"/> that will be used by the <see cref="T:Godot.Mesh"/> when drawing. This can return the <see cref="P:Godot.GeometryInstance3D.MaterialOverride"/>, the surface override <see cref="T:Godot.Material"/> defined in this <see cref="T:Godot.MeshInstance3D"/>, or the surface <see cref="T:Godot.Material"/> defined in the <see cref="T:Godot.Mesh"/>. For example, if <see cref="P:Godot.GeometryInstance3D.MaterialOverride"/> is used, all surfaces will return the override material.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.CreateTrimeshCollision">
            <summary>
            <para>This helper creates a <see cref="T:Godot.StaticBody3D"/> child node with a <see cref="T:Godot.ConcavePolygonShape3D"/> collision shape calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.CreateConvexCollision">
            <summary>
            <para>This helper creates a <see cref="T:Godot.StaticBody3D"/> child node with a <see cref="T:Godot.ConvexPolygonShape3D"/> collision shape calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshInstance3D.CreateDebugTangents">
            <summary>
            <para>This helper creates a <see cref="T:Godot.MeshInstance3D"/> child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshLibrary">
            <summary>
            <para>A library of meshes. Contains a list of <see cref="T:Godot.Mesh"/> resources, each with a name and ID. Each item can also include collision and navigation shapes. This resource is used in <see cref="T:Godot.GridMap"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.CreateItem(System.Int32)">
            <summary>
            <para>Creates a new item in the library with the given ID.</para>
            <para>You can get an unused ID from <see cref="M:Godot.MeshLibrary.GetLastUnusedItemId"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemName(System.Int32,System.String)">
            <summary>
            <para>Sets the item's name.</para>
            <para>This name is shown in the editor. It can also be used to look up the item later using <see cref="M:Godot.MeshLibrary.FindItemByName(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemMesh(System.Int32,Godot.Mesh)">
            <summary>
            <para>Sets the item's mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemNavmesh(System.Int32,Godot.NavigationMesh)">
            <summary>
            <para>Sets the item's navigation mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemNavmeshTransform(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform to apply to the item's navigation mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemShapes(System.Int32,Godot.Collections.Array)">
            <summary>
            <para>Sets an item's collision shapes.</para>
            <para>The array should consist of <see cref="T:Godot.Shape3D"/> objects, each followed by a <see cref="T:Godot.Transform"/> that will be applied to it. For shapes that should not have a transform, use .</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemPreview(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets a texture to use as the item's preview icon in the editor.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemName(System.Int32)">
            <summary>
            <para>Returns the item's name.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemMesh(System.Int32)">
            <summary>
            <para>Returns the item's mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemNavmesh(System.Int32)">
            <summary>
            <para>Returns the item's navigation mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemNavmeshTransform(System.Int32)">
            <summary>
            <para>Returns the transform applied to the item's navigation mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemShapes(System.Int32)">
            <summary>
            <para>Returns an item's collision shapes.</para>
            <para>The array consists of each <see cref="T:Godot.Shape3D"/> followed by its <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemPreview(System.Int32)">
            <summary>
            <para>When running in the editor, returns a generated item preview (a 3D rendering in isometric perspective). When used in a running project, returns the manually-defined item preview which can be set using <see cref="M:Godot.MeshLibrary.SetItemPreview(System.Int32,Godot.Texture2D)"/>. Returns an empty <see cref="T:Godot.Texture2D"/> if no preview was manually set in a running project.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.FindItemByName(System.String)">
            <summary>
            <para>Returns the first item with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.Clear">
            <summary>
            <para>Clears the library.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemList">
            <summary>
            <para>Returns the list of item IDs in use.</para>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetLastUnusedItemId">
            <summary>
            <para>Gets an unused ID for a new item.</para>
            </summary>
        </member>
        <member name="T:Godot.MeshTexture">
            <summary>
            <para>Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshTexture.Mesh">
            <summary>
            <para>Sets the mesh used to draw. It must be a mesh using 2D vertices.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshTexture.BaseTexture">
            <summary>
            <para>Sets the base texture that the Mesh will use to draw.</para>
            </summary>
        </member>
        <member name="P:Godot.MeshTexture.ImageSize">
            <summary>
            <para>Sets the size of the image, needed for reference.</para>
            </summary>
        </member>
        <member name="T:Godot.MobileVRInterface">
            <summary>
            <para>This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect, you need a mobile phone with a gyroscope and accelerometer.</para>
            <para>Note that even though there is no positional tracking, the camera will assume the headset is at a height of 1.85 meters. You can change this by setting <see cref="P:Godot.MobileVRInterface.EyeHeight"/>.</para>
            <para>You can initialise this interface as follows:</para>
            <para><code>
            var interface = XRServer.find_interface("Native mobile")
            if interface and interface.initialize():
                get_viewport().xr = true
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.EyeHeight">
            <summary>
            <para>The height at which the camera is placed in relation to the ground (i.e. <see cref="T:Godot.XROrigin3D"/> node).</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Iod">
            <summary>
            <para>The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayWidth">
            <summary>
            <para>The width of the display in centimeters.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayToLens">
            <summary>
            <para>The distance between the display and the lenses inside of the device in centimeters.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Oversample">
            <summary>
            <para>The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K1">
            <summary>
            <para>The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect.</para>
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K2">
            <summary>
            <para>The k2 lens factor, see k1.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMesh">
            <summary>
            <para>MultiMesh provides low-level mesh instancing. Drawing thousands of <see cref="T:Godot.MeshInstance3D"/> nodes can be slow, since each object is submitted to the GPU then drawn individually.</para>
            <para>MultiMesh is much faster as it can draw thousands of instances with a single draw call, resulting in less API overhead.</para>
            <para>As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).</para>
            <para>Since instances may have any behavior, the AABB used for visibility must be provided by the user.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.TransformFormatEnum.Transform2d">
            <summary>
            <para>Use this when using 2D transforms.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiMesh.TransformFormatEnum.Transform3d">
            <summary>
            <para>Use this when using 3D transforms.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.TransformFormat">
            <summary>
            <para>Format of transform used to transform mesh, either 2D or 3D.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.UseColors">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.MultiMesh"/> will use color data (see <see cref="P:Godot.MultiMesh.ColorArray"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.UseCustomData">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.MultiMesh"/> will use custom data (see <see cref="P:Godot.MultiMesh.CustomDataArray"/>).</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.InstanceCount">
            <summary>
            <para>Number of instances that will get drawn. This clears and (re)sizes the buffers. By default, all instances are drawn but you can limit this with <see cref="P:Godot.MultiMesh.VisibleInstanceCount"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.VisibleInstanceCount">
            <summary>
            <para>Limits the number of instances drawn, -1 draws all instances. Changing this does not change the sizes of the buffers.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.Mesh">
            <summary>
            <para>Mesh to be drawn.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceTransform(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> for a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceTransform2d(System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform2D"/> for a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceTransform(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform"/> of a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceTransform2d(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> of a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color of a specific instance by multiplying the mesh's existing vertex colors.</para>
            <para>For the color to take effect, ensure that <see cref="P:Godot.MultiMesh.UseColors"/> is <c>true</c> on the <see cref="T:Godot.MultiMesh"/> and <see cref="P:Godot.BaseMaterial3D.VertexColorUseAsAlbedo"/> is <c>true</c> on the material.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceColor(System.Int32)">
            <summary>
            <para>Gets a specific instance's color.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceCustomData(System.Int32,Godot.Color)">
            <summary>
            <para>Sets custom data for a specific instance. Although <see cref="T:Godot.Color"/> is used, it is just a container for 4 floating point numbers.</para>
            <para>For the custom data to be used, ensure that <see cref="P:Godot.MultiMesh.UseCustomData"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceCustomData(System.Int32)">
            <summary>
            <para>Returns the custom data that has been set for a specific instance.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetAabb">
            <summary>
            <para>Returns the visibility axis-aligned bounding box in local space. See also <see cref="M:Godot.VisualInstance3D.GetTransformedAabb"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMeshInstance2D">
            <summary>
            <para><see cref="T:Godot.MultiMeshInstance2D"/> is a specialized node to instance a <see cref="T:Godot.MultiMesh"/> resource in 2D.</para>
            <para>Usage is the same as <see cref="T:Godot.MultiMeshInstance3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance2D.Multimesh">
            <summary>
            <para>The <see cref="T:Godot.MultiMesh"/> that will be drawn by the <see cref="T:Godot.MultiMeshInstance2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance2D.Texture">
            <summary>
            <para>The <see cref="T:Godot.Texture2D"/> that will be used if using the default <see cref="T:Godot.CanvasItemMaterial"/>. Can be accessed as <c>TEXTURE</c> in CanvasItem shader.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance2D.NormalMap">
            <summary>
            <para>The normal map that will be used if using the default <see cref="T:Godot.CanvasItemMaterial"/>.</para>
            <para>Note: Godot expects the normal map to use X+, Y-, and Z+ coordinates. See <a href="http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates">this page</a> for a comparison of normal map coordinates expected by popular engines.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMeshInstance2D.TextureChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.MultiMeshInstance2D.Texture"/> is changed.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiMeshInstance3D">
            <summary>
            <para><see cref="T:Godot.MultiMeshInstance3D"/> is a specialized node to instance <see cref="T:Godot.GeometryInstance3D"/>s based on a <see cref="T:Godot.MultiMesh"/> resource.</para>
            <para>This is useful to optimize the rendering of a high amount of instances of a given mesh (for example trees in a forest or grass strands).</para>
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance3D.Multimesh">
            <summary>
            <para>The <see cref="T:Godot.MultiMesh"/> resource that will be used and shared among all instances of the <see cref="T:Godot.MultiMeshInstance3D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI">
            <summary>
            <para>This class implements most of the logic behind the high-level multiplayer API.</para>
            <para>By default, <see cref="T:Godot.SceneTree"/> has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.</para>
            <para>It is possible to override the MultiplayerAPI instance used by specific Nodes by setting the <see cref="P:Godot.Node.CustomMultiplayer"/> property, effectively allowing to run both client and server in the same scene.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Disabled">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> to disable a method or property for all RPC calls, making it unavailable. Default for all methods.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Remote">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the <c>remote</c> keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or puppets.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Master">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on the network master for this node. Analogous to the <c>master</c> keyword. Only accepts calls or property changes from the node's network puppets, see <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Puppet">
            <summary>
            <para>Used with <see cref="M:Godot.Node.RpcConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> or <see cref="M:Godot.Node.RsetConfig(Godot.StringName,Godot.MultiplayerAPI.RPCMode)"/> to set a method to be called or a property to be changed only on puppets for this node. Analogous to the <c>puppet</c> keyword. Only accepts calls or property changes from the node's network master, see <see cref="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Remotesync">
            <summary>
            <para>Behave like  but also make the call or property change locally. Analogous to the <c>remotesync</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Mastersync">
            <summary>
            <para>Behave like  but also make the call or property change locally. Analogous to the <c>mastersync</c> keyword.</para>
            </summary>
        </member>
        <member name="F:Godot.MultiplayerAPI.RPCMode.Puppetsync">
            <summary>
            <para>Behave like  but also make the call or property change locally. Analogous to the <c>puppetsync</c> keyword.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.AllowObjectDecoding">
            <summary>
            <para>If <c>true</c>, the MultiplayerAPI will allow encoding and decoding of object during RPCs/RSETs.</para>
            <para>Warning: Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.RefuseNewNetworkConnections">
            <summary>
            <para>If <c>true</c>, the MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> refuses new incoming connections.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.NetworkPeer">
            <summary>
            <para>The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with <see cref="M:Godot.MultiplayerAPI.IsNetworkServer"/>) and will set root node's network mode to master, or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.</para>
            </summary>
        </member>
        <member name="P:Godot.MultiplayerAPI.RootNode">
            <summary>
            <para>The root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.</para>
            <para>This effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.SendBytes(System.Byte[],System.Int32,Godot.NetworkedMultiplayerPeer.TransferModeEnum)">
            <summary>
            <para>Sends the given raw <c>bytes</c> to a specific peer identified by <c>id</c> (see <see cref="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)"/>). Default ID is <c>0</c>, i.e. broadcast to all peers.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.HasNetworkPeer">
            <summary>
            <para>Returns <c>true</c> if there is a <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> set.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetNetworkUniqueId">
            <summary>
            <para>Returns the unique peer ID of this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.IsNetworkServer">
            <summary>
            <para>Returns <c>true</c> if this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> is in server mode (listening for connections).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetRpcSenderId">
            <summary>
            <para>Returns the sender's peer ID for the RPC currently being executed.</para>
            <para>Note: If not inside an RPC this method will return 0.</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.Poll">
            <summary>
            <para>Method used for polling the MultiplayerAPI. You only need to worry about this if you are using <see cref="P:Godot.Node.CustomMultiplayer"/> override or you set <see cref="P:Godot.SceneTree.MultiplayerPoll"/> to <c>false</c>. By default, <see cref="T:Godot.SceneTree"/> will poll its MultiplayerAPI for you.</para>
            <para>Note: This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. <c>_process</c>, <c>physics</c>, <see cref="T:Godot.Thread"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.Clear">
            <summary>
            <para>Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing).</para>
            </summary>
        </member>
        <member name="M:Godot.MultiplayerAPI.GetNetworkConnectedPeers">
            <summary>
            <para>Returns the peer IDs of all connected peers of this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.ConnectedToServerHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> successfully connected to a server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.ConnectionFailedHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> fails to establish a connection to a server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.NetworkPeerPacketHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> receive a <c>packet</c> with custom data (see <see cref="M:Godot.MultiplayerAPI.SendBytes(System.Byte[],System.Int32,Godot.NetworkedMultiplayerPeer.TransferModeEnum)"/>). ID is the peer ID of the peer that sent the packet.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.NetworkPeerDisconnectedHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> disconnects from a peer. Clients get notified when other clients disconnect from the same server.</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.NetworkPeerConnectedHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).</para>
            </summary>
        </member>
        <member name="T:Godot.MultiplayerAPI.ServerDisconnectedHandler">
            <summary>
            <para>Emitted when this MultiplayerAPI's <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/> disconnects from server. Only emitted on clients.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetClassDocumentation">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_class_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetMethodDocumentation(Godot.StringName)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_method_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetSignalDocumentation(Godot.StringName)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_signal_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.GetPropertyDocumentation(Godot.StringName)">
            <summary>
            <para>Returns the documentation string that was previously set with <c>godot_nativescript_set_property_documentation</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.New(System.Object[])">
            <summary>
            <para>Constructs a new object of the base type with a script of this type already attached.</para>
            <para>Note: Any arguments passed to this function will be ignored and not passed to the native constructor function. This will change with in a future API extension.</para>
            </summary>
        </member>
        <member name="T:Godot.Navigation2D">
            <summary>
            <para>Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of <see cref="T:Godot.NavigationPolygon"/> resources. These are automatically collected from child <see cref="T:Godot.NavigationRegion2D"/> nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetSimplePath(Godot.Vector2,Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the path between two given points. Points are in local coordinate space. If <c>optimize</c> is <c>true</c> (the default), the path is smoothed by merging path segments where possible.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPoint(Godot.Vector2)">
            <summary>
            <para>Returns the point closest to the provided <c>to_point</c> on the navigation mesh surface.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPointOwner(Godot.Vector2)">
            <summary>
            <para>Returns the owner region RID for the point returned by <see cref="M:Godot.Navigation2D.GetClosestPoint(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Navigation3D">
            <summary>
            <para>Provides navigation and pathfinding within a collection of <see cref="T:Godot.NavigationMesh"/>es. These will be automatically collected from child <see cref="T:Godot.NavigationRegion3D"/> nodes. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.</para>
            </summary>
        </member>
        <member name="P:Godot.Navigation3D.UpVector">
            <summary>
            <para>Defines which direction is up. By default, this is <c>(0, 1, 0)</c>, which is the world's "up" direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation3D.GetSimplePath(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the path between two given points. Points are in local coordinate space. If <c>optimize</c> is <c>true</c> (the default), the agent properties associated with each <see cref="T:Godot.NavigationMesh"/> (radius, height, etc.) are considered in the path calculation, otherwise they are ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation3D.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the closest point between the navigation surface and the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation3D.GetClosestPoint(Godot.Vector3)">
            <summary>
            <para>Returns the point closest to the provided <c>to_point</c> on the navigation mesh surface.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation3D.GetClosestPointNormal(Godot.Vector3)">
            <summary>
            <para>Returns the normal for the point returned by <see cref="M:Godot.Navigation3D.GetClosestPoint(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Navigation3D.GetClosestPointOwner(Godot.Vector3)">
            <summary>
            <para>Returns the owner region RID for the point returned by <see cref="M:Godot.Navigation3D.GetClosestPoint(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent2D">
            <summary>
            <para>2D Agent that is used in navigation to reach a location while avoiding static and dynamic obstacles. The dynamic obstacles are avoided using RVO collision avoidance. The agent needs navigation data to work correctly. This can be done by having the agent as a child of a <see cref="T:Godot.Navigation2D"/> node, or using <see cref="M:Godot.NavigationAgent2D.SetNavigation(Godot.Node)"/>. <see cref="T:Godot.NavigationAgent2D"/> is physics safe.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.TargetDesiredDistance">
            <summary>
            <para>The distance threshold before a target is considered to be reached. This will allow an agent to not have to hit a point on the path exactly, but in the area.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.Radius">
            <summary>
            <para>The radius of the agent.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.NeighborDist">
            <summary>
            <para>The distance to search for other agents.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.MaxNeighbors">
            <summary>
            <para>The maximum number of neighbors for the agent to consider.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.TimeHorizon">
            <summary>
            <para>The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithim, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. Must be positive.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.MaxSpeed">
            <summary>
            <para>The maximum speed that an agent can move.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent2D.PathMaxDistance">
            <summary>
            <para>The maximum distance the agent is allowed away from the ideal path to the final location. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.SetNavigation(Godot.Node)">
            <summary>
            <para>Sets the <see cref="T:Godot.Navigation2D"/> node used by the agent. Useful when you don't want to make the agent a child of a <see cref="T:Godot.Navigation2D"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetNavigation">
            <summary>
            <para>Returns the <see cref="T:Godot.Navigation2D"/> node that the agent is using for its navigation system.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.SetTargetLocation(Godot.Vector2)">
            <summary>
            <para>Sets the user desired final location. This will clear the current navigation path.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetTargetLocation">
            <summary>
            <para>Returns the user defined <see cref="T:Godot.Vector2"/> after setting the target location.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetNextLocation">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2"/> in global coordinates, that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.DistanceToTarget">
            <summary>
            <para>Returns the distance to the target location, using the agent's global position. The user must set the target location with <see cref="M:Godot.NavigationAgent2D.SetTargetLocation(Godot.Vector2)"/> in order for this to be accurate.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.SetVelocity(Godot.Vector2)">
            <summary>
            <para>Sends the passed in velocity to the collision avoidance algorithm. It will adjust the velocity to avoid collisions. Once the adjustment to the velocity is complete, it will emit the <c>velocity_computed</c> signal.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetNavPath">
            <summary>
            <para>Returns the path from start to finish in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetNavPathIndex">
            <summary>
            <para>Returns which index the agent is currently on in the navigation path's <see cref="T:Godot.Vector2[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.IsTargetReached">
            <summary>
            <para>Returns true if the target location is reached. The target location is set using <see cref="M:Godot.NavigationAgent2D.SetTargetLocation(Godot.Vector2)"/>. It may not always be possible to reach the target location. It should always be possible to reach the final location though. See <see cref="M:Godot.NavigationAgent2D.GetFinalLocation"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.IsTargetReachable">
            <summary>
            <para>Returns true if the target location is reachable. The target location is set using <see cref="M:Godot.NavigationAgent2D.SetTargetLocation(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.IsNavigationFinished">
            <summary>
            <para>Returns true if the navigation path's final location has been reached.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent2D.GetFinalLocation">
            <summary>
            <para>Returns the reachable final location in global coordinates. This can change if the navigation path is altered in any way.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent2D.PathChangedHandler">
            <summary>
            <para>Notifies when the navigation path changes.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent2D.VelocityComputedHandler">
            <summary>
            <para>Notifies when the collision avoidance velocity is calculated. Emitted by <see cref="M:Godot.NavigationAgent2D.SetVelocity(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent2D.NavigationFinishedHandler">
            <summary>
            <para>Notifies when the final location is reached.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent2D.TargetReachedHandler">
            <summary>
            <para>Notifies when the player defined target, set with <see cref="M:Godot.NavigationAgent2D.SetTargetLocation(Godot.Vector2)"/>, is reached.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent3D">
            <summary>
            <para>3D Agent that is used in navigation to reach a location while avoiding static and dynamic obstacles. The dynamic obstacles are avoided using RVO collision avoidance. The agent needs navigation data to work correctly. This can be done by having the agent as a child of a <see cref="T:Godot.Navigation3D"/> node, or using <see cref="M:Godot.NavigationAgent3D.SetNavigation(Godot.Node)"/>. <see cref="T:Godot.NavigationAgent3D"/> is physics safe.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.TargetDesiredDistance">
            <summary>
            <para>The distance threshold before a target is considered to be reached. This will allow an agent to not have to hit a point on the path exactly, but in the area.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.Radius">
            <summary>
            <para>The radius of the agent.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.AgentHeightOffset">
            <summary>
            <para>The agent height offset to match the navigation mesh height.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.NeighborDist">
            <summary>
            <para>The distance to search for other agents.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.MaxNeighbors">
            <summary>
            <para>The maximum number of neighbors for the agent to consider.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.TimeHorizon">
            <summary>
            <para>The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithim, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. Must be positive.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.MaxSpeed">
            <summary>
            <para>The maximum speed that an agent can move.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.PathMaxDistance">
            <summary>
            <para>The maximum distance the agent is allowed away from the ideal path to the final location. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationAgent3D.IgnoreY">
            <summary>
            <para>Ignores collisions on the Y axis. Must be true to move on a horizontal plane.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.SetNavigation(Godot.Node)">
            <summary>
            <para>Sets the <see cref="T:Godot.Navigation3D"/> node used by the agent. Useful when you don't want to make the agent a child of a <see cref="T:Godot.Navigation3D"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetNavigation">
            <summary>
            <para>Returns the <see cref="T:Godot.Navigation3D"/> node that the agent is using for its navigation system.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.SetTargetLocation(Godot.Vector3)">
            <summary>
            <para>Sets the user desired final location. This will clear the current navigation path.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetTargetLocation">
            <summary>
            <para>Returns the user defined <see cref="T:Godot.Vector3"/> after setting the target location.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetNextLocation">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector3"/> in global coordinates, that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the origin of the agent's parent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.DistanceToTarget">
            <summary>
            <para>Returns the distance to the target location, using the agent's global position. The user must set the target location with <see cref="M:Godot.NavigationAgent3D.SetTargetLocation(Godot.Vector3)"/> in order for this to be accurate.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.SetVelocity(Godot.Vector3)">
            <summary>
            <para>Sends the passed in velocity to the collision avoidance algorithm. It will adjust the velocity to avoid collisions. Once the adjustment to the velocity is complete, it will emit the <c>velocity_computed</c> signal.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetNavPath">
            <summary>
            <para>Returns the path from start to finish in global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetNavPathIndex">
            <summary>
            <para>Returns which index the agent is currently on in the navigation path's <see cref="T:Godot.Vector3[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.IsTargetReached">
            <summary>
            <para>Returns true if the target location is reached. The target location is set using <see cref="M:Godot.NavigationAgent3D.SetTargetLocation(Godot.Vector3)"/>. It may not always be possible to reach the target location. It should always be possible to reach the final location though. See <see cref="M:Godot.NavigationAgent3D.GetFinalLocation"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.IsTargetReachable">
            <summary>
            <para>Returns true if the target location is reachable. The target location is set using <see cref="M:Godot.NavigationAgent3D.SetTargetLocation(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.IsNavigationFinished">
            <summary>
            <para>Returns true if the navigation path's final location has been reached.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationAgent3D.GetFinalLocation">
            <summary>
            <para>Returns the reachable final location in global coordinates. This can change if the navigation path is altered in any way. Because of this, it would be best to check this each frame.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent3D.PathChangedHandler">
            <summary>
            <para>Notifies when the navigation path changes.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent3D.VelocityComputedHandler">
            <summary>
            <para>Notifies when the collision avoidance velocity is calculated. Emitted by <see cref="M:Godot.NavigationAgent3D.SetVelocity(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent3D.NavigationFinishedHandler">
            <summary>
            <para>Notifies when the final location is reached.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationAgent3D.TargetReachedHandler">
            <summary>
            <para>Notifies when the player defined target, set with <see cref="M:Godot.NavigationAgent3D.SetTargetLocation(Godot.Vector3)"/>, is reached.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationObstacle2D">
            <summary>
            <para>2D Obstacle used in navigation for collision avoidance. The obstacle needs navigation data to work correctly. This can be done by having the obstacle as a child of a <see cref="T:Godot.Navigation2D"/> node, or using <see cref="M:Godot.NavigationObstacle2D.SetNavigation(Godot.Node)"/>. <see cref="T:Godot.NavigationObstacle2D"/> is physics safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationObstacle2D.SetNavigation(Godot.Node)">
            <summary>
            <para>Sets the <see cref="T:Godot.Navigation2D"/> node used by the obstacle. Useful when you don't want to make the obstacle a child of a <see cref="T:Godot.Navigation2D"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationObstacle2D.GetNavigation">
            <summary>
            <para>Returns the <see cref="T:Godot.Navigation2D"/> node that the obstacle is using for its navigation system.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationObstacle3D">
            <summary>
            <para>3D Obstacle used in navigation for collision avoidance. The obstacle needs navigation data to work correctly. This can be done by having the obstacle as a child of a <see cref="T:Godot.Navigation3D"/> node, or using <see cref="M:Godot.NavigationObstacle3D.SetNavigation(Godot.Node)"/>. <see cref="T:Godot.NavigationObstacle3D"/> is physics safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationObstacle3D.SetNavigation(Godot.Node)">
            <summary>
            <para>Sets the <see cref="T:Godot.Navigation3D"/> node used by the obstacle. Useful when you don't want to make the obstacle a child of a <see cref="T:Godot.Navigation3D"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationObstacle3D.GetNavigation">
            <summary>
            <para>Returns the <see cref="T:Godot.Navigation3D"/> node that the obstacle is using for its navigation system.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationPolygon">
            <summary>
            <para>There are two ways to create polygons. Either by using the <see cref="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])"/> method, or using the <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> method.</para>
            <para>Using <see cref="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])"/>:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var polygon = NavigationPolygon.new()</para>
            <para>var outline = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])</para>
            <para>polygon.add_outline(outline)</para>
            <para>polygon.make_polygons_from_outlines()</para>
            <para>$NavigationRegion2D.navpoly = polygon</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var polygon = new NavigationPolygon();</para>
            <para>var outline = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };</para>
            <para>polygon.AddOutline(outline);</para>
            <para>polygon.MakePolygonsFromOutlines();</para>
            <para>GetNode&lt;NavigationRegion2D&gt;("NavigationRegion2D").Navpoly = polygon;</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Using <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> and indices of the vertices array.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var polygon = NavigationPolygon.new()</para>
            <para>var vertices = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])</para>
            <para>polygon.vertices = vertices</para>
            <para>var indices = PackedInt32Array(0, 3, 1)</para>
            <para>polygon.add_polygon(indices)</para>
            <para>$NavigationRegion2D.navpoly = polygon</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var polygon = new NavigationPolygon();</para>
            <para>var vertices = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };</para>
            <para>polygon.Vertices = vertices;</para>
            <para>var indices = new int[] { 0, 3, 1 };</para>
            <para>polygon.AddPolygon(indices);</para>
            <para>GetNode&lt;NavigationRegion2D&gt;("NavigationRegion2D").Navpoly = polygon;</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetVertices(Godot.Vector2[])">
            <summary>
            <para>Sets the vertices that can be then indexed to create polygons with the <see cref="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])"/> method.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetVertices">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2[]"/> containing all the vertices being used to create the polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])">
            <summary>
            <para>Adds a polygon using the indices of the vertices you get when calling <see cref="M:Godot.NavigationPolygon.GetVertices"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygonCount">
            <summary>
            <para>Returns the count of all polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygon(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:int[]"/> containing the indices of the vertices of a created polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearPolygons">
            <summary>
            <para>Clears the array of polygons, but it doesn't clear the array of outlines and vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])">
            <summary>
            <para>Appends a <see cref="T:Godot.Vector2[]"/> that contains the vertices of an outline to the internal array that contains all the outlines. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> in order for this array to be converted to polygons that the engine will use.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutlineAtIndex(Godot.Vector2[],System.Int32)">
            <summary>
            <para>Adds a <see cref="T:Godot.Vector2[]"/> that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> in order for this array to be converted to polygons that the engine will use.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutlineCount">
            <summary>
            <para>Returns the number of outlines that were created in the editor or by script.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetOutline(System.Int32,Godot.Vector2[])">
            <summary>
            <para>Changes an outline created in the editor or by script. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> for the polygons to update.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutline(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2[]"/> containing the vertices of an outline that was created in the editor or by script.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.RemoveOutline(System.Int32)">
            <summary>
            <para>Removes an outline created in the editor or by script. You have to call <see cref="M:Godot.NavigationPolygon.MakePolygonsFromOutlines"/> for the polygons to update.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearOutlines">
            <summary>
            <para>Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.MakePolygonsFromOutlines">
            <summary>
            <para>Creates polygons from the outlines added in the editor or by script.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationRegion3D">
            <summary>
            <para>A region of the navigation map. It tells the <see cref="T:Godot.Navigation3D"/> node what can be navigated and what cannot, based on the <see cref="T:Godot.NavigationMesh"/> resource. This should be a child of a <see cref="T:Godot.Navigation3D"/> node (even not a direct child).</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationRegion3D.Navmesh">
            <summary>
            <para>The <see cref="T:Godot.NavigationMesh"/> resource to use.</para>
            </summary>
        </member>
        <member name="P:Godot.NavigationRegion3D.Enabled">
            <summary>
            <para>Determines if the <see cref="T:Godot.NavigationRegion3D"/> is enabled or disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationRegion3D.BakeNavigationMesh">
            <summary>
            <para>Bakes the <see cref="T:Godot.NavigationMesh"/>. The baking is done in a separate thread because navigation baking is not a cheap operation. This can be done at runtime. When it is completed, it automatically sets the new <see cref="T:Godot.NavigationMesh"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationRegion3D.BakeFinishedHandler">
            <summary>
            <para>Notifies when the navigation mesh bake operation is completed.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationRegion3D.NavigationMeshChangedHandler">
            <summary>
            <para>Notifies when the <see cref="T:Godot.NavigationMesh"/> has changed.</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationServer2D">
            <summary>
            <para>NavigationServer2D is the server responsible for all 2D navigation. It creates the agents, maps, and regions for navigation to work as expected. This keeps tracks of any call and executes them during the sync phase. This means that you can request any change to the map, using any thread, without worrying.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapCreate">
            <summary>
            <para>Create a new map.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets the map active.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapIsActive(Godot.RID)">
            <summary>
            <para>Returns true if the map is active.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapSetCellSize(Godot.RID,System.Single)">
            <summary>
            <para>Set the map cell size used to weld the navigation mesh polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapGetCellSize(Godot.RID)">
            <summary>
            <para>Returns the map cell size.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapSetEdgeConnectionMargin(Godot.RID,System.Single)">
            <summary>
            <para>Set the map edge connection margin used to weld the compatible region edges.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapGetEdgeConnectionMargin(Godot.RID)">
            <summary>
            <para>Returns the edge connection margin of the map. The edge connection margin is a distance used to connect two regions.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapGetPath(Godot.RID,Godot.Vector2,Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the navigation path to reach the destination from the origin, while avoiding static obstacles.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapGetClosestPoint(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Returns the point closest to the provided <c>to_point</c> on the navigation mesh surface.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.MapGetClosestPointOwner(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Returns the owner region RID for the point returned by <see cref="M:Godot.NavigationServer2D.MapGetClosestPoint(Godot.RID,Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.RegionCreate">
            <summary>
            <para>Creates a new region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.RegionSetMap(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the map for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.RegionSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the global transformation for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.RegionSetNavpoly(Godot.RID,Godot.NavigationPolygon)">
            <summary>
            <para>Sets the navigation mesh for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentCreate">
            <summary>
            <para>Creates the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetMap(Godot.RID,Godot.RID)">
            <summary>
            <para>Puts the agent in the map.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetNeighborDist(Godot.RID,System.Single)">
            <summary>
            <para>Sets the maximum distance to other agents this agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetMaxNeighbors(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum number of other agents the agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetTimeHorizon(Godot.RID,System.Single)">
            <summary>
            <para>The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to other agents. The larger this number, the sooner this agent will respond to the presence of other agents, but the less freedom this agent has in choosing its velocities. Must be positive.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetRadius(Godot.RID,System.Single)">
            <summary>
            <para>Sets the radius of the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetMaxSpeed(Godot.RID,System.Single)">
            <summary>
            <para>Sets the maximum speed of the agent. Must be positive.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetVelocity(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the current velocity of the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetTargetVelocity(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the new target velocity.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetPosition(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the position of the agent in world space.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentIsMapChanged(Godot.RID)">
            <summary>
            <para>Returns true if the map got changed the previous frame.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.AgentSetCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Callback called at the end of the RVO process.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer2D.Free(Godot.RID)">
            <summary>
            <para>Destroy the RID</para>
            </summary>
        </member>
        <member name="T:Godot.NavigationServer3D">
            <summary>
            <para>NavigationServer3D is the server responsible for all 3D navigation. It creates the agents, maps, and regions for navigation to work as expected. This keeps tracks of any call and executes them during the sync phase. This means that you can request any change to the map, using any thread, without worrying.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapCreate">
            <summary>
            <para>Create a new map.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets the map active.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapIsActive(Godot.RID)">
            <summary>
            <para>Returns true if the map is active.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapSetUp(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the map up direction.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetUp(Godot.RID)">
            <summary>
            <para>Returns the map's up direction.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapSetCellSize(Godot.RID,System.Single)">
            <summary>
            <para>Set the map cell size used to weld the navigation mesh polygons.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetCellSize(Godot.RID)">
            <summary>
            <para>Returns the map cell size.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapSetEdgeConnectionMargin(Godot.RID,System.Single)">
            <summary>
            <para>Set the map edge connection margein used to weld the compatible region edges.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetEdgeConnectionMargin(Godot.RID)">
            <summary>
            <para>Returns the edge connection margin of the map.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetPath(Godot.RID,Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the navigation path to reach the destination from the origin.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetClosestPointToSegment(Godot.RID,Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            <para>Returns the closest point between the navigation surface and the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetClosestPoint(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Returns the point closest to the provided <c>point</c> on the navigation mesh surface.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetClosestPointNormal(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Returns the normal for the point returned by <see cref="M:Godot.NavigationServer3D.MapGetClosestPoint(Godot.RID,Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.MapGetClosestPointOwner(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Returns the owner region RID for the point returned by <see cref="M:Godot.NavigationServer3D.MapGetClosestPoint(Godot.RID,Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.RegionCreate">
            <summary>
            <para>Creates a new region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.RegionSetMap(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the map for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.RegionSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets the global transformation for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.RegionSetNavmesh(Godot.RID,Godot.NavigationMesh)">
            <summary>
            <para>Sets the navigation mesh for the region.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.RegionBakeNavmesh(Godot.NavigationMesh,Godot.Node)">
            <summary>
            <para>Bakes the navigation mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentCreate">
            <summary>
            <para>Creates the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetMap(Godot.RID,Godot.RID)">
            <summary>
            <para>Puts the agent in the map.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetNeighborDist(Godot.RID,System.Single)">
            <summary>
            <para>Sets the maximum distance to other agents this agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetMaxNeighbors(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum number of other agents the agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetTimeHorizon(Godot.RID,System.Single)">
            <summary>
            <para>The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to other agents. The larger this number, the sooner this agent will respond to the presence of other agents, but the less freedom this agent has in choosing its velocities. Must be positive.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetRadius(Godot.RID,System.Single)">
            <summary>
            <para>Sets the radius of the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetMaxSpeed(Godot.RID,System.Single)">
            <summary>
            <para>Sets the maximum speed of the agent. Must be positive.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetVelocity(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the current velocity of the agent.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetTargetVelocity(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the new target velocity.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetPosition(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the position of the agent in world space.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentIsMapChanged(Godot.RID)">
            <summary>
            <para>Returns true if the map got changed the previous frame.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.AgentSetCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Callback called at the end of the RVO process.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.Free(Godot.RID)">
            <summary>
            <para>Destroy the RID</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.SetActive(System.Boolean)">
            <summary>
            <para>Control activation of this server.</para>
            </summary>
        </member>
        <member name="M:Godot.NavigationServer3D.Process(System.Single)">
            <summary>
            <para>Process the collision avoidance agents.</para>
            <para>The result of this process is needed by the physics server, so this must be called in the main thread.</para>
            <para>Note: This function is not thread safe.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerENet">
            <summary>
            <para>A PacketPeer implementation that should be passed to <see cref="P:Godot.SceneTree.NetworkPeer"/> after being initialized as either a client or server. Events can then be handled by connecting to <see cref="T:Godot.SceneTree"/> signals.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.None">
            <summary>
            <para>No compression. This uses the most bandwidth, but has the upside of requiring the fewest CPU resources.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.RangeCoder">
            <summary>
            <para>ENet's built-in range encoding.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Fastlz">
            <summary>
            <para><a href="http://fastlz.org/">FastLZ</a> compression. This option uses less CPU resources compared to , at the expense of using more bandwidth.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Zlib">
            <summary>
            <para><a href="https://www.zlib.net/">Zlib</a> compression. This option uses less bandwidth compared to , at the expense of using more CPU resources.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerENet.CompressionModeEnum.Zstd">
            <summary>
            <para><a href="https://facebook.github.io/zstd/">Zstandard</a> compression.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.CompressionMode">
            <summary>
            <para>The compression method used for network packets. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.TransferChannel">
            <summary>
            <para>Set the default channel to be used to transfer data. By default, this value is <c>-1</c> which means that ENet will only use 2 channels: one for reliable packets, and one for unreliable packets. The channel <c>0</c> is reserved and cannot be used. Setting this member to any value between <c>0</c> and <see cref="P:Godot.NetworkedMultiplayerENet.ChannelCount"/> (excluded) will force ENet to use that channel for sending data. See <see cref="P:Godot.NetworkedMultiplayerENet.ChannelCount"/> for more information about ENet channels.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.ChannelCount">
            <summary>
            <para>The number of channels to be used by ENet. Channels are used to separate different kinds of data. In reliable or ordered mode, for example, the packet delivery order is ensured on a per-channel basis. This is done to combat latency and reduces ordering restrictions on packets. The delivery status of a packet in one channel won't stall the delivery of other packets in another channel.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.AlwaysOrdered">
            <summary>
            <para>Enforce ordered packets when using  (thus behaving similarly to ). This is the only way to use ordering with the RPC system.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.ServerRelay">
            <summary>
            <para>Enable or disable the server feature that notifies clients of other peers' connection/disconnection, and relays messages between them. When this option is <c>false</c>, clients won't be automatically notified of other peers and won't be able to send them packets through the server.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.DtlsVerify">
            <summary>
            <para>Enable or disable certificate verification when <see cref="P:Godot.NetworkedMultiplayerENet.UseDtls"/> <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.UseDtls">
            <summary>
            <para>When enabled, the client or server created by this peer, will use <see cref="T:Godot.PacketPeerDTLS"/> instead of raw UDP sockets for communicating with the remote peer. This will make the communication encrypted with DTLS at the cost of higher resource usage and potentially larger packet size.</para>
            <para>Note: When creating a DTLS server, make sure you setup the key/certificate pair via <see cref="M:Godot.NetworkedMultiplayerENet.SetDtlsKey(Godot.CryptoKey)"/> and <see cref="M:Godot.NetworkedMultiplayerENet.SetDtlsCertificate(Godot.X509Certificate)"/>. For DTLS clients, have a look at the <see cref="P:Godot.NetworkedMultiplayerENet.DtlsVerify"/> option, and configure the certificate accordingly via <see cref="M:Godot.NetworkedMultiplayerENet.SetDtlsCertificate(Godot.X509Certificate)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateServer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Create server that listens to connections via <c>port</c>. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use <see cref="M:Godot.NetworkedMultiplayerENet.SetBindIp(System.String)"/>. The default IP is the wildcard <c>"*"</c>, which listens on all available interfaces. <c>max_clients</c> is the maximum number of clients that are allowed at once, any number up to 4095 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see <see cref="M:Godot.NetworkedMultiplayerENet.CreateClient(System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>. Returns  if a server was created,  if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call <see cref="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.UInt32)"/> first) or  if the server could not be created.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateClient(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Create client that connects to a server at <c>address</c> using specified <c>port</c>. The given address needs to be either a fully qualified domain name (e.g. <c>"www.example.com"</c>) or an IP address in IPv4 or IPv6 format (e.g. <c>"192.168.1.1"</c>). The <c>port</c> is the port the server is listening on. The <c>in_bandwidth</c> and <c>out_bandwidth</c> parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns  if a client was created,  if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call <see cref="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.UInt32)"/> first) or  if the client could not be created. If <c>client_port</c> is specified, the client will also listen to the given port; this is useful for some NAT traversal techniques.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CloseConnection(System.UInt32)">
            <summary>
            <para>Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.DisconnectPeer(System.Int32,System.Boolean)">
            <summary>
            <para>Disconnect the given peer. If "now" is set to <c>true</c>, the connection will be closed immediately without flushing queued messages.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.SetBindIp(System.String)">
            <summary>
            <para>The IP used when creating a server. This is set to the wildcard <c>"*"</c> by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: <c>"192.168.1.1"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.SetDtlsKey(Godot.CryptoKey)">
            <summary>
            <para>Configure the <see cref="T:Godot.CryptoKey"/> to use when <see cref="P:Godot.NetworkedMultiplayerENet.UseDtls"/> is <c>true</c>. Remember to also call <see cref="M:Godot.NetworkedMultiplayerENet.SetDtlsCertificate(Godot.X509Certificate)"/> to setup your <see cref="T:Godot.X509Certificate"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.SetDtlsCertificate(Godot.X509Certificate)">
            <summary>
            <para>Configure the <see cref="T:Godot.X509Certificate"/> to use when <see cref="P:Godot.NetworkedMultiplayerENet.UseDtls"/> is <c>true</c>. For servers, you must also setup the <see cref="T:Godot.CryptoKey"/> via <see cref="M:Godot.NetworkedMultiplayerENet.SetDtlsKey(Godot.CryptoKey)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPeerAddress(System.Int32)">
            <summary>
            <para>Returns the IP address of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPeerPort(System.Int32)">
            <summary>
            <para>Returns the remote port of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetPacketChannel">
            <summary>
            <para>Returns the channel of the next packet that will be retrieved via <see cref="M:Godot.PacketPeer.GetPacket"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.GetLastPacketChannel">
            <summary>
            <para>Returns the channel of the last packet fetched via <see cref="M:Godot.PacketPeer.GetPacket"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer">
            <summary>
            <para>Manages the connection to network peers. Assigns unique IDs to each client connected to the server.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TargetPeerBroadcast">
            <summary>
            <para>Packets are sent to the server and then redistributed to other peers.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TargetPeerServer">
            <summary>
            <para>Packets are sent to the server alone.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Disconnected">
            <summary>
            <para>The ongoing connection disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Connecting">
            <summary>
            <para>A connection attempt is ongoing.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.ConnectionStatus.Connected">
            <summary>
            <para>The connection attempt succeeded.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.Unreliable">
            <summary>
            <para>Packets are not acknowledged, no resend attempts are made for lost packets. Packets may arrive in any order. Potentially faster than . Use for non-critical data, and always consider whether the order matters.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.UnreliableOrdered">
            <summary>
            <para>Packets are not acknowledged, no resend attempts are made for lost packets. Packets are received in the order they were sent in. Potentially faster than . Use for non-critical data or data that would be outdated if received late due to resend attempt(s) anyway, for example movement and positional data.</para>
            </summary>
        </member>
        <member name="F:Godot.NetworkedMultiplayerPeer.TransferModeEnum.Reliable">
            <summary>
            <para>Packets must be received and resend attempts should be made until the packets are acknowledged. Packets must be received in the order they were sent in. Most reliable transfer mode, but potentially the slowest due to the overhead. Use for critical data that must be transmitted and arrive in order, for example an ability being triggered or a chat message. Consider carefully if the information really is critical, and use sparingly.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.RefuseNewConnections">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.NetworkedMultiplayerPeer"/> refuses new connections.</para>
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.TransferMode">
            <summary>
            <para>The manner in which to send packets to the <c>target_peer</c>. See <see cref="T:Godot.NetworkedMultiplayerPeer.TransferModeEnum"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)">
            <summary>
            <para>Sets the peer to which packets will be sent.</para>
            <para>The <c>id</c> can be one of:  to send to all connected peers,  to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. By default, the target peer is .</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetPacketPeer">
            <summary>
            <para>Returns the ID of the <see cref="T:Godot.NetworkedMultiplayerPeer"/> who sent the most recent packet.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.Poll">
            <summary>
            <para>Waits up to 1 second to receive a new network event.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetConnectionStatus">
            <summary>
            <para>Returns the current state of the connection. See <see cref="T:Godot.NetworkedMultiplayerPeer.ConnectionStatus"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetUniqueId">
            <summary>
            <para>Returns the ID of this <see cref="T:Godot.NetworkedMultiplayerPeer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer.ConnectionFailedHandler">
            <summary>
            <para>Emitted when a connection attempt fails.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer.ConnectionSucceededHandler">
            <summary>
            <para>Emitted when a connection attempt succeeds.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer.PeerDisconnectedHandler">
            <summary>
            <para>Emitted by the server when a client disconnects.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer.PeerConnectedHandler">
            <summary>
            <para>Emitted by the server when a client connects.</para>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer.ServerDisconnectedHandler">
            <summary>
            <para>Emitted by clients when the server disconnects.</para>
            </summary>
        </member>
        <member name="T:Godot.NinePatchRect">
            <summary>
            <para>Also known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3×3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.Stretch">
            <summary>
            <para>Stretches the center texture across the NinePatchRect. This may cause the texture to be distorted.</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.Tile">
            <summary>
            <para>Repeats the center texture across the NinePatchRect. This won't cause any visible distortion. The texture must be seamless for this to work without displaying artifacts between edges.</para>
            <para>Note: Only supported when using the GLES3 renderer. When using the GLES2 renderer, this will behave like .</para>
            </summary>
        </member>
        <member name="F:Godot.NinePatchRect.AxisStretchMode.TileFit">
            <summary>
            <para>Repeats the center texture across the NinePatchRect, but will also stretch the texture to make sure each tile is visible in full. This may cause the texture to be distorted, but less than . The texture must be seamless for this to work without displaying artifacts between edges.</para>
            <para>Note: Only supported when using the GLES3 renderer. When using the GLES2 renderer, this will behave like .</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.Texture">
            <summary>
            <para>The node's texture resource.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.DrawCenter">
            <summary>
            <para>If <c>true</c>, draw the panel's center. Else, only draw the 9-slice's borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.RegionRect">
            <summary>
            <para>Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one. If the rect is empty, NinePatchRect will use the whole texture.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginLeft">
            <summary>
            <para>The width of the 9-slice's left column. A margin of 16 means the 9-slice's left corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginTop">
            <summary>
            <para>The height of the 9-slice's top row. A margin of 16 means the 9-slice's top corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginRight">
            <summary>
            <para>The width of the 9-slice's right column. A margin of 16 means the 9-slice's right corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginBottom">
            <summary>
            <para>The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchHorizontal">
            <summary>
            <para>The stretch mode to use for horizontal stretching/tiling. See <see cref="T:Godot.NinePatchRect.AxisStretchMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchVertical">
            <summary>
            <para>The stretch mode to use for vertical stretching/tiling. See <see cref="T:Godot.NinePatchRect.AxisStretchMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.NinePatchRect.SetPatchMargin(Godot.Side,System.Int32)">
            <summary>
            <para>Sets the size of the margin on the specified <see cref="T:Godot.Side"/> to <c>value</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.NinePatchRect.GetPatchMargin(Godot.Side)">
            <summary>
            <para>Returns the size of the margin on the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.NinePatchRect.TextureChangedHandler">
            <summary>
            <para>Emitted when the node's texture changes.</para>
            </summary>
        </member>
        <member name="T:Godot.Node2D">
            <summary>
            <para>A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Position">
            <summary>
            <para>Position, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Rotation">
            <summary>
            <para>Rotation in radians, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.RotationDegrees">
            <summary>
            <para>Rotation in degrees, relative to the node's parent.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Scale">
            <summary>
            <para>The node's scale. Unscaled value: <c>(1, 1)</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.Transform">
            <summary>
            <para>Local <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalPosition">
            <summary>
            <para>Global position.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotation">
            <summary>
            <para>Global rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotationDegrees">
            <summary>
            <para>Global rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalScale">
            <summary>
            <para>Global scale.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalTransform">
            <summary>
            <para>Global <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZIndex">
            <summary>
            <para>Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others.</para>
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZAsRelative">
            <summary>
            <para>If <c>true</c>, the node's Z index is relative to its parent's Z index. If this node's Z index is 2 and its parent's effective Z index is 3, then this node's effective Z index will be 2 + 3 = 5.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.Rotate(System.Single)">
            <summary>
            <para>Applies a rotation to the node, in radians, starting from its current rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalX(System.Single,System.Boolean)">
            <summary>
            <para>Applies a local translation on the node's X axis based on the <see cref="M:Godot.Node._Process(System.Single)"/>'s <c>delta</c>. If <c>scaled</c> is <c>false</c>, normalizes the movement.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalY(System.Single,System.Boolean)">
            <summary>
            <para>Applies a local translation on the node's Y axis based on the <see cref="M:Godot.Node._Process(System.Single)"/>'s <c>delta</c>. If <c>scaled</c> is <c>false</c>, normalizes the movement.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.Translate(Godot.Vector2)">
            <summary>
            <para>Translates the node by the given <c>offset</c> in local coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GlobalTranslate(Godot.Vector2)">
            <summary>
            <para>Adds the <c>offset</c> vector to the node's global position.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ApplyScale(Godot.Vector2)">
            <summary>
            <para>Multiplies the current scale by the <c>ratio</c> vector.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.LookAt(Godot.Vector2)">
            <summary>
            <para>Rotates the node so it points towards the <c>point</c>, which is expected to use global coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetAngleTo(Godot.Vector2)">
            <summary>
            <para>Returns the angle between the node and the <c>point</c> in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToLocal(Godot.Vector2)">
            <summary>
            <para>Transforms the provided global position into a position in local coordinate space. The output will be local relative to the <see cref="T:Godot.Node2D"/> it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToGlobal(Godot.Vector2)">
            <summary>
            <para>Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the <see cref="T:Godot.Node2D"/> it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position.</para>
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetRelativeTransformToParent(Godot.Node)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> relative to this node's parent.</para>
            </summary>
        </member>
        <member name="T:Godot.Node3D">
            <summary>
            <para>Most basic 3D game object, with a 3D <see cref="T:Godot.Transform"/> and visibility settings. All other 3D game objects inherit from Node3D. Use <see cref="T:Godot.Node3D"/> as a parent node to move, scale, rotate and show/hide children in a 3D project.</para>
            <para>Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the <see cref="T:Godot.Node3D"/> object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the <see cref="T:Godot.Node3D"/>'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the <see cref="T:Godot.Node3D"/> object itself is referred to as object-local coordinate system.</para>
            <para>Note: Unless otherwise specified, all methods that have angle parameters must have angles specified as radians. To convert degrees to radians, use <c>@GDScript.deg2rad</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node3D.NotificationTransformChanged">
            <summary>
            <para>Node3D nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.</para>
            <para>In order for  to work, users first need to ask for it, with <see cref="M:Godot.Node3D.SetNotifyTransform(System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Node3D.NotificationEnterWorld">
            <summary>
            <para>Node3D nodes receives this notification when they are registered to new <see cref="T:Godot.World3D"/> resource.</para>
            </summary>
        </member>
        <member name="F:Godot.Node3D.NotificationExitWorld">
            <summary>
            <para>Node3D nodes receives this notification when they are unregistered from current <see cref="T:Godot.World3D"/> resource.</para>
            </summary>
        </member>
        <member name="F:Godot.Node3D.NotificationVisibilityChanged">
            <summary>
            <para>Node3D nodes receives this notification when their visibility changes.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.GlobalTransform">
            <summary>
            <para>World3D space (global) <see cref="T:Godot.Transform"/> of this node.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Translation">
            <summary>
            <para>Local translation of this node.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.RotationDegrees">
            <summary>
            <para>Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Rotation">
            <summary>
            <para>Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).</para>
            <para>Note: In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a <see cref="T:Godot.Vector3"/> data structure not because the rotation is a vector, but only because <see cref="T:Godot.Vector3"/> exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Scale">
            <summary>
            <para>Scale part of the local transformation.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.TopLevel">
            <summary>
            <para>If <c>true</c>, the node will not inherit its transformations from its parent. Node transformations are only in global space.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Transform">
            <summary>
            <para>Local space <see cref="T:Godot.Transform"/> of this node, with respect to the parent node.</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Visible">
            <summary>
            <para>If <c>true</c>, this node is drawn. The node is only visible if all of its antecedents are visible as well (in other words, <see cref="M:Godot.Node3D.IsVisibleInTree"/> must return <c>true</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.Node3D.Gizmo">
            <summary>
            <para>The <see cref="T:Godot.Node3DGizmo"/> for this node. Used for example in <see cref="!:Godot.EditorNode3DGizmo"/> as custom visualization and editing handles in Editor.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.GetParentSpatial">
            <summary>
            <para>Returns the parent <see cref="T:Godot.Node3D"/>, or an empty <see cref="T:Godot.Object"/> if no parent exists or parent is not of type <see cref="T:Godot.Node3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.SetIgnoreTransformNotification(System.Boolean)">
            <summary>
            <para>Sets whether the node ignores notification that its transformation (global or local) changed.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.SetDisableScale(System.Boolean)">
            <summary>
            <para>Sets whether the node uses a scale of <c>(1, 1, 1)</c> or its local transformation scale. Changes to the local transformation scale are preserved.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.IsScaleDisabled">
            <summary>
            <para>Returns whether this node uses a scale of <c>(1, 1, 1)</c> or its local transformation scale.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.GetWorld3d">
            <summary>
            <para>Returns the current <see cref="T:Godot.World3D"/> resource this <see cref="T:Godot.Node3D"/> node is registered to.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.ForceUpdateTransform">
            <summary>
            <para>Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.UpdateGizmo">
            <summary>
            <para>Updates the <see cref="T:Godot.Node3DGizmo"/> of this node.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.IsVisibleInTree">
            <summary>
            <para>Returns <c>true</c> if the node is present in the <see cref="T:Godot.SceneTree"/>, its <see cref="P:Godot.Node3D.Visible"/> property is <c>true</c> and all its antecedents are also visible. If any antecedent is hidden, this node will not be visible in the scene tree.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.Show">
            <summary>
            <para>Enables rendering of this node. Changes <see cref="P:Godot.Node3D.Visible"/> to <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.Hide">
            <summary>
            <para>Disables rendering of this node. Changes <see cref="P:Godot.Node3D.Visible"/> to <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            <para>Sets whether the node notifies about its local transformation changes. <see cref="T:Godot.Node3D"/> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.IsLocalTransformNotificationEnabled">
            <summary>
            <para>Returns whether node notifies about its local transformation changes. <see cref="T:Godot.Node3D"/> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.SetNotifyTransform(System.Boolean)">
            <summary>
            <para>Sets whether the node notifies about its global and local transformation changes. <see cref="T:Godot.Node3D"/> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.IsTransformNotificationEnabled">
            <summary>
            <para>Returns whether the node notifies about its global and local transformation changes. <see cref="T:Godot.Node3D"/> will not propagate this by default.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.Rotate(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the local transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.GlobalRotate(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the global (world) transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians. The rotation axis is in global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.GlobalScale(Godot.Vector3)">
            <summary>
            <para>Scales the global (world) transformation by the given <see cref="T:Godot.Vector3"/> scale factors.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.GlobalTranslate(Godot.Vector3)">
            <summary>
            <para>Moves the global (world) transformation by <see cref="T:Godot.Vector3"/> offset. The offset is in global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.RotateObjectLocal(Godot.Vector3,System.Single)">
            <summary>
            <para>Rotates the local transformation around axis, a unit <see cref="T:Godot.Vector3"/>, by specified angle in radians. The rotation axis is in object-local coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.ScaleObjectLocal(Godot.Vector3)">
            <summary>
            <para>Scales the local transformation by given 3D scale factors in object-local coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.TranslateObjectLocal(Godot.Vector3)">
            <summary>
            <para>Changes the node's position by the given offset <see cref="T:Godot.Vector3"/> in local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.RotateX(System.Single)">
            <summary>
            <para>Rotates the local transformation around the X axis by angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.RotateY(System.Single)">
            <summary>
            <para>Rotates the local transformation around the Y axis by angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.RotateZ(System.Single)">
            <summary>
            <para>Rotates the local transformation around the Z axis by angle in radians.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.Translate(Godot.Vector3)">
            <summary>
            <para>Changes the node's position by the given offset <see cref="T:Godot.Vector3"/>.</para>
            <para>Note that the translation <c>offset</c> is affected by the node's scale, so if scaled by e.g. <c>(10, 1, 1)</c>, a translation by an offset of <c>(2, 0, 0)</c> would actually add 20 (<c>2 * 10</c>) to the X coordinate.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.Orthonormalize">
            <summary>
            <para>Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.SetIdentity">
            <summary>
            <para>Reset all transformations for this node (sets its <see cref="T:Godot.Transform"/> to the identity matrix).</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.LookAt(Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Rotates itself so that the local -Z axis points towards the <c>target</c> position.</para>
            <para>The transform will first be rotated around the given <c>up</c> vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the <c>target</c> and <c>up</c> vectors.</para>
            <para>Operations take place in global space.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.LookAtFromPosition(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Moves the node to the specified <c>position</c>, and then rotates itself to point toward the <c>target</c> as per <see cref="M:Godot.Node3D.LookAt(Godot.Vector3,Godot.Vector3)"/>. Operations take place in global space.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.ToLocal(Godot.Vector3)">
            <summary>
            <para>Transforms <c>global_point</c> from world space to this node's local space.</para>
            </summary>
        </member>
        <member name="M:Godot.Node3D.ToGlobal(Godot.Vector3)">
            <summary>
            <para>Transforms <c>local_point</c> from this node's local space to world space.</para>
            </summary>
        </member>
        <member name="T:Godot.Node3D.VisibilityChangedHandler">
            <summary>
            <para>Emitted when node visibility changes.</para>
            </summary>
        </member>
        <member name="T:Godot.NoiseTexture">
            <summary>
            <para>Uses an <see cref="T:Godot.OpenSimplexNoise"/> to fill the texture data. You can specify the texture size but keep in mind that larger textures will take longer to generate and seamless noise only works with square sized textures.</para>
            <para>NoiseTexture can also generate normal map textures.</para>
            <para>The class uses <see cref="T:Godot.Thread"/>s to generate the texture data internally, so <see cref="M:Godot.Texture2D.GetData"/> may return <c>null</c> if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the data:</para>
            <para><code>
            var texture = preload("res://noise.tres")
            yield(texture, "changed")
            var image = texture.get_data()
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Width">
            <summary>
            <para>Width of the generated texture.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Height">
            <summary>
            <para>Height of the generated texture.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Seamless">
            <summary>
            <para>Whether the texture can be tiled without visible seams or not. Seamless textures take longer to generate.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.AsNormalMap">
            <summary>
            <para>If <c>true</c>, the resulting texture contains a normal map created from the original noise interpreted as a bump map.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.BumpStrength">
            <summary>
            <para>Strength of the bump maps used in this texture. A higher value will make the bump maps appear larger while a lower value will make them appear softer.</para>
            </summary>
        </member>
        <member name="P:Godot.NoiseTexture.Noise">
            <summary>
            <para>The <see cref="T:Godot.OpenSimplexNoise"/> instance used to generate the noise.</para>
            </summary>
        </member>
        <member name="T:Godot.OccluderPolygon2D">
            <summary>
            <para>Editor facility that helps you draw a 2D polygon used as resource for <see cref="T:Godot.LightOccluder2D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.Disabled">
            <summary>
            <para>Culling is disabled. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.Clockwise">
            <summary>
            <para>Culling is performed in the clockwise direction. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.OccluderPolygon2D.CullModeEnum.CounterClockwise">
            <summary>
            <para>Culling is performed in the counterclockwise direction. See <see cref="P:Godot.OccluderPolygon2D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Closed">
            <summary>
            <para>If <c>true</c>, closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.CullMode">
            <summary>
            <para>The culling mode to use.</para>
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Polygon">
            <summary>
            <para>A <see cref="T:Godot.Vector2"/> array with the index for polygon's vertices positions.</para>
            <para>Note: The returned value is a copy of the underlying array, rather than a reference.</para>
            </summary>
        </member>
        <member name="T:Godot.OmniLight3D">
            <summary>
            <para>An Omnidirectional light is a type of <see cref="T:Godot.Light3D"/> that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.</para>
            </summary>
        </member>
        <member name="F:Godot.OmniLight3D.ShadowMode.DualParaboloid">
            <summary>
            <para>Shadows are rendered to a dual-paraboloid texture. Faster than , but lower-quality.</para>
            </summary>
        </member>
        <member name="F:Godot.OmniLight3D.ShadowMode.Cube">
            <summary>
            <para>Shadows are rendered to a cubemap. Slower than , but higher-quality.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight3D.OmniRange">
            <summary>
            <para>The light's radius. Note that the effectively lit area may appear to be smaller depending on the <see cref="P:Godot.OmniLight3D.OmniAttenuation"/> in use. No matter the <see cref="P:Godot.OmniLight3D.OmniAttenuation"/> in use, the light will never reach anything outside this radius.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight3D.OmniAttenuation">
            <summary>
            <para>The light's attenuation (drop-off) curve. A number of presets are available in the Inspector by right-clicking the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.OmniLight3D.OmniShadowMode">
            <summary>
            <para>See <see cref="T:Godot.OmniLight3D.ShadowMode"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.OpenSimplexNoise">
            <summary>
            <para>This resource allows you to configure and sample a fractal noise space. Here is a brief usage example that configures an OpenSimplexNoise and gets samples at various positions and dimensions:</para>
            <para><code>
            var noise = OpenSimplexNoise.new()
            
            # Configure
            noise.seed = randi()
            noise.octaves = 4
            noise.period = 20.0
            noise.persistence = 0.8
            
            # Sample
            print("Values:")
            print(noise.get_noise_2d(1.0, 1.0))
            print(noise.get_noise_3d(0.5, 3.0, 15.0))
            print(noise.get_noise_4d(0.5, 1.9, 4.7, 0.0))
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Seed">
            <summary>
            <para>Seed used to generate random values, different seeds will generate different noise maps.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Octaves">
            <summary>
            <para>Number of OpenSimplex noise layers that are sampled to get the fractal noise. Higher values result in more detailed noise but take more time to generate.</para>
            <para>Note: The maximum allowed value is 9.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Period">
            <summary>
            <para>Period of the base octave. A lower period results in a higher-frequency noise (more value changes across the same distance).</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Persistence">
            <summary>
            <para>Contribution factor of the different octaves. A <c>persistence</c> value of 1 means all the octaves have the same contribution, a value of 0.5 means each octave contributes half as much as the previous one.</para>
            </summary>
        </member>
        <member name="P:Godot.OpenSimplexNoise.Lacunarity">
            <summary>
            <para>Difference in period between <see cref="P:Godot.OpenSimplexNoise.Octaves"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetImage(System.Int32,System.Int32)">
            <summary>
            <para>Generate a noise image with the requested <c>width</c> and <c>height</c>, based on the current noise parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetSeamlessImage(System.Int32)">
            <summary>
            <para>Generate a tileable noise image, based on the current noise parameters. Generated seamless images are always square (<c>size</c> × <c>size</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise1d(System.Single)">
            <summary>
            <para>Returns the 1D noise value <c>[-1,1]</c> at the given x-coordinate.</para>
            <para>Note: This method actually returns the 2D noise value <c>[-1,1]</c> with fixed y-coordinate value 0.0.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise2d(System.Single,System.Single)">
            <summary>
            <para>Returns the 2D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise3d(System.Single,System.Single,System.Single)">
            <summary>
            <para>Returns the 3D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise4d(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Returns the 4D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise2dv(Godot.Vector2)">
            <summary>
            <para>Returns the 2D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="M:Godot.OpenSimplexNoise.GetNoise3dv(Godot.Vector3)">
            <summary>
            <para>Returns the 3D noise value <c>[-1,1]</c> at the given position.</para>
            </summary>
        </member>
        <member name="T:Godot.OptionButton">
            <summary>
            <para>OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="P:Godot.OptionButton.Selected">
            <summary>
            <para>The index of the currently selected item, or <c>-1</c> if no item is selected.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddItem(System.String,System.Int32)">
            <summary>
            <para>Adds an item, with text <c>label</c> and (optionally) <c>id</c>. If no <c>id</c> is passed, the item index will be used as the item's ID. New items are appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddIconItem(Godot.Texture2D,System.String,System.Int32)">
            <summary>
            <para>Adds an item, with a <c>texture</c> icon, text <c>label</c> and (optionally) <c>id</c>. If no <c>id</c> is passed, the item index will be used as the item's ID. New items are appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets the text of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the icon of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the item at index <c>idx</c> is disabled.</para>
            <para>Disabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemId(System.Int32,System.Int32)">
            <summary>
            <para>Sets the ID of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemText(System.Int32)">
            <summary>
            <para>Returns the text of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemIcon(System.Int32)">
            <summary>
            <para>Returns the icon of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemId(System.Int32)">
            <summary>
            <para>Returns the ID of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemIndex(System.Int32)">
            <summary>
            <para>Returns the index of the item with the given <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemMetadata(System.Int32)">
            <summary>
            <para>Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.IsItemDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at index <c>idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemCount">
            <summary>
            <para>Returns the amount of items in the OptionButton, including separators.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddSeparator">
            <summary>
            <para>Adds a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Clear">
            <summary>
            <para>Clears all the items in the <see cref="T:Godot.OptionButton"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Select(System.Int32)">
            <summary>
            <para>Selects an item by index and makes it the current item. This will work even if the item is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedId">
            <summary>
            <para>Returns the ID of the selected item, or <c>0</c> if no item is selected.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedMetadata">
            <summary>
            <para>Gets the metadata of the selected item. Metadata for items can be set using <see cref="M:Godot.OptionButton.SetItemMetadata(System.Int32,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetPopup">
            <summary>
            <para>Returns the <see cref="T:Godot.PopupMenu"/> contained in this button.</para>
            </summary>
        </member>
        <member name="T:Godot.OptionButton.ItemFocusedHandler">
            <summary>
            <para>Emitted when the user navigates to an item using the <c>ui_up</c> or <c>ui_down</c> actions. The index of the item selected is passed as argument.</para>
            </summary>
        </member>
        <member name="T:Godot.OptionButton.ItemSelectedHandler">
            <summary>
            <para>Emitted when the current item has been changed by the user. The index of the item selected is passed as argument.</para>
            </summary>
        </member>
        <member name="T:Godot.PCKPacker">
            <summary>
            <para>The <see cref="T:Godot.PCKPacker"/> is used to create packages that can be loaded into a running project using <see cref="M:Godot.ProjectSettings.LoadResourcePack(System.String,System.Boolean,System.Int32)"/>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var packer = PCKPacker.new()</para>
            <para>packer.pck_start("test.pck")</para>
            <para>packer.add_file("res://text.txt", "text.txt")</para>
            <para>packer.flush()</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var packer = new PCKPacker();</para>
            <para>packer.PckStart("test.pck");</para>
            <para>packer.AddFile("res://text.txt", "text.txt");</para>
            <para>packer.Flush();</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The above <see cref="T:Godot.PCKPacker"/> creates package <c>test.pck</c>, then adds a file named <c>text.txt</c> at the root of the package.</para>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.PckStart(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            <para>Creates a new PCK file with the name <c>pck_name</c>. The <c>.pck</c> file extension isn't added automatically, so it should be part of <c>pck_name</c> (even though it's not required).</para>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.AddFile(System.String,System.String,System.Boolean)">
            <summary>
            <para>Adds the <c>source_path</c> file to the current PCK package at the <c>pck_path</c> internal path (should start with <c>res://</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.Flush(System.Boolean)">
            <summary>
            <para>Writes the files specified using all <see cref="M:Godot.PCKPacker.AddFile(System.String,System.String,System.Boolean)"/> calls since the last flush. If <c>verbose</c> is <c>true</c>, a list of files added will be printed to the console for easier debugging.</para>
            </summary>
        </member>
        <member name="T:Godot.PHashTranslation">
            <summary>
            <para>Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.</para>
            </summary>
        </member>
        <member name="M:Godot.PHashTranslation.Generate(Godot.Translation)">
            <summary>
            <para>Generates and sets an optimized translation from the given <see cref="T:Godot.Translation"/> resource.</para>
            </summary>
        </member>
        <member name="T:Godot.PackedScene">
            <summary>
            <para>A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.</para>
            <para>Can be used to save a node to a file. When saving, the node as well as all the node it owns get saved (see <c>owner</c> property on <see cref="T:Godot.Node"/>).</para>
            <para>Note: The node doesn't need to own itself.</para>
            <para>Example of loading a saved scene:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Use load() instead of preload() if the path isn't known at compile-time.</para>
            <para>var scene = preload("res://scene.tscn").instance()</para>
            <para># Add the node as a child of the node the script is attached to.</para>
            <para>add_child(scene)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// C# has no preload, so you have to always use ResourceLoader.Load&lt;PackedScene&gt;().</para>
            <para>var scene = ResourceLoader.Load&lt;PackedScene&gt;("res://scene.tscn").Instance();</para>
            <para>// Add the node as a child of the node the script is attached to.</para>
            <para>AddChild(scene);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Example of saving a node with different owners: The following example creates 3 objects: <c>Node2D</c> (<c>node</c>), <c>RigidBody2D</c> (<c>rigid</c>) and <c>CollisionObject2D</c> (<c>collision</c>). <c>collision</c> is a child of <c>rigid</c> which is a child of <c>node</c>. Only <c>rigid</c> is owned by <c>node</c> and <c>pack</c> will therefore only save those two nodes, but not <c>collision</c>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Create the objects.</para>
            <para>var node = Node2D.new()</para>
            <para>var rigid = RigidBody2D.new()</para>
            <para>var collision = CollisionShape2D.new()</para>
            <para></para>
            <para># Create the object hierarchy.</para>
            <para>rigid.add_child(collision)</para>
            <para>node.add_child(rigid)</para>
            <para></para>
            <para># Change owner of `rigid`, but not of `collision`.</para>
            <para>rigid.owner = node</para>
            <para>var scene = PackedScene.new()</para>
            <para></para>
            <para># Only `node` and `rigid` are now packed.</para>
            <para>var result = scene.pack(node)</para>
            <para>if result == OK:</para>
            <para>    var error = ResourceSaver.save("res://path/name.tscn", scene)  # Or "user://..."</para>
            <para>    if error != OK:</para>
            <para>        push_error("An error occurred while saving the scene to disk.")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Create the objects.</para>
            <para>var node = new Node2D();</para>
            <para>var rigid = new RigidBody2D();</para>
            <para>var collision = new CollisionShape2D();</para>
            <para></para>
            <para>// Create the object hierarchy.</para>
            <para>rigid.AddChild(collision);</para>
            <para>node.AddChild(rigid);</para>
            <para></para>
            <para>// Change owner of `rigid`, but not of `collision`.</para>
            <para>rigid.Owner = node;</para>
            <para>var scene = new PackedScene();</para>
            <para></para>
            <para>// Only `node` and `rigid` are now packed.</para>
            <para>Error result = scene.Pack(node);</para>
            <para>if (result == Error.Ok)</para>
            <para>{</para>
            <para>    Error error = ResourceSaver.Save("res://path/name.tscn", scene); // Or "user://..."</para>
            <para>    if (error != Error.Ok)</para>
            <para>    {</para>
            <para>        GD.PushError("An error occurred while saving the scene to disk.");</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Disabled">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, blocks edits to the scene state.</para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Instance">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene.</para>
            <para>Note: Only available in editor builds.</para>
            </summary>
        </member>
        <member name="F:Godot.PackedScene.GenEditState.Main">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene. Only the main scene should receive the main edit state.</para>
            <para>Note: Only available in editor builds.</para>
            </summary>
        </member>
        <member name="P:Godot.PackedScene._Bundled">
            <summary>
            <para>A dictionary representation of the scene contents.</para>
            <para>Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for base scene children overrides, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Pack(Godot.Node)">
            <summary>
            <para>Pack will ignore any sub-nodes not owned by given node. See <see cref="P:Godot.Node.Owner"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)">
            <summary>
            <para>Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers a  notification on the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.CanInstance">
            <summary>
            <para>Returns <c>true</c> if the scene file has nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.PackedScene.GetState">
            <summary>
            <para>Returns the <c>SceneState</c> representing the scene file contents.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeer">
            <summary>
            <para>PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering.</para>
            </summary>
        </member>
        <member name="P:Godot.PacketPeer.EncodeBufferMaxSize">
            <summary>
            <para>Maximum buffer size allowed when encoding <c>Variant</c>s. Raise this value to support heavier memory allocations.</para>
            <para>The <see cref="M:Godot.PacketPeer.PutVar(System.Object,System.Boolean)"/> method allocates memory on the stack, and the buffer used will grow automatically to the closest power of two to match the size of the <c>Variant</c>. If the <c>Variant</c> is bigger than <c>encode_buffer_max_size</c>, the method will error out with .</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetVar(System.Boolean)">
            <summary>
            <para>Gets a Variant. If <c>allow_objects</c> is <c>true</c>, decoding objects is allowed.</para>
            <para>Warning: Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutVar(System.Object,System.Boolean)">
            <summary>
            <para>Sends a <c>Variant</c> as a packet. If <c>full_objects</c> is <c>true</c>, encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacket">
            <summary>
            <para>Gets a raw packet.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutPacket(System.Byte[])">
            <summary>
            <para>Sends a raw packet.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacketError">
            <summary>
            <para>Returns the error state of the last packet received (via <see cref="M:Godot.PacketPeer.GetPacket"/> and <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetAvailablePacketCount">
            <summary>
            <para>Returns the number of packets currently available in the ring-buffer.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeerDTLS">
            <summary>
            <para>This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by <see cref="M:Godot.DTLSServer.TakeConnection(Godot.PacketPeerUDP)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PacketPeerDTLS.Status.Disconnected">
            <summary>
            <para>A status representing a <see cref="T:Godot.PacketPeerDTLS"/> that is disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.PacketPeerDTLS.Status.Handshaking">
            <summary>
            <para>A status representing a <see cref="T:Godot.PacketPeerDTLS"/> that is currently performing the handshake with a remote peer.</para>
            </summary>
        </member>
        <member name="F:Godot.PacketPeerDTLS.Status.Connected">
            <summary>
            <para>A status representing a <see cref="T:Godot.PacketPeerDTLS"/> that is connected to a remote peer.</para>
            </summary>
        </member>
        <member name="F:Godot.PacketPeerDTLS.Status.Error">
            <summary>
            <para>A status representing a <see cref="T:Godot.PacketPeerDTLS"/> in a generic error state.</para>
            </summary>
        </member>
        <member name="F:Godot.PacketPeerDTLS.Status.ErrorHostnameMismatch">
            <summary>
            <para>An error status that shows a mismatch in the DTLS certificate domain presented by the host and the domain requested for validation.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerDTLS.Poll">
            <summary>
            <para>Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerDTLS.ConnectToPeer(Godot.PacketPeerUDP,System.Boolean,System.String,Godot.X509Certificate)">
            <summary>
            <para>Connects a <c>peer</c> beginning the DTLS handshake using the underlying <see cref="T:Godot.PacketPeerUDP"/> which must be connected (see <see cref="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)"/>). If <c>validate_certs</c> is <c>true</c>, <see cref="T:Godot.PacketPeerDTLS"/> will validate that the certificate presented by the remote peer and match it with the <c>for_hostname</c> argument. You can specify a custom <see cref="T:Godot.X509Certificate"/> to use for validation via the <c>valid_certificate</c> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerDTLS.GetStatus">
            <summary>
            <para>Returns the status of the connection. See <see cref="T:Godot.PacketPeerDTLS.Status"/> for values.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerDTLS.DisconnectFromPeer">
            <summary>
            <para>Disconnects this peer, terminating the DTLS session.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeerStream">
            <summary>
            <para>PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.</para>
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.StreamPeer">
            <summary>
            <para>The wrapped <see cref="T:Godot.StreamPeer"/> object.</para>
            </summary>
        </member>
        <member name="T:Godot.PacketPeerUDP">
            <summary>
            <para>UDP packet peer. Can be used to send raw UDP packets as well as <c>Variant</c>s.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Makes this <see cref="T:Godot.PacketPeerUDP"/> listen on the <c>port</c> binding to <c>bind_address</c> with a buffer size <c>recv_buf_size</c>.</para>
            <para>If <c>bind_address</c> is set to <c>"*"</c> (default), the peer will listen on all available addresses (both IPv4 and IPv6).</para>
            <para>If <c>bind_address</c> is set to <c>"0.0.0.0"</c> (for IPv4) or <c>"::"</c> (for IPv6), the peer will listen on all available addresses matching that IP type.</para>
            <para>If <c>bind_address</c> is set to any valid address (e.g. <c>"192.168.1.101"</c>, <c>"::1"</c>, etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Close">
            <summary>
            <para>Closes the UDP socket the <see cref="T:Godot.PacketPeerUDP"/> is currently listening on.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Wait">
            <summary>
            <para>Waits for a packet to arrive on the listening port. See <see cref="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)"/>.</para>
            <para>Note: <see cref="M:Godot.PacketPeerUDP.Wait"/> can't be interrupted once it has been called. This can be worked around by allowing the other party to send a specific "death pill" packet like this:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>socket = PacketPeerUDP.new()</para>
            <para># Server</para>
            <para>socket.set_dest_address("127.0.0.1", 789)</para>
            <para>socket.put_packet("Time to stop".to_ascii())</para>
            <para></para>
            <para># Client</para>
            <para>while socket.wait() == OK:</para>
            <para>    var data = socket.get_packet().get_string_from_ascii()</para>
            <para>    if data == "Time to stop":</para>
            <para>        return</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var socket = new PacketPeerUDP();</para>
            <para>// Server</para>
            <para>socket.SetDestAddress("127.0.0.1", 789);</para>
            <para>socket.PutPacket("Time To Stop".ToAscii());</para>
            <para></para>
            <para>// Client</para>
            <para>while (socket.Wait() == OK)</para>
            <para>{</para>
            <para>    string data = socket.GetPacket().GetStringFromASCII();</para>
            <para>    if (data == "Time to stop")</para>
            <para>    {</para>
            <para>        return;</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.IsListening">
            <summary>
            <para>Returns whether this <see cref="T:Godot.PacketPeerUDP"/> is listening.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)">
            <summary>
            <para>Calling this method connects this UDP peer to the given <c>host</c>/<c>port</c> pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to <see cref="M:Godot.PacketPeerUDP.SetDestAddress(System.String,System.Int32)"/> are not allowed). This method does not send any data to the remote peer, to do that, use <see cref="M:Godot.PacketPeer.PutVar(System.Object,System.Boolean)"/> or <see cref="M:Godot.PacketPeer.PutPacket(System.Byte[])"/> as usual. See also <see cref="T:Godot.UDPServer"/>.</para>
            <para>Note: Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like SSL or DTLS if you feel like your application is transferring sensitive information.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.IsConnectedToHost">
            <summary>
            <para>Returns <c>true</c> if the UDP socket is open and has been connected to a remote address. See <see cref="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketIp">
            <summary>
            <para>Returns the IP of the remote peer that sent the last packet(that was received with <see cref="M:Godot.PacketPeer.GetPacket"/> or <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketPort">
            <summary>
            <para>Returns the port of the remote peer that sent the last packet(that was received with <see cref="M:Godot.PacketPeer.GetPacket"/> or <see cref="M:Godot.PacketPeer.GetVar(System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.SetDestAddress(System.String,System.Int32)">
            <summary>
            <para>Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.</para>
            <para>Note: <see cref="M:Godot.PacketPeerUDP.SetBroadcastEnabled(System.Boolean)"/> must be enabled before sending packets to a broadcast address (e.g. <c>255.255.255.255</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.SetBroadcastEnabled(System.Boolean)">
            <summary>
            <para>Enable or disable sending of broadcast packets (e.g. <c>set_dest_address("255.255.255.255", 4343)</c>. This option is disabled by default.</para>
            <para>Note: Some Android devices might require the <c>CHANGE_WIFI_MULTICAST_STATE</c> permission and this option to be enabled to receive broadcast packets too.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.JoinMulticastGroup(System.String,System.String)">
            <summary>
            <para>Joins the multicast group specified by <c>multicast_address</c> using the interface identified by <c>interface_name</c>.</para>
            <para>You can join the same multicast group with multiple interfaces. Use <see cref="M:Godot.IP.GetLocalInterfaces"/> to know which are available.</para>
            <para>Note: Some Android devices might require the <c>CHANGE_WIFI_MULTICAST_STATE</c> permission for multicast to work.</para>
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.LeaveMulticastGroup(System.String,System.String)">
            <summary>
            <para>Removes the interface identified by <c>interface_name</c> from the multicast group specified by <c>multicast_address</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Panel">
            <summary>
            <para>Panel is a <see cref="T:Godot.Control"/> that displays an opaque background. It's commonly used as a parent and container for other types of <see cref="T:Godot.Control"/> nodes.</para>
            </summary>
        </member>
        <member name="T:Godot.PanelContainer">
            <summary>
            <para>Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.</para>
            </summary>
        </member>
        <member name="T:Godot.PanoramaSkyMaterial">
            <summary>
            <para>A resource referenced in a <see cref="T:Godot.Sky"/> that is used to draw a background. The Panorama sky material functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a cube map.</para>
            <para>Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (<c>.hdr</c>) and OpenEXR (<c>.exr</c>) image formats for this purpose.</para>
            <para>You can use <a href="https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html">this tool</a> to convert a cube map to an equirectangular sky map.</para>
            </summary>
        </member>
        <member name="P:Godot.PanoramaSkyMaterial.Panorama">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> to be applied to the <see cref="T:Godot.PanoramaSkyMaterial"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.ParallaxBackground">
            <summary>
            <para>A ParallaxBackground uses one or more <see cref="T:Godot.ParallaxLayer"/> child nodes to create a parallax effect. Each <see cref="T:Godot.ParallaxLayer"/> can move at a different speed using <see cref="P:Godot.ParallaxLayer.MotionOffset"/>. This creates an illusion of depth in a 2D game. If not used with a <see cref="T:Godot.Camera2D"/>, you must manually calculate the <see cref="P:Godot.ParallaxBackground.ScrollOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollOffset">
            <summary>
            <para>The ParallaxBackground's scroll value. Calculated automatically when using a <see cref="T:Godot.Camera2D"/>, but can be used to manually manage scrolling when no camera is present.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseOffset">
            <summary>
            <para>The base position offset for all <see cref="T:Godot.ParallaxLayer"/> children.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseScale">
            <summary>
            <para>The base motion scale for all <see cref="T:Godot.ParallaxLayer"/> children.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitBegin">
            <summary>
            <para>Top-left limits for scrolling to begin. If the camera is outside of this limit, the background will stop scrolling. Must be lower than <see cref="P:Godot.ParallaxBackground.ScrollLimitEnd"/> to work.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitEnd">
            <summary>
            <para>Bottom-right limits for scrolling to end. If the camera is outside of this limit, the background will stop scrolling. Must be higher than <see cref="P:Godot.ParallaxBackground.ScrollLimitBegin"/> to work.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollIgnoreCameraZoom">
            <summary>
            <para>If <c>true</c>, elements in <see cref="T:Godot.ParallaxLayer"/> child aren't affected by the zoom level of the camera.</para>
            </summary>
        </member>
        <member name="T:Godot.ParallaxLayer">
            <summary>
            <para>A ParallaxLayer must be the child of a <see cref="T:Godot.ParallaxBackground"/> node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the <see cref="P:Godot.ParallaxBackground.ScrollOffset"/> value.</para>
            <para>This node's children will be affected by its scroll offset.</para>
            <para>Note: Any changes to this node's position and scale made after it enters the scene will be ignored.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionScale">
            <summary>
            <para>Multiplies the ParallaxLayer's motion. If an axis is set to <c>0</c>, it will not scroll.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionOffset">
            <summary>
            <para>The ParallaxLayer's offset relative to the parent ParallaxBackground's <see cref="P:Godot.ParallaxBackground.ScrollOffset"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionMirroring">
            <summary>
            <para>The ParallaxLayer's <see cref="T:Godot.Texture2D"/> mirroring. Useful for creating an infinite scrolling background. If an axis is set to <c>0</c>, the <see cref="T:Godot.Texture2D"/> will not be mirrored.</para>
            </summary>
        </member>
        <member name="T:Godot.ParticlesMaterial">
            <summary>
            <para>ParticlesMaterial defines particle properties and behavior. It is used in the <c>process_material</c> of <see cref="T:Godot.GPUParticles3D"/> and <see cref="T:Godot.GPUParticles2D"/> emitter nodes.</para>
            <para>Some of this material's properties are applied to each particle when emitted, while others can have a <see cref="T:Godot.CurveTexture"/> applied to vary values over the lifetime of the particle.</para>
            <para>When a randomness ratio is applied to a property it is used to scale that property by a random amount. The random ratio is used to interpolate between <c>1.0</c> and a random number less than one, the result is multiplied by the property to obtain the randomized property. For example a random ratio of <c>0.4</c> would scale the original property between <c>0.4-1.0</c> of its original value.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Point">
            <summary>
            <para>All particles will be emitted from a single point.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Sphere">
            <summary>
            <para>Particles will be emitted in the volume of a sphere.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Box">
            <summary>
            <para>Particles will be emitted in the volume of a box.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Points">
            <summary>
            <para>Particles will be emitted at a position determined by sampling a random point on the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Particle color will be modulated by <see cref="P:Godot.ParticlesMaterial.EmissionColorTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.DirectedPoints">
            <summary>
            <para>Particles will be emitted at a position determined by sampling a random point on the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Particle velocity and rotation will be set based on <see cref="P:Godot.ParticlesMaterial.EmissionNormalTexture"/>. Particle color will be modulated by <see cref="P:Godot.ParticlesMaterial.EmissionColorTexture"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.EmissionShapeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.ParticlesMaterial.EmissionShapeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.ParticleFlags.AlignYToVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParticleFlag(Godot.ParticlesMaterial.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.ParticlesMaterial.ParticleFlagAlignY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.ParticleFlags.RotateY">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParticleFlag(Godot.ParticlesMaterial.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.ParticlesMaterial.ParticleFlagRotateY"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.ParticleFlags.DisableZ">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParticleFlag(Godot.ParticlesMaterial.ParticleFlags,System.Boolean)"/> to set <see cref="P:Godot.ParticlesMaterial.ParticleFlagDisableZ"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.ParticleFlags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.ParticlesMaterial.ParticleFlags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.InitialLinearVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set initial velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AngularVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set angular velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.OrbitVelocity">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set orbital velocity properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.LinearAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set linear acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.RadialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set radial acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.TangentialAccel">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set tangential acceleration properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Damping">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set damping properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Angle">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set angle properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Scale">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set scale properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.HueVariation">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set hue variation properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AnimSpeed">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set animation speed properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.AnimOffset">
            <summary>
            <para>Use with <see cref="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)"/>, <see cref="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)"/>, and <see cref="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)"/> to set animation offset properties.</para>
            </summary>
        </member>
        <member name="F:Godot.ParticlesMaterial.Parameter.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.ParticlesMaterial.Parameter"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LifetimeRandomness">
            <summary>
            <para>Particle lifetime randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionShape">
            <summary>
            <para>Particles will be emitted inside this region. Use <see cref="T:Godot.ParticlesMaterial.EmissionShapeEnum"/> constants for values.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionSphereRadius">
            <summary>
            <para>The sphere's radius if <c>emission_shape</c> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionBoxExtents">
            <summary>
            <para>The box's extents if <c>emission_shape</c> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointTexture">
            <summary>
            <para>Particles will be emitted at positions determined by sampling this texture at a random position. Used with  and . Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionNormalTexture">
            <summary>
            <para>Particle velocity and rotation will be set by sampling this texture at the same point as the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>. Used only in . Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionColorTexture">
            <summary>
            <para>Particle color will be modulated by color determined by sampling this texture at the same point as the <see cref="P:Godot.ParticlesMaterial.EmissionPointTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointCount">
            <summary>
            <para>The number of emission points if <c>emission_shape</c> is set to  or .</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ParticleFlagAlignY">
            <summary>
            <para>Align Y axis of particle with the direction of its velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ParticleFlagRotateY">
            <summary>
            <para>If <c>true</c>, particles rotate around Y axis by <see cref="P:Godot.ParticlesMaterial.Angle"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ParticleFlagDisableZ">
            <summary>
            <para>If <c>true</c>, particles will not move on the z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Direction">
            <summary>
            <para>Unit vector specifying the particles' emission direction.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Spread">
            <summary>
            <para>Each particle's initial direction range from <c>+spread</c> to <c>-spread</c> degrees. Applied to X/Z plane and Y/Z planes.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Flatness">
            <summary>
            <para>Amount of <see cref="P:Godot.ParticlesMaterial.Spread"/> in Y/Z plane. A value of <c>1</c> restricts particles to X/Z plane.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Gravity">
            <summary>
            <para>Gravity applied to every particle.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocity">
            <summary>
            <para>Initial velocity magnitude for each particle. Direction comes from <see cref="P:Godot.ParticlesMaterial.Spread"/> and the node's orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocityRandom">
            <summary>
            <para>Initial velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocity">
            <summary>
            <para>Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.</para>
            <para>Only applied when <see cref="P:Godot.ParticlesMaterial.ParticleFlagDisableZ"/> or <see cref="P:Godot.ParticlesMaterial.ParticleFlagRotateY"/> are <c>true</c> or the <see cref="T:Godot.BaseMaterial3D"/> being used to draw the particle is using .</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityRandom">
            <summary>
            <para>Angular velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityCurve">
            <summary>
            <para>Each particle's angular velocity will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocity">
            <summary>
            <para>Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.</para>
            <para>Only available when <see cref="P:Godot.ParticlesMaterial.ParticleFlagDisableZ"/> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityRandom">
            <summary>
            <para>Orbital velocity randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityCurve">
            <summary>
            <para>Each particle's orbital velocity will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccel">
            <summary>
            <para>Linear acceleration applied to each particle in the direction of motion.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelRandom">
            <summary>
            <para>Linear acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelCurve">
            <summary>
            <para>Each particle's linear acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccel">
            <summary>
            <para>Radial acceleration applied to each particle. Makes particle accelerate away from origin.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelRandom">
            <summary>
            <para>Radial acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelCurve">
            <summary>
            <para>Each particle's radial acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccel">
            <summary>
            <para>Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelRandom">
            <summary>
            <para>Tangential acceleration randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelCurve">
            <summary>
            <para>Each particle's tangential acceleration will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Damping">
            <summary>
            <para>The rate at which particles lose velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingRandom">
            <summary>
            <para>Damping randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingCurve">
            <summary>
            <para>Damping will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Angle">
            <summary>
            <para>Initial rotation applied to each particle, in degrees.</para>
            <para>Only applied when <see cref="P:Godot.ParticlesMaterial.ParticleFlagDisableZ"/> or <see cref="P:Godot.ParticlesMaterial.ParticleFlagRotateY"/> are <c>true</c> or the <see cref="T:Godot.BaseMaterial3D"/> being used to draw the particle is using .</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleRandom">
            <summary>
            <para>Rotation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleCurve">
            <summary>
            <para>Each particle's rotation will be animated along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Scale">
            <summary>
            <para>Initial scale applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleRandom">
            <summary>
            <para>Scale randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleCurve">
            <summary>
            <para>Each particle's scale will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Color">
            <summary>
            <para>Each particle's initial color. If the <see cref="T:Godot.GPUParticles2D"/>'s <c>texture</c> is defined, it will be multiplied by this color. To have particle display color in a <see cref="T:Godot.BaseMaterial3D"/> make sure to set <see cref="P:Godot.BaseMaterial3D.VertexColorUseAsAlbedo"/> to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ColorRamp">
            <summary>
            <para>Each particle's color will vary along this <see cref="T:Godot.GradientTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariation">
            <summary>
            <para>Initial hue variation applied to each particle.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationRandom">
            <summary>
            <para>Hue variation randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationCurve">
            <summary>
            <para>Each particle's hue will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeed">
            <summary>
            <para>Particle animation speed.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedRandom">
            <summary>
            <para>Animation speed randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedCurve">
            <summary>
            <para>Each particle's animation speed will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffset">
            <summary>
            <para>Particle animation offset.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetRandom">
            <summary>
            <para>Animation offset randomness ratio.</para>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetCurve">
            <summary>
            <para>Each particle's animation offset will vary along this <see cref="T:Godot.CurveTexture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.SetParam(Godot.ParticlesMaterial.Parameter,System.Single)">
            <summary>
            <para>Sets the specified <see cref="T:Godot.ParticlesMaterial.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.GetParam(Godot.ParticlesMaterial.Parameter)">
            <summary>
            <para>Returns the value of the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.SetParamRandomness(Godot.ParticlesMaterial.Parameter,System.Single)">
            <summary>
            <para>Sets the randomness ratio for the specified <see cref="T:Godot.ParticlesMaterial.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.GetParamRandomness(Godot.ParticlesMaterial.Parameter)">
            <summary>
            <para>Returns the randomness ratio associated with the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.SetParamTexture(Godot.ParticlesMaterial.Parameter,Godot.Texture2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Texture2D"/> for the specified <see cref="T:Godot.ParticlesMaterial.Parameter"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.GetParamTexture(Godot.ParticlesMaterial.Parameter)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> used by the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.SetParticleFlag(Godot.ParticlesMaterial.ParticleFlags,System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables the specified particle flag. See <see cref="T:Godot.ParticlesMaterial.ParticleFlags"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.ParticlesMaterial.GetParticleFlag(Godot.ParticlesMaterial.ParticleFlags)">
            <summary>
            <para>Returns <c>true</c> if the specified particle flag is enabled. See <see cref="T:Godot.ParticlesMaterial.ParticleFlags"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.Path2D">
            <summary>
            <para>Can have <see cref="T:Godot.PathFollow2D"/> child nodes moving along the <see cref="T:Godot.Curve2D"/>. See <see cref="T:Godot.PathFollow2D"/> for more information on usage.</para>
            <para>Note: The path is considered as relative to the moved nodes (children of <see cref="T:Godot.PathFollow2D"/>). As such, the curve should usually start with a zero vector (<c>(0, 0)</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.Path2D.Curve">
            <summary>
            <para>A <see cref="T:Godot.Curve2D"/> describing the path.</para>
            </summary>
        </member>
        <member name="T:Godot.Path3D">
            <summary>
            <para>Can have <see cref="T:Godot.PathFollow3D"/> child nodes moving along the <see cref="T:Godot.Curve3D"/>. See <see cref="T:Godot.PathFollow3D"/> for more information on the usage.</para>
            <para>Note that the path is considered as relative to the moved nodes (children of <see cref="T:Godot.PathFollow3D"/>). As such, the curve should usually start with a zero vector <c>(0, 0, 0)</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Path3D.Curve">
            <summary>
            <para>A <see cref="T:Godot.Curve3D"/> describing the path.</para>
            </summary>
        </member>
        <member name="T:Godot.Path3D.CurveChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.Path3D.Curve"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.PathFollow2D">
            <summary>
            <para>This node takes its parent <see cref="T:Godot.Path2D"/>, and returns the coordinates of a point within it, given a distance from the first vertex.</para>
            <para>It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Offset">
            <summary>
            <para>The distance along the path in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.UnitOffset">
            <summary>
            <para>The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.HOffset">
            <summary>
            <para>The node's offset along the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.VOffset">
            <summary>
            <para>The node's offset perpendicular to the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Rotates">
            <summary>
            <para>If <c>true</c>, this node rotates to follow the path, with the +X direction facing forward on the path.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.CubicInterp">
            <summary>
            <para>If <c>true</c>, the position between two cached points is interpolated cubically, and linearly otherwise.</para>
            <para>The points along the <see cref="T:Godot.Curve2D"/> of the <see cref="T:Godot.Path2D"/> are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.</para>
            <para>There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Loop">
            <summary>
            <para>If <c>true</c>, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Lookahead">
            <summary>
            <para>How far to look ahead of the curve to calculate the tangent if the node is rotating. E.g. shorter lookaheads will lead to faster rotations.</para>
            </summary>
        </member>
        <member name="T:Godot.PathFollow3D">
            <summary>
            <para>This node takes its parent <see cref="T:Godot.Path3D"/>, and returns the coordinates of a point within it, given a distance from the first vertex.</para>
            <para>It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow3D.RotationModeEnum.None">
            <summary>
            <para>Forbids the PathFollow3D to rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow3D.RotationModeEnum.Y">
            <summary>
            <para>Allows the PathFollow3D to rotate in the Y axis only.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow3D.RotationModeEnum.Xy">
            <summary>
            <para>Allows the PathFollow3D to rotate in both the X, and Y axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow3D.RotationModeEnum.Xyz">
            <summary>
            <para>Allows the PathFollow3D to rotate in any axis.</para>
            </summary>
        </member>
        <member name="F:Godot.PathFollow3D.RotationModeEnum.Oriented">
            <summary>
            <para>Uses the up vector information in a <see cref="T:Godot.Curve3D"/> to enforce orientation. This rotation mode requires the <see cref="T:Godot.Path3D"/>'s <see cref="P:Godot.Curve3D.UpVectorEnabled"/> property to be set to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.Offset">
            <summary>
            <para>The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.UnitOffset">
            <summary>
            <para>The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.HOffset">
            <summary>
            <para>The node's offset along the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.VOffset">
            <summary>
            <para>The node's offset perpendicular to the curve.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.RotationMode">
            <summary>
            <para>Allows or forbids rotation on one or more axes, depending on the <see cref="T:Godot.PathFollow3D.RotationModeEnum"/> constants being used.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.CubicInterp">
            <summary>
            <para>If <c>true</c>, the position between two cached points is interpolated cubically, and linearly otherwise.</para>
            <para>The points along the <see cref="T:Godot.Curve3D"/> of the <see cref="T:Godot.Path3D"/> are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.</para>
            <para>There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.</para>
            </summary>
        </member>
        <member name="P:Godot.PathFollow3D.Loop">
            <summary>
            <para>If <c>true</c>, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.</para>
            </summary>
        </member>
        <member name="T:Godot.Performance">
            <summary>
            <para>This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the Monitor tab in the editor's Debugger panel. By using the <see cref="M:Godot.Performance.GetMonitor(Godot.Performance.Monitor)"/> method of this class, you can access this data from your code.</para>
            <para>You can add custom monitors using the <see cref="M:Godot.Performance.AddCustomMonitor(Godot.StringName,Godot.Callable,Godot.Collections.Array)"/> method. Custom monitors are available in Monitor tab in the editor's Debugger panel together with built-in monitors.</para>
            <para>Note: A few of these monitors are only available in debug mode and will always return 0 when used in a release build.</para>
            <para>Note: Many of these monitors are not updated in real-time, so there may be a short delay between changes.</para>
            <para>Note: Custom monitors do not support negative values. Negative values are clamped to 0.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimeFps">
            <summary>
            <para>Number of frames per second.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimeProcess">
            <summary>
            <para>Time it took to complete one frame, in seconds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.TimePhysicsProcess">
            <summary>
            <para>Time it took to complete one physics frame, in seconds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryStatic">
            <summary>
            <para>Static memory currently used, in bytes. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryStaticMax">
            <summary>
            <para>Available static memory. Not available in release builds.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MemoryMessageBufferMax">
            <summary>
            <para>Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectCount">
            <summary>
            <para>Number of objects currently instanced (including nodes).</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectResourceCount">
            <summary>
            <para>Number of resources currently used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectNodeCount">
            <summary>
            <para>Number of nodes currently instanced in the scene tree. This also includes the root node.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.ObjectOrphanNodeCount">
            <summary>
            <para>Number of orphan nodes, i.e. nodes which are not parented to a node of the scene tree.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderObjectsInFrame">
            <summary>
            <para>3D objects drawn per frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVerticesInFrame">
            <summary>
            <para>Vertices drawn per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderMaterialChangesInFrame">
            <summary>
            <para>Material changes per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderShaderChangesInFrame">
            <summary>
            <para>Shader changes per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderSurfaceChangesInFrame">
            <summary>
            <para>Render surface changes per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderDrawCallsInFrame">
            <summary>
            <para>Draw calls per frame. 3D only.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVideoMemUsed">
            <summary>
            <para>The amount of video memory used, i.e. texture and vertex memory combined.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderTextureMemUsed">
            <summary>
            <para>The amount of texture memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderVertexMemUsed">
            <summary>
            <para>The amount of vertex memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.RenderUsageVideoMemTotal">
            <summary>
            <para>Unimplemented in the GLES2 rendering backend, always returns 0.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dActiveObjects">
            <summary>
            <para>Number of active <see cref="T:Godot.RigidBody2D"/> nodes in the game.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dCollisionPairs">
            <summary>
            <para>Number of collision pairs in the 2D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics2dIslandCount">
            <summary>
            <para>Number of islands in the 2D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dActiveObjects">
            <summary>
            <para>Number of active <see cref="T:Godot.RigidBody3D"/> and <see cref="T:Godot.VehicleBody3D"/> nodes in the game.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dCollisionPairs">
            <summary>
            <para>Number of collision pairs in the 3D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.Physics3dIslandCount">
            <summary>
            <para>Number of islands in the 3D physics engine.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.AudioOutputLatency">
            <summary>
            <para>Output latency of the <see cref="T:Godot.AudioServer"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Performance.Monitor.MonitorMax">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Performance.Monitor"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.GetMonitor(Godot.Performance.Monitor)">
            <summary>
            <para>Returns the value of one of the available monitors. You should provide one of the <see cref="T:Godot.Performance.Monitor"/> constants as the argument, like this:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console.</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GD.Print(Performance.GetMonitor(Performance.Monitor.TimeFps)); // Prints the FPS to the console.</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.AddCustomMonitor(Godot.StringName,Godot.Callable,Godot.Collections.Array)">
            <summary>
            <para>Adds a custom monitor with name same as id. You can specify the category of monitor using '/' in id. If there are more than one '/' then default category is used. Default category is "Custom".</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func _ready():</para>
            <para>    var monitor_value = Callable(self, "get_monitor_value")</para>
            <para></para>
            <para>    # Adds monitor with name "MyName" to category "MyCategory".</para>
            <para>    Performance.add_custom_monitor("MyCategory/MyMonitor", monitor_value)</para>
            <para></para>
            <para>    # Adds monitor with name "MyName" to category "Custom".</para>
            <para>    # Note: "MyCategory/MyMonitor" and "MyMonitor" have same name but different ids so the code is valid.</para>
            <para>    Performance.add_custom_monitor("MyMonitor", monitor_value)</para>
            <para></para>
            <para>    # Adds monitor with name "MyName" to category "Custom".</para>
            <para>    # Note: "MyMonitor" and "Custom/MyMonitor" have same name and same category but different ids so the code is valid.</para>
            <para>    Performance.add_custom_monitor("Custom/MyMonitor", monitor_value)</para>
            <para></para>
            <para>    # Adds monitor with name "MyCategoryOne/MyCategoryTwo/MyMonitor" to category "Custom".</para>
            <para>    Performance.add_custom_monitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitor_value)</para>
            <para></para>
            <para>func get_monitor_value():</para>
            <para>    return randi() % 25</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    var monitorValue = new Callable(this, nameof(GetMonitorValue));</para>
            <para></para>
            <para>    // Adds monitor with name "MyName" to category "MyCategory".</para>
            <para>    Performance.AddCustomMonitor("MyCategory/MyMonitor", monitorValue);</para>
            <para>    // Adds monitor with name "MyName" to category "Custom".</para>
            <para>    // Note: "MyCategory/MyMonitor" and "MyMonitor" have same name but different ids so the code is valid.</para>
            <para>    Performance.AddCustomMonitor("MyMonitor", monitorValue);</para>
            <para></para>
            <para>    // Adds monitor with name "MyName" to category "Custom".</para>
            <para>    // Note: "MyMonitor" and "Custom/MyMonitor" have same name and same category but different ids so the code is valid.</para>
            <para>    Performance.AddCustomMonitor("Custom/MyMonitor", monitorValue);</para>
            <para></para>
            <para>    // Adds monitor with name "MyCategoryOne/MyCategoryTwo/MyMonitor" to category "Custom".</para>
            <para>    Performance.AddCustomMonitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitorValue);</para>
            <para>}</para>
            <para></para>
            <para>public int GetMonitorValue()</para>
            <para>{</para>
            <para>    return GD.Randi() % 25;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>The debugger calls the callable to get the value of custom monitor. The callable must return a number.</para>
            <para>Callables are called with arguments supplied in argument array.</para>
            <para>Note: It throws an error if given id is already present.</para>
            </summary>
            <param name="arguments">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Performance.RemoveCustomMonitor(Godot.StringName)">
            <summary>
            <para>Removes the custom monitor with given id.</para>
            <para>Note: It throws an error if the given id is already absent.</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.HasCustomMonitor(Godot.StringName)">
            <summary>
            <para>Returns true if custom monitor with the given id is present otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.GetCustomMonitor(Godot.StringName)">
            <summary>
            <para>Returns the value of custom monitor with given id. The callable is called to get the value of custom monitor.</para>
            <para>Note: It throws an error if the given id is absent.</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.GetMonitorModificationTime">
            <summary>
            <para>Returns the last tick in which custom monitor was added/removed.</para>
            </summary>
        </member>
        <member name="M:Godot.Performance.GetCustomMonitorNames">
            <summary>
            <para>Returns the names of active custom monitors in an array.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.JointType">
            <summary>
            <para>Sets the joint type. See <see cref="T:Godot.PhysicalBone3D.JointTypeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.JointOffset">
            <summary>
            <para>Sets the joint's transform.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.JointRotationDegrees">
            <summary>
            <para>Sets the joint's rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.JointRotation">
            <summary>
            <para>Sets the joint's rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.BodyOffset">
            <summary>
            <para>Sets the body's transform.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.Mass">
            <summary>
            <para>The body's mass.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.Friction">
            <summary>
            <para>The body's friction, from <c>0</c> (frictionless) to <c>1</c> (max friction).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.Bounce">
            <summary>
            <para>The body's bounciness. Values range from <c>0</c> (no bounce) to <c>1</c> (full bounciness).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.GravityScale">
            <summary>
            <para>This is multiplied by the global 3D gravity setting found in Project &gt; Project Settings &gt; Physics &gt; 3d to produce the body's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.LinearDamp">
            <summary>
            <para>Damps the body's movement if greater than <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AngularDamp">
            <summary>
            <para>Damps the body's rotation if greater than <c>0</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.CanSleep">
            <summary>
            <para>If <c>true</c>, the body is deactivated when there is no movement, so it will not take part in the simulation until it is awaken by an external force.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockLinearX">
            <summary>
            <para>Lock the body's movement in the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockLinearY">
            <summary>
            <para>Lock the body's movement in the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockLinearZ">
            <summary>
            <para>Lock the body's movement in the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockAngularX">
            <summary>
            <para>Lock the body's rotation in the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockAngularY">
            <summary>
            <para>Lock the body's rotation in the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalBone3D.AxisLockAngularZ">
            <summary>
            <para>Lock the body's rotation in the Z axis.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicalBone3D.ApplyImpulse(Godot.Vector3,System.Nullable{Godot.Vector3})">
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="T:Godot.PhysicalSkyMaterial">
            <summary>
            <para>The <see cref="T:Godot.PhysicalSkyMaterial"/> uses the Preetham analytic daylight model to draw a sky based on physical properties. This results in a substantially more realistic sky than the <see cref="T:Godot.ProceduralSkyMaterial"/>, but it is slightly slower and less flexible.</para>
            <para>The <see cref="T:Godot.PhysicalSkyMaterial"/> only supports one sun. The color, energy, and direction of the sun are taken from the first <see cref="T:Godot.DirectionalLight3D"/> in the scene tree.</para>
            <para>As it is based on a daylight model, the sky fades to black as the sunset ends. If you want a full day/night cycle, you will have to add a night sky by converting this to a <see cref="T:Godot.ShaderMaterial"/> and adding a night sky directly into the resulting shader.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.RayleighCoefficient">
            <summary>
            <para>Controls the strength of the rayleigh scattering. Rayleigh scattering results from light colliding with small particles. It is responsible for the blue color of the sky.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.RayleighColor">
            <summary>
            <para>Controls the <see cref="T:Godot.Color"/> of the rayleigh scattering. While not physically accurate, this allows for the creation of alien looking planets. For example, setting this to a red <see cref="T:Godot.Color"/> results in a mars looking atmosphere with a corresponding blue sunset.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.MieCoefficient">
            <summary>
            <para>Controls the strength of mie scattering for the sky. Mie scattering results from light colliding with larger particles (like water). On earth, mie scattering results in a whiteish color around the sun and horizon.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.MieEccentricity">
            <summary>
            <para>Controls the direction of the mie scattering. A value of <c>1</c> means that when light hits a particle it passing through straight forward. A value of <c>-1</c> means that all light is scatter backwards.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.MieColor">
            <summary>
            <para>Controls the <see cref="T:Godot.Color"/> of the mie scattering effect. While not physically accurate, this allows for the creation of alien looking planets.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.Turbidity">
            <summary>
            <para>Sets the thickness of the atmosphere. High turbidity creates a foggy looking atmosphere, while a low turbidity results in a clearer atmosphere.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.SunDiskScale">
            <summary>
            <para>Sets the size of the sun disk. Default value is based on Sol's perceived size from Earth.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.GroundColor">
            <summary>
            <para>Modulates the <see cref="T:Godot.Color"/> on the bottom half of the sky to represent the ground.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.Exposure">
            <summary>
            <para>Sets the exposure of the sky. Higher exposure values make the entire sky brighter.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.DitherStrength">
            <summary>
            <para>Sets the amount of dithering to use. Dithering helps reduce banding that appears from the smooth changes in color in the sky. Use the lowest value possible, higher amounts may add fuzziness to the sky.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicalSkyMaterial.NightSky">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> for the night sky. This is added to the sky, so if it is bright enough, it may be visible during the day.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody2D">
            <summary>
            <para>PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the <see cref="P:Godot.PhysicsBody2D.CollisionMask"/> property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionMask">
            <summary>
            <para>The physics layers this area scans for collisions. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the <see cref="P:Godot.PhysicsBody2D.CollisionMask"/> bitmask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.PhysicsBody2D.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the <see cref="P:Godot.PhysicsBody2D.CollisionLayer"/> bitmask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.PhysicsBody2D.CollisionLayer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody3D">
            <summary>
            <para>PhysicsBody3D is an abstract base class for implementing a physics body. All *Body types inherit from it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody3D.CollisionLayer">
            <summary>
            <para>The physics layers this area is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the <see cref="P:Godot.PhysicsBody3D.CollisionMask"/> property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody3D.CollisionMask">
            <summary>
            <para>The physics layers this area scans for collisions. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the <see cref="P:Godot.PhysicsBody3D.CollisionMask"/> bitmask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.PhysicsBody3D.CollisionMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the <see cref="P:Godot.PhysicsBody3D.CollisionLayer"/> bitmask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the <see cref="P:Godot.PhysicsBody3D.CollisionLayer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody3D.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectBodyState2D">
            <summary>
            <para>Provides direct access to a physics body in the <see cref="T:Godot.PhysicsServer2D"/>, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.PhysicsDirectBodyState2D)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.Step">
            <summary>
            <para>The timestep (delta) used for the simulation.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.InverseMass">
            <summary>
            <para>The inverse of the mass of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.InverseInertia">
            <summary>
            <para>The inverse of the inertia of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.TotalAngularDamp">
            <summary>
            <para>The rate at which the body stops rotating, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.TotalLinearDamp">
            <summary>
            <para>The rate at which the body stops moving, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.TotalGravity">
            <summary>
            <para>The total gravity vector being currently applied to this body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.Sleeping">
            <summary>
            <para>If <c>true</c>, this body is currently sleeping (not active).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState2D.Transform">
            <summary>
            <para>The body's transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.AddCentralForce(Godot.Vector2)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.AddForce(Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.AddTorque(System.Single)">
            <summary>
            <para>Adds a constant rotational force.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.ApplyCentralImpulse(Godot.Vector2)">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.ApplyTorqueImpulse(System.Single)">
            <summary>
            <para>Applies a rotational impulse to the body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.ApplyImpulse(Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The offset uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactCount">
            <summary>
            <para>Returns the number of contacts this body has with other bodies.</para>
            <para>Note: By default, this returns 0 unless bodies are configured to monitor contacts. See <see cref="P:Godot.RigidBody2D.ContactMonitor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactLocalPosition(System.Int32)">
            <summary>
            <para>Returns the local position of the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactLocalNormal(System.Int32)">
            <summary>
            <para>Returns the local normal at the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactLocalShape(System.Int32)">
            <summary>
            <para>Returns the local shape index of the collision.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactCollider(System.Int32)">
            <summary>
            <para>Returns the collider's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderPosition(System.Int32)">
            <summary>
            <para>Returns the contact position in the collider.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderId(System.Int32)">
            <summary>
            <para>Returns the collider's object id.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderObject(System.Int32)">
            <summary>
            <para>Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderShape(System.Int32)">
            <summary>
            <para>Returns the collider's shape index.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderShapeMetadata(System.Int32)">
            <summary>
            <para>Returns the collided shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            <para>Returns the linear velocity vector at the collider's contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.IntegrateForces">
            <summary>
            <para>Calls the built-in force integration code.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState2D.GetSpaceState">
            <summary>
            <para>Returns the current state of the space, useful for queries.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectBodyState3D">
            <summary>
            <para>Provides direct access to a physics body in the <see cref="T:Godot.PhysicsServer3D"/>, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See <see cref="M:Godot.RigidBody3D._IntegrateForces(Godot.PhysicsDirectBodyState3D)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.Step">
            <summary>
            <para>The timestep (delta) used for the simulation.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.InverseMass">
            <summary>
            <para>The inverse of the mass of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.TotalAngularDamp">
            <summary>
            <para>The rate at which the body stops rotating, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.TotalLinearDamp">
            <summary>
            <para>The rate at which the body stops moving, if there are not any other forces moving it.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.InverseInertia">
            <summary>
            <para>The inverse of the inertia of the body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.TotalGravity">
            <summary>
            <para>The total gravity vector being currently applied to this body.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.Sleeping">
            <summary>
            <para>If <c>true</c>, this body is currently sleeping (not active).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState3D.Transform">
            <summary>
            <para>The body's transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.AddCentralForce(System.Nullable{Godot.Vector3})">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            <para>This is equivalent to <c>add_force(force, Vector3(0,0,0))</c>.</para>
            </summary>
            <param name="force">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.AddForce(Godot.Vector3,System.Nullable{Godot.Vector3})">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.AddTorque(Godot.Vector3)">
            <summary>
            <para>Adds a constant rotational force without affecting position.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.ApplyCentralImpulse(System.Nullable{Godot.Vector3})">
            <summary>
            <para>Applies a single directional impulse without affecting rotation.</para>
            <para>This is equivalent to <c>apply_impulse(Vector3(0, 0, 0), impulse)</c>.</para>
            </summary>
            <param name="impulse">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.ApplyImpulse(Godot.Vector3,System.Nullable{Godot.Vector3})">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.ApplyTorqueImpulse(Godot.Vector3)">
            <summary>
            <para>Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the vector <c>j</c> passed as parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactCount">
            <summary>
            <para>Returns the number of contacts this body has with other bodies.</para>
            <para>Note: By default, this returns 0 unless bodies are configured to monitor contacts. See <see cref="P:Godot.RigidBody3D.ContactMonitor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactLocalPosition(System.Int32)">
            <summary>
            <para>Returns the local position of the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactLocalNormal(System.Int32)">
            <summary>
            <para>Returns the local normal at the contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactImpulse(System.Int32)">
            <summary>
            <para>Impulse created by the contact. Only implemented for Bullet physics.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactLocalShape(System.Int32)">
            <summary>
            <para>Returns the local shape index of the collision.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactCollider(System.Int32)">
            <summary>
            <para>Returns the collider's <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactColliderPosition(System.Int32)">
            <summary>
            <para>Returns the contact position in the collider.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactColliderId(System.Int32)">
            <summary>
            <para>Returns the collider's object id.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactColliderObject(System.Int32)">
            <summary>
            <para>Returns the collider object.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactColliderShape(System.Int32)">
            <summary>
            <para>Returns the collider's shape index.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            <para>Returns the linear velocity vector at the collider's contact point.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.IntegrateForces">
            <summary>
            <para>Calls the built-in force integration code.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState3D.GetSpaceState">
            <summary>
            <para>Returns the current state of the space, useful for queries.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectSpaceState2D">
            <summary>
            <para>Direct access object to a space in the <see cref="T:Godot.PhysicsServer2D"/>. It's used mainly to do queries against objects and areas residing in a given space.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.IntersectPoint(Godot.Vector2,System.Int32,Godot.Collections.Array,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            <para>Checks whether a point is inside any solid shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody2D"/>s or <see cref="T:Godot.Area2D"/>s, respectively.</para>
            <para>Note: <see cref="T:Godot.ConcavePolygonShape2D"/>s and <see cref="T:Godot.CollisionPolygon2D"/>s in <c>Segments</c> build mode are not solid shapes. Therefore, they will not be detected.</para>
            </summary>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.IntersectPointOnCanvas(Godot.Vector2,System.UInt64,System.Int32,Godot.Collections.Array,System.UInt32,System.Boolean,System.Boolean)">
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.IntersectRay(Godot.Vector2,Godot.Vector2,Godot.Collections.Array,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            <para>Intersects a ray in a given space. The returned object is a dictionary with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>position</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the ray did not intersect anything, then an empty dictionary is returned instead.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody2D"/>s or <see cref="T:Godot.Area2D"/>s, respectively.</para>
            </summary>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.IntersectShape(Godot.PhysicsShapeQueryParameters2D,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters2D"/> object, against the space.</para>
            <para>Note: This method does not take into account the <c>motion</c> property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>The number of intersections can be limited with the <c>max_results</c> parameter, to reduce the processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.CastMotion(Godot.PhysicsShapeQueryParameters2D)">
            <summary>
            <para>Checks how far the shape can travel toward a point. If the shape can not move, the array will be empty.</para>
            <para>Note: Both the shape and the motion are supplied through a <see cref="T:Godot.PhysicsShapeQueryParameters2D"/> object. The method will return an array with two floats between 0 and 1, both representing a fraction of <c>motion</c>. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be <c>[1, 1]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.CollideShape(Godot.PhysicsShapeQueryParameters2D,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters2D"/> object, against the space. The resulting array contains a list of points where the shape intersects another. Like with <see cref="M:Godot.PhysicsDirectSpaceState2D.IntersectShape(Godot.PhysicsShapeQueryParameters2D,System.Int32)"/>, the number of returned results can be limited to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState2D.GetRestInfo(Godot.PhysicsShapeQueryParameters2D)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters2D"/> object, against the space. If it collides with more than one shape, the nearest one is selected. If the shape did not intersect anything, then an empty dictionary is returned instead.</para>
            <para>Note: This method does not take into account the <c>motion</c> property of the object. The returned object is a dictionary containing the following fields:</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>linear_velocity</c>: The colliding object's velocity <see cref="T:Godot.Vector2"/>. If the object is an <see cref="T:Godot.Area2D"/>, the result is <c>(0, 0)</c>.</para>
            <para><c>metadata</c>: The intersecting shape's metadata. This metadata is different from <see cref="M:Godot.Object.GetMeta(System.String)"/>, and is set with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>point</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectSpaceState3D">
            <summary>
            <para>Direct access object to a space in the <see cref="T:Godot.PhysicsServer3D"/>. It's used mainly to do queries against objects and areas residing in a given space.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState3D.IntersectRay(Godot.Vector3,Godot.Vector3,Godot.Collections.Array,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            <para>Intersects a ray in a given space. The returned object is a dictionary with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>position</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the ray did not intersect anything, then an empty dictionary is returned instead.</para>
            <para>Additionally, the method can take an <c>exclude</c> array of objects or <see cref="T:Godot.RID"/>s that are to be excluded from collisions, a <c>collision_mask</c> bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with <see cref="T:Godot.PhysicsBody3D"/>s or <see cref="T:Godot.Area3D"/>s, respectively.</para>
            </summary>
            <param name="exclude">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState3D.IntersectShape(Godot.PhysicsShapeQueryParameters3D,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters3D"/> object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:</para>
            <para><c>collider</c>: The colliding object.</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>The number of intersections can be limited with the <c>max_results</c> parameter, to reduce the processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState3D.CastMotion(Godot.PhysicsShapeQueryParameters3D,Godot.Vector3)">
            <summary>
            <para>Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of <c>motion</c>. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be <c>[1, 1]</c>.</para>
            <para>If the shape can not move, the returned array will be <c>[0, 0]</c> under Bullet, and empty under GodotPhysics3D.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState3D.CollideShape(Godot.PhysicsShapeQueryParameters3D,System.Int32)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters3D"/> object, against the space. The resulting array contains a list of points where the shape intersects another. Like with <see cref="M:Godot.PhysicsDirectSpaceState3D.IntersectShape(Godot.PhysicsShapeQueryParameters3D,System.Int32)"/>, the number of returned results can be limited to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState3D.GetRestInfo(Godot.PhysicsShapeQueryParameters3D)">
            <summary>
            <para>Checks the intersections of a shape, given through a <see cref="T:Godot.PhysicsShapeQueryParameters3D"/> object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:</para>
            <para><c>collider_id</c>: The colliding object's ID.</para>
            <para><c>linear_velocity</c>: The colliding object's velocity <see cref="T:Godot.Vector3"/>. If the object is an <see cref="T:Godot.Area3D"/>, the result is <c>(0, 0, 0)</c>.</para>
            <para><c>normal</c>: The object's surface normal at the intersection point.</para>
            <para><c>point</c>: The intersection point.</para>
            <para><c>rid</c>: The intersecting object's <see cref="T:Godot.RID"/>.</para>
            <para><c>shape</c>: The shape index of the colliding shape.</para>
            <para>If the shape did not intersect anything, then an empty dictionary is returned instead.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsMaterial">
            <summary>
            <para>Provides a means of modifying the collision properties of a <see cref="T:Godot.PhysicsBody3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Friction">
            <summary>
            <para>The body's friction. Values range from <c>0</c> (frictionless) to <c>1</c> (maximum friction).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Rough">
            <summary>
            <para>If <c>true</c>, the physics engine will use the friction of the object marked as "rough" when two objects collide. If <c>false</c>, the physics engine will use the lowest friction of all colliding objects instead. If <c>true</c> for both colliding objects, the physics engine will use the highest friction.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Bounce">
            <summary>
            <para>The body's bounciness. Values range from <c>0</c> (no bounce) to <c>1</c> (full bounciness).</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsMaterial.Absorbent">
            <summary>
            <para>If <c>true</c>, subtracts the bounciness from the colliding object's bounciness instead of adding it.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsServer2D">
            <summary>
            <para>PhysicsServer2D is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ProcessInfo.ActiveObjects">
            <summary>
            <para>Constant to get the number of objects that are not sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ProcessInfo.CollisionPairs">
            <summary>
            <para>Constant to get the number of possible collisions.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ProcessInfo.IslandCount">
            <summary>
            <para>Constant to get the number of space regions where a collision could occur.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaBodyStatus.Added">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object enters one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaBodyStatus.Removed">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object exits one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyMode.Static">
            <summary>
            <para>Constant for static bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyMode.Kinematic">
            <summary>
            <para>Constant for kinematic bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyMode.Rigid">
            <summary>
            <para>Constant for rigid bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyMode.Character">
            <summary>
            <para>Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Line">
            <summary>
            <para>This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Segment">
            <summary>
            <para>This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Circle">
            <summary>
            <para>This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Rectangle">
            <summary>
            <para>This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Capsule">
            <summary>
            <para>This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.ConvexPolygon">
            <summary>
            <para>This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the <see cref="P:Godot.CollisionPolygon2D.Polygon"/> property, polygons modified with <see cref="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)"/> do not verify that the points supplied form is a convex polygon.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.ConcavePolygon">
            <summary>
            <para>This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.ShapeType.Custom">
            <summary>
            <para>This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.ContactRecycleRadius">
            <summary>
            <para>Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.ContactMaxSeparation">
            <summary>
            <para>Constant to set/get the maximum distance a shape can be from another before they are considered separated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.BodyMaxAllowedPenetration">
            <summary>
            <para>Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.BodyLinearVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.BodyAngularVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.BodyTimeToSleep">
            <summary>
            <para>Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.SpaceParameter.ConstraintDefaultBias">
            <summary>
            <para>Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.JointType.Pin">
            <summary>
            <para>Constant to create pin joints.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.JointType.Groove">
            <summary>
            <para>Constant to create groove joints.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.JointType.DampedSpring">
            <summary>
            <para>Constant to create damped spring joints.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.CCDMode.Disabled">
            <summary>
            <para>Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.CCDMode.CastRay">
            <summary>
            <para>Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.CCDMode.CastShape">
            <summary>
            <para>Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.DampedSpringParam.RestLength">
            <summary>
            <para>Sets the resting length of the spring joint. The joint will always try to go to back this length when pulled apart.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.DampedSpringParam.Stiffness">
            <summary>
            <para>Sets the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.DampedSpringParam.Damping">
            <summary>
            <para>Sets the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping).</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyState.Transform">
            <summary>
            <para>Constant to set/get the current transform matrix of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyState.LinearVelocity">
            <summary>
            <para>Constant to set/get the current linear velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyState.AngularVelocity">
            <summary>
            <para>Constant to set/get the current angular velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyState.Sleeping">
            <summary>
            <para>Constant to sleep/wake up a body, or to get whether it is sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyState.CanSleep">
            <summary>
            <para>Constant to set/get whether the body can sleep.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.Bounce">
            <summary>
            <para>Constant to set/get a body's bounce factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.Friction">
            <summary>
            <para>Constant to set/get a body's friction.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.Mass">
            <summary>
            <para>Constant to set/get a body's mass.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.Inertia">
            <summary>
            <para>Constant to set/get a body's inertia.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.GravityScale">
            <summary>
            <para>Constant to set/get a body's gravity multiplier.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.LinearDamp">
            <summary>
            <para>Constant to set/get a body's linear dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.AngularDamp">
            <summary>
            <para>Constant to set/get a body's angular dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.BodyParameter.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.PhysicsServer2D.BodyParameter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaSpaceOverrideMode.Disabled">
            <summary>
            <para>This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaSpaceOverrideMode.Combine">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaSpaceOverrideMode.CombineReplace">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaSpaceOverrideMode.Replace">
            <summary>
            <para>This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaSpaceOverrideMode.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.Gravity">
            <summary>
            <para>Constant to set/get gravity strength in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.GravityVector">
            <summary>
            <para>Constant to set/get gravity vector/center in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.GravityIsPoint">
            <summary>
            <para>Constant to set/get whether the gravity vector of an area is a direction, or a center point.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.GravityDistanceScale">
            <summary>
            <para>Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.GravityPointAttenuation">
            <summary>
            <para>This constant was used to set/get the falloff factor for point gravity. It has been superseded by .</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.LinearDamp">
            <summary>
            <para>Constant to set/get the linear dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.AngularDamp">
            <summary>
            <para>Constant to set/get the angular dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer2D.AreaParameter.Priority">
            <summary>
            <para>Constant to set/get the priority (order of processing) of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            <para>Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created <see cref="M:Godot.PhysicsServer2D.ShapeGetType(Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.ShapeGetType(Godot.RID)">
            <summary>
            <para>Returns a shape's type (see <see cref="T:Godot.PhysicsServer2D.ShapeType"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.ShapeGetData(Godot.RID)">
            <summary>
            <para>Returns the shape data.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceCreate">
            <summary>
            <para>Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with <see cref="M:Godot.PhysicsServer2D.AreaSetSpace(Godot.RID,Godot.RID)"/>, or to a body with <see cref="M:Godot.PhysicsServer2D.BodySetSpace(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Marks a space as active. It will not have an effect, unless it is assigned to an area or body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceIsActive(Godot.RID)">
            <summary>
            <para>Returns whether the space is active.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceSetParam(Godot.RID,Godot.PhysicsServer2D.SpaceParameter,System.Single)">
            <summary>
            <para>Sets the value for a space parameter. See <see cref="T:Godot.PhysicsServer2D.SpaceParameter"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceGetParam(Godot.RID,Godot.PhysicsServer2D.SpaceParameter)">
            <summary>
            <para>Returns the value of a space parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SpaceGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the state of a space, a <see cref="T:Godot.PhysicsDirectSpaceState2D"/>. This object can be used to make collision/intersection queries.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaCreate">
            <summary>
            <para>Creates an <see cref="T:Godot.Area2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetSpace(Godot.RID)">
            <summary>
            <para>Returns the space assigned to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetSpaceOverrideMode(Godot.RID,Godot.PhysicsServer2D.AreaSpaceOverrideMode)">
            <summary>
            <para>Sets the space override mode for the area. See <see cref="T:Godot.PhysicsServer2D.AreaSpaceOverrideMode"/> for a list of available modes.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            <para>Returns the space override mode for the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D},System.Boolean)">
            <summary>
            <para>Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            </summary>
            <param name="transform">If the parameter is null, then the default value is Transform2D.Identity</param>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given area shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for an area shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            <para>Disables a given shape in an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a shape within an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from an area. It does not delete the shape, so it can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetCollisionLayer(Godot.RID,System.UInt32)">
            <summary>
            <para>Assigns the area to one or many physics layers.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetCollisionMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets which physics layers the area will monitor.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetParam(Godot.RID,Godot.PhysicsServer2D.AreaParameter,System.Object)">
            <summary>
            <para>Sets the value for an area parameter. See <see cref="T:Godot.PhysicsServer2D.AreaParameter"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetParam(Godot.RID,Godot.PhysicsServer2D.AreaParameter)">
            <summary>
            <para>Returns an area parameter value. See <see cref="T:Godot.PhysicsServer2D.AreaParameter"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetTransform(Godot.RID)">
            <summary>
            <para>Returns the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaAttachObjectInstanceId(Godot.RID,System.UInt64)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.AreaSetMonitorCallback(Godot.RID,Godot.Object,Godot.StringName)">
            <summary>
            <para>Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:</para>
            <para>1:  or , depending on whether the object entered or exited the area.</para>
            <para>2: <see cref="T:Godot.RID"/> of the object that entered/exited the area.</para>
            <para>3: Instance ID of the object that entered/exited the area.</para>
            <para>4: The shape index of the object that entered/exited the area.</para>
            <para>5: The shape index of the area where the object entered/exited.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyCreate">
            <summary>
            <para>Creates a physics body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the body (see <see cref="M:Godot.PhysicsServer2D.SpaceCreate"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetSpace(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the space assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetMode(Godot.RID,Godot.PhysicsServer2D.BodyMode)">
            <summary>
            <para>Sets the body mode using one of the <see cref="T:Godot.PhysicsServer2D.BodyMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetMode(Godot.RID)">
            <summary>
            <para>Returns the body mode.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D},System.Boolean)">
            <summary>
            <para>Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            </summary>
            <param name="transform">If the parameter is null, then the default value is Transform2D.Identity</param>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given body shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the transform matrix for a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetShapeMetadata(Godot.RID,System.Int32,System.Object)">
            <summary>
            <para>Sets metadata of a shape within a body. This metadata is different from <see cref="M:Godot.Object.SetMeta(System.String,System.Object)"/>, and can be retrieved on shape queries.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetShapeMetadata(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the metadata of a shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            <para>Disables shape in body if <c>disable</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetShapeAsOneWayCollision(Godot.RID,System.Int32,System.Boolean,System.Single)">
            <summary>
            <para>Enables one way collision on body if <c>enable</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyAttachObjectInstanceId(Godot.RID,System.UInt64)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetContinuousCollisionDetectionMode(Godot.RID,Godot.PhysicsServer2D.CCDMode)">
            <summary>
            <para>Sets the continuous collision detection mode using one of the <see cref="T:Godot.PhysicsServer2D.CCDMode"/> constants.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetContinuousCollisionDetectionMode(Godot.RID)">
            <summary>
            <para>Returns the continuous collision detection mode.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetCollisionLayer(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetCollisionMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetCollisionMask(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetParam(Godot.RID,Godot.PhysicsServer2D.BodyParameter,System.Single)">
            <summary>
            <para>Sets a body parameter. See <see cref="T:Godot.PhysicsServer2D.BodyParameter"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetParam(Godot.RID,Godot.PhysicsServer2D.BodyParameter)">
            <summary>
            <para>Returns the value of a body parameter. See <see cref="T:Godot.PhysicsServer2D.BodyParameter"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetState(Godot.RID,Godot.PhysicsServer2D.BodyState,System.Object)">
            <summary>
            <para>Sets a body state using one of the <see cref="T:Godot.PhysicsServer2D.BodyState"/> constants.</para>
            <para>Note that the method doesn't take effect immediately. The state will change on the next physics frame.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetState(Godot.RID,Godot.PhysicsServer2D.BodyState)">
            <summary>
            <para>Returns a body state.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyApplyImpulse(Godot.RID,Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyAddForce(Godot.RID,Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a positioned force to the applied force and torque. As with <see cref="M:Godot.PhysicsServer2D.BodyApplyImpulse(Godot.RID,Godot.Vector2,System.Nullable{Godot.Vector2})"/>, both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetAxisVelocity(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a body to the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Removes a body from the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            <para>Returns the maximum contacts that can be reported. See <see cref="M:Godot.PhysicsServer2D.BodySetMaxContactsReported(Godot.RID,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer2D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            <para>Returns whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer2D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Sets the function used to calculate physics for an object, if that object allows it (see <see cref="M:Godot.PhysicsServer2D.BodySetOmitForceIntegration(Godot.RID,System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyTestMotion(Godot.RID,Godot.Transform2D,Godot.Vector2,System.Boolean,System.Single,Godot.PhysicsTestMotionResult2D)">
            <summary>
            <para>Returns <c>true</c> if a collision would result from moving in the given direction from a given point in space. Margin increases the size of the shapes involved in the collision detection. <see cref="T:Godot.PhysicsTestMotionResult2D"/> can be passed to return additional information in.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.BodyGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.PhysicsDirectBodyState2D"/> of the body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.JointSetParam(Godot.RID,Godot.PhysicsServer2D.JointParam,System.Single)">
            <summary>
            <para>Sets a joint parameter. See <see cref="T:Godot.PhysicsServer2D.JointParam"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.JointGetParam(Godot.RID,Godot.PhysicsServer2D.JointParam)">
            <summary>
            <para>Returns the value of a joint parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.PinJointCreate(Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.GrooveJointCreate(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a groove joint between two bodies. If not specified, the bodies are assumed to be the joint itself.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.DampedSpringJointCreate(Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.DampedSpringJointSetParam(Godot.RID,Godot.PhysicsServer2D.DampedSpringParam,System.Single)">
            <summary>
            <para>Sets a damped spring joint parameter. See <see cref="T:Godot.PhysicsServer2D.DampedSpringParam"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.DampedSpringJointGetParam(Godot.RID,Godot.PhysicsServer2D.DampedSpringParam)">
            <summary>
            <para>Returns the value of a damped spring joint parameter. See <see cref="T:Godot.PhysicsServer2D.DampedSpringParam"/> for a list of available parameters.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.JointGetType(Godot.RID)">
            <summary>
            <para>Returns a joint's type (see <see cref="T:Godot.PhysicsServer2D.JointType"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.FreeRid(Godot.RID)">
            <summary>
            <para>Destroys any of the objects created by PhysicsServer2D. If the <see cref="T:Godot.RID"/> passed is not one of the objects that can be created by PhysicsServer2D, an error will be sent to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.SetActive(System.Boolean)">
            <summary>
            <para>Activates or deactivates the 2D physics engine.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer2D.GetProcessInfo(Godot.PhysicsServer2D.ProcessInfo)">
            <summary>
            <para>Returns information about the current state of the 2D physics engine. See <see cref="T:Godot.PhysicsServer2D.ProcessInfo"/> for a list of available states.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsServer3D">
            <summary>
            <para>PhysicsServer3D is the server responsible for all 3D physics. It can create many kinds of physics objects, but does not insert them on the node tree.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ProcessInfo.ActiveObjects">
            <summary>
            <para>Constant to get the number of objects that are not sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ProcessInfo.CollisionPairs">
            <summary>
            <para>Constant to get the number of possible collisions.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ProcessInfo.IslandCount">
            <summary>
            <para>Constant to get the number of space regions where a collision could occur.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaBodyStatus.Added">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object enters one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaBodyStatus.Removed">
            <summary>
            <para>The value of the first parameter and area callback function receives, when an object exits one of its shapes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyMode.Static">
            <summary>
            <para>Constant for static bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyMode.Kinematic">
            <summary>
            <para>Constant for kinematic bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyMode.Rigid">
            <summary>
            <para>Constant for rigid bodies.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyMode.Character">
            <summary>
            <para>Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Plane">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.WorldMarginShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Ray">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.RayShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Sphere">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.SphereShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Box">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.BoxShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Capsule">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.CapsuleShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Cylinder">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.CylinderShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.ConvexPolygon">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.ConvexPolygonShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.ConcavePolygon">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.ConcavePolygonShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Heightmap">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> is a <see cref="T:Godot.HeightMapShape3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ShapeType.Custom">
            <summary>
            <para>This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.PinJointParam.Bias">
            <summary>
            <para>The strength with which the pinned objects try to stay in positional relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.PinJointParam.Damping">
            <summary>
            <para>The strength with which the pinned objects try to stay in velocity relation to each other.</para>
            <para>The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.PinJointParam.ImpulseClamp">
            <summary>
            <para>If above 0, this value is the maximum value for an impulse that this Joint3D puts on its ends.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.ContactRecycleRadius">
            <summary>
            <para>Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.ContactMaxSeparation">
            <summary>
            <para>Constant to set/get the maximum distance a shape can be from another before they are considered separated.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.BodyMaxAllowedPenetration">
            <summary>
            <para>Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.BodyLinearVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.BodyAngularVelocitySleepThreshold">
            <summary>
            <para>Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.BodyTimeToSleep">
            <summary>
            <para>Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SpaceParameter.ConstraintDefaultBias">
            <summary>
            <para>Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ConeTwistJointParam.SwingSpan">
            <summary>
            <para>Swing is rotation from side to side, around the axis perpendicular to the twist axis.</para>
            <para>The swing span defines, how much rotation will not get corrected along the swing axis.</para>
            <para>Could be defined as looseness in the <see cref="T:Godot.ConeTwistJoint3D"/>.</para>
            <para>If below 0.05, this behavior is locked.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ConeTwistJointParam.TwistSpan">
            <summary>
            <para>Twist is the rotation around the twist axis, this value defined how far the joint can twist.</para>
            <para>Twist is locked if below 0.05.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ConeTwistJointParam.Bias">
            <summary>
            <para>The speed with which the swing or twist will take place.</para>
            <para>The higher, the faster.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ConeTwistJointParam.Softness">
            <summary>
            <para>The ease with which the Joint3D twists, if it's too low, it takes more force to twist the joint.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.ConeTwistJointParam.Relaxation">
            <summary>
            <para>Defines, how fast the swing- and twist-speed-difference on both sides gets synced.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.JointType.Pin">
            <summary>
            <para>The <see cref="T:Godot.Joint3D"/> is a <see cref="T:Godot.PinJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.JointType.Hinge">
            <summary>
            <para>The <see cref="T:Godot.Joint3D"/> is a <see cref="T:Godot.HingeJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.JointType.Slider">
            <summary>
            <para>The <see cref="T:Godot.Joint3D"/> is a <see cref="T:Godot.SliderJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.JointType.ConeTwist">
            <summary>
            <para>The <see cref="T:Godot.Joint3D"/> is a <see cref="T:Godot.ConeTwistJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.JointType.Joint6dof">
            <summary>
            <para>The <see cref="T:Godot.Joint3D"/> is a <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyState.Transform">
            <summary>
            <para>Constant to set/get the current transform matrix of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyState.LinearVelocity">
            <summary>
            <para>Constant to set/get the current linear velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyState.AngularVelocity">
            <summary>
            <para>Constant to set/get the current angular velocity of the body.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyState.Sleeping">
            <summary>
            <para>Constant to sleep/wake up a body, or to get whether it is sleeping.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyState.CanSleep">
            <summary>
            <para>Constant to set/get whether the body can sleep.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.Bounce">
            <summary>
            <para>Constant to set/get a body's bounce factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.Friction">
            <summary>
            <para>Constant to set/get a body's friction.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.Mass">
            <summary>
            <para>Constant to set/get a body's mass.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.GravityScale">
            <summary>
            <para>Constant to set/get a body's gravity multiplier.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.LinearDamp">
            <summary>
            <para>Constant to set/get a body's linear dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.AngularDamp">
            <summary>
            <para>Constant to set/get a body's angular dampening factor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.BodyParameter.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.PhysicsServer3D.BodyParameter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearLowerLimit">
            <summary>
            <para>The minimum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearUpperLimit">
            <summary>
            <para>The maximum difference between the pivot points' axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearLimitSoftness">
            <summary>
            <para>A factor that gets applied to the movement across the axes. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearRestitution">
            <summary>
            <para>The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearDamping">
            <summary>
            <para>The amount of damping that happens at the linear motion across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearMotorTargetVelocity">
            <summary>
            <para>The velocity that the joint's linear motor will attempt to reach.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.LinearMotorForceLimit">
            <summary>
            <para>The maximum force that the linear motor can apply while trying to reach the target velocity.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularLowerLimit">
            <summary>
            <para>The minimum rotation in negative direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularUpperLimit">
            <summary>
            <para>The minimum rotation in positive direction to break loose and rotate around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularLimitSoftness">
            <summary>
            <para>A factor that gets multiplied onto all rotations across the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularDamping">
            <summary>
            <para>The amount of rotational damping across the axes. The lower, the more dampening occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularRestitution">
            <summary>
            <para>The amount of rotational restitution across the axes. The lower, the more restitution occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularForceLimit">
            <summary>
            <para>The maximum amount of force that can occur, when rotating around the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularErp">
            <summary>
            <para>When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularMotorTargetVelocity">
            <summary>
            <para>Target speed for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisParam.AngularMotorForceLimit">
            <summary>
            <para>Maximum acceleration for the motor at the axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearLimitUpper">
            <summary>
            <para>The maximum difference between the pivot points on their X axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearLimitLower">
            <summary>
            <para>The minimum difference between the pivot points on their X axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearLimitRestitution">
            <summary>
            <para>The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearLimitDamping">
            <summary>
            <para>The amount of damping once the slider limits are surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearMotionSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearMotionRestitution">
            <summary>
            <para>The amount of restitution inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearMotionDamping">
            <summary>
            <para>The amount of damping inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearOrthogonalSoftness">
            <summary>
            <para>A factor applied to the movement across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearOrthogonalRestitution">
            <summary>
            <para>The amount of restitution when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.LinearOrthogonalDamping">
            <summary>
            <para>The amount of damping when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularLimitUpper">
            <summary>
            <para>The upper limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularLimitLower">
            <summary>
            <para>The lower limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularLimitSoftness">
            <summary>
            <para>A factor applied to the all rotation once the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularLimitRestitution">
            <summary>
            <para>The amount of restitution of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularLimitDamping">
            <summary>
            <para>The amount of damping of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularMotionSoftness">
            <summary>
            <para>A factor that gets applied to the all rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularMotionRestitution">
            <summary>
            <para>The amount of restitution of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularMotionDamping">
            <summary>
            <para>The amount of damping of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularOrthogonalSoftness">
            <summary>
            <para>A factor that gets applied to the all rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularOrthogonalRestitution">
            <summary>
            <para>The amount of restitution of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.AngularOrthogonalDamping">
            <summary>
            <para>The amount of damping of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.SliderJointParam.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.PhysicsServer3D.SliderJointParam"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.Bias">
            <summary>
            <para>The speed with which the two bodies get pulled together when they move in different directions.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.LimitUpper">
            <summary>
            <para>The maximum rotation across the Hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.LimitLower">
            <summary>
            <para>The minimum rotation across the Hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.LimitBias">
            <summary>
            <para>The speed with which the rotation across the axis perpendicular to the hinge gets corrected.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.LimitRelaxation">
            <summary>
            <para>The lower this value, the more the rotation gets slowed down.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.MotorTargetVelocity">
            <summary>
            <para>Target speed for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointParam.MotorMaxImpulse">
            <summary>
            <para>Maximum acceleration for the motor.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisFlag.LinearLimit">
            <summary>
            <para>If <c>set</c> there is linear motion possible within the given limits.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisFlag.AngularLimit">
            <summary>
            <para>If <c>set</c> there is rotational motion possible.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisFlag.Motor">
            <summary>
            <para>If <c>set</c> there is a rotational motor across these axes.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.G6DOFJointAxisFlag.LinearMotor">
            <summary>
            <para>If <c>set</c> there is a linear motor on this axis that targets a specific velocity.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointFlag.UseLimit">
            <summary>
            <para>If <c>true</c>, the Hinge has a maximum and a minimum rotation.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.HingeJointFlag.EnableMotor">
            <summary>
            <para>If <c>true</c>, a motor turns the Hinge.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaSpaceOverrideMode.Disabled">
            <summary>
            <para>This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaSpaceOverrideMode.Combine">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaSpaceOverrideMode.CombineReplace">
            <summary>
            <para>This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaSpaceOverrideMode.Replace">
            <summary>
            <para>This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaSpaceOverrideMode.ReplaceCombine">
            <summary>
            <para>This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.Gravity">
            <summary>
            <para>Constant to set/get gravity strength in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.GravityVector">
            <summary>
            <para>Constant to set/get gravity vector/center in an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.GravityIsPoint">
            <summary>
            <para>Constant to set/get whether the gravity vector of an area is a direction, or a center point.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.GravityDistanceScale">
            <summary>
            <para>Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.GravityPointAttenuation">
            <summary>
            <para>This constant was used to set/get the falloff factor for point gravity. It has been superseded by .</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.LinearDamp">
            <summary>
            <para>Constant to set/get the linear dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.AngularDamp">
            <summary>
            <para>Constant to set/get the angular dampening factor of an area.</para>
            </summary>
        </member>
        <member name="F:Godot.PhysicsServer3D.AreaParameter.Priority">
            <summary>
            <para>Constant to set/get the priority (order of processing) of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ShapeCreate(Godot.PhysicsServer3D.ShapeType)">
            <summary>
            <para>Creates a shape of a type from <see cref="T:Godot.PhysicsServer3D.ShapeType"/>. Does not assign it to a body or an area. To do so, you must use <see cref="M:Godot.PhysicsServer3D.AreaSetShape(Godot.RID,System.Int32,Godot.RID)"/> or <see cref="M:Godot.PhysicsServer3D.BodySetShape(Godot.RID,System.Int32,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            <para>Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created <see cref="M:Godot.PhysicsServer3D.ShapeGetType(Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ShapeGetType(Godot.RID)">
            <summary>
            <para>Returns the type of shape (see <see cref="T:Godot.PhysicsServer3D.ShapeType"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ShapeGetData(Godot.RID)">
            <summary>
            <para>Returns the shape data.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceCreate">
            <summary>
            <para>Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with <see cref="M:Godot.PhysicsServer3D.AreaSetSpace(Godot.RID,Godot.RID)"/>, or to a body with <see cref="M:Godot.PhysicsServer3D.BodySetSpace(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>Marks a space as active. It will not have an effect, unless it is assigned to an area or body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceIsActive(Godot.RID)">
            <summary>
            <para>Returns whether the space is active.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceSetParam(Godot.RID,Godot.PhysicsServer3D.SpaceParameter,System.Single)">
            <summary>
            <para>Sets the value for a space parameter. A list of available parameters is on the <see cref="T:Godot.PhysicsServer3D.SpaceParameter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceGetParam(Godot.RID,Godot.PhysicsServer3D.SpaceParameter)">
            <summary>
            <para>Returns the value of a space parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SpaceGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the state of a space, a <see cref="T:Godot.PhysicsDirectSpaceState3D"/>. This object can be used to make collision/intersection queries.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaCreate">
            <summary>
            <para>Creates an <see cref="T:Godot.Area3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetSpace(Godot.RID)">
            <summary>
            <para>Returns the space assigned to the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetSpaceOverrideMode(Godot.RID,Godot.PhysicsServer3D.AreaSpaceOverrideMode)">
            <summary>
            <para>Sets the space override mode for the area. The modes are described in the <see cref="T:Godot.PhysicsServer3D.AreaSpaceOverrideMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            <para>Returns the space override mode for the area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform},System.Boolean)">
            <summary>
            <para>Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            </summary>
            <param name="transform">If the parameter is null, then the default value is new Transform()</param>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given area shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for an area shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a shape within an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from an area. It does not delete the shape, so it can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetCollisionLayer(Godot.RID,System.UInt32)">
            <summary>
            <para>Assigns the area to one or many physics layers.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetCollisionMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets which physics layers the area will monitor.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetParam(Godot.RID,Godot.PhysicsServer3D.AreaParameter,System.Object)">
            <summary>
            <para>Sets the value for an area parameter. A list of available parameters is on the <see cref="T:Godot.PhysicsServer3D.AreaParameter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetParam(Godot.RID,Godot.PhysicsServer3D.AreaParameter)">
            <summary>
            <para>Returns an area parameter value. A list of available parameters is on the <see cref="T:Godot.PhysicsServer3D.AreaParameter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetTransform(Godot.RID)">
            <summary>
            <para>Returns the transform matrix for an area.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaAttachObjectInstanceId(Godot.RID,System.UInt64)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetMonitorCallback(Godot.RID,Godot.Object,Godot.StringName)">
            <summary>
            <para>Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:</para>
            <para>1:  or , depending on whether the object entered or exited the area.</para>
            <para>2: <see cref="T:Godot.RID"/> of the object that entered/exited the area.</para>
            <para>3: Instance ID of the object that entered/exited the area.</para>
            <para>4: The shape index of the object that entered/exited the area.</para>
            <para>5: The shape index of the area where the object entered/exited.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaSetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets object pickable with rays.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.AreaIsRayPickable(Godot.RID)">
            <summary>
            <para>If <c>true</c>, area collides with rays.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyCreate(Godot.PhysicsServer3D.BodyMode,System.Boolean)">
            <summary>
            <para>Creates a physics body. The first parameter can be any value from <see cref="T:Godot.PhysicsServer3D.BodyMode"/> constants, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            <para>Assigns a space to the body (see <see cref="M:Godot.PhysicsServer3D.SpaceCreate"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetSpace(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the space assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetMode(Godot.RID,Godot.PhysicsServer3D.BodyMode)">
            <summary>
            <para>Sets the body mode, from one of the <see cref="T:Godot.PhysicsServer3D.BodyMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetMode(Godot.RID)">
            <summary>
            <para>Returns the body mode.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetCollisionLayer(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body belongs to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetCollisionMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the physics layer or layers a body can collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetCollisionMask(Godot.RID)">
            <summary>
            <para>Returns the physics layer or layers a body can collide with.</para>
            <para>-</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform},System.Boolean)">
            <summary>
            <para>Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.</para>
            </summary>
            <param name="transform">If the parameter is null, then the default value is new Transform()</param>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Substitutes a given body shape by another. The old shape is selected by its index, the new one by its <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the transform matrix for a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetShapeCount(Godot.RID)">
            <summary>
            <para>Returns the number of shapes assigned to a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the nth shape of a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the transform matrix of a body shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            <para>Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyClearShapes(Godot.RID)">
            <summary>
            <para>Removes all shapes from a body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyAttachObjectInstanceId(Godot.RID,System.UInt64)">
            <summary>
            <para>Assigns the area to a descendant of <see cref="T:Godot.Object"/>, so it can exist in the node tree.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            <para>Gets the instance ID of the object the area is assigned to.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetEnableContinuousCollisionDetection(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the continuous collision detection mode is enabled.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyIsContinuousCollisionDetectionEnabled(Godot.RID)">
            <summary>
            <para>If <c>true</c>, the continuous collision detection mode is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetParam(Godot.RID,Godot.PhysicsServer3D.BodyParameter,System.Single)">
            <summary>
            <para>Sets a body parameter. A list of available parameters is on the <see cref="T:Godot.PhysicsServer3D.BodyParameter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetParam(Godot.RID,Godot.PhysicsServer3D.BodyParameter)">
            <summary>
            <para>Returns the value of a body parameter. A list of available parameters is on the <see cref="T:Godot.PhysicsServer3D.BodyParameter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetState(Godot.RID,Godot.PhysicsServer3D.BodyState,System.Object)">
            <summary>
            <para>Sets a body state (see <see cref="T:Godot.PhysicsServer3D.BodyState"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetState(Godot.RID,Godot.PhysicsServer3D.BodyState)">
            <summary>
            <para>Returns a body state.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyAddForce(Godot.RID,Godot.Vector3,System.Nullable{Godot.Vector3})">
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyApplyImpulse(Godot.RID,Godot.Vector3,System.Nullable{Godot.Vector3})">
            <summary>
            <para>Gives the body a push at a <c>position</c> in the direction of the <c>impulse</c>.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyApplyTorqueImpulse(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Gives the body a push to rotate it.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetAxisVelocity(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Adds a body to the list of bodies exempt from collisions.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            <para>Removes a body from the list of bodies exempt from collisions.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            <para>Returns the maximum contacts that can be reported. See <see cref="M:Godot.PhysicsServer3D.BodySetMaxContactsReported(Godot.RID,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer3D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            <para>Returns whether a body uses a callback function to calculate its own physics (see <see cref="M:Godot.PhysicsServer3D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Sets the function used to calculate physics for an object, if that object allows it (see <see cref="M:Godot.PhysicsServer3D.BodySetOmitForceIntegration(Godot.RID,System.Boolean)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodySetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets the body pickable with rays if <c>enabled</c> is set.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyIsRayPickable(Godot.RID)">
            <summary>
            <para>If <c>true</c>, the body can be detected by rays.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.BodyGetDirectState(Godot.RID)">
            <summary>
            <para>Returns the <see cref="T:Godot.PhysicsDirectBodyState3D"/> of the body.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointCreatePin(Godot.RID,Godot.Vector3,Godot.RID,Godot.Vector3)">
            <summary>
            <para>Creates a <see cref="T:Godot.PinJoint3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointSetParam(Godot.RID,Godot.PhysicsServer3D.PinJointParam,System.Single)">
            <summary>
            <para>Sets a pin_joint parameter (see <see cref="T:Godot.PhysicsServer3D.PinJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointGetParam(Godot.RID,Godot.PhysicsServer3D.PinJointParam)">
            <summary>
            <para>Gets a pin_joint parameter (see <see cref="T:Godot.PhysicsServer3D.PinJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointSetLocalA(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets position of the joint in the local space of body a of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointGetLocalA(Godot.RID)">
            <summary>
            <para>Returns position of the joint in the local space of body a of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointSetLocalB(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets position of the joint in the local space of body b of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.PinJointGetLocalB(Godot.RID)">
            <summary>
            <para>Returns position of the joint in the local space of body b of the joint.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointCreateHinge(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.HingeJoint3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.HingeJointSetParam(Godot.RID,Godot.PhysicsServer3D.HingeJointParam,System.Single)">
            <summary>
            <para>Sets a hinge_joint parameter (see <see cref="T:Godot.PhysicsServer3D.HingeJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.HingeJointGetParam(Godot.RID,Godot.PhysicsServer3D.HingeJointParam)">
            <summary>
            <para>Gets a hinge_joint parameter (see <see cref="T:Godot.PhysicsServer3D.HingeJointParam"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.HingeJointSetFlag(Godot.RID,Godot.PhysicsServer3D.HingeJointFlag,System.Boolean)">
            <summary>
            <para>Sets a hinge_joint flag (see <see cref="T:Godot.PhysicsServer3D.HingeJointFlag"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.HingeJointGetFlag(Godot.RID,Godot.PhysicsServer3D.HingeJointFlag)">
            <summary>
            <para>Gets a hinge_joint flag (see <see cref="T:Godot.PhysicsServer3D.HingeJointFlag"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointCreateSlider(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.SliderJoint3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SliderJointSetParam(Godot.RID,Godot.PhysicsServer3D.SliderJointParam,System.Single)">
            <summary>
            <para>Gets a slider_joint parameter (see <see cref="T:Godot.PhysicsServer3D.SliderJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SliderJointGetParam(Godot.RID,Godot.PhysicsServer3D.SliderJointParam)">
            <summary>
            <para>Gets a slider_joint parameter (see <see cref="T:Godot.PhysicsServer3D.SliderJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointCreateConeTwist(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.ConeTwistJoint3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ConeTwistJointSetParam(Godot.RID,Godot.PhysicsServer3D.ConeTwistJointParam,System.Single)">
            <summary>
            <para>Sets a cone_twist_joint parameter (see <see cref="T:Godot.PhysicsServer3D.ConeTwistJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.ConeTwistJointGetParam(Godot.RID,Godot.PhysicsServer3D.ConeTwistJointParam)">
            <summary>
            <para>Gets a cone_twist_joint parameter (see <see cref="T:Godot.PhysicsServer3D.ConeTwistJointParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointGetType(Godot.RID)">
            <summary>
            <para>Returns the type of the Joint3D.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointSetSolverPriority(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the priority value of the Joint3D.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointGetSolverPriority(Godot.RID)">
            <summary>
            <para>Gets the priority value of the Joint3D.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.JointCreateGeneric6dof(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            <para>Creates a <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.Generic6dofJointSetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer3D.G6DOFJointAxisParam,System.Single)">
            <summary>
            <para>Sets a generic_6_DOF_joint parameter (see <see cref="T:Godot.PhysicsServer3D.G6DOFJointAxisParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.Generic6dofJointGetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer3D.G6DOFJointAxisParam)">
            <summary>
            <para>Gets a generic_6_DOF_joint parameter (see <see cref="T:Godot.PhysicsServer3D.G6DOFJointAxisParam"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.Generic6dofJointSetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer3D.G6DOFJointAxisFlag,System.Boolean)">
            <summary>
            <para>Sets a generic_6_DOF_joint flag (see <see cref="T:Godot.PhysicsServer3D.G6DOFJointAxisFlag"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.Generic6dofJointGetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer3D.G6DOFJointAxisFlag)">
            <summary>
            <para>Gets a generic_6_DOF_joint flag (see <see cref="T:Godot.PhysicsServer3D.G6DOFJointAxisFlag"/> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.FreeRid(Godot.RID)">
            <summary>
            <para>Destroys any of the objects created by PhysicsServer3D. If the <see cref="T:Godot.RID"/> passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.SetActive(System.Boolean)">
            <summary>
            <para>Activates or deactivates the 3D physics engine.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer3D.GetProcessInfo(Godot.PhysicsServer3D.ProcessInfo)">
            <summary>
            <para>Returns an Info defined by the <see cref="T:Godot.PhysicsServer3D.ProcessInfo"/> input given.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsShapeQueryParameters2D">
            <summary>
            <para>This class contains the shape and other parameters for 2D intersection/collision queries. See also <see cref="T:Godot.PhysicsShapeQueryResult2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.CollisionLayer">
            <summary>
            <para>The physics layer(s) the query will take into account (as a bitmask). See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.Exclude">
            <summary>
            <para>The list of objects or object <see cref="T:Godot.RID"/>s that will be excluded from collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.Margin">
            <summary>
            <para>The collision margin for the shape.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.Motion">
            <summary>
            <para>The motion of the shape being queried for.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.Shape">
            <summary>
            <para>The <see cref="T:Godot.Shape2D"/> that will be used for collision/intersection queries. This stores the actual reference which avoids the shape to be released while being used for queries, so always prefer using this over <see cref="P:Godot.PhysicsShapeQueryParameters2D.ShapeRid"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.ShapeRid">
            <summary>
            <para>The queried shape's <see cref="T:Godot.RID"/> that will be used for collision/intersection queries. Use this over <see cref="P:Godot.PhysicsShapeQueryParameters2D.Shape"/> if you want to optimize for performance using the Servers API:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var shape_rid = PhysicsServer2D.circle_shape_create()</para>
            <para>var radius = 64</para>
            <para>PhysicsServer2D.shape_set_data(shape_rid, radius)</para>
            <para></para>
            <para>var params = PhysicsShapeQueryParameters2D.new()</para>
            <para>params.shape_rid = shape_rid</para>
            <para></para>
            <para># Execute physics queries here...</para>
            <para></para>
            <para># Release the shape when done with physics queries.</para>
            <para>PhysicsServer2D.free_rid(shape_rid)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>RID shapeRid = PhysicsServer2D.CircleShapeCreate();</para>
            <para>int radius = 64;</para>
            <para>PhysicsServer2D.ShapeSetData(shapeRid, radius);</para>
            <para></para>
            <para>var params = new PhysicsShapeQueryParameters2D();</para>
            <para>params.ShapeRid = shapeRid;</para>
            <para></para>
            <para>// Execute physics queries here...</para>
            <para></para>
            <para>// Release the shape when done with physics queries.</para>
            <para>PhysicsServer2D.FreeRid(shapeRid);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.Transform">
            <summary>
            <para>The queried shape's transform matrix.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, the query will take <see cref="T:Godot.PhysicsBody2D"/>s into account.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters2D.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, the query will take <see cref="T:Godot.Area2D"/>s into account.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsShapeQueryParameters3D">
            <summary>
            <para>This class contains the shape and other parameters for 3D intersection/collision queries. See also <see cref="T:Godot.PhysicsShapeQueryResult3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.CollisionMask">
            <summary>
            <para>The physics layer(s) the query will take into account (as a bitmask). See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.Exclude">
            <summary>
            <para>The list of objects or object <see cref="T:Godot.RID"/>s that will be excluded from collisions.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.Margin">
            <summary>
            <para>The collision margin for the shape.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.Shape">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> that will be used for collision/intersection queries. This stores the actual reference which avoids the shape to be released while being used for queries, so always prefer using this over <see cref="P:Godot.PhysicsShapeQueryParameters3D.ShapeRid"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.ShapeRid">
            <summary>
            <para>The queried shape's <see cref="T:Godot.RID"/> that will be used for collision/intersection queries. Use this over <see cref="P:Godot.PhysicsShapeQueryParameters3D.Shape"/> if you want to optimize for performance using the Servers API:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var shape_rid = PhysicsServer3D.shape_create(PhysicsServer3D.SHAPE_SPHERE)</para>
            <para>var radius = 2.0</para>
            <para>PhysicsServer3D.shape_set_data(shape_rid, radius)</para>
            <para></para>
            <para>var params = PhysicsShapeQueryParameters3D.new()</para>
            <para>params.shape_rid = shape_rid</para>
            <para></para>
            <para># Execute physics queries here...</para>
            <para></para>
            <para># Release the shape when done with physics queries.</para>
            <para>PhysicsServer3D.free_rid(shape_rid)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>RID shapeRid = PhysicsServer3D.ShapeCreate(PhysicsServer3D.ShapeType.Sphere);</para>
            <para>float radius = 2.0f;</para>
            <para>PhysicsServer3D.ShapeSetData(shapeRid, radius);</para>
            <para></para>
            <para>var params = new PhysicsShapeQueryParameters3D();</para>
            <para>params.ShapeRid = shapeRid;</para>
            <para></para>
            <para>// Execute physics queries here...</para>
            <para></para>
            <para>// Release the shape when done with physics queries.</para>
            <para>PhysicsServer3D.FreeRid(shapeRid);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.Transform">
            <summary>
            <para>The queried shape's transform matrix.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, the query will take <see cref="T:Godot.PhysicsBody3D"/>s into account.</para>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters3D.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, the query will take <see cref="T:Godot.Area3D"/>s into account.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsShapeQueryResult2D">
            <summary>
            <para>The result of a 2D shape query in <see cref="T:Godot.PhysicsServer2D"/>. See also <see cref="T:Godot.PhysicsShapeQueryParameters2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult2D.GetResultCount">
            <summary>
            <para>Returns the number of objects that intersected with the shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult2D.GetResultRid(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the object that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult2D.GetResultObjectId(System.Int32)">
            <summary>
            <para>Returns the instance ID of the <see cref="T:Godot.Object"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult2D.GetResultObject(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Object"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult2D.GetResultObjectShape(System.Int32)">
            <summary>
            <para>Returns the child index of the object's <see cref="T:Godot.Shape2D"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.PhysicsShapeQueryResult3D">
            <summary>
            <para>The result of a 3D shape query in <see cref="T:Godot.PhysicsServer3D"/>. See also <see cref="T:Godot.PhysicsShapeQueryParameters3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult3D.GetResultCount">
            <summary>
            <para>Returns the number of objects that intersected with the shape.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult3D.GetResultRid(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of the object that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult3D.GetResultObjectId(System.Int32)">
            <summary>
            <para>Returns the instance ID of the <see cref="T:Godot.Object"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult3D.GetResultObject(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Object"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult3D.GetResultObjectShape(System.Int32)">
            <summary>
            <para>Returns the child index of the object's <see cref="T:Godot.Shape3D"/> that intersected with the shape at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.PinJoint2D">
            <summary>
            <para>Pin joint for 2D rigid bodies. It pins two bodies (rigid or static) together.</para>
            </summary>
        </member>
        <member name="P:Godot.PinJoint2D.Softness">
            <summary>
            <para>The higher this value, the more the bond to the pinned partner can flex.</para>
            </summary>
        </member>
        <member name="T:Godot.PinJoint3D">
            <summary>
            <para>Pin joint for 3D rigid bodies. It pins 2 bodies (rigid or static) together. See also <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint3D.Param.Bias">
            <summary>
            <para>The force with which the pinned objects stay in positional relation to each other. The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint3D.Param.Damping">
            <summary>
            <para>The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger.</para>
            </summary>
        </member>
        <member name="F:Godot.PinJoint3D.Param.ImpulseClamp">
            <summary>
            <para>If above 0, this value is the maximum value for an impulse that this Joint3D produces.</para>
            </summary>
        </member>
        <member name="M:Godot.PinJoint3D.SetParam(Godot.PinJoint3D.Param,System.Single)">
            <summary>
            <para>Sets the value of the specified parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.PinJoint3D.GetParam(Godot.PinJoint3D.Param)">
            <summary>
            <para>Returns the value of the specified parameter.</para>
            </summary>
        </member>
        <member name="T:Godot.PlaneMesh">
            <summary>
            <para>Class representing a planar <see cref="T:Godot.PrimitiveMesh"/>. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Z axes; this default rotation isn't suited for use with billboarded materials. For billboarded materials, use <see cref="T:Godot.QuadMesh"/> instead.</para>
            <para>Note: When using a large textured <see cref="T:Godot.PlaneMesh"/> (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase <see cref="P:Godot.PlaneMesh.SubdivideDepth"/> and <see cref="P:Godot.PlaneMesh.SubdivideWidth"/> until you no longer notice UV jittering.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.Size">
            <summary>
            <para>Size of the generated plane.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideWidth">
            <summary>
            <para>Number of subdivision along the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideDepth">
            <summary>
            <para>Number of subdivision along the Z axis.</para>
            </summary>
        </member>
        <member name="M:Godot.PluginScript.New(System.Object[])">
            <summary>
            <para>Returns a new instance of the script.</para>
            </summary>
        </member>
        <member name="P:Godot.PointLight2D.Texture">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> used for the light's appearance.</para>
            </summary>
        </member>
        <member name="P:Godot.PointLight2D.Offset">
            <summary>
            <para>The offset of the light's <see cref="P:Godot.PointLight2D.Texture"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PointLight2D.TextureScale">
            <summary>
            <para>The <see cref="P:Godot.PointLight2D.Texture"/>'s scale factor.</para>
            </summary>
        </member>
        <member name="P:Godot.PointLight2D.Height">
            <summary>
            <para>The height of the light. Used with 2D normal mapping.</para>
            </summary>
        </member>
        <member name="T:Godot.PointMesh">
            <summary>
            <para>The PointMesh is made from a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with Particle systems, but can be used as a cheap way to render constant size billboarded sprites (for example in a point cloud).</para>
            <para>PointMeshes, must be used with a material that has a point size. Point size can be accessed in a shader with <c>POINT_SIZE</c>, or in a <see cref="T:Godot.BaseMaterial3D"/> by setting <see cref="P:Godot.BaseMaterial3D.UsePointSize"/> and the variable <see cref="P:Godot.BaseMaterial3D.PointSize"/>.</para>
            <para>When using PointMeshes, properties that normally alter vertices will be ignored, including billboard mode, grow, and cull face.</para>
            </summary>
        </member>
        <member name="T:Godot.Polygon2D">
            <summary>
            <para>A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Color">
            <summary>
            <para>The polygon's fill color. If <c>texture</c> is defined, it will be multiplied by this color. It will also be the default color for vertices not set in <c>vertex_colors</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Offset">
            <summary>
            <para>The offset applied to each vertex.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Antialiased">
            <summary>
            <para>If <c>true</c>, polygon edges will be anti-aliased.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Texture">
            <summary>
            <para>The polygon's fill texture. Use <c>uv</c> to set texture coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureOffset">
            <summary>
            <para>Amount to offset the polygon's <c>texture</c>. If <c>(0, 0)</c> the texture's origin (its top-left corner) will be placed at the polygon's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureScale">
            <summary>
            <para>Amount to multiply the <c>uv</c> coordinates when using a <c>texture</c>. Larger values make the texture smaller, and vice versa.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotationDegrees">
            <summary>
            <para>The texture's rotation in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotation">
            <summary>
            <para>The texture's rotation in radians.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertEnable">
            <summary>
            <para>If <c>true</c>, polygon will be inverted, containing the area outside the defined points and extending to the <c>invert_border</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertBorder">
            <summary>
            <para>Added padding applied to the bounding box when using <c>invert</c>. Setting this value too small may result in a "Bad Polygon" error.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Polygon">
            <summary>
            <para>The polygon's list of vertices. The final point will be connected to the first.</para>
            <para>Note: This returns a copy of the <see cref="T:Godot.Vector2[]"/> rather than a reference.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Uv">
            <summary>
            <para>Texture coordinates for each vertex of the polygon. There should be one <c>uv</c> per polygon vertex. If there are fewer, undefined vertices will use <c>(0, 0)</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.VertexColors">
            <summary>
            <para>Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use <c>color</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.AddBone(Godot.NodePath,System.Single[])">
            <summary>
            <para>Adds a bone with the specified <c>path</c> and <c>weights</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBoneCount">
            <summary>
            <para>Returns the number of bones in this <see cref="T:Godot.Polygon2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBonePath(System.Int32)">
            <summary>
            <para>Returns the path to the node associated with the specified bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.GetBoneWeights(System.Int32)">
            <summary>
            <para>Returns the height values of the specified bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.EraseBone(System.Int32)">
            <summary>
            <para>Removes the specified bone from this <see cref="T:Godot.Polygon2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.ClearBones">
            <summary>
            <para>Removes all bones from this <see cref="T:Godot.Polygon2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.SetBonePath(System.Int32,Godot.NodePath)">
            <summary>
            <para>Sets the path to the node associated with the specified bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Polygon2D.SetBoneWeights(System.Int32,System.Single[])">
            <summary>
            <para>Sets the weight values for the specified bone.</para>
            </summary>
        </member>
        <member name="T:Godot.Popup">
            <summary>
            <para>Popup is a base <see cref="T:Godot.Control"/> used to show dialogs and popups. It's a subwindow and modal by default (see <see cref="T:Godot.Control"/>) and has helpers for custom popup behavior.</para>
            </summary>
        </member>
        <member name="T:Godot.Popup.PopupHideHandler">
            <summary>
            <para>Emitted when a popup is hidden.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupMenu">
            <summary>
            <para><see cref="T:Godot.PopupMenu"/> is a <see cref="T:Godot.Control"/> that displays a list of options. They are popular in toolbars or context menus.</para>
            <para>The size of a <see cref="T:Godot.PopupMenu"/> can be limited by using <see cref="P:Godot.Window.MaxSize"/>. If the height of the list of items is larger than the maximum height of the <see cref="T:Godot.PopupMenu"/>, a <see cref="T:Godot.ScrollContainer"/> within the popup will allow the user to scroll the contents.</para>
            <para>If no maximum size is set, or if it is set to 0, the <see cref="T:Godot.PopupMenu"/> height will be limited by its parent rect.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnItemSelection">
            <summary>
            <para>If <c>true</c>, hides the <see cref="T:Godot.PopupMenu"/> when an item is selected.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnCheckableItemSelection">
            <summary>
            <para>If <c>true</c>, hides the <see cref="T:Godot.PopupMenu"/> when a checkbox or radio button is selected.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnStateItemSelection">
            <summary>
            <para>If <c>true</c>, hides the <see cref="T:Godot.PopupMenu"/> when a state item is selected.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.SubmenuPopupDelay">
            <summary>
            <para>Sets the delay time in seconds for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item.</para>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.AllowSearch">
            <summary>
            <para>If <c>true</c>, allows to navigate <see cref="T:Godot.PopupMenu"/> with letter keys.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddItem(System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new item with text <c>label</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconItem(Godot.Texture2D,System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new item with text <c>label</c> and icon <c>texture</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckItem(System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new checkable item with text <c>label</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckItem(Godot.Texture2D,System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new checkable item with text <c>label</c> and icon <c>texture</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckItem(System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new radio check button with text <c>label</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconRadioCheckItem(Godot.Texture2D,System.String,System.Int32,System.UInt32)">
            <summary>
            <para>Same as <see cref="M:Godot.PopupMenu.AddIconCheckItem(Godot.Texture2D,System.String,System.Int32,System.UInt32)"/>, but uses a radio check button.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddMultistateItem(System.String,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            <para>Adds a new multistate item with text <c>label</c>.</para>
            <para>Contrarily to normal binary items, multistate items can have more than two states, as defined by <c>max_states</c>. Each press or activate of the item will increase the state by one. The default value is defined by <c>default_state</c>.</para>
            <para>An <c>id</c> can optionally be provided, as well as an accelerator (<c>accel</c>). If no <c>id</c> is provided, one will be created from the index. If no <c>accel</c> is provided then the default <c>0</c> will be assigned to it. See <see cref="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)"/> for more info on accelerators.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddShortcut(Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Adds a <see cref="T:Godot.Shortcut"/>.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconShortcut(Godot.Texture2D,Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new item and assigns the specified <see cref="T:Godot.Shortcut"/> and icon <c>texture</c> to it. Sets the label of the checkbox to the <see cref="T:Godot.Shortcut"/>'s name.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckShortcut(Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new checkable item and assigns the specified <see cref="T:Godot.Shortcut"/> to it. Sets the label of the checkbox to the <see cref="T:Godot.Shortcut"/>'s name.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckShortcut(Godot.Texture2D,Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new checkable item and assigns the specified <see cref="T:Godot.Shortcut"/> and icon <c>texture</c> to it. Sets the label of the checkbox to the <see cref="T:Godot.Shortcut"/>'s name.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckShortcut(Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Adds a new radio check button and assigns a <see cref="T:Godot.Shortcut"/> to it. Sets the label of the checkbox to the <see cref="T:Godot.Shortcut"/>'s name.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See <see cref="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)"/> for more info on how to control it.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconRadioCheckShortcut(Godot.Texture2D,Godot.Shortcut,System.Int32,System.Boolean)">
            <summary>
            <para>Same as <see cref="M:Godot.PopupMenu.AddIconCheckShortcut(Godot.Texture2D,Godot.Shortcut,System.Int32,System.Boolean)"/>, but uses a radio check button.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSubmenuItem(System.String,System.String,System.Int32)">
            <summary>
            <para>Adds an item that will act as a submenu of the parent <see cref="T:Godot.PopupMenu"/> node when clicked. The <c>submenu</c> argument is the name of the child <see cref="T:Godot.PopupMenu"/> node that will be shown when the item is clicked.</para>
            <para>An <c>id</c> can optionally be provided. If no <c>id</c> is provided, one will be created from the index.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets the text of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemTextDirection(System.Int32,Godot.Control.TextDirection)">
            <summary>
            <para>Sets item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemOpentypeFeature(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c> for the item's text. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemLanguage(System.Int32,System.String)">
            <summary>
            <para>Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Replaces the <see cref="T:Godot.Texture2D"/> icon of the specified <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the checkstate status of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemId(System.Int32,System.Int32)">
            <summary>
            <para>Sets the <c>id</c> of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAccelerator(System.Int32,System.UInt32)">
            <summary>
            <para>Sets the accelerator of the item at index <c>idx</c>. Accelerators are special combinations of keys that activate the item, no matter which control is focused.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            <para>Sets the metadata of an item, which may be of any type. You can later get it with <see cref="M:Godot.PopupMenu.GetItemMetadata(System.Int32)"/>, which provides a simple way of assigning context data to items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Enables/disables the item at index <c>idx</c>. When it is disabled, it can't be selected and its action can't be invoked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemSubmenu(System.Int32,System.String)">
            <summary>
            <para>Sets the submenu of the item at index <c>idx</c>. The submenu is the name of a child <see cref="T:Godot.PopupMenu"/> node that would be shown when the item is clicked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsSeparator(System.Int32,System.Boolean)">
            <summary>
            <para>Mark the item at index <c>idx</c> as a separator, which means that it would be displayed as a line. If <c>false</c>, sets the type of the item to plain text.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsCheckable(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the item at index <c>idx</c> has a checkbox. If <c>false</c>, sets the type of the item to plain text.</para>
            <para>Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsRadioCheckable(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the type of the item at the specified index <c>idx</c> to radio button. If <c>false</c>, sets the type of the item to plain text.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemTooltip(System.Int32,System.String)">
            <summary>
            <para>Sets the <see cref="T:System.String"/> tooltip of the item at the specified index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemShortcut(System.Int32,Godot.Shortcut,System.Boolean)">
            <summary>
            <para>Sets a <see cref="T:Godot.Shortcut"/> for the specified item <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMultistate(System.Int32,System.Int32)">
            <summary>
            <para>Sets the state of an multistate item. See <see cref="M:Godot.PopupMenu.AddMultistateItem(System.String,System.Int32,System.Int32,System.Int32,System.UInt32)"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemShortcutDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>Disables the <see cref="T:Godot.Shortcut"/> of the specified index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemChecked(System.Int32)">
            <summary>
            <para>Toggles the check state of the item of the specified index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemMultistate(System.Int32)">
            <summary>
            <para>Cycle to the next state of an multistate item. See <see cref="M:Godot.PopupMenu.AddMultistateItem(System.String,System.Int32,System.Int32,System.Int32,System.UInt32)"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemText(System.Int32)">
            <summary>
            <para>Returns the text of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemTextDirection(System.Int32)">
            <summary>
            <para>Returns item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemOpentypeFeature(System.Int32,System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c> of the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ClearItemOpentypeFeatures(System.Int32)">
            <summary>
            <para>Removes all OpenType features form the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemLanguage(System.Int32)">
            <summary>
            <para>Returns item's text language code.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIcon(System.Int32)">
            <summary>
            <para>Returns the icon of the item at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemChecked(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at index <c>idx</c> is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemId(System.Int32)">
            <summary>
            <para>Returns the id of the item at index <c>idx</c>. <c>id</c> can be manually assigned, while index can not.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIndex(System.Int32)">
            <summary>
            <para>Returns the index of the item containing the specified <c>id</c>. Index is automatically assigned to each item by the engine. Index can not be set manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)">
            <summary>
            <para>Returns the accelerator of the item at index <c>idx</c>. Accelerators are special combinations of keys that activate the item, no matter which control is focused.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemMetadata(System.Int32)">
            <summary>
            <para>Returns the metadata of the specified item, which might be of any type. You can set it with <see cref="M:Godot.PopupMenu.SetItemMetadata(System.Int32,System.Object)"/>, which provides a simple way of assigning context data to items.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at index <c>idx</c> is disabled. When it is disabled it can't be selected, or its action invoked.</para>
            <para>See <see cref="M:Godot.PopupMenu.SetItemDisabled(System.Int32,System.Boolean)"/> for more info on how to disable an item.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemSubmenu(System.Int32)">
            <summary>
            <para>Returns the submenu name of the item at index <c>idx</c>. See <see cref="M:Godot.PopupMenu.AddSubmenuItem(System.String,System.String,System.Int32)"/> for more info on how to add a submenu.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemSeparator(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item is a separator. If it is, it will be displayed as a line. See <see cref="M:Godot.PopupMenu.AddSeparator(System.String,System.Int32)"/> for more info on how to add a separator.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemCheckable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at index <c>idx</c> is checkable in some way, i.e. if it has a checkbox or radio button.</para>
            <para>Note: Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemRadioCheckable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the item at index <c>idx</c> has radio button-style checkability.</para>
            <para>Note: This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemShortcutDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified item's shortcut is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemTooltip(System.Int32)">
            <summary>
            <para>Returns the tooltip associated with the specified index index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemShortcut(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Shortcut"/> associated with the specified <c>idx</c> item.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemCount">
            <summary>
            <para>Returns the number of items in the <see cref="T:Godot.PopupMenu"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at index <c>idx</c> from the menu.</para>
            <para>Note: The indices of items after the removed item will be shifted by one.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSeparator(System.String,System.Int32)">
            <summary>
            <para>Adds a separator between items. Separators also occupy an index, which you can set by using the <c>id</c> parameter.</para>
            <para>A <c>label</c> can optionally be provided, which will appear at the center of the separator.</para>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.Clear">
            <summary>
            <para>Removes all items from the <see cref="T:Godot.PopupMenu"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupMenu.IndexPressedHandler">
            <summary>
            <para>Emitted when an item of some <c>index</c> is pressed or its accelerator is activated.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupMenu.IdFocusedHandler">
            <summary>
            <para>Emitted when user navigated to an item of some <c>id</c> using <c>ui_up</c> or <c>ui_down</c> action.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupMenu.IdPressedHandler">
            <summary>
            <para>Emitted when an item of some <c>id</c> is pressed or its accelerator is activated.</para>
            </summary>
        </member>
        <member name="T:Godot.PopupPanel">
            <summary>
            <para>Class for displaying popups with a panel background. In some cases it might be simpler to use than <see cref="T:Godot.Popup"/>, since it provides a configurable background. If you are making windows, better check <see cref="T:Godot.Window"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Position2D">
            <summary>
            <para>Generic 2D position hint for editing. It's just like a plain <see cref="T:Godot.Node2D"/>, but it displays as a cross in the 2D editor at all times. You can set cross' visual size by using the gizmo in the 2D editor while the node is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.Position3D">
            <summary>
            <para>Generic 3D position hint for editing. It's just like a plain <see cref="T:Godot.Node3D"/>, but it displays as a cross in the 3D editor at all times.</para>
            </summary>
        </member>
        <member name="T:Godot.PrimitiveMesh">
            <summary>
            <para>Base class for all primitive meshes. Handles applying a <see cref="T:Godot.Material"/> to a primitive mesh. Examples include <see cref="T:Godot.BoxMesh"/>, <see cref="T:Godot.CapsuleMesh"/>, <see cref="T:Godot.CylinderMesh"/>, <see cref="T:Godot.PlaneMesh"/>, <see cref="T:Godot.PrismMesh"/>, <see cref="T:Godot.QuadMesh"/>, and <see cref="T:Godot.SphereMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.Material">
            <summary>
            <para>The current <see cref="T:Godot.Material"/> of the primitive mesh.</para>
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.CustomAabb">
            <summary>
            <para>Overrides the <see cref="T:Godot.AABB"/> with one defined by user for use with frustum culling. Especially useful to avoid unnexpected culling when  using a shader to offset vertices.</para>
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.FlipFaces">
            <summary>
            <para>If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.</para>
            <para>This gives the same result as using  in <see cref="P:Godot.BaseMaterial3D.CullMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.PrimitiveMesh.GetMeshArrays">
            <summary>
            <para>Returns mesh arrays used to constitute surface of <see cref="T:Godot.Mesh"/>. The result can be passed to <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/> to create a new surface. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var c = CylinderMesh.new()</para>
            <para>var arr_mesh = ArrayMesh.new()</para>
            <para>arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var c = new CylinderMesh();</para>
            <para>var arrMesh = new ArrayMesh();</para>
            <para>arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, c.GetMeshArrays());</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="T:Godot.PrismMesh">
            <summary>
            <para>Class representing a prism-shaped <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.LeftToRight">
            <summary>
            <para>Displacement of the upper edge along the X axis. 0.0 positions edge straight above the bottom-left edge.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.Size">
            <summary>
            <para>Size of the prism.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideWidth">
            <summary>
            <para>Number of added edge loops along the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideHeight">
            <summary>
            <para>Number of added edge loops along the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideDepth">
            <summary>
            <para>Number of added edge loops along the Z axis.</para>
            </summary>
        </member>
        <member name="T:Godot.ProceduralSkyMaterial">
            <summary>
            <para>ProceduralSkyMaterial provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are very similar, they are defined by a color at the horizon, another color, and finally an easing curve to interpolate between these two colors. Similarly, the sun is described by a position in the sky, a color, and an easing curve. However, the sun also defines a minimum and maximum angle, these two values define at what distance the easing curve begins and ends from the sun, and thus end up defining the size of the sun in the sky.</para>
            <para>The <see cref="T:Godot.ProceduralSkyMaterial"/> uses a lightweight shader to draw the sky and is thus suited for real time updates. When you do not need a quick sky that is not realistic, this is a good option.</para>
            <para>The <see cref="T:Godot.ProceduralSkyMaterial"/> supports up to 4 suns. Each sun takes its color, energy, and direction from the corresponding <see cref="T:Godot.DirectionalLight3D"/> in the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SkyTopColor">
            <summary>
            <para>Color of the sky at the top. Blends with <see cref="P:Godot.ProceduralSkyMaterial.SkyHorizonColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SkyHorizonColor">
            <summary>
            <para>Color of the sky at the horizon. Blends with <see cref="P:Godot.ProceduralSkyMaterial.SkyTopColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SkyCurve">
            <summary>
            <para>How quickly the <see cref="P:Godot.ProceduralSkyMaterial.SkyHorizonColor"/> fades into the <see cref="P:Godot.ProceduralSkyMaterial.SkyTopColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SkyEnergy">
            <summary>
            <para>Amount of energy contribution from the sky.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.GroundBottomColor">
            <summary>
            <para>Color of the ground at the bottom. Blends with <see cref="P:Godot.ProceduralSkyMaterial.GroundHorizonColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.GroundHorizonColor">
            <summary>
            <para>Color of the ground at the horizon. Blends with <see cref="P:Godot.ProceduralSkyMaterial.GroundBottomColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.GroundCurve">
            <summary>
            <para>How quickly the <see cref="P:Godot.ProceduralSkyMaterial.GroundHorizonColor"/> fades into the <see cref="P:Godot.ProceduralSkyMaterial.GroundBottomColor"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.GroundEnergy">
            <summary>
            <para>Amount of energy contribution from the ground.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SunAngleMax">
            <summary>
            <para>Distance from center of sun where it fades out completely.</para>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSkyMaterial.SunCurve">
            <summary>
            <para>How quickly the sun fades away between the edge of the sun disk and <see cref="P:Godot.ProceduralSkyMaterial.SunAngleMax"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.ProgressBar">
            <summary>
            <para>General-purpose progress bar. Shows fill percentage from right to left.</para>
            </summary>
        </member>
        <member name="P:Godot.ProgressBar.PercentVisible">
            <summary>
            <para>If <c>true</c>, the fill percentage is displayed on the bar.</para>
            </summary>
        </member>
        <member name="T:Godot.ProjectSettings">
            <summary>
            <para>Contains global variables accessible from everywhere. Use <see cref="M:Godot.ProjectSettings.GetSetting(System.String)"/>, <see cref="M:Godot.ProjectSettings.SetSetting(System.String,System.Object)"/> or <see cref="M:Godot.ProjectSettings.HasSetting(System.String)"/> to access them. Variables stored in <c>project.godot</c> are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.</para>
            <para>When naming a Project Settings property, use the full path to the setting including the category. For example, <c>"application/config/name"</c> for the project name. Category and property names can be viewed in the Project Settings dialog.</para>
            <para>Overriding: Any project setting can be overridden by creating a file named <c>override.cfg</c> in the project's root directory. This can also be used in exported projects by placing this file in the same directory as the project binary.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.HasSetting(System.String)">
            <summary>
            <para>Returns <c>true</c> if a configuration value is present.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetSetting(System.String,System.Object)">
            <summary>
            <para>Sets the value of a setting.</para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>ProjectSettings.set_setting("application/config/name", "Example")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>ProjectSettings.SetSetting("application/config/name", "Example");</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetSetting(System.String)">
            <summary>
            <para>Returns the value of a setting.</para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>print(ProjectSettings.get_setting("application/config/name"))</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>GD.Print(ProjectSettings.GetSetting("application/config/name"));</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetOrder(System.String,System.Int32)">
            <summary>
            <para>Sets the order of a configuration value (influences when saved to the config file).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetOrder(System.String)">
            <summary>
            <para>Returns the order of a configuration value (influences when saved to the config file).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetInitialValue(System.String,System.Object)">
            <summary>
            <para>Sets the specified property's initial value. This is the value the property reverts to.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.AddPropertyInfo(Godot.Collections.Dictionary)">
            <summary>
            <para>Adds a custom property info to a property. The dictionary must contain:</para>
            <para>- <c>name</c>: <see cref="T:System.String"/> (the property's name)</para>
            <para>- <c>type</c>: <see cref="T:System.Int32"/> (see <see cref="T:Godot.Variant.Type"/>)</para>
            <para>- optionally <c>hint</c>: <see cref="T:System.Int32"/> (see <see cref="T:Godot.PropertyHint"/>) and <c>hint_string</c>: <see cref="T:System.String"/></para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>ProjectSettings.set("category/property_name", 0)</para>
            <para></para>
            <para>var property_info = {</para>
            <para>    "name": "category/property_name",</para>
            <para>    "type": TYPE_INT,</para>
            <para>    "hint": PROPERTY_HINT_ENUM,</para>
            <para>    "hint_string": "one,two,three"</para>
            <para>}</para>
            <para></para>
            <para>ProjectSettings.add_property_info(property_info)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>ProjectSettings.Singleton.Set("category/property_name", 0);</para>
            <para></para>
            <para>var propertyInfo = new Godot.Collections.Dictionary</para>
            <para>{</para>
            <para>    {"name", "category/propertyName"},</para>
            <para>    {"type", Variant.Type.Int},</para>
            <para>    {"hint", PropertyHint.Enum},</para>
            <para>    {"hint_string", "one,two,three"},</para>
            <para>};</para>
            <para></para>
            <para>ProjectSettings.AddPropertyInfo(propertyInfo);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Clear(System.String)">
            <summary>
            <para>Clears the whole configuration (not recommended, may break things).</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LocalizePath(System.String)">
            <summary>
            <para>Returns the localized path (starting with <c>res://</c>) corresponding to the absolute, native OS <c>path</c>. See also <see cref="M:Godot.ProjectSettings.GlobalizePath(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GlobalizePath(System.String)">
            <summary>
            <para>Returns the absolute, native OS path corresponding to the localized <c>path</c> (starting with <c>res://</c> or <c>user://</c>). The returned path will vary depending on the operating system and user preferences. See <a href="https://docs.godotengine.org/en/latest/tutorials/io/data_paths.html">File paths in Godot projects</a> to see what those paths convert to. See also <see cref="M:Godot.ProjectSettings.LocalizePath(System.String)"/>.</para>
            <para>Note: <see cref="M:Godot.ProjectSettings.GlobalizePath(System.String)"/> with <c>res://</c> will not work in an exported project. Instead, prepend the executable's base directory to the path when running from an exported project:</para>
            <para><code>
            var path = ""
            if OS.has_feature("editor"):
                # Running from an editor binary.
                # `path` will contain the absolute path to `hello.txt` located in the project root.
                path = ProjectSettings.globalize_path("res://hello.txt")
            else:
                # Running from an exported project.
                # `path` will contain the absolute path to `hello.txt` next to the executable.
                # This is *not* identical to using `ProjectSettings.globalize_path()` with a `res://` path,
                # but is close enough in spirit.
                path = OS.get_executable_path().get_base_dir().plus_file("hello.txt")
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Save">
            <summary>
            <para>Saves the configuration to the <c>project.godot</c> file.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LoadResourcePack(System.String,System.Boolean,System.Int32)">
            <summary>
            <para>Loads the contents of the .pck or .zip file specified by <c>pack</c> into the resource filesystem (<c>res://</c>). Returns <c>true</c> on success.</para>
            <para>Note: If a file from <c>pack</c> shares the same path as a file already in the resource filesystem, any attempts to load that file will use the file from <c>pack</c> unless <c>replace_files</c> is set to <c>false</c>.</para>
            <para>Note: The optional <c>offset</c> parameter can be used to specify the offset in bytes to the start of the resource pack. This is only supported for .pck files.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyCanRevert(System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified property exists and its initial value differs from the current value.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyGetRevert(System.String)">
            <summary>
            <para>Returns the specified property's initial value. Returns <c>null</c> if the property does not exist.</para>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SaveCustom(System.String)">
            <summary>
            <para>Saves the configuration to a custom file. The file extension must be <c>.godot</c> (to save in text-based <see cref="T:Godot.ConfigFile"/> format) or <c>.binary</c> (to save in binary format).</para>
            </summary>
        </member>
        <member name="T:Godot.ProximityGroup3D">
            <summary>
            <para>General-purpose proximity detection node.</para>
            </summary>
        </member>
        <member name="T:Godot.QuadMesh">
            <summary>
            <para>Class representing a square <see cref="T:Godot.PrimitiveMesh"/>. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Y axes; this default rotation is more suited for use with billboarded materials. Unlike <see cref="T:Godot.PlaneMesh"/>, this mesh doesn't provide subdivision options.</para>
            </summary>
        </member>
        <member name="P:Godot.QuadMesh.Size">
            <summary>
            <para>Size on the X and Y axes.</para>
            </summary>
        </member>
        <member name="M:Godot.RDShaderFile.SetBytecode(Godot.RDShaderBytecode,Godot.StringName)">
            <param name="version">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.RDShaderFile.GetBytecode(Godot.StringName)">
            <param name="version">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="T:Godot.RandomNumberGenerator">
            <summary>
            <para>RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses <a href="http://www.pcg-random.org/">PCG32</a>.</para>
            <para>Note: The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.</para>
            <para>To generate a random float number (within a given range) based on a time-dependant seed:</para>
            <para><code>
            var rng = RandomNumberGenerator.new()
            func _ready():
                rng.randomize()
                var my_random_number = rng.randf_range(-10.0, 10.0)
            </code></para>
            <para>Note: The default values of <see cref="P:Godot.RandomNumberGenerator.Seed"/> and <see cref="P:Godot.RandomNumberGenerator.State"/> properties are pseudo-random, and changes when calling <see cref="M:Godot.RandomNumberGenerator.Randomize"/>. The <c>0</c> value documented here is a placeholder, and not the actual default seed.</para>
            </summary>
        </member>
        <member name="P:Godot.RandomNumberGenerator.Seed">
            <summary>
            <para>Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.</para>
            <para>Note: The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally.</para>
            <para>Note: Setting this property produces a side effect of changing the internal <see cref="P:Godot.RandomNumberGenerator.State"/>, so make sure to initialize the seed before modifying the <see cref="P:Godot.RandomNumberGenerator.State"/>:</para>
            <para><code>
            var rng = RandomNumberGenerator.new()
            rng.seed = hash("Godot")
            rng.state = 100 # Restore to some previously saved state.
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.RandomNumberGenerator.State">
            <summary>
            <para>The current state of the random number generator. Save and restore this property to restore the generator to a previous state:</para>
            <para><code>
            var rng = RandomNumberGenerator.new()
            print(rng.randf())
            var saved_state = rng.state # Store current state.
            print(rng.randf()) # Advance internal state.
            rng.state = saved_state # Restore the state.
            print(rng.randf()) # Prints the same value as in previous.
            </code></para>
            <para>Note: Do not set state to arbitrary values, since the random number generator requires the state to have certain qualities to behave properly. It should only be set to values that came from the state property itself. To initialize the random number generator with arbitrary input, use <see cref="P:Godot.RandomNumberGenerator.Seed"/> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randi">
            <summary>
            <para>Generates a pseudo-random 32-bit unsigned integer between <c>0</c> and <c>4294967295</c> (inclusive).</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randf">
            <summary>
            <para>Generates a pseudo-random float between <c>0.0</c> and <c>1.0</c> (inclusive).</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randfn(System.Single,System.Single)">
            <summary>
            <para>Generates a <a href="https://en.wikipedia.org/wiki/Normal_distribution">normally-distributed</a> pseudo-random number, using Box-Muller transform with the specified <c>mean</c> and a standard <c>deviation</c>. This is also called Gaussian distribution.</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.RandfRange(System.Single,System.Single)">
            <summary>
            <para>Generates a pseudo-random float between <c>from</c> and <c>to</c> (inclusive).</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.RandiRange(System.Int32,System.Int32)">
            <summary>
            <para>Generates a pseudo-random 32-bit signed integer between <c>from</c> and <c>to</c> (inclusive).</para>
            </summary>
        </member>
        <member name="M:Godot.RandomNumberGenerator.Randomize">
            <summary>
            <para>Setups a time-based seed to generator.</para>
            </summary>
        </member>
        <member name="T:Godot.Range">
            <summary>
            <para>Range is a base class for <see cref="T:Godot.Control"/> nodes that change a floating-point value between a minimum and a maximum, using step and page, for example a <see cref="T:Godot.ScrollBar"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.MinValue">
            <summary>
            <para>Minimum value. Range is clamped if <c>value</c> is less than <c>min_value</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.MaxValue">
            <summary>
            <para>Maximum value. Range is clamped if <c>value</c> is greater than <c>max_value</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Step">
            <summary>
            <para>If greater than 0, <c>value</c> will always be rounded to a multiple of <c>step</c>. If <c>rounded</c> is also <c>true</c>, <c>value</c> will first be rounded to a multiple of <c>step</c> then rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Page">
            <summary>
            <para>Page size. Used mainly for <see cref="T:Godot.ScrollBar"/>. ScrollBar's length is its size multiplied by <c>page</c> over the difference between <c>min_value</c> and <c>max_value</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Value">
            <summary>
            <para>Range's current value.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Ratio">
            <summary>
            <para>The value mapped between 0 and 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.ExpEdit">
            <summary>
            <para>If <c>true</c>, and <c>min_value</c> is greater than 0, <c>value</c> will be represented exponentially rather than linearly.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.Rounded">
            <summary>
            <para>If <c>true</c>, <c>value</c> will always be rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.AllowGreater">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Range.Value"/> may be greater than <see cref="P:Godot.Range.MaxValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Range.AllowLesser">
            <summary>
            <para>If <c>true</c>, <see cref="P:Godot.Range.Value"/> may be less than <see cref="P:Godot.Range.MinValue"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Range.Share(Godot.Node)">
            <summary>
            <para>Binds two ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group.</para>
            </summary>
        </member>
        <member name="M:Godot.Range.Unshare">
            <summary>
            <para>Stops range from sharing its member variables with any other.</para>
            </summary>
        </member>
        <member name="T:Godot.Range.ValueChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.Range.Value"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.Range.ChangedHandler">
            <summary>
            <para>Emitted when <see cref="P:Godot.Range.MinValue"/>, <see cref="P:Godot.Range.MaxValue"/>, <see cref="P:Godot.Range.Page"/>, or <see cref="P:Godot.Range.Step"/> change.</para>
            </summary>
        </member>
        <member name="T:Godot.RayCast2D">
            <summary>
            <para>A RayCast represents a line from its origin to its destination position, <see cref="P:Godot.RayCast2D.TargetPosition"/>. It is used to query the 2D space in order to find the closest object along the path of the ray.</para>
            <para>RayCast2D can ignore some objects by adding them to the exception list via <see cref="M:Godot.RayCast2D.AddException(Godot.Object)"/>, by setting proper filtering with collision layers, or by filtering object types with type masks.</para>
            <para>RayCast2D can be configured to report collisions with <see cref="T:Godot.Area2D"/>s (<see cref="P:Godot.RayCast2D.CollideWithAreas"/>) and/or <see cref="T:Godot.PhysicsBody2D"/>s (<see cref="P:Godot.RayCast2D.CollideWithBodies"/>).</para>
            <para>Only enabled raycasts will be able to query the space and report collisions.</para>
            <para>RayCast2D calculates intersection every physics frame (see <see cref="T:Godot.Node"/>), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use <see cref="M:Godot.RayCast2D.ForceRaycastUpdate"/> after adjusting the raycast.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.Enabled">
            <summary>
            <para>If <c>true</c>, collisions will be reported.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.ExcludeParent">
            <summary>
            <para>If <c>true</c>, the parent node will be excluded from collision detection.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.TargetPosition">
            <summary>
            <para>The ray's destination point, relative to the RayCast's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollisionMask">
            <summary>
            <para>The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.Area2D"/>s will be reported.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.PhysicsBody2D"/>s will be reported.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.IsColliding">
            <summary>
            <para>Returns whether any object is intersecting with the ray's vector (considering the vector length).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ForceRaycastUpdate">
            <summary>
            <para>Updates the collision information for the ray. Use this method to update the collision information immediately instead of waiting for the next <c>_physics_process</c> call, for example if the ray or its parent has changed state.</para>
            <para>Note: <see cref="P:Godot.RayCast2D.Enabled"/> does not need to be <c>true</c> for this to work.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollider">
            <summary>
            <para>Returns the first object that the ray intersects, or <c>null</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast2D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetColliderShape">
            <summary>
            <para>Returns the shape ID of the first object that the ray intersects, or <c>0</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast2D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionPoint">
            <summary>
            <para>Returns the collision point at which the ray intersects the closest object.</para>
            <para>Note: this point is in the global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionNormal">
            <summary>
            <para>Returns the normal of the intersecting object's shape at the collision point.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddExceptionRid(Godot.RID)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddException(Godot.Object)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveExceptionRid(Godot.RID)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveException(Godot.Object)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ClearExceptions">
            <summary>
            <para>Removes all collision exceptions for this ray.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets or clears individual bits on the collision mask. This makes selecting the areas scanned easier.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="T:Godot.RayCast3D">
            <summary>
            <para>A RayCast represents a line from its origin to its destination position, <see cref="P:Godot.RayCast3D.TargetPosition"/>. It is used to query the 3D space in order to find the closest object along the path of the ray.</para>
            <para>RayCast3D can ignore some objects by adding them to the exception list via <see cref="M:Godot.RayCast3D.AddException(Godot.Object)"/> or by setting proper filtering with collision layers and masks.</para>
            <para>RayCast3D can be configured to report collisions with <see cref="T:Godot.Area3D"/>s (<see cref="P:Godot.RayCast3D.CollideWithAreas"/>) and/or <see cref="T:Godot.PhysicsBody3D"/>s (<see cref="P:Godot.RayCast3D.CollideWithBodies"/>).</para>
            <para>Only enabled raycasts will be able to query the space and report collisions.</para>
            <para>RayCast3D calculates intersection every physics frame (see <see cref="T:Godot.Node"/>), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame), use <see cref="M:Godot.RayCast3D.ForceRaycastUpdate"/> after adjusting the raycast.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.Enabled">
            <summary>
            <para>If <c>true</c>, collisions will be reported.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.ExcludeParent">
            <summary>
            <para>If <c>true</c>, collisions will be ignored for this RayCast3D's immediate parent.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.TargetPosition">
            <summary>
            <para>The ray's destination point, relative to the RayCast's <c>position</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.CollisionMask">
            <summary>
            <para>The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.CollideWithAreas">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.Area3D"/>s will be reported.</para>
            </summary>
        </member>
        <member name="P:Godot.RayCast3D.CollideWithBodies">
            <summary>
            <para>If <c>true</c>, collision with <see cref="T:Godot.PhysicsBody3D"/>s will be reported.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.IsColliding">
            <summary>
            <para>Returns whether any object is intersecting with the ray's vector (considering the vector length).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.ForceRaycastUpdate">
            <summary>
            <para>Updates the collision information for the ray.</para>
            <para>Use this method to update the collision information immediately instead of waiting for the next <c>_physics_process</c> call, for example if the ray or its parent has changed state.</para>
            <para>Note: <see cref="P:Godot.RayCast3D.Enabled"/> does not need to be <c>true</c> for this to work.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.GetCollider">
            <summary>
            <para>Returns the first object that the ray intersects, or <c>null</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast3D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.GetColliderShape">
            <summary>
            <para>Returns the shape ID of the first object that the ray intersects, or <c>0</c> if no object is intersecting the ray (i.e. <see cref="M:Godot.RayCast3D.IsColliding"/> returns <c>false</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.GetCollisionPoint">
            <summary>
            <para>Returns the collision point at which the ray intersects the closest object.</para>
            <para>Note: This point is in the global coordinate system.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.GetCollisionNormal">
            <summary>
            <para>Returns the normal of the intersecting object's shape at the collision point.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.AddExceptionRid(Godot.RID)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.AddException(Godot.Object)">
            <summary>
            <para>Adds a collision exception so the ray does not report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.RemoveExceptionRid(Godot.RID)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified <see cref="T:Godot.RID"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.RemoveException(Godot.Object)">
            <summary>
            <para>Removes a collision exception so the ray does report collisions with the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.ClearExceptions">
            <summary>
            <para>Removes all collision exceptions for this ray.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the bit index passed to the <c>value</c> passed.</para>
            <para>Note: Bit indexes range from 0-19.</para>
            </summary>
        </member>
        <member name="M:Godot.RayCast3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the bit index passed is turned on.</para>
            <para>Note: Bit indices range from 0-19.</para>
            </summary>
        </member>
        <member name="T:Godot.RayShape2D">
            <summary>
            <para>Ray shape for 2D collisions. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape2D.Length">
            <summary>
            <para>The ray's length.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape2D.SlipsOnSlope">
            <summary>
            <para>If <c>true</c>, allow the shape to return the correct normal.</para>
            </summary>
        </member>
        <member name="T:Godot.RayShape3D">
            <summary>
            <para>Ray shape for 3D collisions, which can be set into a <see cref="T:Godot.PhysicsBody3D"/> or <see cref="T:Godot.Area3D"/>. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape3D.Length">
            <summary>
            <para>The ray's length.</para>
            </summary>
        </member>
        <member name="P:Godot.RayShape3D.SlipsOnSlope">
            <summary>
            <para>If <c>true</c>, allow the shape to return the correct normal.</para>
            </summary>
        </member>
        <member name="T:Godot.RectangleShape2D">
            <summary>
            <para>Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.</para>
            </summary>
        </member>
        <member name="P:Godot.RectangleShape2D.Size">
            <summary>
            <para>The rectangle's width and height.</para>
            </summary>
        </member>
        <member name="T:Godot.Reference">
            <summary>
            <para>Base class for any object that keeps a reference count. <see cref="T:Godot.Resource"/> and many other helper objects inherit this class.</para>
            <para>Unlike <see cref="T:Godot.Object"/>s, References keep an internal reference counter so that they are automatically released when no longer in use, and only then. References therefore do not need to be freed manually with <see cref="M:Godot.Object.Free"/>.</para>
            <para>In the vast majority of use cases, instantiating and using <see cref="T:Godot.Reference"/>-derived types is all you need to do. The methods provided in this class are only for advanced users, and can cause issues if misused.</para>
            <para>Note: In C#, references will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free references that are no longer in use. This means that unused references will linger on for a while before being removed.</para>
            </summary>
        </member>
        <member name="M:Godot.Reference.InitRef">
            <summary>
            <para>Initializes the internal reference counter. Use this only if you really know what you are doing.</para>
            <para>Returns whether the initialization was successful.</para>
            </summary>
        </member>
        <member name="M:Godot.Reference.Reference_">
            <summary>
            <para>Increments the internal reference counter. Use this only if you really know what you are doing.</para>
            <para>Returns <c>true</c> if the increment was successful, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Reference.Unreference">
            <summary>
            <para>Decrements the internal reference counter. Use this only if you really know what you are doing.</para>
            <para>Returns <c>true</c> if the decrement was successful, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="T:Godot.ReferenceRect">
            <summary>
            <para>A rectangle box that displays only a <see cref="P:Godot.ReferenceRect.BorderColor"/> border color around its rectangle. <see cref="T:Godot.ReferenceRect"/> has no fill <see cref="T:Godot.Color"/>. If you need to display a rectangle filled with a solid color, consider using <see cref="T:Godot.ColorRect"/> instead.</para>
            </summary>
        </member>
        <member name="P:Godot.ReferenceRect.BorderColor">
            <summary>
            <para>Sets the border <see cref="T:Godot.Color"/> of the <see cref="T:Godot.ReferenceRect"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ReferenceRect.BorderWidth">
            <summary>
            <para>Sets the border width of the <see cref="T:Godot.ReferenceRect"/>. The border grows both inwards and outwards with respect to the rectangle box.</para>
            </summary>
        </member>
        <member name="P:Godot.ReferenceRect.EditorOnly">
            <summary>
            <para>If set to <c>true</c>, the <see cref="T:Godot.ReferenceRect"/> will only be visible while in editor. Otherwise, <see cref="T:Godot.ReferenceRect"/> will be visible in game.</para>
            </summary>
        </member>
        <member name="T:Godot.ReflectionProbe">
            <summary>
            <para>Captures its surroundings as a cubemap, and stores versions of it with increasing levels of blur to simulate different material roughnesses.</para>
            <para>The <see cref="T:Godot.ReflectionProbe"/> is used to create high-quality reflections at the cost of performance. It can be combined with <see cref="T:Godot.GIProbe"/>s and Screen Space Reflections to achieve high quality reflections. <see cref="T:Godot.ReflectionProbe"/>s render all objects within their <see cref="P:Godot.ReflectionProbe.CullMask"/>, so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them.</para>
            </summary>
        </member>
        <member name="F:Godot.ReflectionProbe.UpdateModeEnum.Once">
            <summary>
            <para>Update the probe once on the next frame. The corresponding radiance map will be generated over the following six frames. This is slower to update than  but can result in higher quality reflections.</para>
            </summary>
        </member>
        <member name="F:Godot.ReflectionProbe.UpdateModeEnum.Always">
            <summary>
            <para>Update the probe every frame. This is needed when you want to capture dynamic objects. However, it results in an increased render time. Use  whenever possible.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.UpdateMode">
            <summary>
            <para>Sets how frequently the probe is updated. Can be  or .</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Intensity">
            <summary>
            <para>Defines the reflection intensity. Intensity modulates the strength of the reflection.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.MaxDistance">
            <summary>
            <para>Sets the max distance away from the probe an object can be before it is culled.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Extents">
            <summary>
            <para>The size of the reflection probe. The larger the extents the more space covered by the probe which will lower the perceived resolution. It is best to keep the extents only as large as you need them.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.OriginOffset">
            <summary>
            <para>Sets the origin offset to be used when this reflection probe is in box project mode.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.BoxProjection">
            <summary>
            <para>If <c>true</c>, enables box projection. This makes reflections look more correct in rectangle-shaped rooms by offsetting the reflection center depending on the camera's location.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Interior">
            <summary>
            <para>If <c>true</c>, reflections will ignore sky contribution.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.EnableShadows">
            <summary>
            <para>If <c>true</c>, computes shadows in the reflection probe. This makes the reflection probe slower to render; you may want to disable this if using the  <see cref="P:Godot.ReflectionProbe.UpdateMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.CullMask">
            <summary>
            <para>Sets the cull mask which determines what objects are drawn by this probe. Every <see cref="T:Godot.VisualInstance3D"/> with a layer included in this cull mask will be rendered by the probe. It is best to only include large objects which are likely to take up a lot of space in the reflection in order to save on rendering cost.</para>
            </summary>
        </member>
        <member name="T:Godot.RegEx">
            <summary>
            <para>A regular expression (or regex) is a compact language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of <c>ab[0-9]</c> would find any string that is <c>ab</c> followed by any number from <c>0</c> to <c>9</c>. For a more in-depth look, you can easily find various tutorials and detailed explanations on the Internet.</para>
            <para>To begin, the RegEx object needs to be compiled with the search pattern using <see cref="M:Godot.RegEx.Compile(System.String)"/> before it can be used.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            </code></para>
            <para>The search pattern must be escaped first for GDScript before it is escaped for the expression. For example, <c>compile("\\d+")</c> would be read by RegEx as <c>\d+</c>. Similarly, <c>compile("\"(?:\\\\.|[^\"])*\"")</c> would be read as <c>"(?:\\.|[^"])*"</c>.</para>
            <para>Using <see cref="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)"/>, you can find the pattern within the given text. If a pattern is found, <see cref="T:Godot.RegExMatch"/> is returned and you can retrieve details of the results using methods such as <see cref="M:Godot.RegExMatch.GetString(System.Object)"/> and <see cref="M:Godot.RegExMatch.GetStart(System.Object)"/>.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            var result = regex.search("abc n-0123")
            if result:
                print(result.get_string()) # Would print n-0123
            </code></para>
            <para>The results of capturing groups <c>()</c> can be retrieved by passing the group number to the various methods in <see cref="T:Godot.RegExMatch"/>. Group 0 is the default and will always refer to the entire pattern. In the above example, calling <c>result.get_string(1)</c> would give you <c>0123</c>.</para>
            <para>This version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("d(?&lt;digit&gt;[0-9]+)|x(?&lt;digit&gt;[0-9a-f]+)")
            var result = regex.search("the number is x2f")
            if result:
                print(result.get_string("digit")) # Would print 2f
            </code></para>
            <para>If you need to process multiple results, <see cref="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)"/> generates a list of all non-overlapping results. This can be combined with a <c>for</c> loop for convenience.</para>
            <para><code>
            for result in regex.search_all("d01, d03, d0c, x3f and x42"):
                print(result.get_string("digit"))
            # Would print 01 03 0 3f 42
            </code></para>
            <para>Example of splitting a string using a RegEx:</para>
            <para><code>
            var regex = RegEx.new()
            regex.compile("\\S+") # Negated whitespace character class.
            var results = []
            for match in regex.search_all("One  Two \n\tThree"):
                results.push_back(match.get_string())
            # The `results` array now contains "One", "Two", "Three".
            </code></para>
            <para>Note: Godot's regex implementation is based on the <a href="https://www.pcre.org/">PCRE2</a> library. You can view the full pattern reference <a href="https://www.pcre.org/current/doc/html/pcre2pattern.html">here</a>.</para>
            <para>Tip: You can use <a href="https://regexr.com/">Regexr</a> to test regular expressions online.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Clear">
            <summary>
            <para>This method resets the state of the object, as if it was freshly created. Namely, it unassigns the regular expression of this object.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Compile(System.String)">
            <summary>
            <para>Compiles and assign the search pattern to use. Returns  if the compilation is successful. If an error is encountered, details are printed to standard output and an error is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern. Returns a <see cref="T:Godot.RegExMatch"/> container of the first matching result if found, otherwise <c>null</c>. The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern. Returns an array of <see cref="T:Godot.RegExMatch"/> containers for each non-overlapping result. If no results were found, an empty array is returned instead. The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.Sub(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as <c>$1</c> and <c>$name</c> are expanded and resolved. By default, only the first instance is replaced, but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.IsValid">
            <summary>
            <para>Returns whether this object has a valid search pattern assigned.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetPattern">
            <summary>
            <para>Returns the original search pattern that was compiled.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetGroupCount">
            <summary>
            <para>Returns the number of capturing groups in compiled pattern.</para>
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetNames">
            <summary>
            <para>Returns an array of names of named capturing groups in the compiled pattern. They are ordered by appearance.</para>
            </summary>
        </member>
        <member name="T:Godot.RegExMatch">
            <summary>
            <para>Contains the results of a single <see cref="T:Godot.RegEx"/> match returned by <see cref="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)"/> and <see cref="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)"/>. It can be used to find the position and range of the match and its capturing groups, and it can extract its substring for you.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Subject">
            <summary>
            <para>The source string used with the search pattern to find this matching result.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Names">
            <summary>
            <para>A dictionary of named groups and its corresponding group number. Only groups that were matched are included. If multiple groups have the same name, that name would refer to the first matching one.</para>
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Strings">
            <summary>
            <para>An <see cref="T:Godot.Collections.Array"/> of the match and its capturing groups.</para>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetGroupCount">
            <summary>
            <para>Returns the number of capturing groups.</para>
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetString(System.Object)">
            <summary>
            <para>Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns an empty string if the group did not match or doesn't exist.</para>
            </summary>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
        </member>
        <member name="M:Godot.RegExMatch.GetStart(System.Object)">
            <summary>
            <para>Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns -1 if the group did not match or doesn't exist.</para>
            </summary>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
        </member>
        <member name="M:Godot.RegExMatch.GetEnd(System.Object)">
            <summary>
            <para>Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.</para>
            <para>Returns -1 if the group did not match or doesn't exist.</para>
            </summary>
            <param name="name">If the parameter is null, then the default value is (object)0</param>
        </member>
        <member name="T:Godot.RemoteTransform2D">
            <summary>
            <para>RemoteTransform2D pushes its own <see cref="T:Godot.Transform2D"/> to another <see cref="T:Godot.CanvasItem"/> derived Node (called the remote node) in the scene.</para>
            <para>It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.RemotePath">
            <summary>
            <para>The <see cref="T:Godot.NodePath"/> to the remote node, relative to the RemoteTransform2D's position in the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UseGlobalCoordinates">
            <summary>
            <para>If <c>true</c>, global coordinates are used. If <c>false</c>, local coordinates are used.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdatePosition">
            <summary>
            <para>If <c>true</c>, the remote node's position is updated.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateRotation">
            <summary>
            <para>If <c>true</c>, the remote node's rotation is updated.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateScale">
            <summary>
            <para>If <c>true</c>, the remote node's scale is updated.</para>
            </summary>
        </member>
        <member name="M:Godot.RemoteTransform2D.ForceUpdateCache">
            <summary>
            <para><see cref="T:Godot.RemoteTransform2D"/> caches the remote node. It may not notice if the remote node disappears; <see cref="M:Godot.RemoteTransform2D.ForceUpdateCache"/> forces it to update the cache again.</para>
            </summary>
        </member>
        <member name="T:Godot.RemoteTransform3D">
            <summary>
            <para>RemoteTransform3D pushes its own <see cref="T:Godot.Transform"/> to another <see cref="T:Godot.Node3D"/> derived Node (called the remote node) in the scene.</para>
            <para>It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform3D.RemotePath">
            <summary>
            <para>The <see cref="T:Godot.NodePath"/> to the remote node, relative to the RemoteTransform3D's position in the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform3D.UseGlobalCoordinates">
            <summary>
            <para>If <c>true</c>, global coordinates are used. If <c>false</c>, local coordinates are used.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform3D.UpdatePosition">
            <summary>
            <para>If <c>true</c>, the remote node's position is updated.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform3D.UpdateRotation">
            <summary>
            <para>If <c>true</c>, the remote node's rotation is updated.</para>
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform3D.UpdateScale">
            <summary>
            <para>If <c>true</c>, the remote node's scale is updated.</para>
            </summary>
        </member>
        <member name="M:Godot.RemoteTransform3D.ForceUpdateCache">
            <summary>
            <para><see cref="T:Godot.RemoteTransform3D"/> caches the remote node. It may not notice if the remote node disappears; <see cref="M:Godot.RemoteTransform3D.ForceUpdateCache"/> forces it to update the cache again.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingDevice.TextureCreate(Godot.RDTextureFormat,Godot.RDTextureView,Godot.Collections.Array)">
            <param name="data">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.VertexBufferCreate(System.UInt32,System.Byte[],System.Boolean)">
            <param name="data">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.IndexBufferCreate(System.UInt32,Godot.RenderingDevice.IndexBufferFormat,System.Byte[],System.Boolean)">
            <param name="data">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.UniformBufferCreate(System.UInt32,System.Byte[])">
            <param name="data">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.StorageBufferCreate(System.UInt32,System.Byte[],System.UInt32)">
            <param name="data">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.TextureBufferCreate(System.UInt32,Godot.RenderingDevice.DataFormat,System.Byte[])">
            <param name="data">If the parameter is null, then the default value is new byte[] {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.DrawListBeginForScreen(System.Int32,System.Nullable{Godot.Color})">
            <param name="clearColor">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.RenderingDevice.DrawListBegin(Godot.RID,Godot.RenderingDevice.InitialAction,Godot.RenderingDevice.FinalAction,Godot.RenderingDevice.InitialAction,Godot.RenderingDevice.FinalAction,Godot.Color[],System.Single,System.UInt32,System.Nullable{Godot.Rect2},Godot.Collections.Array)">
            <param name="clearColorValues">If the parameter is null, then the default value is new Color[] {}</param>
            <param name="region">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            <param name="storageTextures">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.DrawListBeginSplit(Godot.RID,System.UInt32,Godot.RenderingDevice.InitialAction,Godot.RenderingDevice.FinalAction,Godot.RenderingDevice.InitialAction,Godot.RenderingDevice.FinalAction,Godot.Color[],System.Single,System.UInt32,System.Nullable{Godot.Rect2},Godot.Collections.Array)">
            <param name="clearColorValues">If the parameter is null, then the default value is new Color[] {}</param>
            <param name="region">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            <param name="storageTextures">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.RenderingDevice.DrawListEnableScissor(System.Int64,System.Nullable{Godot.Rect2})">
            <param name="rect">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
        </member>
        <member name="T:Godot.RenderingServer">
            <summary>
            <para>Server for anything visible. The rendering server is the API backend for everything visible. The whole scene system mounts on it to display.</para>
            <para>The rendering server is completely opaque, the internals are entirely implementation specific and cannot be accessed.</para>
            <para>The rendering server can be used to bypass the scene system entirely.</para>
            <para>Resources are created using the <c>*_create</c> functions.</para>
            <para>All objects are drawn to a viewport. You can use the <see cref="T:Godot.Viewport"/> attached to the <see cref="T:Godot.SceneTree"/> or you can create one yourself with <see cref="M:Godot.RenderingServer.ViewportCreate"/>. When using a custom scenario or canvas, the scenario or canvas needs to be attached to the viewport using <see cref="M:Godot.RenderingServer.ViewportSetScenario(Godot.RID,Godot.RID)"/> or <see cref="M:Godot.RenderingServer.ViewportAttachCanvas(Godot.RID,Godot.RID)"/>.</para>
            <para>In 3D, all visual objects must be associated with a scenario. The scenario is a visual representation of the world. If accessing the rendering server from a running game, the scenario can be accessed from the scene tree from any <see cref="T:Godot.Node3D"/> node with <see cref="M:Godot.Node3D.GetWorld3d"/>. Otherwise, a scenario can be created with <see cref="M:Godot.RenderingServer.ScenarioCreate"/>.</para>
            <para>Similarly in 2D, a canvas is needed to draw all canvas items.</para>
            <para>In 3D, all visible objects are comprised of a resource and an instance. A resource can be a mesh, a particle system, a light, or any other 3D object. In order to be visible resources must be attached to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/>. The instance must also be attached to the scenario using <see cref="M:Godot.RenderingServer.InstanceSetScenario(Godot.RID,Godot.RID)"/> in order to be visible.</para>
            <para>In 2D, all visible objects are some form of canvas item. In order to be visible, a canvas item needs to be the child of a canvas attached to a viewport, or it needs to be the child of another canvas item that is eventually attached to the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.NoIndexArray">
            <summary>
            <para>Marks an error that shows that the index array is empty.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayWeightsSize">
            <summary>
            <para>Number of weights/bones per vertex.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemZMin">
            <summary>
            <para>The minimum Z-layer for canvas items.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemZMax">
            <summary>
            <para>The maximum Z-layer for canvas items.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MaxGlowLevels">
            <summary>
            <para>Max number of glow levels that can be used with glow post-process effect.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MaxCursors">
            <summary>
            <para>Unused enum in Godot 3.x.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MaterialRenderPriorityMin">
            <summary>
            <para>The minimum renderpriority of all materials.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MaterialRenderPriorityMax">
            <summary>
            <para>The maximum renderpriority of all materials.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBokehShape.Box">
            <summary>
            <para>Calculate the DOF blur using a box filter. The fastest option, but results in obvious lines in blur pattern.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBokehShape.Hexagon">
            <summary>
            <para>Calculates DOF blur using a hexagon shaped filter.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBokehShape.Circle">
            <summary>
            <para>Calculates DOF blur using a circle shaped filter. Best quality and most realistic, but slowest. Use only for areas where a lot of performance can be dedicated to post-processing (e.g. cutscenes).</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ReflectionProbeUpdateMode.Once">
            <summary>
            <para>Reflection probe will update reflections once and then stop.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ReflectionProbeUpdateMode.Always">
            <summary>
            <para>Reflection probe will update each frame. This mode is necessary to capture moving objects.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightDirectionalShadowDepthRangeMode.Stable">
            <summary>
            <para>Keeps shadows stable as camera moves but has lower effective resolution.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightDirectionalShadowDepthRangeMode.Optimized">
            <summary>
            <para>Optimize use of shadow maps, increasing the effective resolution. But may result in shadows moving or flickering slightly.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.BlendShapeMode.Normalized">
            <summary>
            <para>Blend shapes are normalized.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.BlendShapeMode.Relative">
            <summary>
            <para>Blend shapes are relative to base weight.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.Points">
            <summary>
            <para>Primitive to draw consists of points.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.Lines">
            <summary>
            <para>Primitive to draw consists of lines.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.LineStrip">
            <summary>
            <para>Primitive to draw consists of a line strip from start to end.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.Triangles">
            <summary>
            <para>Primitive to draw consists of triangles.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.TriangleStrip">
            <summary>
            <para>Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle).</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.PrimitiveType.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.PrimitiveType"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.ObjectsInFrame">
            <summary>
            <para>The amount of objects in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.VerticesInFrame">
            <summary>
            <para>The amount of vertices in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.MaterialChangesInFrame">
            <summary>
            <para>The amount of modified materials in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.ShaderChangesInFrame">
            <summary>
            <para>The amount of shader rebinds in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.SurfaceChangesInFrame">
            <summary>
            <para>The amount of surface changes in the frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.DrawCallsInFrame">
            <summary>
            <para>The amount of draw calls in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.UsageVideoMemTotal">
            <summary>
            <para>Unimplemented in the GLES2 rendering backend, always returns 0.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.VideoMemUsed">
            <summary>
            <para>The amount of video memory used, i.e. texture and vertex memory combined.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.TextureMemUsed">
            <summary>
            <para>The amount of texture memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.RenderInfo.VertexMemUsed">
            <summary>
            <para>The amount of vertex memory used.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.NinePatchAxisMode.Stretch">
            <summary>
            <para>The nine patch gets stretched where needed.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.NinePatchAxisMode.Tile">
            <summary>
            <para>The nine patch gets filled with tiles where needed.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.NinePatchAxisMode.TileFit">
            <summary>
            <para>The nine patch gets filled with tiles where needed and stretches them a bit if needed.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentSSAOQuality.VeryLow">
            <summary>
            <para>Lowest quality of screen space ambient occlusion.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentSSAOQuality.Low">
            <summary>
            <para>Low quality screen space ambient occlusion.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentSSAOQuality.Medium">
            <summary>
            <para>Medium quality screen space ambient occlusion.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentSSAOQuality.High">
            <summary>
            <para>High quality screen space ambient occlusion.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentSSAOQuality.Ultra">
            <summary>
            <para>Highest quality screen space ambient occlusion. Uses the adaptive setting which can be dynamically adjusted to smoothly balance performance and visual quality.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.SkyMode.Quality">
            <summary>
            <para>Uses high quality importance sampling to process the radiance map. In general, this results in much higher quality than  but takes much longer to generate. This should not be used if you plan on changing the sky at runtime. If you are finding that the reflection is not blurry enough and is showing sparkles or fireflies, try increasing .</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.SkyMode.Realtime">
            <summary>
            <para>Uses the fast filtering algorithm to process the radiance map. In general this results in lower quality, but substantially faster run times.</para>
            <para>Note: The fast filtering algorithm is limited to 256x256 cubemaps, so <see cref="P:Godot.Sky.RadianceSize"/> must be set to .</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.ObjectsInFrame">
            <summary>
            <para>Number of objects drawn in a single frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.VerticesInFrame">
            <summary>
            <para>Number of vertices drawn in a single frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.MaterialChangesInFrame">
            <summary>
            <para>Number of material changes during this frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.ShaderChangesInFrame">
            <summary>
            <para>Number of shader changes during this frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.SurfaceChangesInFrame">
            <summary>
            <para>Number of surface changes during this frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.DrawCallsInFrame">
            <summary>
            <para>Number of draw calls during this frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportRenderInfo.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.ViewportRenderInfo"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportClearMode.Always">
            <summary>
            <para>The viewport is always cleared before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportClearMode.Never">
            <summary>
            <para>The viewport is never cleared before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportClearMode.OnlyNextFrame">
            <summary>
            <para>The viewport is cleared once, then the clear mode is set to .</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShaderMode.Spatial">
            <summary>
            <para>Shader is a 3D shader.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShaderMode.CanvasItem">
            <summary>
            <para>Shader is a 2D shader.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShaderMode.Particles">
            <summary>
            <para>Shader is a particle shader.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShaderMode.Sky">
            <summary>
            <para>Shader is a sky shader.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShaderMode.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.ShaderMode"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureRepeat.Default">
            <summary>
            <para>Uses the default repeat mode for this <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureRepeat.Disabled">
            <summary>
            <para>Disables textures repeating. Instead, when reading UVs outside the 0-1 range, the value will be clamped to the edge of the texture, resulting in a stretched out look at the borders of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureRepeat.Enabled">
            <summary>
            <para>Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureRepeat.Mirror">
            <summary>
            <para>Flip the texture when repeating so that the edge lines up instead of abruptly changing.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureRepeat.Max">
            <summary>
            <para>Max value for <see cref="T:Godot.RenderingServer.CanvasItemTextureRepeat"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShadowCastingSetting.Off">
            <summary>
            <para>Disable shadows from this instance.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShadowCastingSetting.On">
            <summary>
            <para>Cast shadows from this instance.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShadowCastingSetting.DoubleSided">
            <summary>
            <para>Disable backface culling when rendering the shadow of the object. This is slightly slower but may result in more correct shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ShadowCastingSetting.ShadowsOnly">
            <summary>
            <para>Only render the shadows from the object. The object itself will not be drawn.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Disabled">
            <summary>
            <para>Debug draw is disabled. Default setting.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Unshaded">
            <summary>
            <para>Objects are displayed without light information.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Lighting">
            <summary>
            <para>Objects are displayed with only light information.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Overdraw">
            <summary>
            <para>Objects are displayed semi-transparent with additive blending so you can see where they are drawing over top of one another. A higher overdraw (represented by brighter colors) means you are wasting performance on drawing pixels that are being hidden behind others.</para>
            <para>Note: When using this debug draw mode, custom shaders will be ignored. This means vertex displacement won't be visible anymore.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Wireframe">
            <summary>
            <para>Debug draw draws objects in wireframe.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.NormalBuffer">
            <summary>
            <para>Normal buffer is drawn instead of regular scene so you can see the per-pixel normals that will be used by post-processing effects.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.GiProbeAlbedo">
            <summary>
            <para>Objects are displayed with only the albedo value from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.GiProbeLighting">
            <summary>
            <para>Objects are displayed with only the lighting value from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.GiProbeEmission">
            <summary>
            <para>Objects are displayed with only the emission color from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.ShadowAtlas">
            <summary>
            <para>Draws the shadow atlas that stores shadows from <see cref="T:Godot.OmniLight3D"/>s and <see cref="T:Godot.SpotLight3D"/>s in the upper left quadrant of the <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.DirectionalShadowAtlas">
            <summary>
            <para>Draws the shadow atlas that stores shadows from <see cref="T:Godot.DirectionalLight3D"/>s in the upper left quadrant of the <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.Ssao">
            <summary>
            <para>Draws the screen space ambient occlusion texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have <see cref="P:Godot.Environment.SsaoEnabled"/> set in your <see cref="T:Godot.WorldEnvironment"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportDebugDraw.PssmSplits">
            <summary>
            <para>Colors each PSSM split for the <see cref="T:Godot.DirectionalLight3D"/>s in the scene a different color so you can see where the splits are. In order they will be colored red, green, blue, yellow.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MultimeshTransformFormat.Transform2d">
            <summary>
            <para>Use <see cref="T:Godot.Transform2D"/> to store MultiMesh transform.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.MultimeshTransformFormat.Transform3d">
            <summary>
            <para>Use <see cref="T:Godot.Transform"/> to store MultiMesh transform.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightBlendMode.Add">
            <summary>
            <para>Adds light color additive to the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightBlendMode.Sub">
            <summary>
            <para>Adds light color subtractive to the canvas.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightBlendMode.Mix">
            <summary>
            <para>The light adds color depending on transparency.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentAmbientSource.Bg">
            <summary>
            <para>Gather ambient light from whichever source is specified as the background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentAmbientSource.Disabled">
            <summary>
            <para>Disable ambient light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentAmbientSource.Color">
            <summary>
            <para>Specify a specific <see cref="T:Godot.Color"/> for ambient light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentAmbientSource.Sky">
            <summary>
            <para>Gather ambient light from the <see cref="T:Godot.Sky"/> regardless of what the background is.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.ClearColor">
            <summary>
            <para>Use the clear color as background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.Color">
            <summary>
            <para>Use a specified color as the background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.Sky">
            <summary>
            <para>Use a sky resource for the background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.Canvas">
            <summary>
            <para>Use a specified canvas layer as the background. This can be useful for instantiating a 2D scene in a 3D world.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.Keep">
            <summary>
            <para>Do not clear the background, use whatever was rendered last frame as the background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.CameraFeed">
            <summary>
            <para>Displays a camera feed in the background.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentBG.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.EnvironmentBG"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightOmniShadowMode.DualParaboloid">
            <summary>
            <para>Use a dual paraboloid shadow map for omni lights.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightOmniShadowMode.Cube">
            <summary>
            <para>Use a cubemap shadow map for omni lights. Slower but better quality than dual paraboloid.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.Features.Shaders">
            <summary>
            <para>Hardware supports shaders. This enum is currently unused in Godot 3.x.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.Features.Multithreaded">
            <summary>
            <para>Hardware supports multithreading. This enum is currently unused in Godot 3.x.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.None">
            <summary>
            <para>The instance does not have a type.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Mesh">
            <summary>
            <para>The instance is a mesh.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Multimesh">
            <summary>
            <para>The instance is a multimesh.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Immediate">
            <summary>
            <para>The instance is an immediate geometry.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Particles">
            <summary>
            <para>The instance is a particle emitter.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Light">
            <summary>
            <para>The instance is a light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.ReflectionProbe">
            <summary>
            <para>The instance is a reflection probe.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Decal">
            <summary>
            <para>The instance is a decal.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.GiProbe">
            <summary>
            <para>The instance is a GI probe.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Lightmap">
            <summary>
            <para>The instance is a lightmap.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.InstanceType"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceType.GeometryMask">
            <summary>
            <para>A combination of the flags of geometry instances (mesh, multimesh, immediate and particles).</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBlurQuality.VeryLow">
            <summary>
            <para>Lowest quality DOF blur. This is the fastest setting, but you may be able to see filtering artifacts.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBlurQuality.Low">
            <summary>
            <para>Low quality DOF blur.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBlurQuality.Medium">
            <summary>
            <para>Medium quality DOF blur.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.DOFBlurQuality.High">
            <summary>
            <para>Highest quality DOF blur. Results in the smoothest looking blur by taking the most samples, but is also significantly slower.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightShadowFilter.None">
            <summary>
            <para>Do not apply a filter to canvas light shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightShadowFilter.Pcf5">
            <summary>
            <para>Use PCF5 filtering to filter canvas light shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightShadowFilter.Pcf13">
            <summary>
            <para>Use PCF13 filtering to filter canvas light shadows.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasLightShadowFilter.Max">
            <summary>
            <para>Max value of the <see cref="T:Godot.RenderingServer.CanvasLightShadowFilter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ScenarioDebugMode.Disabled">
            <summary>
            <para>Do not use a debug mode.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ScenarioDebugMode.Wireframe">
            <summary>
            <para>Draw all objects as wireframe models.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ScenarioDebugMode.Overdraw">
            <summary>
            <para>Draw all objects in a way that displays how much overdraw is occurring. Overdraw occurs when a section of pixels is drawn and shaded and then another object covers it up. To optimize a scene, you should reduce overdraw.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ScenarioDebugMode.Shadeless">
            <summary>
            <para>Draw all objects without shading. Equivalent to setting all objects shaders to <c>unshaded</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentToneMapper.Linear">
            <summary>
            <para>Output color as they came in.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentToneMapper.Reinhard">
            <summary>
            <para>Use the Reinhard tonemapper.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentToneMapper.Filmic">
            <summary>
            <para>Use the filmic tonemapper.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentToneMapper.Aces">
            <summary>
            <para>Use the ACES tonemapper.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentGlowBlendMode.Additive">
            <summary>
            <para>Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentGlowBlendMode.Screen">
            <summary>
            <para>Screen glow blending mode. Increases brightness, used frequently with bloom.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentGlowBlendMode.Softlight">
            <summary>
            <para>Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom).</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentGlowBlendMode.Replace">
            <summary>
            <para>Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentGlowBlendMode.Mix">
            <summary>
            <para>Mixes the glow with the underlying color to avoid increasing brightness as much while still maintaining a glow effect.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportUpdateMode.Disabled">
            <summary>
            <para>Do not update the viewport.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportUpdateMode.Once">
            <summary>
            <para>Update the viewport once then set to disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportUpdateMode.WhenVisible">
            <summary>
            <para>Update the viewport whenever it is visible.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportUpdateMode.Always">
            <summary>
            <para>Always update the viewport.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatVertex">
            <summary>
            <para>Flag used to mark a vertex array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatNormal">
            <summary>
            <para>Flag used to mark a normal array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatTangent">
            <summary>
            <para>Flag used to mark a tangent array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatColor">
            <summary>
            <para>Flag used to mark a color array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatTexUv">
            <summary>
            <para>Flag used to mark an UV coordinates array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatTexUv2">
            <summary>
            <para>Flag used to mark an UV coordinates array for the second UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatBones">
            <summary>
            <para>Flag used to mark a bone information array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatWeights">
            <summary>
            <para>Flag used to mark a weights array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FormatIndex">
            <summary>
            <para>Flag used to mark an index array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayFormat.FlagUse2dVertices">
            <summary>
            <para>Flag used to mark that the array contains 2D vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentReflectionSource.Bg">
            <summary>
            <para>Use the background for reflections.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentReflectionSource.Disabled">
            <summary>
            <para>Disable reflections.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.EnvironmentReflectionSource.Sky">
            <summary>
            <para>Use the <see cref="T:Godot.Sky"/> for reflections regardless of what the background is.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ParticlesDrawOrder.Index">
            <summary>
            <para>Draw particles in the order that they appear in the particles array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ParticlesDrawOrder.Lifetime">
            <summary>
            <para>Sort particles based on their lifetime.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ParticlesDrawOrder.ViewDepth">
            <summary>
            <para>Sort particles based on their distance to the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightDirectionalShadowMode.Orthogonal">
            <summary>
            <para>Use orthogonal shadow projection for directional light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightDirectionalShadowMode.Parallel2Splits">
            <summary>
            <para>Use 2 splits for shadow projection when using directional light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightDirectionalShadowMode.Parallel4Splits">
            <summary>
            <para>Use 4 splits for shadow projection when using directional light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Energy">
            <summary>
            <para>The light's energy.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Specular">
            <summary>
            <para>The light's influence on specularity.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Range">
            <summary>
            <para>The light's range.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Size">
            <summary>
            <para>The size of the light when using spot light or omni light. The angular size of the light when using directional light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Attenuation">
            <summary>
            <para>The light's attenuation.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.SpotAngle">
            <summary>
            <para>The spotlight's angle.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.SpotAttenuation">
            <summary>
            <para>The spotlight's attenuation.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowMaxDistance">
            <summary>
            <para>Max distance that shadows will be rendered.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowSplit1Offset">
            <summary>
            <para>Proportion of shadow atlas occupied by the first split.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowSplit2Offset">
            <summary>
            <para>Proportion of shadow atlas occupied by the second split.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowSplit3Offset">
            <summary>
            <para>Proportion of shadow atlas occupied by the third split. The fourth split occupies the rest.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowFadeStart">
            <summary>
            <para>Proportion of shadow max distance where the shadow will start to fade out.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowNormalBias">
            <summary>
            <para>Normal bias used to offset shadow lookup by object normal. Can be used to fix self-shadowing artifacts.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowBias">
            <summary>
            <para>Bias the shadow lookup to fix self-shadowing artifacts.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowPancakeSize">
            <summary>
            <para>Sets the size of the directional shadow pancake. The pancake offsets the start of the shadow's camera frustum to provide a higher effective depth resolution for the shadow. However, a high pancake size can cause artifacts in the shadows of large objects that are close to the edge of the frustum. Reducing the pancake size can help. Setting the size to <c>0</c> turns off the pancaking effect.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.ShadowBlur">
            <summary>
            <para>Blurs the edges of the shadow. Can be used to hide pixel artifacts in low resolution shadow maps. A high value can make shadows appear grainy and can cause other unwanted artifacts. Try to keep as near default as possible.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightParam.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.LightParam"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Vertex">
            <summary>
            <para>Array is a vertex array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Normal">
            <summary>
            <para>Array is a normal array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Tangent">
            <summary>
            <para>Array is a tangent array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Color">
            <summary>
            <para>Array is a color array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.TexUv">
            <summary>
            <para>Array is an UV coordinates array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.TexUv2">
            <summary>
            <para>Array is an UV coordinates array for the second UV coordinates.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Bones">
            <summary>
            <para>Array contains bone information.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Weights">
            <summary>
            <para>Array is weight information.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Index">
            <summary>
            <para>Array is index array.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ArrayType.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.ArrayType"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasOccluderPolygonCullMode.Disabled">
            <summary>
            <para>Culling of the canvas occluder is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasOccluderPolygonCullMode.Clockwise">
            <summary>
            <para>Culling of the canvas occluder is clockwise.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasOccluderPolygonCullMode.CounterClockwise">
            <summary>
            <para>Culling of the canvas occluder is counterclockwise.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.Default">
            <summary>
            <para>Uses the default filter mode for this <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.Nearest">
            <summary>
            <para>The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering, but the texture will look pixelized.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.Linear">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels. Use this when you want to avoid a pixelated style, but do not want mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.NearestWithMipmaps">
            <summary>
            <para>The texture filter reads from the nearest pixel in the nearest mipmap. The fastest way to read from textures with mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.LinearWithMipmaps">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.NearestWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter reads from the nearest pixel, but selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.LinearWithMipmapsAnisotropic">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera. This is the slowest of the filtering options, but results in the highest quality texturing.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.CanvasItemTextureFilter.Max">
            <summary>
            <para>Max value for <see cref="T:Godot.RenderingServer.CanvasItemTextureFilter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceFlags.UseBakedLight">
            <summary>
            <para>Allows the instance to be used in baked lighting.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceFlags.UseDynamicGi">
            <summary>
            <para>Allows the instance to be used with dynamic global illumination.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceFlags.DrawNextFrameIfVisible">
            <summary>
            <para>When set, manually requests to draw geometry on next frame.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.InstanceFlags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.RenderingServer.InstanceFlags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportMSAA.Disabled">
            <summary>
            <para>Multisample antialiasing is disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportMSAA.Msaa2x">
            <summary>
            <para>Multisample antialiasing uses 2 samples per pixel.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportMSAA.Msaa4x">
            <summary>
            <para>Multisample antialiasing uses 4 samples per pixel.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportMSAA.Msaa8x">
            <summary>
            <para>Multisample antialiasing uses 8 samples per pixel.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.ViewportMSAA.Msaa16x">
            <summary>
            <para>Multisample antialiasing uses 16 samples per pixel.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightType.Directional">
            <summary>
            <para>Is a directional (sun) light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightType.Omni">
            <summary>
            <para>Is an omni light.</para>
            </summary>
        </member>
        <member name="F:Godot.RenderingServer.LightType.Spot">
            <summary>
            <para>Is a spot light.</para>
            </summary>
        </member>
        <member name="P:Godot.RenderingServer.RenderLoopEnabled">
            <summary>
            <para>If <c>false</c>, disables rendering completely, but the engine logic is still being processed. You can call <see cref="M:Godot.RenderingServer.ForceDraw(System.Boolean,System.Double)"/> to draw a frame even with rendering disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ForceSync">
            <summary>
            <para>Synchronizes threads.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ForceDraw(System.Boolean,System.Double)">
            <summary>
            <para>Forces a frame to be drawn when the function is called. Drawing a frame updates all <see cref="T:Godot.Viewport"/>s that are set to update. Use with extreme caution.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkyCreate">
            <summary>
            <para>Creates an empty sky and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>sky_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkySetMaterial(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the material that the sky uses to render the background and reflection maps.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderCreate">
            <summary>
            <para>Creates an empty shader and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>shader_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderSetCode(Godot.RID,System.String)">
            <summary>
            <para>Sets a shader's code.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderGetCode(Godot.RID)">
            <summary>
            <para>Returns a shader's code.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderGetParamList(Godot.RID)">
            <summary>
            <para>Returns the parameters of a shader.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderSetDefaultTextureParam(Godot.RID,Godot.StringName,Godot.RID)">
            <summary>
            <para>Sets a shader's default texture. Overwrites the texture given by name.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ShaderGetDefaultTextureParam(Godot.RID,Godot.StringName)">
            <summary>
            <para>Returns a default texture from a shader searched by name.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialCreate">
            <summary>
            <para>Creates an empty material and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>material_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialSetShader(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a shader material's shader.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialSetParam(Godot.RID,Godot.StringName,System.Object)">
            <summary>
            <para>Sets a material's parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialGetParam(Godot.RID,Godot.StringName)">
            <summary>
            <para>Returns the value of a certain material's parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialSetRenderPriority(Godot.RID,System.Int32)">
            <summary>
            <para>Sets a material's render priority.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MaterialSetNextPass(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets an object's next material.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshCreate">
            <summary>
            <para>Creates a new mesh and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>mesh_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this mesh to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshGetBlendShapeCount(Godot.RID)">
            <summary>
            <para>Returns a mesh's blend shape count.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSetBlendShapeMode(Godot.RID,Godot.RenderingServer.BlendShapeMode)">
            <summary>
            <para>Sets a mesh's blend shape mode.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshGetBlendShapeMode(Godot.RID)">
            <summary>
            <para>Returns a mesh's blend shape mode.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSurfaceUpdateRegion(Godot.RID,System.Int32,System.Int32,System.Byte[])">
            <summary>
            <para>Updates a specific region of a vertex buffer for the specified surface. Warning: this function alters the vertex buffer directly with no safety mechanisms, you can easily corrupt your mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSurfaceSetMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Sets a mesh's surface's material.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSurfaceGetMaterial(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's material.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSurfaceGetArrays(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's buffer arrays.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSurfaceGetBlendShapeArrays(Godot.RID,System.Int32)">
            <summary>
            <para>Returns a mesh's surface's arrays for blend shapes.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshGetSurfaceCount(Godot.RID)">
            <summary>
            <para>Returns a mesh's number of surfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            <para>Sets a mesh's custom aabb.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshGetCustomAabb(Godot.RID)">
            <summary>
            <para>Returns a mesh's custom aabb.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MeshClear(Godot.RID)">
            <summary>
            <para>Removes all surfaces from a mesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshCreate">
            <summary>
            <para>Creates a new multimesh on the RenderingServer and returns an <see cref="T:Godot.RID"/> handle. This RID will be used in all <c>multimesh_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this multimesh to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshGetInstanceCount(Godot.RID)">
            <summary>
            <para>Returns the number of instances allocated for this multimesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshSetMesh(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the mesh to be drawn by the multimesh. Equivalent to <see cref="P:Godot.MultiMesh.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> for this instance. Equivalent to <see cref="M:Godot.MultiMesh.SetInstanceTransform(System.Int32,Godot.Transform)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform2D"/> for this instance. For use when multimesh is used in 2D. Equivalent to <see cref="M:Godot.MultiMesh.SetInstanceTransform2d(System.Int32,Godot.Transform2D)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceSetColor(Godot.RID,System.Int32,Godot.Color)">
            <summary>
            <para>Sets the color by which this instance will be modulated. Equivalent to <see cref="M:Godot.MultiMesh.SetInstanceColor(System.Int32,Godot.Color)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceSetCustomData(Godot.RID,System.Int32,Godot.Color)">
            <summary>
            <para>Sets the custom data for this instance. Custom data is passed as a <see cref="T:Godot.Color"/>, but is interpreted as a <c>vec4</c> in the shader. Equivalent to <see cref="M:Godot.MultiMesh.SetInstanceCustomData(System.Int32,Godot.Color)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshGetMesh(Godot.RID)">
            <summary>
            <para>Returns the RID of the mesh that will be used in drawing this multimesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshGetAabb(Godot.RID)">
            <summary>
            <para>Calculates and returns the axis-aligned bounding box that encloses all instances within the multimesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceGetTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform"/> of the specified instance.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> of the specified instance. For use when the multimesh is set to use 2D transforms.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceGetColor(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the color by which the specified instance will be modulated.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshInstanceGetCustomData(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the custom data associated with the specified instance.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshSetVisibleInstances(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the number of instances visible at a given time. If -1, all instances that have been allocated are drawn. Equivalent to <see cref="P:Godot.MultiMesh.VisibleInstanceCount"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MultimeshGetVisibleInstances(Godot.RID)">
            <summary>
            <para>Returns the number of visible instances for this multimesh.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateCreate">
            <summary>
            <para>Creates an immediate geometry and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>immediate_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this immediate geometry to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateBegin(Godot.RID,Godot.RenderingServer.PrimitiveType,Godot.RID)">
            <summary>
            <para>Sets up <see cref="T:Godot.ImmediateGeometry3D"/> internals to prepare for drawing. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.Begin(Godot.Mesh.PrimitiveType,Godot.Texture2D)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateVertex(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Adds the next vertex using the information provided in advance. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.AddVertex(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateVertex2d(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Adds the next vertex using the information provided in advance. This is a helper class that calls <see cref="M:Godot.RenderingServer.ImmediateVertex(Godot.RID,Godot.Vector3)"/> under the hood. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.AddVertex(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateNormal(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the normal to be used with next vertex. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.SetNormal(Godot.Vector3)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateTangent(Godot.RID,Godot.Plane)">
            <summary>
            <para>Sets the tangent to be used with next vertex. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.SetTangent(Godot.Plane)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color to be used with next vertex. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.SetColor(Godot.Color)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateUv(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the UV to be used with next vertex. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.SetUv(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateUv2(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the UV2 to be used with next vertex. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.SetUv2(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateEnd(Godot.RID)">
            <summary>
            <para>Ends drawing the <see cref="T:Godot.ImmediateGeometry3D"/> and displays it. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.End"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateClear(Godot.RID)">
            <summary>
            <para>Clears everything that was set up between <see cref="M:Godot.RenderingServer.ImmediateBegin(Godot.RID,Godot.RenderingServer.PrimitiveType,Godot.RID)"/> and <see cref="M:Godot.RenderingServer.ImmediateEnd(Godot.RID)"/>. Equivalent to <see cref="M:Godot.ImmediateGeometry3D.Clear"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the material to be used to draw the <see cref="T:Godot.ImmediateGeometry3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ImmediateGetMaterial(Godot.RID)">
            <summary>
            <para>Returns the material assigned to the <see cref="T:Godot.ImmediateGeometry3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonCreate">
            <summary>
            <para>Creates a skeleton and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>skeleton_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonAllocate(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            <para>Allocates the GPU buffers for this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonGetBoneCount(Godot.RID)">
            <summary>
            <para>Returns the number of bones allocated for this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonBoneSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> for a specific bone of this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonBoneGetTransform(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform"/> set for a specific bone of this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonBoneSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform2D"/> for a specific bone of this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SkeletonBoneGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> set for a specific bone of this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.DirectionalLightCreate">
            <summary>
            <para>Creates a directional light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most <c>light_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this directional light to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.OmniLightCreate">
            <summary>
            <para>Creates a new omni light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most <c>light_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this omni light to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SpotLightCreate">
            <summary>
            <para>Creates a spot light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most <c>light_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this spot light to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color of the light. Equivalent to <see cref="P:Godot.Light3D.LightColor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetParam(Godot.RID,Godot.RenderingServer.LightParam,System.Single)">
            <summary>
            <para>Sets the specified light parameter. See <see cref="T:Godot.RenderingServer.LightParam"/> for options. Equivalent to <see cref="M:Godot.Light3D.SetParam(Godot.Light3D.Param,System.Single)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetShadow(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, light will cast shadows. Equivalent to <see cref="P:Godot.Light3D.ShadowEnabled"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color of the shadow cast by the light. Equivalent to <see cref="P:Godot.Light3D.ShadowColor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetProjector(Godot.RID,Godot.RID)">
            <summary>
            <para>Not implemented in Godot 3.x.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetNegative(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, light will subtract light instead of adding light. Equivalent to <see cref="P:Godot.Light3D.LightNegative"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetCullMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the cull mask for this Light3D. Lights only affect objects in the selected layers. Equivalent to <see cref="P:Godot.Light3D.LightCullMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightSetReverseCullFaceMode(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double sided shadows with <see cref="M:Godot.RenderingServer.InstanceGeometrySetCastShadowsSetting(Godot.RID,Godot.RenderingServer.ShadowCastingSetting)"/>. Equivalent to <see cref="P:Godot.Light3D.ShadowReverseCullFace"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightOmniSetShadowMode(Godot.RID,Godot.RenderingServer.LightOmniShadowMode)">
            <summary>
            <para>Sets whether to use a dual paraboloid or a cubemap for the shadow map. Dual paraboloid is faster but may suffer from artifacts. Equivalent to <see cref="P:Godot.OmniLight3D.OmniShadowMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightDirectionalSetShadowMode(Godot.RID,Godot.RenderingServer.LightDirectionalShadowMode)">
            <summary>
            <para>Sets the shadow mode for this directional light. Equivalent to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowMode"/>. See <see cref="T:Godot.RenderingServer.LightDirectionalShadowMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightDirectionalSetBlendSplits(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, this directional light will blend between shadow map splits resulting in a smoother transition between them. Equivalent to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowBlendSplits"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightDirectionalSetSkyOnly(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, this light will not be used for anything except sky shaders. Use this for lights that impact your sky shader that you may want to hide from affecting the rest of the scene. For example, you may want to enable this when the sun in your sky shader falls below the horizon.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.LightDirectionalSetShadowDepthRangeMode(Godot.RID,Godot.RenderingServer.LightDirectionalShadowDepthRangeMode)">
            <summary>
            <para>Sets the shadow depth range mode for this directional light. Equivalent to <see cref="P:Godot.DirectionalLight3D.DirectionalShadowDepthRange"/>. See <see cref="T:Godot.RenderingServer.LightDirectionalShadowDepthRangeMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeCreate">
            <summary>
            <para>Creates a reflection probe and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>reflection_probe_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach this reflection probe to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetUpdateMode(Godot.RID,Godot.RenderingServer.ReflectionProbeUpdateMode)">
            <summary>
            <para>Sets how often the reflection probe updates. Can either be once or every frame. See <see cref="T:Godot.RenderingServer.ReflectionProbeUpdateMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetIntensity(Godot.RID,System.Single)">
            <summary>
            <para>Sets the intensity of the reflection probe. Intensity modulates the strength of the reflection. Equivalent to <see cref="P:Godot.ReflectionProbe.Intensity"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetMaxDistance(Godot.RID,System.Single)">
            <summary>
            <para>Sets the max distance away from the probe an object can be before it is culled. Equivalent to <see cref="P:Godot.ReflectionProbe.MaxDistance"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetExtents(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the size of the area that the reflection probe will capture. Equivalent to <see cref="P:Godot.ReflectionProbe.Extents"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetOriginOffset(Godot.RID,Godot.Vector3)">
            <summary>
            <para>Sets the origin offset to be used when this reflection probe is in box project mode. Equivalent to <see cref="P:Godot.ReflectionProbe.OriginOffset"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetAsInterior(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, reflections will ignore sky contribution. Equivalent to <see cref="P:Godot.ReflectionProbe.Interior"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetEnableBoxProjection(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, uses box projection. This can make reflections look more correct in certain situations. Equivalent to <see cref="P:Godot.ReflectionProbe.BoxProjection"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetEnableShadows(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, computes shadows in the reflection probe. This makes the reflection much slower to compute. Equivalent to <see cref="P:Godot.ReflectionProbe.EnableShadows"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ReflectionProbeSetCullMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the render cull mask for this reflection probe. Only instances with a matching cull mask will be rendered by this probe. Equivalent to <see cref="P:Godot.ReflectionProbe.CullMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesCreate">
            <summary>
            <para>Creates a particle system and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>particles_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>To place in a scene, attach these particles to an instance using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/> using the returned RID.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetEmitting(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, particles will emit over time. Setting to false does not reset the particles, but only stops their emission. Equivalent to <see cref="P:Godot.GPUParticles3D.Emitting"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesGetEmitting(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if particles are currently set to emitting.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetAmount(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the number of particles to be drawn and allocates the memory for them. Equivalent to <see cref="P:Godot.GPUParticles3D.Amount"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetLifetime(Godot.RID,System.Single)">
            <summary>
            <para>Sets the lifetime of each particle in the system. Equivalent to <see cref="P:Godot.GPUParticles3D.Lifetime"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetOneShot(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, particles will emit once and then stop. Equivalent to <see cref="P:Godot.GPUParticles3D.OneShot"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetPreProcessTime(Godot.RID,System.Single)">
            <summary>
            <para>Sets the preprocess time for the particles animation. This lets you delay starting an animation until after the particles have begun emitting. Equivalent to <see cref="P:Godot.GPUParticles3D.Preprocess"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetExplosivenessRatio(Godot.RID,System.Single)">
            <summary>
            <para>Sets the explosiveness ratio. Equivalent to <see cref="P:Godot.GPUParticles3D.Explosiveness"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetRandomnessRatio(Godot.RID,System.Single)">
            <summary>
            <para>Sets the emission randomness ratio. This randomizes the emission of particles within their phase. Equivalent to <see cref="P:Godot.GPUParticles3D.Randomness"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            <para>Sets a custom axis-aligned bounding box for the particle system. Equivalent to <see cref="P:Godot.GPUParticles3D.VisibilityAabb"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetSpeedScale(Godot.RID,System.Single)">
            <summary>
            <para>Sets the speed scale of the particle system. Equivalent to <see cref="P:Godot.GPUParticles3D.SpeedScale"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetUseLocalCoordinates(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, particles use local coordinates. If <c>false</c> they use global coordinates. Equivalent to <see cref="P:Godot.GPUParticles3D.LocalCoords"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetProcessMaterial(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the material for processing the particles. Note: this is not the material used to draw the materials. Equivalent to <see cref="P:Godot.GPUParticles3D.ProcessMaterial"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetFixedFps(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the frame rate that the particle system rendering will be fixed to. Equivalent to <see cref="P:Godot.GPUParticles3D.FixedFps"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetFractionalDelta(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, uses fractional delta which smooths the movement of the particles. Equivalent to <see cref="P:Godot.GPUParticles3D.FractDelta"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesIsInactive(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if particles are not emitting and particles are set to inactive.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesRequestProcess(Godot.RID)">
            <summary>
            <para>Add particle system to list of particle systems that need to be updated. Update will take place on the next frame, or on the next call to <see cref="M:Godot.RenderingServer.InstancesCullAabb(Godot.AABB,Godot.RID)"/>, <see cref="M:Godot.RenderingServer.InstancesCullConvex(Godot.Collections.Array,Godot.RID)"/>, or <see cref="M:Godot.RenderingServer.InstancesCullRay(Godot.Vector3,Godot.Vector3,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesRestart(Godot.RID)">
            <summary>
            <para>Reset the particles on the next update. Equivalent to <see cref="M:Godot.GPUParticles3D.Restart"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetDrawOrder(Godot.RID,Godot.RenderingServer.ParticlesDrawOrder)">
            <summary>
            <para>Sets the draw order of the particles to one of the named enums from <see cref="T:Godot.RenderingServer.ParticlesDrawOrder"/>. See <see cref="T:Godot.RenderingServer.ParticlesDrawOrder"/> for options. Equivalent to <see cref="P:Godot.GPUParticles3D.DrawOrder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetDrawPasses(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the number of draw passes to use. Equivalent to <see cref="P:Godot.GPUParticles3D.DrawPasses"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetDrawPassMesh(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Sets the mesh to be used for the specified draw pass. Equivalent to <see cref="P:Godot.GPUParticles3D.DrawPass1"/>, <see cref="P:Godot.GPUParticles3D.DrawPass2"/>, <see cref="P:Godot.GPUParticles3D.DrawPass3"/>, and <see cref="P:Godot.GPUParticles3D.DrawPass4"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesGetCurrentAabb(Godot.RID)">
            <summary>
            <para>Calculates and returns the axis-aligned bounding box that contains all the particles. Equivalent to <see cref="M:Godot.GPUParticles3D.CaptureAabb"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ParticlesSetEmissionTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets the <see cref="T:Godot.Transform"/> that will be used by the particles when they first emit.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraCreate">
            <summary>
            <para>Creates a camera and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>camera_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetPerspective(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets camera to use perspective projection. Objects on the screen becomes smaller when they are far away.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetOrthogonal(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets camera to use orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetFrustum(Godot.RID,System.Single,Godot.Vector2,System.Single,System.Single)">
            <summary>
            <para>Sets camera to use frustum projection. This mode allows adjusting the <c>offset</c> argument to create "tilted frustum" effects.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets <see cref="T:Godot.Transform"/> of camera.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetCullMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the cull mask associated with this camera. The cull mask describes which 3D layers are rendered by this camera. Equivalent to <see cref="P:Godot.Camera3D.CullMask"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the environment used by this camera. Equivalent to <see cref="P:Godot.Camera3D.Environment"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CameraSetUseVerticalAspect(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, preserves the horizontal aspect ratio which is equivalent to . If <c>false</c>, preserves the vertical aspect ratio which is equivalent to .</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportCreate">
            <summary>
            <para>Creates an empty viewport and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>viewport_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetUseXr(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport uses augmented or virtual reality technologies. See <see cref="T:Godot.XRInterface"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetSize(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the viewport's width and height.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetActive(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, sets the viewport active, else sets it inactive.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetParentViewport(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the viewport's parent to another viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportAttachToScreen(Godot.RID,System.Nullable{Godot.Rect2},System.Int32)">
            <summary>
            <para>Copies the viewport to a region of the screen specified by <c>rect</c>. If <see cref="M:Godot.RenderingServer.ViewportSetRenderDirectToScreen(Godot.RID,System.Boolean)"/> is <c>true</c>, then the viewport does not use a framebuffer and the contents of the viewport are rendered directly to screen. However, note that the root viewport is drawn last, therefore it will draw over the screen. Accordingly, you must set the root viewport to an area that does not cover the area that you have attached this viewport to.</para>
            <para>For example, you can set the root viewport to not render at all with the following code:</para>
            <para><code>
            func _ready():
                get_viewport().set_attach_to_screen_rect(Rect2())
                $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))
            </code></para>
            <para>Using this can result in significant optimization, especially on lower-end devices. However, it comes at the cost of having to manage your viewports manually. For a further optimization see, <see cref="M:Godot.RenderingServer.ViewportSetRenderDirectToScreen(Godot.RID,System.Boolean)"/>.</para>
            </summary>
            <param name="rect">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetRenderDirectToScreen(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, render the contents of the viewport directly to screen. This allows a low-level optimization where you can skip drawing a viewport to the root viewport. While this optimization can result in a significant increase in speed (especially on older devices), it comes at a cost of usability. When this is enabled, you cannot read from the viewport or from the <c>SCREEN_TEXTURE</c>. You also lose the benefit of certain window settings, such as the various stretch modes. Another consequence to be aware of is that in 2D the rendering happens in window coordinates, so if you have a viewport that is double the size of the window, and you set this, then only the portion that fits within the window will be drawn, no automatic scaling is possible, even if your game scene is significantly larger than the window size.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetUpdateMode(Godot.RID,Godot.RenderingServer.ViewportUpdateMode)">
            <summary>
            <para>Sets when the viewport should be updated. See <see cref="T:Godot.RenderingServer.ViewportUpdateMode"/> constants for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetClearMode(Godot.RID,Godot.RenderingServer.ViewportClearMode)">
            <summary>
            <para>Sets the clear mode of a viewport. See <see cref="T:Godot.RenderingServer.ViewportClearMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportGetTexture(Godot.RID)">
            <summary>
            <para>Returns the viewport's last rendered frame.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetHideScenario(Godot.RID,System.Boolean)">
            <summary>
            <para>Currently unimplemented in Godot 3.x.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetHideCanvas(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport's canvas is not rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetDisableEnvironment(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, rendering of a viewport's environment is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportAttachCamera(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's camera.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetScenario(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's scenario.</para>
            <para>The scenario contains information about the <see cref="T:Godot.RenderingServer.ScenarioDebugMode"/>, environment information, reflection atlas etc.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportAttachCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a viewport's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportRemoveCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Detaches a viewport from a canvas and vice versa.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetCanvasTransform(Godot.RID,Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the transformation of a viewport's canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetTransparentBackground(Godot.RID,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the viewport renders its background as transparent.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetGlobalCanvasTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the viewport's global transformation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetCanvasStacking(Godot.RID,Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the stacking order for a viewport's canvas.</para>
            <para><c>layer</c> is the actual canvas layer, while <c>sublayer</c> specifies the stacking order of the canvas among those in the same layer.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetShadowAtlasSize(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the size of the shadow atlas's images (used for omni and spot lights). The value will be rounded up to the nearest power of 2.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetShadowAtlasQuadrantSubdivision(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the shadow atlas quadrant's subdivision.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetMsaa(Godot.RID,Godot.RenderingServer.ViewportMSAA)">
            <summary>
            <para>Sets the anti-aliasing mode. See <see cref="T:Godot.RenderingServer.ViewportMSAA"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportGetRenderInfo(Godot.RID,Godot.RenderingServer.ViewportRenderInfo)">
            <summary>
            <para>Returns a viewport's render information. For options, see the <see cref="T:Godot.RenderingServer.ViewportRenderInfo"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ViewportSetDebugDraw(Godot.RID,Godot.RenderingServer.ViewportDebugDraw)">
            <summary>
            <para>Sets the debug draw mode of a viewport. See <see cref="T:Godot.RenderingServer.ViewportDebugDraw"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentCreate">
            <summary>
            <para>Creates an environment and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>environment_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetBackground(Godot.RID,Godot.RenderingServer.EnvironmentBG)">
            <summary>
            <para>Sets the BGMode of the environment. Equivalent to <see cref="P:Godot.Environment.BackgroundMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetSky(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the <see cref="T:Godot.Sky"/> to be used as the environment's background when using BGMode sky. Equivalent to <see cref="P:Godot.Environment.Sky"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetSkyCustomFov(Godot.RID,System.Single)">
            <summary>
            <para>Sets a custom field of view for the background <see cref="T:Godot.Sky"/>. Equivalent to <see cref="P:Godot.Environment.SkyCustomFov"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetSkyOrientation(Godot.RID,Godot.Basis)">
            <summary>
            <para>Sets the rotation of the background <see cref="T:Godot.Sky"/> expressed as a <see cref="T:Godot.Basis"/>. Equivalent to <see cref="P:Godot.Environment.SkyRotation"/>, where the rotation vector is used to construct the <see cref="T:Godot.Basis"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetBgColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes).</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetBgEnergy(Godot.RID,System.Single)">
            <summary>
            <para>Sets the intensity of the background color.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetCanvasMaxLayer(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the maximum layer to use if using Canvas background mode.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetAmbientLight(Godot.RID,Godot.Color,Godot.RenderingServer.EnvironmentAmbientSource,System.Single,System.Single,Godot.RenderingServer.EnvironmentReflectionSource,System.Nullable{Godot.Color})">
            <param name="aoColor">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetTonemap(Godot.RID,Godot.RenderingServer.EnvironmentToneMapper,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the variables to be used with the "tonemap" post-process effect. See <see cref="T:Godot.Environment"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetAdjustment(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,System.Boolean,Godot.RID)">
            <summary>
            <para>Sets the values to be used with the "Adjustment" post-process effect. See <see cref="T:Godot.Environment"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetSsr(Godot.RID,System.Boolean,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the variables to be used with the "screen space reflections" post-process effect. See <see cref="T:Godot.Environment"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.EnvironmentSetSsao(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the variables to be used with the "screen space ambient occlusion" post-process effect. See <see cref="T:Godot.Environment"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ScenarioCreate">
            <summary>
            <para>Creates a scenario and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>scenario_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>The scenario is the 3D world that all the visual instances exist in.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ScenarioSetDebug(Godot.RID,Godot.RenderingServer.ScenarioDebugMode)">
            <summary>
            <para>Sets the <see cref="T:Godot.RenderingServer.ScenarioDebugMode"/> for this scenario. See <see cref="T:Godot.RenderingServer.ScenarioDebugMode"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ScenarioSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the environment that will be used with this scenario.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.ScenarioSetFallbackEnvironment(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the fallback environment to be used by this scenario. The fallback environment is used if no environment is set. Internally, this is used by the editor to provide a default environment.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceCreate2(Godot.RID,Godot.RID)">
            <summary>
            <para>Creates a visual instance, adds it to the RenderingServer, and sets both base and scenario. It can be accessed with the RID that is returned. This RID will be used in all <c>instance_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceCreate">
            <summary>
            <para>Creates a visual instance and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>instance_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            <para>An instance is a way of placing a 3D object in the scenario. Objects like particles, meshes, and reflection probes need to be associated with an instance to be visible in the scenario using <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the base of the instance. A base can be any of the 3D objects that are created in the RenderingServer that can be displayed. For example, any of the light types, mesh, multimesh, immediate geometry, particle system, reflection probe, lightmap, and the GI probe are all types that can be set as the base of an instance in order to be displayed in the scenario.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetScenario(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the scenario that the instance is in. The scenario is the 3D world that the objects will be displayed in.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetLayerMask(Godot.RID,System.UInt32)">
            <summary>
            <para>Sets the render layers that this instance will be drawn to. Equivalent to <see cref="P:Godot.VisualInstance3D.Layers"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            <para>Sets the world space transform of the instance. Equivalent to <see cref="P:Godot.Node3D.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceAttachObjectInstanceId(Godot.RID,System.UInt64)">
            <summary>
            <para>Attaches a unique Object ID to instance. Object ID must be attached to instance for proper culling with <see cref="M:Godot.RenderingServer.InstancesCullAabb(Godot.AABB,Godot.RID)"/>, <see cref="M:Godot.RenderingServer.InstancesCullConvex(Godot.Collections.Array,Godot.RID)"/>, and <see cref="M:Godot.RenderingServer.InstancesCullRay(Godot.Vector3,Godot.Vector3,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetBlendShapeWeight(Godot.RID,System.Int32,System.Single)">
            <summary>
            <para>Sets the weight for a given blend shape associated with this instance.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetSurfaceMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            <para>Sets the material of a specific surface. Equivalent to <see cref="M:Godot.MeshInstance3D.SetSurfaceMaterial(System.Int32,Godot.Material)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetVisible(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets whether an instance is drawn or not. Equivalent to <see cref="P:Godot.Node3D.Visible"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            <para>Sets a custom AABB to use when culling objects from the view frustum. Equivalent to <see cref="M:Godot.GeometryInstance3D.SetCustomAabb(Godot.AABB)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceAttachSkeleton(Godot.RID,Godot.RID)">
            <summary>
            <para>Attaches a skeleton to an instance. Removes the previous skeleton from the instance.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetExterior(Godot.RID,System.Boolean)">
            <summary>
            <para>Function not implemented in Godot 3.x.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceSetExtraVisibilityMargin(Godot.RID,System.Single)">
            <summary>
            <para>Sets a margin to increase the size of the AABB when culling objects from the view frustum. This allows you avoid culling objects that fall outside the view frustum. Equivalent to <see cref="P:Godot.GeometryInstance3D.ExtraCullMargin"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceGeometrySetFlag(Godot.RID,Godot.RenderingServer.InstanceFlags,System.Boolean)">
            <summary>
            <para>Sets the flag for a given <see cref="T:Godot.RenderingServer.InstanceFlags"/>. See <see cref="T:Godot.RenderingServer.InstanceFlags"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceGeometrySetCastShadowsSetting(Godot.RID,Godot.RenderingServer.ShadowCastingSetting)">
            <summary>
            <para>Sets the shadow casting setting to one of <see cref="T:Godot.RenderingServer.ShadowCastingSetting"/>. Equivalent to <see cref="P:Godot.GeometryInstance3D.CastShadow"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceGeometrySetMaterialOverride(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a material that will override the material for all surfaces on the mesh associated with this instance. Equivalent to <see cref="P:Godot.GeometryInstance3D.MaterialOverride"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceGeometrySetDrawRange(Godot.RID,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Not implemented in Godot 3.x.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstanceGeometrySetAsInstanceLod(Godot.RID,Godot.RID)">
            <summary>
            <para>Not implemented in Godot 3.x.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstancesCullAabb(Godot.AABB,Godot.RID)">
            <summary>
            <para>Returns an array of object IDs intersecting with the provided AABB. Only visual 3D nodes are considered, such as <see cref="T:Godot.MeshInstance3D"/> or <see cref="T:Godot.DirectionalLight3D"/>. Use <c>@GDScript.instance_from_id</c> to obtain the actual nodes. A scenario RID must be provided, which is available in the <see cref="T:Godot.World3D"/> you want to query. This forces an update for all resources queued to update.</para>
            <para>Warning: This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstancesCullRay(Godot.Vector3,Godot.Vector3,Godot.RID)">
            <summary>
            <para>Returns an array of object IDs intersecting with the provided 3D ray. Only visual 3D nodes are considered, such as <see cref="T:Godot.MeshInstance3D"/> or <see cref="T:Godot.DirectionalLight3D"/>. Use <c>@GDScript.instance_from_id</c> to obtain the actual nodes. A scenario RID must be provided, which is available in the <see cref="T:Godot.World3D"/> you want to query. This forces an update for all resources queued to update.</para>
            <para>Warning: This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.InstancesCullConvex(Godot.Collections.Array,Godot.RID)">
            <summary>
            <para>Returns an array of object IDs intersecting with the provided convex shape. Only visual 3D nodes are considered, such as <see cref="T:Godot.MeshInstance3D"/> or <see cref="T:Godot.DirectionalLight3D"/>. Use <c>@GDScript.instance_from_id</c> to obtain the actual nodes. A scenario RID must be provided, which is available in the <see cref="T:Godot.World3D"/> you want to query. This forces an update for all resources queued to update.</para>
            <para>Warning: This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasCreate">
            <summary>
            <para>Creates a canvas and returns the assigned <see cref="T:Godot.RID"/>. It can be accessed with the RID that is returned. This RID will be used in all <c>canvas_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasSetItemMirroring(Godot.RID,Godot.RID,Godot.Vector2)">
            <summary>
            <para>A copy of the canvas item will be drawn with a local offset of the mirroring <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasSetModulate(Godot.RID,Godot.Color)">
            <summary>
            <para>Modulates all colors in the given canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetZIndex(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the <see cref="T:Godot.CanvasItem"/>'s Z index, i.e. its draw order (lower indexes are drawn first).</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetZAsRelativeToParent(Godot.RID,System.Boolean)">
            <summary>
            <para>If this is enabled, the Z index of the parent will be added to the children's Z index.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetCopyToBackbuffer(Godot.RID,System.Boolean,Godot.Rect2)">
            <summary>
            <para>Sets the <see cref="T:Godot.CanvasItem"/> to copy a rect to the backbuffer.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemClear(Godot.RID)">
            <summary>
            <para>Clears the <see cref="T:Godot.CanvasItem"/> and removes all commands in it.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetDrawIndex(Godot.RID,System.Int32)">
            <summary>
            <para>Sets the index for the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a new material to the <see cref="T:Godot.CanvasItem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasItemSetUseParentMaterial(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets if the <see cref="T:Godot.CanvasItem"/> uses its parent's material.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightCreate">
            <summary>
            <para>Creates a canvas light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>canvas_light_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Attaches the canvas light to the canvas. Removes it from its previous canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables a canvas light.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetTextureScale(Godot.RID,System.Single)">
            <summary>
            <para>Sets the scale factor of a <see cref="T:Godot.PointLight2D"/>'s texture. Equivalent to <see cref="P:Godot.PointLight2D.TextureScale"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets the canvas light's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetTexture(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets the texture to be used by a <see cref="T:Godot.PointLight2D"/>. Equivalent to <see cref="P:Godot.PointLight2D.Texture"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetTextureOffset(Godot.RID,Godot.Vector2)">
            <summary>
            <para>Sets the offset of a <see cref="T:Godot.PointLight2D"/>'s texture. Equivalent to <see cref="P:Godot.PointLight2D.Offset"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color for a light.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetHeight(Godot.RID,System.Single)">
            <summary>
            <para>Sets a canvas light's height.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetEnergy(Godot.RID,System.Single)">
            <summary>
            <para>Sets a canvas light's energy.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetZRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Sets the Z range of objects that will be affected by this light. Equivalent to <see cref="P:Godot.Light2D.RangeZMin"/> and <see cref="P:Godot.Light2D.RangeZMax"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetLayerRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>The layer range that gets rendered with this light.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetItemCullMask(Godot.RID,System.Int32)">
            <summary>
            <para>The light mask. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetItemShadowCullMask(Godot.RID,System.Int32)">
            <summary>
            <para>The binary mask used to determine which layers this canvas light's shadows affects. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetMode(Godot.RID,Godot.RenderingServer.CanvasLightMode)">
            <summary>
            <para>The mode of the light, see <see cref="T:Godot.RenderingServer.CanvasLightMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetShadowEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables the canvas light's shadow.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetShadowFilter(Godot.RID,Godot.RenderingServer.CanvasLightShadowFilter)">
            <summary>
            <para>Sets the canvas light's shadow's filter, see <see cref="T:Godot.RenderingServer.CanvasLightShadowFilter"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            <para>Sets the color of the canvas light's shadow.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightSetShadowSmooth(Godot.RID,System.Single)">
            <summary>
            <para>Smoothens the shadow. The lower, the smoother.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderCreate">
            <summary>
            <para>Creates a light occluder and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>canvas_light_ocluder_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            <para>Attaches a light occluder to the canvas. Removes it from its previous canvas.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables or disables light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderSetPolygon(Godot.RID,Godot.RID)">
            <summary>
            <para>Sets a light occluder's polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            <para>Sets a light occluder's <see cref="T:Godot.Transform2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasLightOccluderSetLightMask(Godot.RID,System.Int32)">
            <summary>
            <para>The light mask. See <see cref="T:Godot.LightOccluder2D"/> for more information on light masks.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasOccluderPolygonCreate">
            <summary>
            <para>Creates a new light occluder polygon and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all <c>canvas_occluder_polygon_*</c> RenderingServer functions.</para>
            <para>Once finished with your RID, you will want to free the RID using the RenderingServer's <see cref="M:Godot.RenderingServer.FreeRid(Godot.RID)"/> static method.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasOccluderPolygonSetShape(Godot.RID,Godot.Vector2[],System.Boolean)">
            <summary>
            <para>Sets the shape of the occluder polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.CanvasOccluderPolygonSetCullMode(Godot.RID,Godot.RenderingServer.CanvasOccluderPolygonCullMode)">
            <summary>
            <para>Sets an occluder polygons cull mode. See <see cref="T:Godot.RenderingServer.CanvasOccluderPolygonCullMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.BlackBarsSetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets margin size, where black bars (or images, if <see cref="M:Godot.RenderingServer.BlackBarsSetImages(Godot.RID,Godot.RID,Godot.RID,Godot.RID)"/> was used) are rendered.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.BlackBarsSetImages(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            <para>Sets images to be rendered in the window margin.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.FreeRid(Godot.RID)">
            <summary>
            <para>Tries to free an object in the RenderingServer.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.RequestFrameDrawnCallback(Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Schedules a callback to the corresponding named <c>method</c> on <c>where</c> after a frame has been drawn.</para>
            <para>The callback method must use only 1 argument which will be called with <c>userdata</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.HasChanged">
            <summary>
            <para>Returns <c>true</c> if changes have been made to the RenderingServer's data. <see cref="M:Godot.RenderingServer.ForceDraw(System.Boolean,System.Double)"/> is usually called if this happens.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.Init">
            <summary>
            <para>Initializes the rendering server. This function is called internally by platform-dependent code during engine initialization. If called from a running game, it will not do anything.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.Finish">
            <summary>
            <para>Removes buffers and clears testcubes.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetRenderInfo(Godot.RenderingServer.RenderInfo)">
            <summary>
            <para>Returns a certain information, see <see cref="T:Godot.RenderingServer.RenderInfo"/> for options.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetVideoAdapterName">
            <summary>
            <para>Returns the name of the video adapter (e.g. "GeForce GTX 1080/PCIe/SSE2").</para>
            <para>Note: When running a headless or server binary, this function returns an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetVideoAdapterVendor">
            <summary>
            <para>Returns the vendor of the video adapter (e.g. "NVIDIA Corporation").</para>
            <para>Note: When running a headless or server binary, this function returns an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.MakeSphereMesh(System.Int32,System.Int32,System.Single)">
            <summary>
            <para>Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetTestCube">
            <summary>
            <para>Returns the id of the test cube. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetTestTexture">
            <summary>
            <para>Returns the id of the test texture. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.GetWhiteTexture">
            <summary>
            <para>Returns the id of a white texture. Creates one if none exists.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SetBootImage(Godot.Image,Godot.Color,System.Boolean,System.Boolean)">
            <summary>
            <para>Sets a boot image. The color defines the background color. If <c>scale</c> is <c>true</c>, the image will be scaled to fit the screen size. If <c>use_filter</c> is <c>true</c>, the image will be scaled with linear interpolation. If <c>use_filter</c> is <c>false</c>, the image will be scaled with nearest-neighbor interpolation.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SetDefaultClearColor(Godot.Color)">
            <summary>
            <para>Sets the default clear color which is used when a specific clear color has not been selected.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.HasFeature(Godot.RenderingServer.Features)">
            <summary>
            <para>Not yet implemented. Always returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.HasOsFeature(System.String)">
            <summary>
            <para>Returns <c>true</c> if the OS supports a certain feature. Features might be <c>s3tc</c>, <c>etc</c>, <c>etc2</c> and <c>pvrtc</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RenderingServer.SetDebugGenerateWireframes(System.Boolean)">
            <summary>
            <para>If <c>true</c>, the engine will generate wireframes for use with the wireframe debug mode.</para>
            </summary>
        </member>
        <member name="T:Godot.RenderingServer.FramePostDrawHandler">
            <summary>
            <para>Emitted at the end of the frame, after the RenderingServer has finished updating all the Viewports.</para>
            </summary>
        </member>
        <member name="T:Godot.RenderingServer.FramePreDrawHandler">
            <summary>
            <para>Emitted at the beginning of the frame, before the RenderingServer updates all the Viewports.</para>
            </summary>
        </member>
        <member name="T:Godot.Resource">
            <summary>
            <para>Resource is the base class for all Godot-specific resource types, serving primarily as data containers. Unlike <see cref="T:Godot.Object"/>s, they are reference-counted and freed when no longer in use. They are also cached once loaded from disk, so that any further attempts to load a resource from a given path will return the same reference (all this in contrast to a <see cref="T:Godot.Node"/>, which is not reference-counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a <see cref="T:Godot.Node"/> or another resource.</para>
            <para>Note: In C#, resources will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free resources that are no longer in use. This means that unused resources will linger on for a while before being removed.</para>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceLocalToScene">
            <summary>
            <para>If <c>true</c>, the resource will be made unique in each instance of its local scene. It can thus be modified in a scene instance without impacting other instances of that same scene.</para>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourcePath">
            <summary>
            <para>The path to the resource. In case it has its own file, it will return its filepath. If it's tied to the scene, it will return the scene's path, followed by the resource's index.</para>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceName">
            <summary>
            <para>The name of the resource. This is an optional identifier.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource._SetupLocalToScene">
            <summary>
            <para>Virtual function which can be overridden to customize the behavior value of <see cref="M:Godot.Resource.SetupLocalToScene"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.TakeOverPath(System.String)">
            <summary>
            <para>Sets the path of the resource, potentially overriding an existing cache entry for this path. This differs from setting <see cref="P:Godot.Resource.ResourcePath"/>, as the latter would error out if another resource was already cached for the given path.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.GetRid">
            <summary>
            <para>Returns the RID of the resource (or an empty RID). Many resources (such as <see cref="T:Godot.Texture2D"/>, <see cref="T:Godot.Mesh"/>, etc) are high-level abstractions of resources stored in a server, so this function will return the original RID.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.GetLocalScene">
            <summary>
            <para>If <see cref="P:Godot.Resource.ResourceLocalToScene"/> is enabled and the resource was loaded from a <see cref="T:Godot.PackedScene"/> instantiation, returns the local scene where this resource's unique copy is in use. Otherwise, returns <c>null</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.SetupLocalToScene">
            <summary>
            <para>This method is called when a resource with <see cref="P:Godot.Resource.ResourceLocalToScene"/> enabled is loaded from a <see cref="T:Godot.PackedScene"/> instantiation. Its behavior can be customized by overriding <see cref="M:Godot.Resource._SetupLocalToScene"/> from script.</para>
            <para>For most resources, this method performs no base logic. <see cref="T:Godot.ViewportTexture"/> performs custom logic to properly set the proxy texture and flags in the local viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Resource.Duplicate(System.Boolean)">
            <summary>
            <para>Duplicates the resource, returning a new resource. By default, sub-resources are shared between resource copies for efficiency. This can be changed by passing <c>true</c> to the <c>subresources</c> argument which will copy the subresources.</para>
            <para>Note: If <c>subresources</c> is <c>true</c>, this method will only perform a shallow copy. Nested resources within subresources will not be duplicated and will still be shared.</para>
            </summary>
        </member>
        <member name="T:Godot.Resource.ChangedHandler">
            <summary>
            <para>Emitted whenever the resource changes.</para>
            <para>Note: This signal is not emitted automatically for custom resources, which means that you need to create a setter and emit the signal yourself.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceFormatLoader">
            <summary>
            <para>Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the <see cref="T:Godot.ResourceLoader"/> singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.</para>
            <para>Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with <c>class_name</c> for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a <see cref="T:Godot.ResourceFormatSaver"/>.</para>
            <para>Note: You can also extend <see cref="!:Godot.EditorImportPlugin"/> if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. For example, it's better to import <c>.png</c> textures as <c>.stex</c> (<see cref="T:Godot.StreamTexture2D"/>) first, so they can be loaded with better efficiency on the graphics card.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetDependencies(System.String,System.String)">
            <summary>
            <para>If implemented, gets the dependencies of a given resource. If <c>add_types</c> is <c>true</c>, paths should be appended <c>::TypeName</c>, where <c>TypeName</c> is the class name of the dependency.</para>
            <para>Note: Custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just return <c>"Resource"</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetRecognizedExtensions">
            <summary>
            <para>Gets the list of extensions for files this loader is able to read.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.GetResourceType(System.String)">
            <summary>
            <para>Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return <c>""</c>.</para>
            <para>Note: Custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just return <c>"Resource"</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.HandlesType(Godot.StringName)">
            <summary>
            <para>Tells which resource class this loader can load.</para>
            <para>Note: Custom resource types defined by scripts aren't known by the <see cref="T:Godot.ClassDB"/>, so you might just handle <c>"Resource"</c> for them.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.Load(System.String,System.String)">
            <summary>
            <para>Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, <c>original_path</c> will target the source file. Returns a <see cref="T:Godot.Resource"/> object on success, or an <see cref="T:Godot.Error"/> constant in case of failure.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatLoader.RenameDependencies(System.String,System.String)">
            <summary>
            <para>If implemented, renames dependencies within the given resource and saves it. <c>renames</c> is a dictionary <c>{ String =&gt; String }</c> mapping old dependency paths to new paths.</para>
            <para>Returns  on success, or an <see cref="T:Godot.Error"/> constant in case of failure.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceFormatSaver">
            <summary>
            <para>The engine can save resources when you do it from the editor, or when you use the <see cref="T:Godot.ResourceSaver"/> singleton. This is accomplished thanks to multiple <see cref="T:Godot.ResourceFormatSaver"/>s, each handling its own format and called automatically by the engine.</para>
            <para>By default, Godot saves resources as <c>.tres</c> (text-based), <c>.res</c> (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with <c>class_name</c> for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a <see cref="T:Godot.ResourceFormatLoader"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.GetRecognizedExtensions(Godot.Resource)">
            <summary>
            <para>Returns the list of extensions available for saving the resource object, provided it is recognized (see <see cref="M:Godot.ResourceFormatSaver.Recognize(Godot.Resource)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.Recognize(Godot.Resource)">
            <summary>
            <para>Returns whether the given resource object can be saved by this saver.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceFormatSaver.Save(System.String,Godot.Resource,System.Int32)">
            <summary>
            <para>Saves the given resource object to a file at the target <c>path</c>. <c>flags</c> is a bitmask composed with <see cref="T:Godot.ResourceSaver.SaverFlags"/> constants.</para>
            <para>Returns  on success, or an <see cref="T:Godot.Error"/> constant in case of failure.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourcePreloader">
            <summary>
            <para>This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader.</para>
            <para>GDScript has a simplified <c>@GDScript.preload</c> built-in method which can be used in most situations, leaving the use of <see cref="T:Godot.ResourcePreloader"/> for more advanced scenarios.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.AddResource(Godot.StringName,Godot.Resource)">
            <summary>
            <para>Adds a resource to the preloader with the given <c>name</c>. If a resource with the given <c>name</c> already exists, the new resource will be renamed to "<c>name</c> N" where N is an incrementing number starting from 2.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RemoveResource(Godot.StringName)">
            <summary>
            <para>Removes the resource associated to <c>name</c> from the preloader.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RenameResource(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Renames a resource inside the preloader from <c>name</c> to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.HasResource(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the preloader contains a resource associated to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResource(Godot.StringName)">
            <summary>
            <para>Returns the resource associated to <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResourceList">
            <summary>
            <para>Returns the list of resources inside the preloader.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextEffect">
            <summary>
            <para>A custom effect for use with <see cref="T:Godot.RichTextLabel"/>.</para>
            <para>Note: For a <see cref="T:Godot.RichTextEffect"/> to be usable, a BBCode tag must be defined as a member variable called <c>bbcode</c> in the script.</para>
            <para><code>
            # The RichTextEffect will be usable like this: `[example]Some text[/example]`
            var bbcode = "example"
            </code></para>
            <para>Note: As soon as a <see cref="T:Godot.RichTextLabel"/> contains at least one <see cref="T:Godot.RichTextEffect"/>, it will continuously process the effect unless the project is paused. This may impact battery life negatively.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextEffect._ProcessCustomFx(Godot.CharFXTransform)">
            <summary>
            <para>Override this method to modify properties in <c>char_fx</c>. The method must return <c>true</c> if the character could be transformed successfully. If the method returns <c>false</c>, it will skip transformation to avoid displaying broken text.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel">
            <summary>
            <para>Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.</para>
            <para>Note: Assignments to <see cref="P:Godot.RichTextLabel.BbcodeText"/> clear the tag stack and reconstruct it from the property's contents. Any edits made to <see cref="P:Godot.RichTextLabel.BbcodeText"/> will erase previous edits made from other manual sources such as <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/> and the <c>push_*</c> / <see cref="M:Godot.RichTextLabel.Pop"/> methods.</para>
            <para>Note: RichTextLabel doesn't support entangled BBCode tags. For example, instead of using <c>[b]bold[i]bold italic[/b]italic[/i]</c>, use <c>[b]bold[i]bold italic[/i][/b][i]italic[/i]</c>.</para>
            <para>Note: Unlike <see cref="T:Godot.Label"/>, RichTextLabel doesn't have a property to horizontally align text to the center. Instead, enable <see cref="P:Godot.RichTextLabel.BbcodeEnabled"/> and surround the text in a <c>[center]</c> tag as follows: <c>[center]Example[/center]</c>. There is currently no built-in way to vertically align text either, but this can be emulated by relying on anchors/containers and the <see cref="P:Godot.RichTextLabel.FitContentHeight"/> property.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Left">
            <summary>
            <para>Makes text left aligned.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Center">
            <summary>
            <para>Makes text centered.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Right">
            <summary>
            <para>Makes text right aligned.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.Align.Fill">
            <summary>
            <para>Makes text fill width.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Numbers">
            <summary>
            <para>Each list item has a number marker.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Letters">
            <summary>
            <para>Each list item has a letter marker.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Roman">
            <summary>
            <para>Each list item has a roman number marker.</para>
            </summary>
        </member>
        <member name="F:Godot.RichTextLabel.ListType.Dots">
            <summary>
            <para>Each list item has a filled circle marker.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeEnabled">
            <summary>
            <para>If <c>true</c>, the label uses BBCode formatting.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeText">
            <summary>
            <para>The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.</para>
            <para>Note: It is unadvised to use the <c>+=</c> operator with <c>bbcode_text</c> (e.g. <c>bbcode_text += "some string"</c>) as it replaces the whole text and can cause slowdowns. Use <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/> for adding text instead, unless you absolutely need to close a tag that was opened in an earlier method call.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.VisibleCharacters">
            <summary>
            <para>The restricted number of characters to display in the label. If <c>-1</c>, all characters will be displayed.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.PercentVisible">
            <summary>
            <para>The range of characters to display, as a <see cref="T:System.Single"/> between 0.0 and 1.0. When assigned an out of range value, it's the same as assigning 1.0.</para>
            <para>Note: Setting this property updates <see cref="P:Godot.RichTextLabel.VisibleCharacters"/> based on current <see cref="M:Godot.RichTextLabel.GetTotalCharacterCount"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.MetaUnderlined">
            <summary>
            <para>If <c>true</c>, the label underlines meta tags such as <c>[url]{text}[/url]</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.TabSize">
            <summary>
            <para>The number of spaces associated with a single tab length. Does not affect <c>\t</c> in text tags, only indent tags.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.Text">
            <summary>
            <para>The raw text of the label.</para>
            <para>When set, clears the tag stack and adds a raw text tag to the top of it. Does not parse BBCodes. Does not modify <see cref="P:Godot.RichTextLabel.BbcodeText"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.FitContentHeight">
            <summary>
            <para>If <c>true</c>, the label's height will be automatically updated to fit its content.</para>
            <para>Note: This property is used as a workaround to fix issues with <see cref="T:Godot.RichTextLabel"/> in <see cref="T:Godot.Container"/>s, but it's unreliable in some cases and will be removed in future versions.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollActive">
            <summary>
            <para>If <c>true</c>, the scrollbar is visible. Setting this to <c>false</c> does not block scrolling completely. See <see cref="M:Godot.RichTextLabel.ScrollToLine(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollFollowing">
            <summary>
            <para>If <c>true</c>, the window scrolls down to display new content automatically.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.SelectionEnabled">
            <summary>
            <para>If <c>true</c>, the label allows text selection.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.OverrideSelectedFontColor">
            <summary>
            <para>If <c>true</c>, the label uses the custom font color.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.CustomEffects">
            <summary>
            <para>The currently installed custom effects. This is an array of <see cref="T:Godot.RichTextEffect"/>s.</para>
            <para>To add a custom effect, it's more convenient to use <see cref="M:Godot.RichTextLabel.InstallEffect(System.Object)"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.StructuredTextBidiOverride">
            <summary>
            <para>Set BiDi algorithm override for the structured text.</para>
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.StructuredTextBidiOverrideOptions">
            <summary>
            <para>Set additional options for BiDi override.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddText(System.String)">
            <summary>
            <para>Adds raw non-BBCode-parsed text to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddImage(Godot.Texture2D,System.Int32,System.Int32,System.Nullable{Godot.Color},Godot.VAlign)">
            <summary>
            <para>Adds an image's opening and closing tags to the tag stack, optionally providing a <c>width</c> and <c>height</c> to resize the image and a <c>color</c> to tint the image.</para>
            <para>If <c>width</c> or <c>height</c> is set to 0, the image size will be adjusted in order to keep the original aspect ratio.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.RichTextLabel.Newline">
            <summary>
            <para>Adds a newline tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.RemoveLine(System.Int32)">
            <summary>
            <para>Removes a line of content from the label. Returns <c>true</c> if the line exists.</para>
            <para>The <c>line</c> argument is the index of the line to remove, it can take values in the interval <c>[0, get_line_count() - 1]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushFont(Godot.Font)">
            <summary>
            <para>Adds a <c>[font]</c> tag to the tag stack. Overrides default fonts for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushFontSize(System.Int32)">
            <summary>
            <para>Adds a <c>[font_size]</c> tag to the tag stack. Overrides default font size for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushFontFeatures(Godot.Collections.Dictionary)">
            <summary>
            <para>Adds a <c>[ot_feature]</c> tag to the tag stack. Overrides default OpenType font feature for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushNormal">
            <summary>
            <para>Adds a <c>[font]</c> tag with a normal font to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushBold">
            <summary>
            <para>Adds a <c>[font]</c> tag with a bold font to the tag stack. This is the same as adding a <c>[b]</c> tag if not currently in a <c>[i]</c> tag.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushBoldItalics">
            <summary>
            <para>Adds a <c>[font]</c> tag with a bold italics font to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushItalics">
            <summary>
            <para>Adds a <c>[font]</c> tag with a italics font to the tag stack. This is the same as adding a <c>[i]</c> tag if not currently in a <c>[b]</c> tag.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushMono">
            <summary>
            <para>Adds a <c>[font]</c> tag with a monospace font to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushColor(Godot.Color)">
            <summary>
            <para>Adds a <c>[color]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushOutlineSize(System.Int32)">
            <summary>
            <para>Adds a <c>[outline_size]</c> tag to the tag stack. Overrides default text outline size for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushOutlineColor(Godot.Color)">
            <summary>
            <para>Adds a <c>[outline_color]</c> tag to the tag stack. Adds text outline for its duration.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushParagraph(Godot.RichTextLabel.Align,Godot.Control.TextDirection,System.String,Godot.Control.StructuredTextParser)">
            <summary>
            <para>Adds a <c>[p]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushIndent(System.Int32)">
            <summary>
            <para>Adds an <c>[indent]</c> tag to the tag stack. Multiplies <c>level</c> by current <see cref="P:Godot.RichTextLabel.TabSize"/> to determine new margin length.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushList(System.Int32,Godot.RichTextLabel.ListType,System.Boolean)">
            <summary>
            <para>Adds <c>[ol]</c> or <c>[ul]</c> tag to the tag stack. Multiplies <c>level</c> by current <see cref="P:Godot.RichTextLabel.TabSize"/> to determine new margin length.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushMeta(System.Object)">
            <summary>
            <para>Adds a <c>[meta]</c> tag to the tag stack. Similar to the BBCode <c>[url=something]{text}[/url]</c>, but supports non-<see cref="T:System.String"/> metadata types.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushUnderline">
            <summary>
            <para>Adds a <c>[u]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushStrikethrough">
            <summary>
            <para>Adds a <c>[s]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushTable(System.Int32,Godot.VAlign)">
            <summary>
            <para>Adds a <c>[table=columns,inline_align]</c> tag to the tag stack.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushDropcap(System.String,Godot.Font,System.Int32,System.Nullable{Godot.Rect2},System.Nullable{Godot.Color},System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Adds a <c>[dropcap]</c> tag to the tag stack. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.</para>
            </summary>
            <param name="dropcapMargins">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="outlineColor">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.RichTextLabel.SetTableColumnExpand(System.Int32,System.Boolean,System.Int32)">
            <summary>
            <para>Edits the selected column's expansion options. If <c>expand</c> is <c>true</c>, the column expands in proportion to its expansion ratio versus the other columns' ratios.</para>
            <para>For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.</para>
            <para>If <c>expand</c> is <c>false</c>, the column will not contribute to the total ratio.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetCellRowBackgroundColor(Godot.Color,Godot.Color)">
            <summary>
            <para>Sets color of a table cell. Separate colors for alternating rows can be specified.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetCellBorderColor(Godot.Color)">
            <summary>
            <para>Sets color of a table cell border.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetCellSizeOverride(Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Sets minimum and maximum size overrides for a table cell.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetCellPadding(Godot.Rect2)">
            <summary>
            <para>Sets inner padding of a table cell.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushCell">
            <summary>
            <para>Adds a <c>[cell]</c> tag to the tag stack. Must be inside a <c>[table]</c> tag. See <see cref="M:Godot.RichTextLabel.PushTable(System.Int32,Godot.VAlign)"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Pop">
            <summary>
            <para>Terminates the current tag. Use after <c>push_*</c> methods to close BBCodes manually. Does not need to follow <c>add_*</c> methods.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Clear">
            <summary>
            <para>Clears the tag stack and sets <see cref="P:Godot.RichTextLabel.BbcodeText"/> to an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVScroll">
            <summary>
            <para>Returns the vertical scrollbar.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ScrollToLine(System.Int32)">
            <summary>
            <para>Scrolls the window's top line to match <c>line</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ParseBbcode(System.String)">
            <summary>
            <para>The assignment version of <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/>. Clears the tag stack and inserts the new content. Returns  if parses <c>bbcode</c> successfully.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AppendBbcode(System.String)">
            <summary>
            <para>Parses <c>bbcode</c> and adds tags to the tag stack as needed. Returns the result of the parsing,  if successful.</para>
            <para>Note: Using this method, you can't close a tag that was opened in a previous <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/> call. This is done to improve performance, especially when updating large RichTextLabels since rebuilding the whole BBCode every time would be slower. If you absolutely need to close a tag in a future method call, append the <see cref="P:Godot.RichTextLabel.BbcodeText"/> instead of using <see cref="M:Godot.RichTextLabel.AppendBbcode(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetTotalCharacterCount">
            <summary>
            <para>Returns the total number of characters from text tags. Does not include BBCodes.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetLineCount">
            <summary>
            <para>Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVisibleLineCount">
            <summary>
            <para>Returns the number of visible lines.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetContentHeight">
            <summary>
            <para>Returns the height of the content.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ParseExpressionsForValues(System.String[])">
            <summary>
            <para>Parses BBCode parameter <c>expressions</c> into a dictionary.</para>
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.InstallEffect(System.Object)">
            <summary>
            <para>Installs a custom effect. <c>effect</c> should be a valid <see cref="T:Godot.RichTextEffect"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel.MetaClickedHandler">
            <summary>
            <para>Triggered when the user clicks on content between meta tags. If the meta is defined in text, e.g. <c>[url={"data"="hi"}]hi[/url]</c>, then the parameter for this signal will be a <see cref="T:System.String"/> type. If a particular type or an object is desired, the <see cref="M:Godot.RichTextLabel.PushMeta(System.Object)"/> method must be used to manually insert the data into the tag stack.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel.MetaHoverStartedHandler">
            <summary>
            <para>Triggers when the mouse enters a meta tag.</para>
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel.MetaHoverEndedHandler">
            <summary>
            <para>Triggers when the mouse exits a meta tag.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D">
            <summary>
            <para>This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.</para>
            <para>A RigidBody2D has 4 behavior <see cref="P:Godot.RigidBody2D.Mode"/>s: Rigid, Static, Character, and Kinematic.</para>
            <para>Note: You should not change a RigidBody2D's <c>position</c> or <c>linear_velocity</c> every frame or even very often. If you need to directly affect the body's state, use <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.PhysicsDirectBodyState2D)"/>, which allows you to directly access the physics state.</para>
            <para>Please also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.</para>
            <para>If you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See <see cref="P:Godot.RigidBody2D.CustomIntegrator"/>.</para>
            <para>The center of mass is always located at the node's origin without taking into account the <see cref="T:Godot.CollisionShape2D"/> centroid offsets.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Rigid">
            <summary>
            <para>Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Static">
            <summary>
            <para>Static mode. The body behaves like a <see cref="T:Godot.StaticBody2D"/> and does not move.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Character">
            <summary>
            <para>Character mode. Similar to , but the body can not rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.ModeEnum.Kinematic">
            <summary>
            <para>Kinematic mode. The body behaves like a <see cref="T:Godot.KinematicBody2D"/>, and must be moved by code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.Disabled">
            <summary>
            <para>Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.CastRay">
            <summary>
            <para>Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody2D.CCDMode.CastShape">
            <summary>
            <para>Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mode">
            <summary>
            <para>The body's mode. See <see cref="T:Godot.RigidBody2D.ModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mass">
            <summary>
            <para>The body's mass.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Inertia">
            <summary>
            <para>The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 inertia to return to automatically computing it.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.PhysicsMaterialOverride">
            <summary>
            <para>The physics material override for the body.</para>
            <para>If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.GravityScale">
            <summary>
            <para>Multiplies the gravity applied to the body. The body's gravity is calculated from the Default Gravity value in Project &gt; Project Settings &gt; Physics &gt; 2d and/or any additional gravity vector applied by <see cref="T:Godot.Area2D"/>s.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CustomIntegrator">
            <summary>
            <para>If <c>true</c>, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the <see cref="M:Godot.RigidBody2D._IntegrateForces(Godot.PhysicsDirectBodyState2D)"/> function.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContinuousCd">
            <summary>
            <para>Continuous collision detection mode.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See <see cref="T:Godot.RigidBody2D.CCDMode"/> for details.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactsReported">
            <summary>
            <para>The maximum number of contacts that will be recorded. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c>.</para>
            <para>Note: The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end).</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactMonitor">
            <summary>
            <para>If <c>true</c>, the body will emit signals when it collides with another RigidBody2D. See also <see cref="P:Godot.RigidBody2D.ContactsReported"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Sleeping">
            <summary>
            <para>If <c>true</c>, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the <see cref="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,System.Nullable{Godot.Vector2})"/> or <see cref="M:Godot.RigidBody2D.AddForce(Godot.Vector2,System.Nullable{Godot.Vector2})"/> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CanSleep">
            <summary>
            <para>If <c>true</c>, the body can enter sleep mode when there is no movement. See <see cref="P:Godot.RigidBody2D.Sleeping"/>.</para>
            <para>Note: A RigidBody2D will never enter sleep mode automatically if its <see cref="P:Godot.RigidBody2D.Mode"/> is . It can still be put to sleep manually by setting its <see cref="P:Godot.RigidBody2D.Sleeping"/> property to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearVelocity">
            <summary>
            <para>The body's linear velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearDamp">
            <summary>
            <para>Damps the body's <see cref="P:Godot.RigidBody2D.LinearVelocity"/>. If <c>-1</c>, the body will use the Default Linear Damp in Project &gt; Project Settings &gt; Physics &gt; 2d.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularVelocity">
            <summary>
            <para>The body's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularDamp">
            <summary>
            <para>Damps the body's <see cref="P:Godot.RigidBody2D.AngularVelocity"/>. If <c>-1</c>, the body will use the Default Angular Damp defined in Project &gt; Project Settings &gt; Physics &gt; 2d.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedForce">
            <summary>
            <para>The body's total applied force.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedTorque">
            <summary>
            <para>The body's total applied torque.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D._IntegrateForces(Godot.PhysicsDirectBodyState2D)">
            <summary>
            <para>Allows you to read and safely modify the simulation state for the object. Use this instead of <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> if you need to directly change the body's <c>position</c> or other physics properties. By default, it works in addition to the usual physics behavior, but <see cref="P:Godot.RigidBody2D.CustomIntegrator"/> allows you to disable the default behavior and write custom force integration for a body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.SetAxisVelocity(Godot.Vector2)">
            <summary>
            <para>Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyCentralImpulse(System.Nullable{Godot.Vector2})">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            </summary>
            <param name="impulse">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyTorqueImpulse(System.Single)">
            <summary>
            <para>Applies a rotational impulse to the body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddCentralForce(Godot.Vector2)">
            <summary>
            <para>Adds a constant directional force without affecting rotation.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddForce(Godot.Vector2,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.RigidBody2D.AddTorque(System.Single)">
            <summary>
            <para>Adds a constant rotational force.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.TestMotion(Godot.Vector2,System.Boolean,System.Single,Godot.PhysicsTestMotionResult2D)">
            <summary>
            <para>Returns <c>true</c> if a collision would result from moving in the given vector. <c>margin</c> increases the size of the shapes involved in the collision detection, and <c>result</c> is an object of type <see cref="T:Godot.PhysicsTestMotionResult2D"/>, which contains additional information about the collision (should there be one).</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.GetCollidingBodies">
            <summary>
            <para>Returns a list of the bodies colliding with this one. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody2D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D.BodyEnteredHandler">
            <summary>
            <para>Emitted when a body enters into contact with this one. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody2D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D.BodyShapeEnteredHandler">
            <summary>
            <para>Emitted when a body enters into contact with this one. Reports colliding shape information. See <see cref="T:Godot.CollisionObject2D"/> for shape index information. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody2D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D.SleepingStateChangedHandler">
            <summary>
            <para>Emitted when the physics engine changes the body's sleeping state.</para>
            <para>Note: Changing the value <see cref="P:Godot.RigidBody2D.Sleeping"/> will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or <c>emit_signal("sleeping_state_changed")</c> is used.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D.BodyExitedHandler">
            <summary>
            <para>Emitted when a body exits contact with this one. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody2D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D.BodyShapeExitedHandler">
            <summary>
            <para>Emitted when a body shape exits contact with this one. Reports colliding shape information. See <see cref="T:Godot.CollisionObject2D"/> for shape index information. Requires <see cref="P:Godot.RigidBody2D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody2D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D">
            <summary>
            <para>This is the node that implements full 3D physics. This means that you do not control a RigidBody3D directly. Instead, you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.</para>
            <para>A RigidBody3D has 4 behavior <see cref="P:Godot.RigidBody3D.Mode"/>s: Rigid, Static, Character, and Kinematic.</para>
            <para>Note: Don't change a RigidBody3D's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed Hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop may result in strange behavior. If you need to directly affect the body's state, use <see cref="M:Godot.RigidBody3D._IntegrateForces(Godot.PhysicsDirectBodyState3D)"/>, which allows you to directly access the physics state.</para>
            <para>If you need to override the default physics behavior, you can write a custom force integration function. See <see cref="P:Godot.RigidBody3D.CustomIntegrator"/>.</para>
            <para>With Bullet physics (the default), the center of mass is the RigidBody3D center. With GodotPhysics, the center of mass is the average of the <see cref="T:Godot.CollisionShape3D"/> centers.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody3D.ModeEnum.Rigid">
            <summary>
            <para>Rigid body mode. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody3D.ModeEnum.Static">
            <summary>
            <para>Static mode. The body behaves like a <see cref="T:Godot.StaticBody3D"/>, and can only move by user code.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody3D.ModeEnum.Character">
            <summary>
            <para>Character body mode. This behaves like a rigid body, but can not rotate.</para>
            </summary>
        </member>
        <member name="F:Godot.RigidBody3D.ModeEnum.Kinematic">
            <summary>
            <para>Kinematic body mode. The body behaves like a <see cref="T:Godot.KinematicBody3D"/>, and can only move by user code.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.Mode">
            <summary>
            <para>The body mode. See <see cref="T:Godot.RigidBody3D.ModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.Mass">
            <summary>
            <para>The body's mass.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.PhysicsMaterialOverride">
            <summary>
            <para>The physics material override for the body.</para>
            <para>If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.GravityScale">
            <summary>
            <para>This is multiplied by the global 3D gravity setting found in Project &gt; Project Settings &gt; Physics &gt; 3d to produce RigidBody3D's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.CustomIntegrator">
            <summary>
            <para>If <c>true</c>, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the <see cref="M:Godot.RigidBody3D._IntegrateForces(Godot.PhysicsDirectBodyState3D)"/> function, if defined.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.ContinuousCd">
            <summary>
            <para>If <c>true</c>, continuous collision detection is used.</para>
            <para>Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses fewer impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.ContactsReported">
            <summary>
            <para>The maximum number of contacts that will be recorded. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c>.</para>
            <para>Note: The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner).</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.ContactMonitor">
            <summary>
            <para>If <c>true</c>, the RigidBody3D will emit signals when it collides with another RigidBody3D. See also <see cref="P:Godot.RigidBody3D.ContactsReported"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.Sleeping">
            <summary>
            <para>If <c>true</c>, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the <see cref="M:Godot.RigidBody3D.ApplyImpulse(Godot.Vector3,System.Nullable{Godot.Vector3})"/> or <see cref="M:Godot.RigidBody3D.AddForce(Godot.Vector3,System.Nullable{Godot.Vector3})"/> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.CanSleep">
            <summary>
            <para>If <c>true</c>, the body can enter sleep mode when there is no movement. See <see cref="P:Godot.RigidBody3D.Sleeping"/>.</para>
            <para>Note: A RigidBody3D will never enter sleep mode automatically if its <see cref="P:Godot.RigidBody3D.Mode"/> is . It can still be put to sleep manually by setting its <see cref="P:Godot.RigidBody3D.Sleeping"/> property to <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockLinearX">
            <summary>
            <para>Lock the body's movement in the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockLinearY">
            <summary>
            <para>Lock the body's movement in the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockLinearZ">
            <summary>
            <para>Lock the body's movement in the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockAngularX">
            <summary>
            <para>Lock the body's rotation in the X axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockAngularY">
            <summary>
            <para>Lock the body's rotation in the Y axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AxisLockAngularZ">
            <summary>
            <para>Lock the body's rotation in the Z axis.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.LinearVelocity">
            <summary>
            <para>The body's linear velocity. Can be used sporadically, but don't set this every frame, because physics may run in another thread and runs at a different granularity. Use <see cref="M:Godot.RigidBody3D._IntegrateForces(Godot.PhysicsDirectBodyState3D)"/> as your process loop for precise control of the body state.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.LinearDamp">
            <summary>
            <para>The body's linear damp. Cannot be less than -1.0. If this value is different from -1.0, any linear damp derived from the world or areas will be overridden.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AngularVelocity">
            <summary>
            <para>RigidBody3D's rotational velocity.</para>
            </summary>
        </member>
        <member name="P:Godot.RigidBody3D.AngularDamp">
            <summary>
            <para>Damps RigidBody3D's rotational forces.</para>
            <para>See  for more details about damping.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D._IntegrateForces(Godot.PhysicsDirectBodyState3D)">
            <summary>
            <para>Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the <see cref="P:Godot.RigidBody3D.CustomIntegrator"/> property allows you to disable the default behavior and do fully custom force integration for a body.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.GetInverseInertiaTensor">
            <summary>
            <para>Returns the inverse inertia tensor basis. This is used to calculate the angular acceleration resulting from a torque applied to the <see cref="T:Godot.RigidBody3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.SetAxisVelocity(Godot.Vector3)">
            <summary>
            <para>Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.AddCentralForce(Godot.Vector3)">
            <summary>
            <para>Adds a constant directional force (i.e. acceleration) without affecting rotation.</para>
            <para>This is equivalent to <c>add_force(force, Vector3(0,0,0))</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.AddForce(Godot.Vector3,System.Nullable{Godot.Vector3})">
            <summary>
            <para>Adds a constant directional force (i.e. acceleration).</para>
            <para>The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.RigidBody3D.AddTorque(Godot.Vector3)">
            <summary>
            <para>Adds a constant rotational force (i.e. a motor) without affecting position.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.ApplyCentralImpulse(Godot.Vector3)">
            <summary>
            <para>Applies a directional impulse without affecting rotation.</para>
            <para>This is equivalent to <c>apply_impulse(Vector3(0,0,0), impulse)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.ApplyImpulse(Godot.Vector3,System.Nullable{Godot.Vector3})">
            <summary>
            <para>Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector3(0, 0, 0)</param>
        </member>
        <member name="M:Godot.RigidBody3D.ApplyTorqueImpulse(Godot.Vector3)">
            <summary>
            <para>Applies a torque impulse which will be affected by the body mass and shape. This will rotate the body around the <c>impulse</c> vector passed.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.SetAxisLock(Godot.PhysicsServer3D.BodyAxis,System.Boolean)">
            <summary>
            <para>Locks the specified linear or rotational axis.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.GetAxisLock(Godot.PhysicsServer3D.BodyAxis)">
            <summary>
            <para>Returns <c>true</c> if the specified linear or rotational axis is locked.</para>
            </summary>
        </member>
        <member name="M:Godot.RigidBody3D.GetCollidingBodies">
            <summary>
            <para>Returns a list of the bodies colliding with this one. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody3D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            <para>Note: The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D.BodyEnteredHandler">
            <summary>
            <para>Emitted when a body enters into contact with this one. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody3D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D.BodyShapeEnteredHandler">
            <summary>
            <para>Emitted when a body enters into contact with this one. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody3D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            <para>This signal not only receives the body that collided with this one, but also its <see cref="T:Godot.RID"/> (<c>body_id</c>), the shape index from the colliding body (<c>body_shape</c>), and the shape index from this body (<c>local_shape</c>) the other body collided with.</para>
            <para>Note: Bullet physics cannot identify the shape index when using a <see cref="T:Godot.ConcavePolygonShape3D"/>. Don't use multiple <see cref="T:Godot.CollisionShape3D"/>s when using a <see cref="T:Godot.ConcavePolygonShape3D"/> with Bullet physics if you need shape indices.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D.SleepingStateChangedHandler">
            <summary>
            <para>Emitted when the physics engine changes the body's sleeping state.</para>
            <para>Note: Changing the value <see cref="P:Godot.RigidBody3D.Sleeping"/> will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or <c>emit_signal("sleeping_state_changed")</c> is used.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D.BodyExitedHandler">
            <summary>
            <para>Emitted when a body shape exits contact with this one. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody3D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.RigidBody3D.BodyShapeExitedHandler">
            <summary>
            <para>Emitted when a body shape exits contact with this one. Requires <see cref="P:Godot.RigidBody3D.ContactMonitor"/> to be set to <c>true</c> and <see cref="P:Godot.RigidBody3D.ContactsReported"/> to be set high enough to detect all the collisions.</para>
            <para>This signal not only receives the body that stopped colliding with this one, but also its <see cref="T:Godot.RID"/> (<c>body_id</c>), the shape index from the colliding body (<c>body_shape</c>), and the shape index from this body (<c>local_shape</c>) the other body stopped colliding with.</para>
            <para>Note: Bullet physics cannot identify the shape index when using a <see cref="T:Godot.ConcavePolygonShape3D"/>. Don't use multiple <see cref="T:Godot.CollisionShape3D"/>s when using a <see cref="T:Godot.ConcavePolygonShape3D"/> with Bullet physics if you need shape indices.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneState">
            <summary>
            <para>Maintains a list of resources, nodes, exported, and overridden properties, and built-in scripts associated with a scene.</para>
            <para>This class cannot be instantiated directly, it is retrieved for a given scene as the result of <see cref="M:Godot.PackedScene.GetState"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Disabled">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, blocks edits to the scene state.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Instance">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides inherited scene resources to the local scene.</para>
            <para>Note: Only available in editor builds.</para>
            </summary>
        </member>
        <member name="F:Godot.SceneState.GenEditState.Main">
            <summary>
            <para>If passed to <see cref="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)"/>, provides local scene resources to the local scene. Only the main scene should receive the main edit state.</para>
            <para>Note: Only available in editor builds.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeCount">
            <summary>
            <para>Returns the number of nodes in the scene.</para>
            <para>The <c>idx</c> argument used to query node data in other <c>get_node_*</c> methods in the interval <c>[0, get_node_count() - 1]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeType(System.Int32)">
            <summary>
            <para>Returns the type of the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeName(System.Int32)">
            <summary>
            <para>Returns the name of the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePath(System.Int32,System.Boolean)">
            <summary>
            <para>Returns the path to the node at <c>idx</c>.</para>
            <para>If <c>for_parent</c> is <c>true</c>, returns the path of the <c>idx</c> node's parent instead.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeOwnerPath(System.Int32)">
            <summary>
            <para>Returns the path to the owner of the node at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.IsNodeInstancePlaceholder(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the node at <c>idx</c> is an <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstancePlaceholder(System.Int32)">
            <summary>
            <para>Returns the path to the represented scene file if the node at <c>idx</c> is an <see cref="T:Godot.InstancePlaceholder"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstance(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.PackedScene"/> for the node at <c>idx</c> (i.e. the whole branch starting at this node, with its child nodes and resources), or <c>null</c> if the node is not an instance.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeGroups(System.Int32)">
            <summary>
            <para>Returns the list of group names associated with the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeIndex(System.Int32)">
            <summary>
            <para>Returns the node's index, which is its position relative to its siblings. This is only relevant and saved in scenes for cases where new nodes are added to an instanced or inherited scene among siblings from the base scene. Despite the name, this index is not related to the <c>idx</c> argument used here and in other methods.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyCount(System.Int32)">
            <summary>
            <para>Returns the number of exported or overridden properties for the node at <c>idx</c>.</para>
            <para>The <c>prop_idx</c> argument used to query node property data in other <c>get_node_property_*</c> methods in the interval <c>[0, get_node_property_count() - 1]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyName(System.Int32,System.Int32)">
            <summary>
            <para>Returns the name of the property at <c>prop_idx</c> for the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyValue(System.Int32,System.Int32)">
            <summary>
            <para>Returns the value of the property at <c>prop_idx</c> for the node at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionCount">
            <summary>
            <para>Returns the number of signal connections in the scene.</para>
            <para>The <c>idx</c> argument used to query connection metadata in other <c>get_connection_*</c> methods in the interval <c>[0, get_connection_count() - 1]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSource(System.Int32)">
            <summary>
            <para>Returns the path to the node that owns the signal at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSignal(System.Int32)">
            <summary>
            <para>Returns the name of the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionTarget(System.Int32)">
            <summary>
            <para>Returns the path to the node that owns the method connected to the signal at <c>idx</c>, relative to the root node.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionMethod(System.Int32)">
            <summary>
            <para>Returns the method connected to the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionFlags(System.Int32)">
            <summary>
            <para>Returns the connection flags for the signal at <c>idx</c>. See <see cref="T:Godot.Object.ConnectFlags"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionBinds(System.Int32)">
            <summary>
            <para>Returns the list of bound parameters for the signal at <c>idx</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTreeTimer">
            <summary>
            <para>A one-shot timer managed by the scene tree, which emits <c>timeout</c> on completion. See also <see cref="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)"/>.</para>
            <para>As opposed to <see cref="T:Godot.Timer"/>, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:</para>
            <para><code>
            func some_function():
                print("Timer started.")
                yield(get_tree().create_timer(1.0), "timeout")
                print("Timer ended.")
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.SceneTreeTimer.TimeLeft">
            <summary>
            <para>The time remaining.</para>
            </summary>
        </member>
        <member name="T:Godot.SceneTreeTimer.TimeoutHandler">
            <summary>
            <para>Emitted when the timer reaches 0.</para>
            </summary>
        </member>
        <member name="T:Godot.Script">
            <summary>
            <para>A class stored as a resource. A script extends the functionality of all objects that instance it.</para>
            <para>The <c>new</c> method of a script subclass creates a new instance. <see cref="M:Godot.Object.SetScript(System.Object)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            </summary>
        </member>
        <member name="P:Godot.Script.SourceCode">
            <summary>
            <para>The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.CanInstance">
            <summary>
            <para>Returns <c>true</c> if the script can be instanced.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.InstanceHas(Godot.Object)">
            <summary>
            <para>Returns <c>true</c> if <c>base_object</c> is an instance of this script.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.HasSourceCode">
            <summary>
            <para>Returns <c>true</c> if the script contains non-empty source code.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.Reload(System.Boolean)">
            <summary>
            <para>Reloads the script's class implementation. Returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetBaseScript">
            <summary>
            <para>Returns the script directly inherited by this script.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetInstanceBaseType">
            <summary>
            <para>Returns the script's base type.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.HasScriptSignal(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the script, or a base class, defines a signal with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetScriptPropertyList">
            <summary>
            <para>Returns the list of properties in this <see cref="T:Godot.Script"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetScriptMethodList">
            <summary>
            <para>Returns the list of methods in this <see cref="T:Godot.Script"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetScriptSignalList">
            <summary>
            <para>Returns the list of user signals defined in this <see cref="T:Godot.Script"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetScriptConstantMap">
            <summary>
            <para>Returns a dictionary containing constant names and their values.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.GetPropertyDefaultValue(Godot.StringName)">
            <summary>
            <para>Returns the default value of the specified property.</para>
            </summary>
        </member>
        <member name="M:Godot.Script.IsTool">
            <summary>
            <para>Returns <c>true</c> if the script is a tool script. A tool script can run in the editor.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollBar">
            <summary>
            <para>Scrollbars are a <see cref="T:Godot.Range"/>-based <see cref="T:Godot.Control"/>, that display a draggable area (the size of the page). Horizontal (<see cref="T:Godot.HScrollBar"/>) and Vertical (<see cref="T:Godot.VScrollBar"/>) versions are available.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollBar.CustomStep">
            <summary>
            <para>Overrides the step used when clicking increment and decrement buttons or when using arrow keys when the <see cref="T:Godot.ScrollBar"/> is focused.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollBar.ScrollingHandler">
            <summary>
            <para>Emitted when the scrollbar is being scrolled.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollContainer">
            <summary>
            <para>A ScrollContainer node meant to contain a <see cref="T:Godot.Control"/> child.</para>
            <para>ScrollContainers will automatically create a scrollbar child (<see cref="T:Godot.HScrollBar"/>, <see cref="T:Godot.VScrollBar"/>, or both) when needed and will only draw the Control within the ScrollContainer area. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the <see cref="P:Godot.Control.RectMinSize"/> of the Control relative to the ScrollContainer.</para>
            <para>Works great with a <see cref="T:Godot.Panel"/> control. You can set <c>EXPAND</c> on the children's size flags, so they will upscale to the ScrollContainer's size if it's larger (scroll is invisible for the chosen dimension).</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.FollowFocus">
            <summary>
            <para>If <c>true</c>, the ScrollContainer will automatically scroll to focused children (including indirect children) to make sure they are fully visible.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontalEnabled">
            <summary>
            <para>If <c>true</c>, enables horizontal scrolling.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontal">
            <summary>
            <para>The current horizontal scroll value.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVerticalEnabled">
            <summary>
            <para>If <c>true</c>, enables vertical scrolling.</para>
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVertical">
            <summary>
            <para>The current vertical scroll value.</para>
            </summary>
        </member>
        <member name="M:Godot.ScrollContainer.GetHScrollbar">
            <summary>
            <para>Returns the horizontal scrollbar <see cref="T:Godot.HScrollBar"/> of this <see cref="T:Godot.ScrollContainer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ScrollContainer.GetVScrollbar">
            <summary>
            <para>Returns the vertical scrollbar <see cref="T:Godot.VScrollBar"/> of this <see cref="T:Godot.ScrollContainer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollContainer.ScrollStartedHandler">
            <summary>
            <para>Emitted when scrolling is started.</para>
            </summary>
        </member>
        <member name="T:Godot.ScrollContainer.ScrollEndedHandler">
            <summary>
            <para>Emitted when scrolling stops.</para>
            </summary>
        </member>
        <member name="T:Godot.SegmentShape2D">
            <summary>
            <para>Segment shape for 2D collisions. Consists of two points, <c>a</c> and <c>b</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.A">
            <summary>
            <para>The segment's first point position.</para>
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.B">
            <summary>
            <para>The segment's second point position.</para>
            </summary>
        </member>
        <member name="T:Godot.Separator">
            <summary>
            <para>Separator is a <see cref="T:Godot.Control"/> used for separating other controls. It's purely a visual decoration. Horizontal (<see cref="T:Godot.HSeparator"/>) and Vertical (<see cref="T:Godot.VSeparator"/>) versions are available.</para>
            </summary>
        </member>
        <member name="T:Godot.Shader">
            <summary>
            <para>This class allows you to define a custom shader program that can be used by a <see cref="T:Godot.ShaderMaterial"/>. Shaders allow you to write your own custom behavior for rendering objects or updating particle information. For a detailed explanation and usage, please see the tutorials linked below.</para>
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.Spatial">
            <summary>
            <para>Mode used to draw all 3D objects.</para>
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.CanvasItem">
            <summary>
            <para>Mode used to draw all 2D objects.</para>
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.Particles">
            <summary>
            <para>Mode used to calculate particle information on a per-particle basis. Not used for drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.Shader.Mode.Sky">
            <summary>
            <para>Mode used for drawing skies. Only works with shaders attached to <see cref="T:Godot.Sky"/> objects.</para>
            </summary>
        </member>
        <member name="P:Godot.Shader.Code">
            <summary>
            <para>Returns the shader's code as the user has written it, not the full generated code used internally.</para>
            </summary>
        </member>
        <member name="M:Godot.Shader.GetMode">
            <summary>
            <para>Returns the shader mode for the shader, either ,  or .</para>
            </summary>
        </member>
        <member name="M:Godot.Shader.SetDefaultTextureParam(Godot.StringName,Godot.Texture2D)">
            <summary>
            <para>Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the <see cref="T:Godot.ShaderMaterial"/>.</para>
            <para>Note: <c>param</c> must match the name of the uniform in the code exactly.</para>
            </summary>
        </member>
        <member name="M:Godot.Shader.GetDefaultTextureParam(Godot.StringName)">
            <summary>
            <para>Returns the texture that is set as default for the specified parameter.</para>
            <para>Note: <c>param</c> must match the name of the uniform in the code exactly.</para>
            </summary>
        </member>
        <member name="M:Godot.Shader.HasParam(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the shader has this param defined as a uniform in its code.</para>
            <para>Note: <c>param</c> must match the name of the uniform in the code exactly.</para>
            </summary>
        </member>
        <member name="T:Godot.ShaderMaterial">
            <summary>
            <para>A material that uses a custom <see cref="T:Godot.Shader"/> program to render either items to screen or process particles. You can create multiple materials for the same shader but configure different values for the uniforms defined in the shader.</para>
            </summary>
        </member>
        <member name="P:Godot.ShaderMaterial.Shader">
            <summary>
            <para>The <see cref="T:Godot.Shader"/> program used to render this material.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.SetShaderParam(Godot.StringName,System.Object)">
            <summary>
            <para>Changes the value set for this material of a uniform in the shader. Note: <c>param</c> must match the name of the uniform in the code exactly.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.GetShaderParam(Godot.StringName)">
            <summary>
            <para>Returns the current value set for this material of a uniform in the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.PropertyCanRevert(System.String)">
            <summary>
            <para>Returns <c>true</c> if the property identified by <c>name</c> can be reverted to a default value.</para>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.PropertyGetRevert(System.String)">
            <summary>
            <para>Returns the default value of the material property with given <c>name</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Shape2D">
            <summary>
            <para>Base class for all 2D shapes. All 2D shape types inherit from this.</para>
            </summary>
        </member>
        <member name="P:Godot.Shape2D.CustomSolverBias">
            <summary>
            <para>The shape's custom solver bias.</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.Collide(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            <para>Returns <c>true</c> if this shape is colliding with another.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the shape to check collisions with (<c>with_shape</c>), and the transformation matrix of that shape (<c>shape_xform</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotion(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            <para>Returns whether this shape would collide with another, if a given movement was applied.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the movement to test on this shape (<c>local_motion</c>), the shape to check collisions with (<c>with_shape</c>), the transformation matrix of that shape (<c>shape_xform</c>), and the movement to test onto the other object (<c>shape_motion</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideAndGetContacts(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            <para>Returns a list of the points where this shape touches another. If there are no collisions the list is empty.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the shape to check collisions with (<c>with_shape</c>), and the transformation matrix of that shape (<c>shape_xform</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotionAndGetContacts(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            <para>Returns a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions the list is empty.</para>
            <para>This method needs the transformation matrix for this shape (<c>local_xform</c>), the movement to test on this shape (<c>local_motion</c>), the shape to check collisions with (<c>with_shape</c>), the transformation matrix of that shape (<c>shape_xform</c>), and the movement to test onto the other object (<c>shape_motion</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.Draw(Godot.RID,Godot.Color)">
            <summary>
            <para>Draws a solid shape onto a <see cref="T:Godot.CanvasItem"/> with the <see cref="T:Godot.RenderingServer"/> API filled with the specified <c>color</c>. The exact drawing method is specific for each shape and cannot be configured.</para>
            </summary>
        </member>
        <member name="T:Godot.Shape3D">
            <summary>
            <para>Base class for all 3D shape resources. Nodes that inherit from this can be used as shapes for a <see cref="T:Godot.PhysicsBody3D"/> or <see cref="T:Godot.Area3D"/> objects.</para>
            </summary>
        </member>
        <member name="P:Godot.Shape3D.Margin">
            <summary>
            <para>The collision margin for the shape.</para>
            </summary>
        </member>
        <member name="T:Godot.Shortcut">
            <summary>
            <para>A shortcut for binding input.</para>
            <para>Shortcuts are commonly used for interacting with a <see cref="T:Godot.Control"/> element from a <see cref="T:Godot.InputEvent"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Shortcut.Shortcut_">
            <summary>
            <para>The shortcut's <see cref="T:Godot.InputEvent"/>.</para>
            <para>Generally the <see cref="T:Godot.InputEvent"/> is a keyboard key, though it can be any <see cref="T:Godot.InputEvent"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Shortcut.IsValid">
            <summary>
            <para>If <c>true</c>, this shortcut is valid.</para>
            </summary>
        </member>
        <member name="M:Godot.Shortcut.IsShortcut(Godot.InputEvent)">
            <summary>
            <para>Returns <c>true</c> if the shortcut's <see cref="T:Godot.InputEvent"/> equals <c>event</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Shortcut.GetAsText">
            <summary>
            <para>Returns the shortcut's <see cref="T:Godot.InputEvent"/> as a <see cref="T:System.String"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Skeleton2D">
            <summary>
            <para>Skeleton2D parents a hierarchy of <see cref="T:Godot.Bone2D"/> objects. It is a requirement of <see cref="T:Godot.Bone2D"/>. Skeleton2D holds a reference to the rest pose of its children and acts as a single point of access to its bones.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetBoneCount">
            <summary>
            <para>Returns the number of <see cref="T:Godot.Bone2D"/> nodes in the node hierarchy parented by Skeleton2D.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetBone(System.Int32)">
            <summary>
            <para>Returns a <see cref="T:Godot.Bone2D"/> from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter <c>idx</c>. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton2D.GetSkeleton">
            <summary>
            <para>Returns the <see cref="T:Godot.RID"/> of a Skeleton2D instance.</para>
            </summary>
        </member>
        <member name="T:Godot.Skeleton3D">
            <summary>
            <para>Skeleton3D provides a hierarchical interface for managing bones, including pose, rest and animation (see <see cref="T:Godot.Animation"/>). It can also use ragdoll physics.</para>
            <para>The overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose.</para>
            <para>Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.AddBone(System.String)">
            <summary>
            <para>Adds a bone, with name <c>name</c>. <see cref="M:Godot.Skeleton3D.GetBoneCount"/> will become the bone index.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.FindBone(System.String)">
            <summary>
            <para>Returns the bone index that matches <c>name</c> as its name.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneName(System.Int32)">
            <summary>
            <para>Returns the name of the bone at index <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneParent(System.Int32)">
            <summary>
            <para>Returns the bone index which is the parent of the bone at <c>bone_idx</c>. If -1, then bone has no parent.</para>
            <para>Note: The parent bone returned will always be less than <c>bone_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBoneParent(System.Int32,System.Int32)">
            <summary>
            <para>Sets the bone index <c>parent_idx</c> as the parent of the bone at <c>bone_idx</c>. If -1, then bone has no parent.</para>
            <para>Note: <c>parent_idx</c> must be less than <c>bone_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneCount">
            <summary>
            <para>Returns the amount of bones in the skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.UnparentBoneAndRest(System.Int32)">
            <summary>
            <para>Unparents the bone at <c>bone_idx</c> and sets its rest position to that of it's parent prior to being reset.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneRest(System.Int32)">
            <summary>
            <para>Returns the rest transform for a bone <c>bone_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBoneRest(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the rest transform for bone <c>bone_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.RegisterSkin(Godot.Skin)">
            <summary>
            <para>Binds the given Skin to the Skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.LocalizeRests">
            <summary>
            <para>Returns all bones in the skeleton to their rest poses.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBoneDisableRest(System.Int32,System.Boolean)">
            <summary>
            <para>Disables the rest pose for the bone at <c>bone_idx</c> if <c>true</c>, enables the bone rest if <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.IsBoneRestDisabled(System.Int32)">
            <summary>
            <para>Returns whether the bone rest for the bone at <c>bone_idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.BindChildNodeToBone(System.Int32,Godot.Node)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.UnbindChildNodeFromBone(System.Int32,Godot.Node)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoundChildNodesToBone(System.Int32)">
            <summary>
            <para>Deprecated soon.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.ClearBones">
            <summary>
            <para>Clear all the bones in this skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBonePose(System.Int32)">
            <summary>
            <para>Returns the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBonePose(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the pose transform for bone <c>bone_idx</c>.</para>
            <para>Note: The pose transform needs to be in bone space. Use <see cref="M:Godot.Skeleton3D.WorldTransformToBoneTransform(Godot.Transform)"/> to convert a world transform, like one you can get from a <see cref="T:Godot.Node3D"/>, to bone space.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.ClearBonesGlobalPoseOverride">
            <summary>
            <para>Removes the global pose override on all bones in the skeleton.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBoneGlobalPoseOverride(System.Int32,Godot.Transform,System.Single,System.Boolean)">
            <summary>
            <para>Sets the global pose transform, <c>pose</c>, for the bone at <c>bone_idx</c>.</para>
            <para><c>amount</c> is the interpolation strength that will be used when applying the pose, and <c>persistent</c> determines if the applied pose will remain.</para>
            <para>Note: The pose transform needs to be in bone space. Use <see cref="M:Godot.Skeleton3D.WorldTransformToBoneTransform(Godot.Transform)"/> to convert a world transform, like one you can get from a <see cref="T:Godot.Node3D"/>, to bone space.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneGlobalPose(System.Int32)">
            <summary>
            <para>Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.GetBoneCustomPose(System.Int32)">
            <summary>
            <para>Returns the custom pose of the specified bone. Custom pose is applied on top of the rest pose.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.SetBoneCustomPose(System.Int32,Godot.Transform)">
            <summary>
            <para>Sets the custom pose transform, <c>custom_pose</c>, for the bone at <c>bone_idx</c>. This pose is an addition to the bone rest pose.</para>
            <para>Note: The pose transform needs to be in bone space. Use <see cref="M:Godot.Skeleton3D.WorldTransformToBoneTransform(Godot.Transform)"/> to convert a world transform, like one you can get from a <see cref="T:Godot.Node3D"/>, to bone space.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.BoneTransformToWorldTransform(Godot.Transform)">
            <summary>
            <para>Takes the given bone pose/transform and converts it to a world transform, relative to the <see cref="T:Godot.Skeleton3D"/> node.</para>
            <para>This is useful for using the bone transform in calculations with transforms from <see cref="T:Godot.Node3D"/>-based nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.WorldTransformToBoneTransform(Godot.Transform)">
            <summary>
            <para>Takes the given world transform, relative to the <see cref="T:Godot.Skeleton3D"/>, and converts it to a bone pose/transform.</para>
            <para>This is useful for using setting bone poses using transforms from <see cref="T:Godot.Node3D"/>-based nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.PhysicalBonesStopSimulation">
            <summary>
            <para>Tells the <see cref="T:Godot.PhysicalBone3D"/> nodes in the Skeleton to stop simulating.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.PhysicalBonesStartSimulation(Godot.Collections.Array)">
            <summary>
            <para>Tells the <see cref="T:Godot.PhysicalBone3D"/> nodes in the Skeleton to start simulating and reacting to the physics world.</para>
            <para>Optionally, a list of bone names can be passed-in, allowing only the passed-in bones to be simulated.</para>
            </summary>
            <param name="bones">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.Skeleton3D.PhysicalBonesAddCollisionException(Godot.RID)">
            <summary>
            <para>Adds a collision exception to the physical bone.</para>
            <para>Works just like the <see cref="T:Godot.RigidBody3D"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.Skeleton3D.PhysicalBonesRemoveCollisionException(Godot.RID)">
            <summary>
            <para>Removes a collision exception to the physical bone.</para>
            <para>Works just like the <see cref="T:Godot.RigidBody3D"/> node.</para>
            </summary>
        </member>
        <member name="T:Godot.Sky">
            <summary>
            <para>The <see cref="T:Godot.Sky"/> class uses a <see cref="T:Godot.Material"/> to draw the background and update the reflection/radiance cubemaps.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.ProcessModeEnum.Automatic">
            <summary>
            <para>Automatically selects the appropriate process mode based on your sky shader. If your shader uses <c>TIME</c> or <c>POSITION</c>, this will use . If your shader uses any of the <c>LIGHT_*</c> variables or any custom uniforms, this uses . Otherwise, this defaults to .</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.ProcessModeEnum.Quality">
            <summary>
            <para>Uses high quality importance sampling to process the radiance map. In general, this results in much higher quality than  but takes much longer to generate. This should not be used if you plan on changing the sky at runtime. If you are finding that the reflection is not blurry enough and is showing sparkles or fireflies, try increasing .</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.ProcessModeEnum.Incremental">
            <summary>
            <para>Uses the same high quality importance sampling to process the radiance map as , but updates over several frames. The number of frames is determined by . Use this when you need highest quality radiance maps, but have a sky that updates slowly.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.ProcessModeEnum.Realtime">
            <summary>
            <para>Uses the fast filtering algorithm to process the radiance map. In general this results in lower quality, but substantially faster run times. If you need better quality, but still need to update the sky every frame, consider turning on .</para>
            <para>Note: The fast filtering algorithm is limited to 256x256 cubemaps, so <see cref="P:Godot.Sky.RadianceSize"/> must be set to .</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size32">
            <summary>
            <para>Radiance texture size is 32×32 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size64">
            <summary>
            <para>Radiance texture size is 64×64 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size128">
            <summary>
            <para>Radiance texture size is 128×128 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size256">
            <summary>
            <para>Radiance texture size is 256×256 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size512">
            <summary>
            <para>Radiance texture size is 512×512 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size1024">
            <summary>
            <para>Radiance texture size is 1024×1024 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Size2048">
            <summary>
            <para>Radiance texture size is 2048×2048 pixels.</para>
            </summary>
        </member>
        <member name="F:Godot.Sky.RadianceSizeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Sky.RadianceSizeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Sky.SkyMaterial">
            <summary>
            <para><see cref="T:Godot.Material"/> used to draw the background. Can be <see cref="T:Godot.PanoramaSkyMaterial"/>, <see cref="T:Godot.ProceduralSkyMaterial"/>, <see cref="T:Godot.PhysicalSkyMaterial"/>, or even a <see cref="T:Godot.ShaderMaterial"/> if you want to use your own custom shader.</para>
            </summary>
        </member>
        <member name="P:Godot.Sky.ProcessMode">
            <summary>
            <para>Sets the method for generating the radiance map from the sky. The radiance map is a cubemap with increasingly blurry versions of the sky corresponding to different levels of roughness. Radiance maps can be expensive to calculate. See <see cref="T:Godot.Sky.ProcessModeEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.Sky.RadianceSize">
            <summary>
            <para>The <see cref="T:Godot.Sky"/>'s radiance map size. The higher the radiance map size, the more detailed the lighting from the <see cref="T:Godot.Sky"/> will be.</para>
            <para>See <see cref="T:Godot.Sky.RadianceSizeEnum"/> constants for values.</para>
            <para>Note: Some hardware will have trouble with higher radiance sizes, especially  and above. Only use such high values on high-end hardware.</para>
            </summary>
        </member>
        <member name="T:Godot.Slider">
            <summary>
            <para>Base class for GUI sliders.</para>
            <para>Note: The <c>Range.changed</c> and <c>Range.value_changed</c> signals are part of the <see cref="T:Godot.Range"/> class which this class inherits from.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.Editable">
            <summary>
            <para>If <c>true</c>, the slider can be interacted with. If <c>false</c>, the value can be changed only by code.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.Scrollable">
            <summary>
            <para>If <c>true</c>, the value can be changed using the mouse wheel.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.TickCount">
            <summary>
            <para>Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers.</para>
            </summary>
        </member>
        <member name="P:Godot.Slider.TicksOnBorders">
            <summary>
            <para>If <c>true</c>, the slider will display ticks for minimum and maximum values.</para>
            </summary>
        </member>
        <member name="T:Godot.SliderJoint3D">
            <summary>
            <para>Slides across the X axis of the pivot object. See also <see cref="T:Godot.Generic6DOFJoint3D"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearLimitUpper">
            <summary>
            <para>The maximum difference between the pivot points on their X axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearLimitLower">
            <summary>
            <para>The minimum difference between the pivot points on their X axis before damping happens.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearLimitSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearLimitRestitution">
            <summary>
            <para>The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearLimitDamping">
            <summary>
            <para>The amount of damping once the slider limits are surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearMotionSoftness">
            <summary>
            <para>A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearMotionRestitution">
            <summary>
            <para>The amount of restitution inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearMotionDamping">
            <summary>
            <para>The amount of damping inside the slider limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearOrthogonalSoftness">
            <summary>
            <para>A factor applied to the movement across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearOrthogonalRestitution">
            <summary>
            <para>The amount of restitution when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.LinearOrthogonalDamping">
            <summary>
            <para>The amount of damping when movement is across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularLimitUpper">
            <summary>
            <para>The upper limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularLimitLower">
            <summary>
            <para>The lower limit of rotation in the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularLimitSoftness">
            <summary>
            <para>A factor applied to the all rotation once the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularLimitRestitution">
            <summary>
            <para>The amount of restitution of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularLimitDamping">
            <summary>
            <para>The amount of damping of the rotation when the limit is surpassed.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularMotionSoftness">
            <summary>
            <para>A factor applied to the all rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularMotionRestitution">
            <summary>
            <para>The amount of restitution of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularMotionDamping">
            <summary>
            <para>The amount of damping of the rotation in the limits.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularOrthogonalSoftness">
            <summary>
            <para>A factor applied to the all rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularOrthogonalRestitution">
            <summary>
            <para>The amount of restitution of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.AngularOrthogonalDamping">
            <summary>
            <para>The amount of damping of the rotation across axes orthogonal to the slider.</para>
            </summary>
        </member>
        <member name="F:Godot.SliderJoint3D.Param.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.SliderJoint3D.Param"/> enum.</para>
            </summary>
        </member>
        <member name="T:Godot.SoftBody3D">
            <summary>
            <para>A deformable physics body. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.CollisionLayer">
            <summary>
            <para>The physics layers this SoftBody3D is in.</para>
            <para>Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.</para>
            <para>A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.CollisionMask">
            <summary>
            <para>The physics layers this SoftBody3D scans for collisions. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.ParentCollisionIgnore">
            <summary>
            <para><see cref="T:Godot.NodePath"/> to a <see cref="T:Godot.CollisionObject3D"/> this SoftBody3D should avoid clipping.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.SimulationPrecision">
            <summary>
            <para>Increasing this value will improve the resulting simulation, but can affect performance. Use with care.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.TotalMass">
            <summary>
            <para>The SoftBody3D's mass.</para>
            </summary>
        </member>
        <member name="P:Godot.SoftBody3D.RayPickable">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.SoftBody3D"/> will respond to <see cref="T:Godot.RayCast3D"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the collision mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets individual bits on the layer mask. Use this if you only need to change one layer's value.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns an individual bit on the collision mask.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.GetCollisionExceptions">
            <summary>
            <para>Returns an array of nodes that were added as collision exceptions for this body.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Adds a body to the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="M:Godot.SoftBody3D.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            <para>Removes a body from the list of bodies that this body can't collide with.</para>
            </summary>
        </member>
        <member name="T:Godot.SphereMesh">
            <summary>
            <para>Class representing a spherical <see cref="T:Godot.PrimitiveMesh"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Radius">
            <summary>
            <para>Radius of sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Height">
            <summary>
            <para>Full height of the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.RadialSegments">
            <summary>
            <para>Number of radial segments on the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Rings">
            <summary>
            <para>Number of segments along the height of the sphere.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.IsHemisphere">
            <summary>
            <para>If <c>true</c>, a hemisphere is created rather than a full sphere.</para>
            <para>Note: To get a regular hemisphere, the height and radius of the sphere must be equal.</para>
            </summary>
        </member>
        <member name="T:Godot.SphereShape3D">
            <summary>
            <para>Sphere shape for 3D collisions, which can be set into a <see cref="T:Godot.PhysicsBody3D"/> or <see cref="T:Godot.Area3D"/>. This shape is useful for modeling sphere-like 3D objects.</para>
            </summary>
        </member>
        <member name="P:Godot.SphereShape3D.Radius">
            <summary>
            <para>The sphere's radius. The shape's diameter is double the radius.</para>
            </summary>
        </member>
        <member name="T:Godot.SpinBox">
            <summary>
            <para>SpinBox is a numerical input text field. It allows entering integers and floats.</para>
            <para>Example:</para>
            <para><code>
            var spin_box = SpinBox.new()
            add_child(spin_box)
            var line_edit = spin_box.get_line_edit()
            line_edit.context_menu_enabled = false
            spin_box.align = LineEdit.ALIGN_RIGHT
            </code></para>
            <para>The above code will create a <see cref="T:Godot.SpinBox"/>, disable context menu on it and set the text alignment to right.</para>
            <para>See <see cref="T:Godot.Range"/> class for more options over the <see cref="T:Godot.SpinBox"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Align">
            <summary>
            <para>Sets the text alignment of the <see cref="T:Godot.SpinBox"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Editable">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.SpinBox"/> will be editable. Otherwise, it will be read only.</para>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Prefix">
            <summary>
            <para>Adds the specified <c>prefix</c> string before the numerical value of the <see cref="T:Godot.SpinBox"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Suffix">
            <summary>
            <para>Adds the specified <c>suffix</c> string after the numerical value of the <see cref="T:Godot.SpinBox"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SpinBox.Apply">
            <summary>
            <para>Applies the current value of this <see cref="T:Godot.SpinBox"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SpinBox.GetLineEdit">
            <summary>
            <para>Returns the <see cref="T:Godot.LineEdit"/> instance from this <see cref="T:Godot.SpinBox"/>. You can use it to access properties and methods of <see cref="T:Godot.LineEdit"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.SplitContainer">
            <summary>
            <para>Container for splitting two <see cref="T:Godot.Control"/>s vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.Visible">
            <summary>
            <para>The split dragger is visible when the cursor hovers it.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.Hidden">
            <summary>
            <para>The split dragger is never visible.</para>
            </summary>
        </member>
        <member name="F:Godot.SplitContainer.DraggerVisibilityEnum.HiddenCollapsed">
            <summary>
            <para>The split dragger is never visible and its space collapsed.</para>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.SplitOffset">
            <summary>
            <para>The initial offset of the splitting between the two <see cref="T:Godot.Control"/>s, with <c>0</c> being at the end of the first <see cref="T:Godot.Control"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.Collapsed">
            <summary>
            <para>If <c>true</c>, the area of the first <see cref="T:Godot.Control"/> will be collapsed and the dragger will be disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.DraggerVisibility">
            <summary>
            <para>Determines the dragger's visibility. See <see cref="T:Godot.SplitContainer.DraggerVisibilityEnum"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.SplitContainer.ClampSplitOffset">
            <summary>
            <para>Clamps the <see cref="P:Godot.SplitContainer.SplitOffset"/> value to not go outside the currently possible minimal and maximum values.</para>
            </summary>
        </member>
        <member name="T:Godot.SplitContainer.DraggedHandler">
            <summary>
            <para>Emitted when the dragger is dragged by user.</para>
            </summary>
        </member>
        <member name="T:Godot.SpotLight3D">
            <summary>
            <para>A Spotlight is a type of <see cref="T:Godot.Light3D"/> node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance. This attenuation can be configured by changing the energy, radius and attenuation parameters of <see cref="T:Godot.Light3D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.SpotLight3D.SpotRange">
            <summary>
            <para>The maximal range that can be reached by the spotlight. Note that the effectively lit area may appear to be smaller depending on the <see cref="P:Godot.SpotLight3D.SpotAttenuation"/> in use. No matter the <see cref="P:Godot.SpotLight3D.SpotAttenuation"/> in use, the light will never reach anything outside this range.</para>
            </summary>
        </member>
        <member name="P:Godot.SpotLight3D.SpotAttenuation">
            <summary>
            <para>The spotlight's light energy attenuation curve.</para>
            </summary>
        </member>
        <member name="P:Godot.SpotLight3D.SpotAngle">
            <summary>
            <para>The spotlight's angle in degrees.</para>
            </summary>
        </member>
        <member name="P:Godot.SpotLight3D.SpotAngleAttenuation">
            <summary>
            <para>The spotlight's angular attenuation curve.</para>
            </summary>
        </member>
        <member name="T:Godot.SpringArm3D">
            <summary>
            <para>The SpringArm3D node is a node that casts a ray (or collision shape) along its z axis and moves all its direct children to the collision point, minus a margin.</para>
            <para>The most common use case for this is to make a 3rd person camera that reacts to collisions in the environment.</para>
            <para>The SpringArm3D will either cast a ray, or if a shape is given, it will cast the shape in the direction of its z axis.</para>
            <para>If you use the SpringArm3D as a camera controller for your player, you might need to exclude the player's collider from the SpringArm3D's collision check.</para>
            </summary>
        </member>
        <member name="P:Godot.SpringArm3D.CollisionMask">
            <summary>
            <para>The layers against which the collision check shall be done. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.SpringArm3D.Shape">
            <summary>
            <para>The <see cref="T:Godot.Shape3D"/> to use for the SpringArm3D.</para>
            <para>When the shape is set, the SpringArm3D will cast the <see cref="T:Godot.Shape3D"/> on its z axis instead of performing a ray cast.</para>
            </summary>
        </member>
        <member name="P:Godot.SpringArm3D.SpringLength">
            <summary>
            <para>The maximum extent of the SpringArm3D. This is used as a length for both the ray and the shape cast used internally to calculate the desired position of the SpringArm3D's child nodes.</para>
            <para>To know more about how to perform a shape cast or a ray cast, please consult the <see cref="T:Godot.PhysicsDirectSpaceState3D"/> documentation.</para>
            </summary>
        </member>
        <member name="P:Godot.SpringArm3D.Margin">
            <summary>
            <para>When the collision check is made, a candidate length for the SpringArm3D is given.</para>
            <para>The margin is then subtracted to this length and the translation is applied to the child objects of the SpringArm3D.</para>
            <para>This margin is useful for when the SpringArm3D has a <see cref="T:Godot.Camera3D"/> as a child node: without the margin, the <see cref="T:Godot.Camera3D"/> would be placed on the exact point of collision, while with the margin the <see cref="T:Godot.Camera3D"/> would be placed close to the point of collision.</para>
            </summary>
        </member>
        <member name="M:Godot.SpringArm3D.GetHitLength">
            <summary>
            <para>Returns the spring arm's current length.</para>
            </summary>
        </member>
        <member name="M:Godot.SpringArm3D.AddExcludedObject(Godot.RID)">
            <summary>
            <para>Adds the <see cref="T:Godot.PhysicsBody3D"/> object with the given <see cref="T:Godot.RID"/> to the list of <see cref="T:Godot.PhysicsBody3D"/> objects excluded from the collision check.</para>
            </summary>
        </member>
        <member name="M:Godot.SpringArm3D.RemoveExcludedObject(Godot.RID)">
            <summary>
            <para>Removes the given <see cref="T:Godot.RID"/> from the list of <see cref="T:Godot.PhysicsBody3D"/> objects excluded from the collision check.</para>
            </summary>
        </member>
        <member name="M:Godot.SpringArm3D.ClearExcludedObjects">
            <summary>
            <para>Clears the list of <see cref="T:Godot.PhysicsBody3D"/> objects excluded from the collision check.</para>
            </summary>
        </member>
        <member name="T:Godot.Sprite2D">
            <summary>
            <para>A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Texture">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> object to draw.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Centered">
            <summary>
            <para>If <c>true</c>, texture is centered.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Hframes">
            <summary>
            <para>The number of columns in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Vframes">
            <summary>
            <para>The number of rows in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.Frame">
            <summary>
            <para>Current frame to display from sprite sheet. <see cref="P:Godot.Sprite2D.Hframes"/> or <see cref="P:Godot.Sprite2D.Vframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.FrameCoords">
            <summary>
            <para>Coordinates of the frame to display from sprite sheet. This is as an alias for the <see cref="P:Godot.Sprite2D.Frame"/> property. <see cref="P:Godot.Sprite2D.Hframes"/> or <see cref="P:Godot.Sprite2D.Vframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.RegionEnabled">
            <summary>
            <para>If <c>true</c>, texture is cut from a larger atlas texture. See <see cref="P:Godot.Sprite2D.RegionRect"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.RegionRect">
            <summary>
            <para>The region of the atlas texture to display. <see cref="P:Godot.Sprite2D.RegionEnabled"/> must be <c>true</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite2D.RegionFilterClip">
            <summary>
            <para>If <c>true</c>, the outermost pixels get blurred out.</para>
            </summary>
        </member>
        <member name="M:Godot.Sprite2D.IsPixelOpaque(Godot.Vector2)">
            <summary>
            <para>Returns <c>true</c>, if the pixel at the given position is opaque and <c>false</c> in other case.</para>
            <para>Note: It also returns <c>false</c>, if the sprite's texture is <c>null</c> or if the given position is invalid.</para>
            </summary>
        </member>
        <member name="M:Godot.Sprite2D.GetRect">
            <summary>
            <para>Returns a <see cref="T:Godot.Rect2"/> representing the Sprite2D's boundary in local coordinates. Can be used to detect if the Sprite2D was clicked. Example:</para>
            <para><code>
            func _input(event):
                if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_LEFT:
                    if get_rect().has_point(to_local(event.position)):
                        print("A click!")
            </code></para>
            </summary>
        </member>
        <member name="T:Godot.Sprite2D.FrameChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.Sprite2D.Frame"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.Sprite2D.TextureChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.Sprite2D.Texture"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.Sprite3D">
            <summary>
            <para>A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation. See also <see cref="T:Godot.SpriteBase3D"/> where properties such as the billboard mode are defined.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Texture">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> object to draw.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Hframes">
            <summary>
            <para>The number of columns in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Vframes">
            <summary>
            <para>The number of rows in the sprite sheet.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Frame">
            <summary>
            <para>Current frame to display from sprite sheet. <see cref="P:Godot.Sprite3D.Hframes"/> or <see cref="P:Godot.Sprite3D.Vframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.FrameCoords">
            <summary>
            <para>Coordinates of the frame to display from sprite sheet. This is as an alias for the <see cref="P:Godot.Sprite3D.Frame"/> property. <see cref="P:Godot.Sprite3D.Hframes"/> or <see cref="P:Godot.Sprite3D.Vframes"/> must be greater than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionEnabled">
            <summary>
            <para>If <c>true</c>, texture will be cut from a larger atlas texture. See <see cref="P:Godot.Sprite3D.RegionRect"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionRect">
            <summary>
            <para>The region of the atlas texture to display. <see cref="P:Godot.Sprite3D.RegionEnabled"/> must be <c>true</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Sprite3D.FrameChangedHandler">
            <summary>
            <para>Emitted when the <see cref="P:Godot.Sprite3D.Frame"/> changes.</para>
            </summary>
        </member>
        <member name="T:Godot.SpriteBase3D">
            <summary>
            <para>A node that displays 2D texture information in a 3D environment. See also <see cref="T:Godot.Sprite3D"/> where many other properties are defined.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Transparent">
            <summary>
            <para>If set, the texture's transparency and the opacity are used to make those parts of the sprite invisible.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Shaded">
            <summary>
            <para>If set, lights in the environment affect the sprite.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.DoubleSided">
            <summary>
            <para>If set, texture can be seen from the back as well. If not, the texture is invisible when looking at it from behind.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.DrawFlags.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.SpriteBase3D.DrawFlags"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.Disabled">
            <summary>
            <para>This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.Discard">
            <summary>
            <para>This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see ). On the bright side, this mode doesn't suffer from transparency sorting issues when multiple transparent materials are overlapping. This mode is also known as alpha testing or 1-bit transparency.</para>
            </summary>
        </member>
        <member name="F:Godot.SpriteBase3D.AlphaCutMode.OpaquePrepass">
            <summary>
            <para>This mode draws fully opaque pixels in the depth prepass. This is slower than  or , but it allows displaying translucent areas and smooth edges while using proper sorting.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Centered">
            <summary>
            <para>If <c>true</c>, texture will be centered.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Offset">
            <summary>
            <para>The texture's drawing offset.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Modulate">
            <summary>
            <para>A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Opacity">
            <summary>
            <para>The objects visibility on a scale from <c>0</c> fully invisible to <c>1</c> fully visible.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.PixelSize">
            <summary>
            <para>The size of one pixel's width on the sprite to scale it in 3D.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Axis">
            <summary>
            <para>The direction in which the front of the texture faces.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Billboard">
            <summary>
            <para>The billboard mode to use for the sprite. See <see cref="T:Godot.BaseMaterial3D.BillboardModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Transparent">
            <summary>
            <para>If <c>true</c>, the texture's transparency and the opacity are used to make those parts of the sprite invisible.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Shaded">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.Light3D"/> in the <see cref="T:Godot.Environment"/> has effects on the sprite.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.DoubleSided">
            <summary>
            <para>If <c>true</c>, texture can be seen from the back as well, if <c>false</c>, it is invisible when looking at it from behind.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.AlphaCut">
            <summary>
            <para>The alpha cutting mode to use for the sprite. See <see cref="T:Godot.SpriteBase3D.AlphaCutMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.SetDrawFlag(Godot.SpriteBase3D.DrawFlags,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the specified flag will be enabled. See <see cref="T:Godot.SpriteBase3D.DrawFlags"/> for a list of flags.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GetDrawFlag(Godot.SpriteBase3D.DrawFlags)">
            <summary>
            <para>Returns the value of the specified flag.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GetItemRect">
            <summary>
            <para>Returns the rectangle representing this sprite.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GenerateTriangleMesh">
            <summary>
            <para>Returns a <see cref="T:Godot.TriangleMesh"/> with the sprite's vertices following its current configuration (such as its <see cref="P:Godot.SpriteBase3D.Axis"/> and <see cref="P:Godot.SpriteBase3D.PixelSize"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.SpriteFrames">
            <summary>
            <para>Sprite frame library for <see cref="T:Godot.AnimatedSprite2D"/>. Contains frames and animation data for playback.</para>
            <para>Note: You can associate a set of normal or specular maps by creating additional <see cref="T:Godot.SpriteFrames"/> resources with a <c>_normal</c> or <c>_specular</c> suffix. For example, having 3 <see cref="T:Godot.SpriteFrames"/> resources <c>run</c>, <c>run_normal</c>, and <c>run_specular</c> will make it so the <c>run</c> animation uses normal and specular maps.</para>
            </summary>
        </member>
        <member name="P:Godot.SpriteFrames.Frames">
            <summary>
            <para>Compatibility property, always equals to an empty array.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddAnimation(Godot.StringName)">
            <summary>
            <para>Adds a new animation to the library.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.HasAnimation(Godot.StringName)">
            <summary>
            <para>If <c>true</c>, the named animation exists.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveAnimation(Godot.StringName)">
            <summary>
            <para>Removes the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RenameAnimation(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Changes the animation's name to <c>newname</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationNames">
            <summary>
            <para>Returns an array containing the names associated to each animation. Values are placed in alphabetical order.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationSpeed(Godot.StringName,System.Single)">
            <summary>
            <para>The animation's speed in frames per second.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationSpeed(Godot.StringName)">
            <summary>
            <para>The animation's speed in frames per second.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationLoop(Godot.StringName,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the animation will loop.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationLoop(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the given animation is configured to loop when it finishes playing. Otherwise, returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddFrame(Godot.StringName,Godot.Texture2D,System.Int32)">
            <summary>
            <para>Adds a frame to the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrameCount(Godot.StringName)">
            <summary>
            <para>Returns the number of frames in the animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrame(Godot.StringName,System.Int32)">
            <summary>
            <para>Returns the animation's selected frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetFrame(Godot.StringName,System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the texture of the given frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveFrame(Godot.StringName,System.Int32)">
            <summary>
            <para>Removes the animation's selected frame.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.Clear(Godot.StringName)">
            <summary>
            <para>Removes all frames from the given animation.</para>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.ClearAll">
            <summary>
            <para>Removes all animations. A "default" animation will be created.</para>
            </summary>
        </member>
        <member name="T:Godot.StaticBody2D">
            <summary>
            <para>Static body for 2D physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.</para>
            <para>Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantLinearVelocity">
            <summary>
            <para>The body's constant linear velocity. This does not move the body, but affects colliding bodies, as if it were moving.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantAngularVelocity">
            <summary>
            <para>The body's constant angular velocity. This does not rotate the body, but affects colliding bodies, as if it were rotating.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.PhysicsMaterialOverride">
            <summary>
            <para>The physics material override for the body.</para>
            <para>If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.</para>
            </summary>
        </member>
        <member name="T:Godot.StaticBody3D">
            <summary>
            <para>Static body for 3D physics. A static body is a simple body that is not intended to move. In contrast to <see cref="T:Godot.RigidBody3D"/>, they don't consume any CPU resources as long as they don't move.</para>
            <para>Additionally, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody3D.PhysicsMaterialOverride">
            <summary>
            <para>The physics material override for the body.</para>
            <para>If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody3D.ConstantLinearVelocity">
            <summary>
            <para>The body's constant linear velocity. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.</para>
            </summary>
        </member>
        <member name="P:Godot.StaticBody3D.ConstantAngularVelocity">
            <summary>
            <para>The body's constant angular velocity. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamPeer">
            <summary>
            <para>StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or UNIX sockets). It provides an API for sending and receiving data through streams as raw data or strings.</para>
            </summary>
        </member>
        <member name="P:Godot.StreamPeer.BigEndian">
            <summary>
            <para>If <c>true</c>, this <see cref="T:Godot.StreamPeer"/> will using big-endian format for encoding and decoding.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutData(System.Byte[])">
            <summary>
            <para>Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an <see cref="T:Godot.Error"/> code.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutPartialData(System.Byte[])">
            <summary>
            <para>Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an <see cref="T:Godot.Error"/> code and an integer, describing how much data was actually sent.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetData(System.Int32)">
            <summary>
            <para>Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the <c>bytes</c> argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an <see cref="T:Godot.Error"/> code and a data array.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetPartialData(System.Int32)">
            <summary>
            <para>Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an <see cref="T:Godot.Error"/> code, and a data array.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetAvailableBytes">
            <summary>
            <para>Returns the amount of bytes this <see cref="T:Godot.StreamPeer"/> has available.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put8(System.SByte)">
            <summary>
            <para>Puts a signed byte into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU8(System.Byte)">
            <summary>
            <para>Puts an unsigned byte into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put16(System.Int16)">
            <summary>
            <para>Puts a signed 16-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU16(System.UInt16)">
            <summary>
            <para>Puts an unsigned 16-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put32(System.Int32)">
            <summary>
            <para>Puts a signed 32-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU32(System.UInt32)">
            <summary>
            <para>Puts an unsigned 32-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put64(System.Int64)">
            <summary>
            <para>Puts a signed 64-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU64(System.UInt64)">
            <summary>
            <para>Puts an unsigned 64-bit value into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutFloat(System.Single)">
            <summary>
            <para>Puts a single-precision float into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutDouble(System.Double)">
            <summary>
            <para>Puts a double-precision float into the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutString(System.String)">
            <summary>
            <para>Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.</para>
            <para>Note: To put an ASCII string without prepending its size, you can use <see cref="M:Godot.StreamPeer.PutData(System.Byte[])"/>:</para>
            <para><code>
            put_data("Hello world".to_ascii())
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutUtf8String(System.String)">
            <summary>
            <para>Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.</para>
            <para>Note: To put an UTF-8 string without prepending its size, you can use <see cref="M:Godot.StreamPeer.PutData(System.Byte[])"/>:</para>
            <para><code>
            put_data("Hello world".to_utf8())
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutVar(System.Object,System.Boolean)">
            <summary>
            <para>Puts a Variant into the stream. If <c>full_objects</c> is <c>true</c> encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get8">
            <summary>
            <para>Gets a signed byte from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU8">
            <summary>
            <para>Gets an unsigned byte from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get16">
            <summary>
            <para>Gets a signed 16-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU16">
            <summary>
            <para>Gets an unsigned 16-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get32">
            <summary>
            <para>Gets a signed 32-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU32">
            <summary>
            <para>Gets an unsigned 32-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get64">
            <summary>
            <para>Gets a signed 64-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU64">
            <summary>
            <para>Gets an unsigned 64-bit value from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetFloat">
            <summary>
            <para>Gets a single-precision float from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetDouble">
            <summary>
            <para>Gets a double-precision float from the stream.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetString(System.Int32)">
            <summary>
            <para>Gets a string with byte-length <c>bytes</c> from the stream. If <c>bytes</c> is negative (default) the length will be read from the stream using the reverse process of <see cref="M:Godot.StreamPeer.PutString(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetUtf8String(System.Int32)">
            <summary>
            <para>Gets an UTF-8 string with byte-length <c>bytes</c> from the stream (this decodes the string sent as UTF-8). If <c>bytes</c> is negative (default) the length will be read from the stream using the reverse process of <see cref="M:Godot.StreamPeer.PutUtf8String(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetVar(System.Boolean)">
            <summary>
            <para>Gets a Variant from the stream. If <c>allow_objects</c> is <c>true</c>, decoding objects is allowed.</para>
            <para>Warning: Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamPeerSSL">
            <summary>
            <para>SSL stream peer. This object can be used to connect to an SSL server or accept a single SSL client connection.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Disconnected">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerSSL"/> that is disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Handshaking">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerSSL"/> during handshaking.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Connected">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerSSL"/> that is connected to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.Error">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerSSL"/> in error state.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerSSL.Status.ErrorHostnameMismatch">
            <summary>
            <para>An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.Poll">
            <summary>
            <para>Poll the connection to check for incoming bytes. Call this right before <see cref="M:Godot.StreamPeer.GetAvailableBytes"/> for it to work properly.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer,Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)">
            <summary>
            <para>Accepts a peer connection as a server using the given <c>private_key</c> and providing the given <c>certificate</c> to the client. You can pass the optional <c>chain</c> parameter to provide additional CA chain information along with the certificate.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.ConnectToStream(Godot.StreamPeer,System.Boolean,System.String,Godot.X509Certificate)">
            <summary>
            <para>Connects to a peer using an underlying <see cref="T:Godot.StreamPeer"/> <c>stream</c>. If <c>validate_certs</c> is <c>true</c>, <see cref="T:Godot.StreamPeerSSL"/> will validate that the certificate presented by the peer matches the <c>for_hostname</c>.</para>
            <para>Note: Specifying a custom <c>valid_certificate</c> is not supported in HTML5 exports due to browsers restrictions.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.GetStatus">
            <summary>
            <para>Returns the status of the connection. See <see cref="T:Godot.StreamPeerSSL.Status"/> for values.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.DisconnectFromStream">
            <summary>
            <para>Disconnects from host.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamPeerTCP">
            <summary>
            <para>TCP stream peer. This object can be used to connect to TCP servers, or also is returned by a TCP server.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.None">
            <summary>
            <para>The initial status of the <see cref="T:Godot.StreamPeerTCP"/>. This is also the status after disconnecting.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Connecting">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerTCP"/> that is connecting to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Connected">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerTCP"/> that is connected to a host.</para>
            </summary>
        </member>
        <member name="F:Godot.StreamPeerTCP.Status.Error">
            <summary>
            <para>A status representing a <see cref="T:Godot.StreamPeerTCP"/> in error state.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.ConnectToHost(System.String,System.Int32)">
            <summary>
            <para>Connects to the specified <c>host:port</c> pair. A hostname will be resolved if valid. Returns  on success or  on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.IsConnectedToHost">
            <summary>
            <para>Returns <c>true</c> if this peer is currently connected or is connecting to a host, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetStatus">
            <summary>
            <para>Returns the status of the connection, see <see cref="T:Godot.StreamPeerTCP.Status"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedHost">
            <summary>
            <para>Returns the IP of this peer.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedPort">
            <summary>
            <para>Returns the port of this peer.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.DisconnectFromHost">
            <summary>
            <para>Disconnects from host.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.SetNoDelay(System.Boolean)">
            <summary>
            <para>Disables Nagle's algorithm to improve latency for small packets.</para>
            <para>Note: For applications that send large packets or need to transfer a lot of data, this can decrease the total available bandwidth.</para>
            </summary>
        </member>
        <member name="T:Godot.StreamTexture2D">
            <summary>
            <para>A texture that is loaded from a <c>.stex</c> file.</para>
            </summary>
        </member>
        <member name="P:Godot.StreamTexture2D.LoadPath">
            <summary>
            <para>The StreamTexture's file path to a <c>.stex</c> file.</para>
            </summary>
        </member>
        <member name="M:Godot.StreamTexture2D.Load(System.String)">
            <summary>
            <para>Loads the texture from the given path.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBox">
            <summary>
            <para>StyleBox is <see cref="T:Godot.Resource"/> that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.</para>
            <para>Note: For children of <see cref="T:Godot.Control"/> that have Theme Properties, the <c>focus</c> <see cref="T:Godot.StyleBox"/> is displayed over the <c>normal</c>, <c>hover</c> or <c>pressed</c> <see cref="T:Godot.StyleBox"/>. This makes the <c>focus</c> <see cref="T:Godot.StyleBox"/> more reusable across different nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginLeft">
            <summary>
            <para>The left margin for the contents of this style box.Increasing this value reduces the space available to the contents from the left.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginRight">
            <summary>
            <para>The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginTop">
            <summary>
            <para>The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top.</para>
            <para>Refer to <see cref="P:Godot.StyleBox.ContentMarginBottom"/> for extra considerations.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginBottom">
            <summary>
            <para>The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom.</para>
            <para>If this value is negative, it is ignored and a child-specific margin is used instead. For example for <see cref="T:Godot.StyleBoxFlat"/> the border thickness (if any) is used instead.</para>
            <para>It is up to the code using this style box to decide what these contents are: for example, a <see cref="T:Godot.Button"/> respects this content margin for the textual contents of the button.</para>
            <para><see cref="M:Godot.StyleBox.GetMargin(Godot.Side)"/> should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.TestMask(Godot.Vector2,Godot.Rect2)">
            <summary>
            <para>Test a position in a rectangle, return whether it passes the mask test.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.SetDefaultMargin(Godot.Side,System.Single)">
            <summary>
            <para>Sets the default value of the specified <see cref="T:Godot.Side"/> to <c>offset</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetDefaultMargin(Godot.Side)">
            <summary>
            <para>Returns the default margin of the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMargin(Godot.Side)">
            <summary>
            <para>Returns the content margin offset for the specified <see cref="T:Godot.Side"/>.</para>
            <para>Positive values reduce size inwards, unlike <see cref="T:Godot.Control"/>'s margin values.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMinimumSize">
            <summary>
            <para>Returns the minimum size that this stylebox can be shrunk to.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetCenterSize">
            <summary>
            <para>Returns the size of this <see cref="T:Godot.StyleBox"/> without the margins.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetOffset">
            <summary>
            <para>Returns the "offset" of a stylebox. This helper function returns a value equivalent to <c>Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetCurrentItemDrawn">
            <summary>
            <para>Returns the <see cref="T:Godot.CanvasItem"/> that handles its  or <see cref="M:Godot.CanvasItem._Draw"/> callback at this moment.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.Draw(Godot.RID,Godot.Rect2)">
            <summary>
            <para>Draws this stylebox using a <see cref="T:Godot.CanvasItem"/> with given <see cref="T:Godot.RID"/>.</para>
            <para>You can get a <see cref="T:Godot.RID"/> value using <see cref="M:Godot.Object.GetInstanceId"/> on a <see cref="T:Godot.CanvasItem"/>-derived node.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxEmpty">
            <summary>
            <para>Empty stylebox (really does not display anything).</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxFlat">
            <summary>
            <para>This <see cref="T:Godot.StyleBox"/> can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:</para>
            <para>- Color</para>
            <para>- Border width (individual width for each border)</para>
            <para>- Rounded corners (individual radius for each corner)</para>
            <para>- Shadow (with blur and offset)</para>
            <para>Setting corner radius to high values is allowed. As soon as corners would overlap, the stylebox will switch to a relative system. Example:</para>
            <para><code>
            height = 30
            corner_radius_top_left = 50
            corner_radius_bottom_left = 100
            </code></para>
            <para>The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will never be more than the height. Result:</para>
            <para><code>
            corner_radius_top_left: 10
            corner_radius_bottom_left: 20
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BgColor">
            <summary>
            <para>The background color of the stylebox.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.DrawCenter">
            <summary>
            <para>Toggles drawing of the inner part of the stylebox.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthLeft">
            <summary>
            <para>Border width for the left border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthTop">
            <summary>
            <para>Border width for the top border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthRight">
            <summary>
            <para>Border width for the right border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthBottom">
            <summary>
            <para>Border width for the bottom border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderColor">
            <summary>
            <para>Sets the color of the border.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderBlend">
            <summary>
            <para>If <c>true</c>, the border will fade into the background color.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopLeft">
            <summary>
            <para>The top-left corner's radius. If <c>0</c>, the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopRight">
            <summary>
            <para>The top-right corner's radius. If <c>0</c>, the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomRight">
            <summary>
            <para>The bottom-right corner's radius. If <c>0</c>, the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomLeft">
            <summary>
            <para>The bottom-left corner's radius. If <c>0</c>, the corner is not rounded.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerDetail">
            <summary>
            <para>This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value, you should take the corner radius (<see cref="M:Godot.StyleBoxFlat.SetCornerRadiusAll(System.Int32)"/>) into account.</para>
            <para>For corner radii smaller than 10, <c>4</c> or <c>5</c> should be enough. For corner radii smaller than 30, values between <c>8</c> and <c>12</c> should be enough.</para>
            <para>A corner detail of <c>1</c> will result in chamfered corners instead of rounded corners, which is useful for some artistic effects.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginLeft">
            <summary>
            <para>Expands the stylebox outside of the control rect on the left edge. Useful in combination with <see cref="P:Godot.StyleBoxFlat.BorderWidthLeft"/> to draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginRight">
            <summary>
            <para>Expands the stylebox outside of the control rect on the right edge. Useful in combination with <see cref="P:Godot.StyleBoxFlat.BorderWidthRight"/> to draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginTop">
            <summary>
            <para>Expands the stylebox outside of the control rect on the top edge. Useful in combination with <see cref="P:Godot.StyleBoxFlat.BorderWidthTop"/> to draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginBottom">
            <summary>
            <para>Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with <see cref="P:Godot.StyleBoxFlat.BorderWidthBottom"/> to draw a border outside the control rect.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowColor">
            <summary>
            <para>The color of the shadow. This has no effect if <see cref="P:Godot.StyleBoxFlat.ShadowSize"/> is lower than 1.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowSize">
            <summary>
            <para>The shadow size in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowOffset">
            <summary>
            <para>The shadow offset in pixels. Adjusts the position of the shadow relatively to the stylebox.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasing">
            <summary>
            <para>Antialiasing draws a small ring around the edges, which fades to transparency. As a result, edges look much smoother. This is only noticeable when using rounded corners.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasingSize">
            <summary>
            <para>This changes the size of the faded ring. Higher values can be used to achieve a "blurry" effect.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetBorderWidthAll(System.Int32)">
            <summary>
            <para>Sets the border width to <c>width</c> pixels for all sides.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetBorderWidthMin">
            <summary>
            <para>Returns the smallest border width out of all four borders.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetBorderWidth(Godot.Side,System.Int32)">
            <summary>
            <para>Sets the specified <see cref="T:Godot.Side"/>'s border width to <c>width</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetBorderWidth(Godot.Side)">
            <summary>
            <para>Returns the specified <see cref="T:Godot.Side"/>'s border width.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusIndividual(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the corner radius for each corner to <c>radius_top_left</c>, <c>radius_top_right</c>, <c>radius_bottom_right</c>, and <c>radius_bottom_left</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusAll(System.Int32)">
            <summary>
            <para>Sets the corner radius to <c>radius</c> pixels for all corners.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadius(Godot.Corner,System.Int32)">
            <summary>
            <para>Sets the corner radius to <c>radius</c> pixels for the given <c>corner</c>. See <see cref="T:Godot.Corner"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetCornerRadius(Godot.Corner)">
            <summary>
            <para>Returns the given <c>corner</c>'s radius. See <see cref="T:Godot.Corner"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMargin(Godot.Side,System.Single)">
            <summary>
            <para>Sets the expand margin to <c>size</c> pixels for the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginAll(System.Single)">
            <summary>
            <para>Sets the expand margin to <c>size</c> pixels for all margins.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the expand margin for each margin to <c>size_left</c>, <c>size_top</c>, <c>size_right</c>, and <c>size_bottom</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetExpandMargin(Godot.Side)">
            <summary>
            <para>Returns the size of the specified <see cref="T:Godot.Side"/>'s expand margin.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxLine">
            <summary>
            <para><see cref="T:Godot.StyleBox"/> that displays a single line of a given color and thickness. It can be used to draw things like separators.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Color">
            <summary>
            <para>The line's color.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.GrowBegin">
            <summary>
            <para>The number of pixels the line will extend before the <see cref="T:Godot.StyleBoxLine"/>'s bounds. If set to a negative value, the line will begin inside the <see cref="T:Godot.StyleBoxLine"/>'s bounds.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.GrowEnd">
            <summary>
            <para>The number of pixels the line will extend past the <see cref="T:Godot.StyleBoxLine"/>'s bounds. If set to a negative value, the line will end inside the <see cref="T:Godot.StyleBoxLine"/>'s bounds.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Thickness">
            <summary>
            <para>The line's thickness in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Vertical">
            <summary>
            <para>If <c>true</c>, the line will be vertical. If <c>false</c>, the line will be horizontal.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxTexture">
            <summary>
            <para>Texture-based nine-patch <see cref="T:Godot.StyleBox"/>, in a way similar to <see cref="T:Godot.NinePatchRect"/>. This stylebox performs a 3×3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size.</para>
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.Stretch">
            <summary>
            <para>Stretch the stylebox's texture. This results in visible distortion unless the texture size matches the stylebox's size perfectly.</para>
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.Tile">
            <summary>
            <para>Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system.</para>
            </summary>
        </member>
        <member name="F:Godot.StyleBoxTexture.AxisStretchMode.TileFit">
            <summary>
            <para>Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. Unlike , the texture may be slightly stretched to make the nine-patch texture tile seamlessly.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.Texture">
            <summary>
            <para>The texture to use when drawing this style box.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.RegionRect">
            <summary>
            <para>Species a sub-region of the texture to use.</para>
            <para>This is equivalent to first wrapping the texture in an <see cref="T:Godot.AtlasTexture"/> with the same region.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginLeft">
            <summary>
            <para>Increases the left margin of the 3×3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the left border of the 3×3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginLeft"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginRight">
            <summary>
            <para>Increases the right margin of the 3×3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the right border of the 3×3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginRight"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginTop">
            <summary>
            <para>Increases the top margin of the 3×3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the top border of the 3×3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginTop"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginBottom">
            <summary>
            <para>Increases the bottom margin of the 3×3 texture box.</para>
            <para>A higher value means more of the source texture is considered to be part of the bottom border of the 3×3 box.</para>
            <para>This is also the value used as fallback for <see cref="P:Godot.StyleBox.ContentMarginBottom"/> if it is negative.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginLeft">
            <summary>
            <para>Expands the left margin of this style box when drawing, causing it to be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginRight">
            <summary>
            <para>Expands the right margin of this style box when drawing, causing it to be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginTop">
            <summary>
            <para>Expands the top margin of this style box when drawing, causing it to be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginBottom">
            <summary>
            <para>Expands the bottom margin of this style box when drawing, causing it to be drawn larger than requested.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchHorizontal">
            <summary>
            <para>Controls how the stylebox's texture will be stretched or tiled horizontally. See <see cref="T:Godot.StyleBoxTexture.AxisStretchMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchVertical">
            <summary>
            <para>Controls how the stylebox's texture will be stretched or tiled vertically. See <see cref="T:Godot.StyleBoxTexture.AxisStretchMode"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ModulateColor">
            <summary>
            <para>Modulates the color of the texture when this style box is drawn.</para>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.DrawCenter">
            <summary>
            <para>If <c>true</c>, the nine-patch texture's center tile will be drawn.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetMarginSize(Godot.Side,System.Single)">
            <summary>
            <para>Sets the margin to <c>size</c> pixels for the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.GetMarginSize(Godot.Side)">
            <summary>
            <para>Returns the margin size of the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginSize(Godot.Side,System.Single)">
            <summary>
            <para>Sets the expand margin to <c>size</c> pixels for the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginAll(System.Single)">
            <summary>
            <para>Sets the expand margin to <c>size</c> pixels for all margins.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the expand margin for each margin to <c>size_left</c>, <c>size_top</c>, <c>size_right</c>, and <c>size_bottom</c> pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.GetExpandMarginSize(Godot.Side)">
            <summary>
            <para>Returns the expand margin size of the specified <see cref="T:Godot.Side"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxTexture.TextureChangedHandler">
            <summary>
            <para>Emitted when the stylebox's texture is changed.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.ClearMode.Always">
            <summary>
            <para>Always clear the render target before drawing.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.ClearMode.Never">
            <summary>
            <para>Never clear the render target.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.ClearMode.Once">
            <summary>
            <para>Clear the render target on the next frame, then switch to .</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.UpdateMode.Disabled">
            <summary>
            <para>Do not update the render target.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.UpdateMode.Once">
            <summary>
            <para>Update the render target once, then switch to .</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.UpdateMode.WhenVisible">
            <summary>
            <para>Update the render target only when it is visible. This is the default value.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.UpdateMode.WhenParentVisible">
            <summary>
            <para>Update the render target only when its parent is visible.</para>
            </summary>
        </member>
        <member name="F:Godot.SubViewport.UpdateMode.Always">
            <summary>
            <para>Always update the render target.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.Xr">
            <summary>
            <para>If <c>true</c>, the sub-viewport will be used in AR/VR process.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.Size">
            <summary>
            <para>The width and height of the sub-viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.Size2dOverride">
            <summary>
            <para>The 2D size override of the sub-viewport. If either the width or height is <c>0</c>, the override is disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.Size2dOverrideStretch">
            <summary>
            <para>If <c>true</c>, the 2D size override affects stretch as well.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.RenderTargetClearMode">
            <summary>
            <para>The clear mode when the sub-viewport is used as a render target.</para>
            <para>Note: This property is intended for 2D usage.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewport.RenderTargetUpdateMode">
            <summary>
            <para>The update mode when the sub-viewport is used as a render target.</para>
            </summary>
        </member>
        <member name="T:Godot.SubViewportContainer">
            <summary>
            <para>A <see cref="T:Godot.Container"/> node that holds a <see cref="T:Godot.SubViewport"/>, automatically setting its size.</para>
            <para>Note: Changing a SubViewportContainer's <see cref="P:Godot.Control.RectScale"/> will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container).</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewportContainer.Stretch">
            <summary>
            <para>If <c>true</c>, the sub-viewport will be scaled to the control's size.</para>
            </summary>
        </member>
        <member name="P:Godot.SubViewportContainer.StretchShrink">
            <summary>
            <para>Divides the sub-viewport's effective resolution by this value while preserving its scale. This can be used to speed up rendering.</para>
            <para>For example, a 1280×720 sub-viewport with <see cref="P:Godot.SubViewportContainer.StretchShrink"/> set to <c>2</c> will be rendered at 640×360 while occupying the same size in the container.</para>
            <para>Note: <see cref="P:Godot.SubViewportContainer.Stretch"/> must be <c>true</c> for this property to work.</para>
            </summary>
        </member>
        <member name="T:Godot.SurfaceTool">
            <summary>
            <para>The <see cref="T:Godot.SurfaceTool"/> is used to construct a <see cref="T:Godot.Mesh"/> by specifying vertex attributes individually. It can be used to construct a <see cref="T:Godot.Mesh"/> from a script. All properties except indices need to be added before calling <see cref="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)"/>. For example, to add vertex colors and UVs:</para>
            <para><code>
            var st = SurfaceTool.new()
            st.begin(Mesh.PRIMITIVE_TRIANGLES)
            st.set_color(Color(1, 0, 0))
            st.set_uv(Vector2(0, 0))
            st.set_vertex(Vector3(0, 0, 0))
            </code></para>
            <para>The above <see cref="T:Godot.SurfaceTool"/> now contains one vertex of a triangle which has a UV coordinate and a specified <see cref="T:Godot.Color"/>. If another vertex were added without calling <see cref="M:Godot.SurfaceTool.SetUv(Godot.Vector2)"/> or <see cref="M:Godot.SurfaceTool.SetColor(Godot.Color)"/>, then the last values would be used.</para>
            <para>Vertex attributes must be passed before calling <see cref="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)"/>. Failure to do so will result in an error when committing the vertex information to a mesh.</para>
            <para>Additionally, the attributes used before the first vertex is added determine the format of the mesh. For example, if you only add UVs to the first vertex, you cannot add color to any of the subsequent vertices.</para>
            <para>See also <see cref="T:Godot.ArrayMesh"/>, <see cref="T:Godot.ImmediateGeometry3D"/> and <see cref="T:Godot.MeshDataTool"/> for procedural geometry generation.</para>
            <para>Note: Godot uses clockwise <a href="https://learnopengl.com/Advanced-OpenGL/Face-culling">winding order</a> for front faces of triangle primitive modes.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Begin(Godot.Mesh.PrimitiveType)">
            <summary>
            <para>Called before adding any vertices. Takes the primitive type as an argument (e.g. ).</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)">
            <summary>
            <para>Specifies the position of current vertex. Should be called after specifying other vertex properties (e.g. Color, UV).</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetColor(Godot.Color)">
            <summary>
            <para>Specifies a <see cref="T:Godot.Color"/> for the next vertex to use.</para>
            <para>Note: The material must have <see cref="P:Godot.BaseMaterial3D.VertexColorUseAsAlbedo"/> enabled for the vertex color to be visible.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetNormal(Godot.Vector3)">
            <summary>
            <para>Specifies a normal for the next vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetTangent(Godot.Plane)">
            <summary>
            <para>Specifies a tangent for the next vertex to use.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetUv(Godot.Vector2)">
            <summary>
            <para>Specifies a set of UV coordinates to use for the next vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetUv2(Godot.Vector2)">
            <summary>
            <para>Specifies an optional second set of UV coordinates to use for the next vertex.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetBones(System.Int32[])">
            <summary>
            <para>Specifies an array of bones for the next vertex to use. <c>bones</c> must contain 4 integers.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetWeights(System.Single[])">
            <summary>
            <para>Specifies weight values for next vertex to use. <c>weights</c> must contain 4 values.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddTriangleFan(Godot.Vector3[],Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Vector3[],Godot.Collections.Array)">
            <summary>
            <para>Inserts a triangle fan made of array data into <see cref="T:Godot.Mesh"/> being constructed.</para>
            <para>Requires the primitive type be set to .</para>
            </summary>
            <param name="uvs">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="colors">If the parameter is null, then the default value is new Color[] {}</param>
            <param name="uv2s">If the parameter is null, then the default value is new Vector2[] {}</param>
            <param name="normals">If the parameter is null, then the default value is new Vector3[] {}</param>
            <param name="tangents">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.SurfaceTool.AddIndex(System.Int32)">
            <summary>
            <para>Adds an index to index array if you are using indexed vertices. Does not need to be called before adding vertices.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Index">
            <summary>
            <para>Shrinks the vertex array by creating an index array (avoids reusing vertices).</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Deindex">
            <summary>
            <para>Removes the index array by expanding the vertex array.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateNormals(System.Boolean)">
            <summary>
            <para>Generates normals from vertices so you do not have to do it manually. If <c>flip</c> is <c>true</c>, the resulting normals will be inverted.</para>
            <para>Requires the primitive type to be set to .</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateTangents">
            <summary>
            <para>Generates a tangent vector for each vertex. Requires that each vertex have UVs and normals set already.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetMaterial(Godot.Material)">
            <summary>
            <para>Sets <see cref="T:Godot.Material"/> to be used by the <see cref="T:Godot.Mesh"/> you are constructing.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Clear">
            <summary>
            <para>Clear all information passed into the surface tool so far.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.CreateFrom(Godot.Mesh,System.Int32)">
            <summary>
            <para>Creates a vertex array from an existing <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.CreateFromBlendShape(Godot.Mesh,System.Int32,System.String)">
            <summary>
            <para>Creates a vertex array from the specified blend shape of an existing <see cref="T:Godot.Mesh"/>. This can be used to extract a specific pose from a blend shape.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AppendFrom(Godot.Mesh,System.Int32,Godot.Transform)">
            <summary>
            <para>Append vertices from a given <see cref="T:Godot.Mesh"/> surface onto the current vertex array with specified <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Commit(Godot.ArrayMesh,System.UInt32)">
            <summary>
            <para>Returns a constructed <see cref="T:Godot.ArrayMesh"/> from current information passed in. If an existing <see cref="T:Godot.ArrayMesh"/> is passed in as an argument, will add an extra surface to the existing <see cref="T:Godot.ArrayMesh"/>.</para>
            <para>FIXME: Document possible values for <c>flags</c>, it changed in 4.0. Likely some combinations of <see cref="T:Godot.Mesh.ArrayFormat"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.CommitToArrays">
            <summary>
            <para>Commits the data to the same format used by <see cref="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,System.UInt32)"/>. This way you can further process the mesh data using the <see cref="T:Godot.ArrayMesh"/> API.</para>
            </summary>
        </member>
        <member name="T:Godot.TCP_Server">
            <summary>
            <para>A TCP server. Listens to connections on a port and returns a <see cref="T:Godot.StreamPeerTCP"/> when it gets an incoming connection.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Listen(System.UInt16,System.String)">
            <summary>
            <para>Listen on the <c>port</c> binding to <c>bind_address</c>.</para>
            <para>If <c>bind_address</c> is set as <c>"*"</c> (default), the server will listen on all available addresses (both IPv4 and IPv6).</para>
            <para>If <c>bind_address</c> is set as <c>"0.0.0.0"</c> (for IPv4) or <c>"::"</c> (for IPv6), the server will listen on all available addresses matching that IP type.</para>
            <para>If <c>bind_address</c> is set to any valid address (e.g. <c>"192.168.1.101"</c>, <c>"::1"</c>, etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.IsConnectionAvailable">
            <summary>
            <para>Returns <c>true</c> if a connection is available for taking.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.IsListening">
            <summary>
            <para>Returns <c>true</c> if the server is currently listening for connections.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.TakeConnection">
            <summary>
            <para>If a connection is available, returns a StreamPeerTCP with the connection.</para>
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Stop">
            <summary>
            <para>Stops listening.</para>
            </summary>
        </member>
        <member name="T:Godot.TabContainer">
            <summary>
            <para>Sets the active tab's <c>visible</c> property to the value <c>true</c>. Sets all other children's to <c>false</c>.</para>
            <para>Ignores non-<see cref="T:Godot.Control"/> children.</para>
            <para>Individual tabs are always visible unless you use <see cref="M:Godot.TabContainer.SetTabDisabled(System.Int32,System.Boolean)"/> and <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/> to hide it.</para>
            <para>To hide only a tab's content, nest the content inside a child <see cref="T:Godot.Control"/>, so it receives the <see cref="T:Godot.TabContainer"/>'s visibility setting instead.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Left">
            <summary>
            <para>Align the tabs to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Center">
            <summary>
            <para>Align the tabs to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.TabContainer.TabAlignEnum.Right">
            <summary>
            <para>Align the tabs to the right.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabAlign">
            <summary>
            <para>The alignment of all tabs in the tab container. See the <see cref="T:Godot.TabContainer.TabAlignEnum"/> constants for details.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.CurrentTab">
            <summary>
            <para>The current tab index. When set, this index's <see cref="T:Godot.Control"/> node's <c>visible</c> property is set to <c>true</c> and all others are set to <c>false</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabsVisible">
            <summary>
            <para>If <c>true</c>, tabs are visible. If <c>false</c>, tabs' content and titles are hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.AllTabsInFront">
            <summary>
            <para>If <c>true</c>, all tabs are drawn in front of the panel. If <c>false</c>, inactive tabs are drawn behind the panel.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.DragToRearrangeEnabled">
            <summary>
            <para>If <c>true</c>, tabs can be rearranged with mouse drag.</para>
            </summary>
        </member>
        <member name="P:Godot.TabContainer.UseHiddenTabsForMinSize">
            <summary>
            <para>If <c>true</c>, children <see cref="T:Godot.Control"/> nodes that are hidden have their minimum size take into account in the total, instead of only the currently visible one.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabCount">
            <summary>
            <para>Returns the number of tabs.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPreviousTab">
            <summary>
            <para>Returns the previously active tab index.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetCurrentTabControl">
            <summary>
            <para>Returns the child <see cref="T:Godot.Control"/> node located at the active tab index.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabControl(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Control"/> node from the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)">
            <summary>
            <para>Sets a title for the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabTitle(System.Int32)">
            <summary>
            <para>Returns the title of the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets an icon for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabIcon(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> for the tab at index <c>tab_idx</c> or <c>null</c> if the tab has no <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>disabled</c> is <c>false</c>, hides the tab at index <c>tab_idx</c>.</para>
            <para>Note: Its title text will remain, unless also removed with <see cref="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the tab at index <c>tab_idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetPopup(Godot.Node)">
            <summary>
            <para>If set on a <see cref="T:Godot.Popup"/> node instance, a popup menu icon appears in the top-right corner of the <see cref="T:Godot.TabContainer"/>. Clicking it will expand the <see cref="T:Godot.Popup"/> node.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPopup">
            <summary>
            <para>Returns the <see cref="T:Godot.Popup"/> node instance if one has been set already with <see cref="M:Godot.TabContainer.SetPopup(Godot.Node)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabsRearrangeGroup(System.Int32)">
            <summary>
            <para>Defines rearrange group id, choose for each <see cref="T:Godot.TabContainer"/> the same value to enable tab drag between <see cref="T:Godot.TabContainer"/>. Enable drag with <c>set_drag_to_rearrange_enabled(true)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabsRearrangeGroup">
            <summary>
            <para>Returns the <see cref="T:Godot.TabContainer"/> rearrange group id.</para>
            </summary>
        </member>
        <member name="T:Godot.TabContainer.PrePopupPressedHandler">
            <summary>
            <para>Emitted when the <see cref="T:Godot.TabContainer"/>'s <see cref="T:Godot.Popup"/> button is clicked. See <see cref="M:Godot.TabContainer.SetPopup(Godot.Node)"/> for details.</para>
            </summary>
        </member>
        <member name="T:Godot.TabContainer.TabSelectedHandler">
            <summary>
            <para>Emitted when a tab is selected, even if it is the current tab.</para>
            </summary>
        </member>
        <member name="T:Godot.TabContainer.TabChangedHandler">
            <summary>
            <para>Emitted when switching to another tab.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs">
            <summary>
            <para>Simple tabs control, similar to <see cref="T:Godot.TabContainer"/> but is only in charge of drawing tabs, not interacting with children.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowNever">
            <summary>
            <para>Never show the close buttons.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowActiveOnly">
            <summary>
            <para>Only show the close button on the currently active tab.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.ShowAlways">
            <summary>
            <para>Show the close button on all tabs.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.CloseButtonDisplayPolicy.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Tabs.CloseButtonDisplayPolicy"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Left">
            <summary>
            <para>Align the tabs to the left.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Center">
            <summary>
            <para>Align the tabs to the center.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Right">
            <summary>
            <para>Align the tabs to the right.</para>
            </summary>
        </member>
        <member name="F:Godot.Tabs.TabAlignEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Tabs.TabAlignEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.CurrentTab">
            <summary>
            <para>Select tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabAlign">
            <summary>
            <para>The alignment of all tabs. See <see cref="T:Godot.Tabs.TabAlignEnum"/> for details.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabCloseDisplayPolicy">
            <summary>
            <para>Sets when the close button will appear on the tabs. See <see cref="T:Godot.Tabs.CloseButtonDisplayPolicy"/> for details.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.ScrollingEnabled">
            <summary>
            <para>if <c>true</c>, the mouse's scroll wheel cab be used to navigate the scroll view.</para>
            </summary>
        </member>
        <member name="P:Godot.Tabs.DragToRearrangeEnabled">
            <summary>
            <para>If <c>true</c>, tabs can be rearranged with mouse drag.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabCount">
            <summary>
            <para>Returns the number of tabs.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetPreviousTab">
            <summary>
            <para>Returns the previously active tab index.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)">
            <summary>
            <para>Sets a <c>title</c> for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabTitle(System.Int32)">
            <summary>
            <para>Returns the title of the tab at index <c>tab_idx</c>. Tab titles default to the name of the indexed child node, but this can be overridden with <see cref="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabTextDirection(System.Int32,Godot.Control.TextDirection)">
            <summary>
            <para>Sets tab title base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabTextDirection(System.Int32)">
            <summary>
            <para>Returns tab title text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabOpentypeFeature(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c> for the tab title. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabOpentypeFeature(System.Int32,System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c> of the tab title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.ClearTabOpentypeFeatures(System.Int32)">
            <summary>
            <para>Removes all OpenType features from the tab title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabLanguage(System.Int32,System.String)">
            <summary>
            <para>Sets language code of tab title used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabLanguage(System.Int32)">
            <summary>
            <para>Returns tab title language code.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets an <c>icon</c> for the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabIcon(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> for the tab at index <c>tab_idx</c> or <c>null</c> if the tab has no <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>disabled</c> is <c>false</c>, hides the tab at index <c>tab_idx</c>.</para>
            <para>Note: Its title text will remain unless it is also removed with <see cref="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabDisabled(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the tab at index <c>tab_idx</c> is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.RemoveTab(System.Int32)">
            <summary>
            <para>Removes the tab at index <c>tab_idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.AddTab(System.String,Godot.Texture2D)">
            <summary>
            <para>Adds a new tab.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabOffset">
            <summary>
            <para>Returns the number of hidden tabs offsetted to the left.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetOffsetButtonsVisible">
            <summary>
            <para>Returns <c>true</c> if the offset buttons (the ones that appear when there's not enough space for all tabs) are visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.EnsureTabVisible(System.Int32)">
            <summary>
            <para>Moves the scroll view to make the tab visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabRect(System.Int32)">
            <summary>
            <para>Returns tab <see cref="T:Godot.Rect2"/> with local position and size.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.MoveTab(System.Int32,System.Int32)">
            <summary>
            <para>Moves a tab from <c>from</c> to <c>to</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabsRearrangeGroup(System.Int32)">
            <summary>
            <para>Defines the rearrange group ID. Choose for each <see cref="T:Godot.Tabs"/> the same value to dragging tabs between <see cref="T:Godot.Tabs"/>. Enable drag with <c>set_drag_to_rearrange_enabled(true)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabsRearrangeGroup">
            <summary>
            <para>Returns the <see cref="T:Godot.Tabs"/>' rearrange group ID.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetSelectWithRmb(System.Boolean)">
            <summary>
            <para>If <c>true</c>, enables selecting a tab with the right mouse button.</para>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetSelectWithRmb">
            <summary>
            <para>Returns <c>true</c> if select with right mouse button is enabled.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.TabHoveredHandler">
            <summary>
            <para>Emitted when a tab is hovered by the mouse.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.TabClickedHandler">
            <summary>
            <para>Emitted when a tab is clicked, even if it is the current tab.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.RepositionActiveTabRequestHandler">
            <summary>
            <para>Emitted when the active tab is rearranged via mouse drag. See <see cref="P:Godot.Tabs.DragToRearrangeEnabled"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.RightButtonPressedHandler">
            <summary>
            <para>Emitted when a tab is right-clicked.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.TabClosedHandler">
            <summary>
            <para>Emitted when a tab is closed.</para>
            </summary>
        </member>
        <member name="T:Godot.Tabs.TabChangedHandler">
            <summary>
            <para>Emitted when switching to another tab.</para>
            </summary>
        </member>
        <member name="T:Godot.TextEdit">
            <summary>
            <para>TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.MatchCase">
            <summary>
            <para>Match case when searching.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.WholeWords">
            <summary>
            <para>Match whole words when searching.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.SearchFlags.Backwards">
            <summary>
            <para>Search from end to beginning.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Cut">
            <summary>
            <para>Cuts (copies and clears) the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Copy">
            <summary>
            <para>Copies the selected text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Paste">
            <summary>
            <para>Pastes the clipboard text over the selected text (or at the cursor's position).</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Clear">
            <summary>
            <para>Erases the whole <see cref="T:Godot.TextEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.SelectAll">
            <summary>
            <para>Selects the whole <see cref="T:Godot.TextEdit"/> text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Undo">
            <summary>
            <para>Undoes the previous action.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Redo">
            <summary>
            <para>Redoes the previous action.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.DirInherited">
            <summary>
            <para>Sets text direction to inherited.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.DirAuto">
            <summary>
            <para>Sets text direction to automatic.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.DirLtr">
            <summary>
            <para>Sets text direction to left-to-right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.DirRtl">
            <summary>
            <para>Sets text direction to right-to-left.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.DisplayUcc">
            <summary>
            <para>Toggles control character display.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertLrm">
            <summary>
            <para>Inserts left-to-right mark (LRM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertRlm">
            <summary>
            <para>Inserts right-to-left mark (RLM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertLre">
            <summary>
            <para>Inserts start of left-to-right embedding (LRE) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertRle">
            <summary>
            <para>Inserts start of right-to-left embedding (RLE) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertLro">
            <summary>
            <para>Inserts start of left-to-right override (LRO) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertRlo">
            <summary>
            <para>Inserts start of right-to-left override (RLO) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertPdf">
            <summary>
            <para>Inserts pop direction formatting (PDF) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertAlm">
            <summary>
            <para>Inserts Arabic letter mark (ALM) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertLri">
            <summary>
            <para>Inserts left-to-right isolate (LRI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertRli">
            <summary>
            <para>Inserts right-to-left isolate (RLI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertFsi">
            <summary>
            <para>Inserts first strong isolate (FSI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertPdi">
            <summary>
            <para>Inserts pop direction isolate (PDI) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertZwj">
            <summary>
            <para>Inserts zero width joiner (ZWJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertZwnj">
            <summary>
            <para>Inserts zero width non-joiner (ZWNJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertWj">
            <summary>
            <para>Inserts word joiner (WJ) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.InsertShy">
            <summary>
            <para>Inserts soft hyphen (SHY) character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextEdit.MenuItems.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.TextEdit.MenuItems"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Text">
            <summary>
            <para>String value of the <see cref="T:Godot.TextEdit"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.TextDirection">
            <summary>
            <para>Base text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Language">
            <summary>
            <para>Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.DrawControlChars">
            <summary>
            <para>If <c>true</c>, control characters are displayed.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Readonly">
            <summary>
            <para>If <c>true</c>, read-only mode is enabled. Existing text cannot be modified and new text cannot be added.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightCurrentLine">
            <summary>
            <para>If <c>true</c>, the line containing the cursor is highlighted.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.DrawTabs">
            <summary>
            <para>If <c>true</c>, the "tab" character will have a visible representation.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.DrawSpaces">
            <summary>
            <para>If <c>true</c>, the "space" character will have a visible representation.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightAllOccurrences">
            <summary>
            <para>If <c>true</c>, all occurrences of the selected text will be highlighted.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.OverrideSelectedFontColor">
            <summary>
            <para>If <c>true</c>, custom <c>font_color_selected</c> will be used for selected text.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ContextMenuEnabled">
            <summary>
            <para>If <c>true</c>, a right-click displays the context menu.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ShortcutKeysEnabled">
            <summary>
            <para>If <c>true</c>, shortcut keys for context menu items are enabled, even if the context menu is disabled.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.VirtualKeyboardEnabled">
            <summary>
            <para>If <c>true</c>, the native virtual keyboard is shown when focused on platforms that support it.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SelectingEnabled">
            <summary>
            <para>If <c>true</c>, text can be selected.</para>
            <para>If <c>false</c>, text can not be selected by the user or by the <see cref="M:Godot.TextEdit.Select(System.Int32,System.Int32,System.Int32,System.Int32)"/> or <see cref="M:Godot.TextEdit.SelectAll"/> methods.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SmoothScrolling">
            <summary>
            <para>If <c>true</c>, sets the <c>step</c> of the scrollbars to <c>0.25</c> which results in smoother scrolling.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.VScrollSpeed">
            <summary>
            <para>Vertical scroll sensitivity.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HidingEnabled">
            <summary>
            <para>If <c>true</c>, all lines that have been set to hidden by <see cref="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)"/>, will not be visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.WrapEnabled">
            <summary>
            <para>If <c>true</c>, enables text wrapping when it goes beyond the edge of what is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ScrollVertical">
            <summary>
            <para>If there is a vertical scrollbar this determines the current vertical scroll value in line numbers, starting at 0 for the top line.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ScrollHorizontal">
            <summary>
            <para>If there is a horizontal scrollbar this determines the current horizontal scroll value in pixels.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.MinimapDraw">
            <summary>
            <para>If <c>true</c>, a minimap is shown, providing an outline of your source code.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.MinimapWidth">
            <summary>
            <para>The width, in pixels, of the minimap.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlockMode">
            <summary>
            <para>If <c>true</c>, the caret displays as a rectangle.</para>
            <para>If <c>false</c>, the caret displays as a bar.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlink">
            <summary>
            <para>If <c>true</c>, the caret (visual cursor) blinks.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlinkSpeed">
            <summary>
            <para>Duration (in seconds) of a caret's blinking cycle.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretMovingByRightClick">
            <summary>
            <para>If <c>true</c>, a right-click moves the cursor at the mouse position before displaying the context menu.</para>
            <para>If <c>false</c>, the context menu disregards mouse location.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretMidGrapheme">
            <summary>
            <para>Allow moving caret, selecting and removing the individual composite character components.</para>
            <para>Note: Backspace is always removing individual composite character components.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.StructuredTextBidiOverride">
            <summary>
            <para>Set BiDi algorithm override for the structured text.</para>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.StructuredTextBidiOverrideOptions">
            <summary>
            <para>Set additional options for BiDi override.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SetOpentypeFeature(System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c>. More info: <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags">OpenType feature tags</a>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetOpentypeFeature(System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearOpentypeFeatures">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.InsertTextAtCursor(System.String)">
            <summary>
            <para>Insert the specified text at the cursor position.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLineCount">
            <summary>
            <para>Returns the amount of total lines in the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLine(System.Int32)">
            <summary>
            <para>Returns the text of a specific line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SetLine(System.Int32,System.String)">
            <summary>
            <para>Sets the text for a specific line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CenterViewportToCursor">
            <summary>
            <para>Centers the viewport on the line the editing cursor is at. This also resets the <see cref="P:Godot.TextEdit.ScrollHorizontal"/> value to <c>0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetColumn(System.Int32,System.Boolean)">
            <summary>
            <para>Moves the cursor at the specified <c>column</c> index.</para>
            <para>If <c>adjust_viewport</c> is set to <c>true</c>, the viewport will center at the cursor position after the move occurs.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetLine(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            <para>Moves the cursor at the specified <c>line</c> index.</para>
            <para>If <c>adjust_viewport</c> is set to <c>true</c>, the viewport will center at the cursor position after the move occurs.</para>
            <para>If <c>can_be_hidden</c> is set to <c>true</c>, the specified <c>line</c> can be hidden using <see cref="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetColumn">
            <summary>
            <para>Returns the column the editing cursor is at.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetLine">
            <summary>
            <para>Returns the line the editing cursor is at.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Cut">
            <summary>
            <para>Cut's the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Copy">
            <summary>
            <para>Copy's the current text selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Paste">
            <summary>
            <para>Paste the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Perform selection, from line/column to line/column.</para>
            <para>If <see cref="P:Godot.TextEdit.SelectingEnabled"/> is <c>false</c>, no selection will occur.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SelectAll">
            <summary>
            <para>Select all the text.</para>
            <para>If <see cref="P:Godot.TextEdit.SelectingEnabled"/> is <c>false</c>, no selection will occur.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Deselect">
            <summary>
            <para>Deselects the current selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsSelectionActive">
            <summary>
            <para>Returns <c>true</c> if the selection is active.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromLine">
            <summary>
            <para>Returns the selection begin line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromColumn">
            <summary>
            <para>Returns the selection begin column.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToLine">
            <summary>
            <para>Returns the selection end line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToColumn">
            <summary>
            <para>Returns the selection end column.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionText">
            <summary>
            <para>Returns the text inside the selection.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetWordUnderCursor">
            <summary>
            <para>Returns a <see cref="T:System.String"/> text with the word under the caret (text cursor) location.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Search(System.String,System.UInt32,System.Int32,System.Int32)">
            <summary>
            <para>Perform a search inside the text. Search flags can be specified in the <see cref="T:Godot.TextEdit.SearchFlags"/> enum.</para>
            <para>Returns an empty <c>Dictionary</c> if no result was found. Otherwise, returns a <c>Dictionary</c> containing <c>line</c> and <c>column</c> entries, e.g:</para>
            <para><code>
            var result = search(key, flags, line, column)
            if !result.is_empty():
                # Result found.
                var line_number = result.line
                var column_number = result.column
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Undo">
            <summary>
            <para>Perform undo operation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Redo">
            <summary>
            <para>Perform redo operation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearUndoHistory">
            <summary>
            <para>Clears the undo history.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, hides the line of the specified index.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsLineHidden(System.Int32)">
            <summary>
            <para>Returns whether the line at the specified index is hidden or not.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldAllLines">
            <summary>
            <para>Folds all lines that are possible to be folded (see <see cref="M:Godot.TextEdit.CanFold(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnhideAllLines">
            <summary>
            <para>Unhide all lines that were previously set to hidden by <see cref="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldLine(System.Int32)">
            <summary>
            <para>Folds the given line, if possible (see <see cref="M:Godot.TextEdit.CanFold(System.Int32)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnfoldLine(System.Int32)">
            <summary>
            <para>Unfolds the given line, if folded.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ToggleFoldLine(System.Int32)">
            <summary>
            <para>Toggle the folding of the code block at the given line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CanFold(System.Int32)">
            <summary>
            <para>Returns if the given line is foldable, that is, it has indented lines right below it.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsFolded(System.Int32)">
            <summary>
            <para>Returns whether the line at the specified index is folded or not.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.MenuOption(System.Int32)">
            <summary>
            <para>Triggers a right-click menu action by the specified index. See <see cref="T:Godot.TextEdit.MenuItems"/> for a list of available indexes.</para>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetMenu">
            <summary>
            <para>Returns the <see cref="T:Godot.PopupMenu"/> of this <see cref="T:Godot.TextEdit"/>. By default, this menu is displayed when right-clicking on the <see cref="T:Godot.TextEdit"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.TextEdit.TextChangedHandler">
            <summary>
            <para>Emitted when the text changes.</para>
            </summary>
        </member>
        <member name="T:Godot.TextEdit.CursorChangedHandler">
            <summary>
            <para>Emitted when the cursor changes.</para>
            </summary>
        </member>
        <member name="T:Godot.TextLine">
            <summary>
            <para>Abstraction over <see cref="T:Godot.TextServer"/> for handling single line of text.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.Direction">
            <summary>
            <para>Text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.Orientation">
            <summary>
            <para>Text orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.PreserveInvalid">
            <summary>
            <para>If set to <c>true</c> text will display invalid characters.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.PreserveControl">
            <summary>
            <para>If set to <c>true</c> text will display control characters.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.Width">
            <summary>
            <para>Text line width.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.Align">
            <summary>
            <para>Text horizontal alignment.</para>
            </summary>
        </member>
        <member name="P:Godot.TextLine.Flags">
            <summary>
            <para>Line Alignment rules. For more info see <see cref="T:Godot.TextServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.Clear">
            <summary>
            <para>Clears text line (removes text and inline objects).</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.SetBidiOverride(Godot.Collections.Array)">
            <summary>
            <para>Overrides BiDi for the structured text.</para>
            <para>Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.AddString(System.String,Godot.Font,System.Int32,Godot.Collections.Dictionary,System.String)">
            <summary>
            <para>Adds text span and font to draw it.</para>
            </summary>
            <param name="opentypeFeatures">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.TextLine.AddObject(System.Object,Godot.Vector2,Godot.VAlign,System.Int32)">
            <summary>
            <para>Adds inline object to the text buffer, <c>key</c> must be unique. In the text, object is represented as <c>length</c> object replacement characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.ResizeObject(System.Object,Godot.Vector2,Godot.VAlign)">
            <summary>
            <para>Sets new size and alignment of embedded object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.TabAlign(System.Single[])">
            <summary>
            <para>Aligns text to the given tab-stops.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetObjects">
            <summary>
            <para>Returns array of inline objects.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetObjectRect(System.Object)">
            <summary>
            <para>Returns bounding rectangle of the inline object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetSize">
            <summary>
            <para>Returns size of the bounding box of the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetRid">
            <summary>
            <para>Returns TextServer buffer RID.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetLineAscent">
            <summary>
            <para>Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetLineDescent">
            <summary>
            <para>Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetLineWidth">
            <summary>
            <para>Returns width (for horizontal layout) or height (for vertical) of the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetLineUnderlinePosition">
            <summary>
            <para>Returns pixel offset of the underline below the baseline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.GetLineUnderlineThickness">
            <summary>
            <para>Returns thickness of the underline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextLine.Draw(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextLine.DrawOutline(Godot.RID,Godot.Vector2,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextLine.HitTest(System.Single)">
            <summary>
            <para>Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.</para>
            </summary>
        </member>
        <member name="T:Godot.TextParagraph">
            <summary>
            <para>Abstraction over <see cref="T:Godot.TextServer"/> for handling paragraph of text.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.Direction">
            <summary>
            <para>Text writing direction.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.Orientation">
            <summary>
            <para>Text orientation.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.PreserveInvalid">
            <summary>
            <para>If set to <c>true</c> text will display invalid characters.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.PreserveControl">
            <summary>
            <para>If set to <c>true</c> text will display control characters.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.Align">
            <summary>
            <para>Paragraph horizontal alignment.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.Flags">
            <summary>
            <para>Line breaking and alignment rules. For more info see <see cref="T:Godot.TextServer"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextParagraph.Width">
            <summary>
            <para>Paragraph width.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.Clear">
            <summary>
            <para>Clears text paragraph (removes text and inline objects).</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.SetBidiOverride(Godot.Collections.Array)">
            <summary>
            <para>Overrides BiDi for the structured text.</para>
            <para>Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.SetDropcap(System.String,Godot.Font,System.Int32,System.Nullable{Godot.Rect2},Godot.Collections.Dictionary,System.String)">
            <summary>
            <para>Sets drop cap, overrides previously set drop cap. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.</para>
            </summary>
            <param name="dropcapMargins">If the parameter is null, then the default value is new Rect2(0, 0, 0, 0)</param>
            <param name="opentypeFeatures">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.TextParagraph.ClearDropcap">
            <summary>
            <para>Removes dropcap.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.AddString(System.String,Godot.Font,System.Int32,Godot.Collections.Dictionary,System.String)">
            <summary>
            <para>Adds text span and font to draw it.</para>
            </summary>
            <param name="opentypeFeatures">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.TextParagraph.AddObject(System.Object,Godot.Vector2,Godot.VAlign,System.Int32)">
            <summary>
            <para>Adds inline object to the text buffer, <c>key</c> must be unique. In the text, object is represented as <c>length</c> object replacement characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.ResizeObject(System.Object,Godot.Vector2,Godot.VAlign)">
            <summary>
            <para>Sets new size and alignment of embedded object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.TabAlign(System.Single[])">
            <summary>
            <para>Aligns paragraph to the given tab-stops.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetNonWrapedSize">
            <summary>
            <para>Returns the size of the bounding box of the paragraph, without line breaks.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetSize">
            <summary>
            <para>Returns the size of the bounding box of the paragraph.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetRid">
            <summary>
            <para>Returns TextServer full string buffer RID.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineRid(System.Int32)">
            <summary>
            <para>Returns TextServer line buffer RID.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetDropcapRid">
            <summary>
            <para>Return drop cap text buffer RID.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineCount">
            <summary>
            <para>Returns number of lines in the paragraph.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineObjects(System.Int32)">
            <summary>
            <para>Returns array of inline objects in the line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineObjectRect(System.Int32,System.Object)">
            <summary>
            <para>Returns bounding rectangle of the inline object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineSize(System.Int32)">
            <summary>
            <para>Returns size of the bounding box of the line of text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineRange(System.Int32)">
            <summary>
            <para>Returns character range of the line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineAscent(System.Int32)">
            <summary>
            <para>Returns the text line ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineDescent(System.Int32)">
            <summary>
            <para>Returns the text line descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineWidth(System.Int32)">
            <summary>
            <para>Returns width (for horizontal layout) or height (for vertical) of the line of text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineUnderlinePosition(System.Int32)">
            <summary>
            <para>Returns pixel offset of the underline below the baseline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetLineUnderlineThickness(System.Int32)">
            <summary>
            <para>Returns thickness of the underline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetDropcapSize">
            <summary>
            <para>Returns drop cap bounding box size.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.GetDropcapLines">
            <summary>
            <para>Returns number of lines used by dropcap.</para>
            </summary>
        </member>
        <member name="M:Godot.TextParagraph.Draw(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color},System.Nullable{Godot.Color})">
            <summary>
            <para>Draw all lines of the text and drop cap into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="dcColor">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.DrawOutline(Godot.RID,Godot.Vector2,System.Int32,System.Nullable{Godot.Color},System.Nullable{Godot.Color})">
            <summary>
            <para>Draw outilines of all lines of the text and drop cap into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
            <param name="dcColor">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.DrawLine(Godot.RID,Godot.Vector2,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw single line of text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.DrawLineOutline(Godot.RID,Godot.Vector2,System.Int32,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw outline of the single line of text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.DrawDropcap(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw drop cap into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.DrawDropcapOutline(Godot.RID,Godot.Vector2,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw drop cap outline into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the top left corner of the bounding box.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextParagraph.HitTest(Godot.Vector2)">
            <summary>
            <para>Returns caret character offset at the specified coordinates. This function always returns a valid position.</para>
            </summary>
        </member>
        <member name="T:Godot.TextServer">
            <summary>
            <para><see cref="T:Godot.TextServer"/> is the API backend for managing fonts, and rendering complex text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Rtl">
            <summary>
            <para>Grapheme is part of right-to-left or bottom-to-top run.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Virtual">
            <summary>
            <para>Grapheme is not part of source text, it was added by justification process.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Space">
            <summary>
            <para>Grapheme is whitespace.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.BreakHard">
            <summary>
            <para>Grapheme is mandatory break point (e.g. <c>"\n"</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.BreakSoft">
            <summary>
            <para>Grapheme is optional break point (e.g. space).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Tab">
            <summary>
            <para>Grapheme is the tabulation character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Elongation">
            <summary>
            <para>Grapheme is kashida.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.GraphemeFlag.Punctuation">
            <summary>
            <para>Grapheme is punctuation character.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.BidiLayout">
            <summary>
            <para>TextServer supports bidirectional layouts.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.VerticalLayout">
            <summary>
            <para>TextServer supports vertical layouts.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.Shaping">
            <summary>
            <para>TextServer supports complex text shaping.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.KashidaJustification">
            <summary>
            <para>TextServer supports justification using kashidas.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.BreakIterators">
            <summary>
            <para>TextServer supports complex line/word breaking rules (e.g. dictionary based).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.FontSystem">
            <summary>
            <para>TextServer supports loading system fonts.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.FontVariable">
            <summary>
            <para>TextServer supports variable fonts.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Feature.UseSupportData">
            <summary>
            <para>TextServer require external data file for some features.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Orientation.Horizontal">
            <summary>
            <para>Text is written horizontally.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Orientation.Vertical">
            <summary>
            <para>Left to right text is written vertically from top to bottom.</para>
            <para>Right to left text is written vertically from bottom to top.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.JustificationFlag.None">
            <summary>
            <para>Do not justify text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.JustificationFlag.Kashida">
            <summary>
            <para>Justify text by adding and removing kashidas.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.JustificationFlag.WordBound">
            <summary>
            <para>Justify text by changing width of the spaces between the words.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.JustificationFlag.TrimEdgeSpaces">
            <summary>
            <para>Remove trailing and leading spaces from the justified text.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.JustificationFlag.AfterLastTab">
            <summary>
            <para>Only apply justification to the part of the text after the last tab.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.LineBreakFlag.None">
            <summary>
            <para>Do not break the line.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.LineBreakFlag.Mandatory">
            <summary>
            <para>Break the line at the line mandatory break characters (e.g. <c>"\n"</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.LineBreakFlag.WordBound">
            <summary>
            <para>Break the line between the words.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.LineBreakFlag.GraphemeBound">
            <summary>
            <para>Break the line between any unconnected graphemes.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Hinting.None">
            <summary>
            <para>Disables font hinting (smoother but less crisp).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Hinting.Light">
            <summary>
            <para>Use the light font hinting mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Hinting.Normal">
            <summary>
            <para>Use the default font hinting mode (crisper but less smooth).</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Direction.Auto">
            <summary>
            <para>Text direction is determined based on contents and current locale.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Direction.Ltr">
            <summary>
            <para>Text is written from left to right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextServer.Direction.Rtl">
            <summary>
            <para>Text is written from right to left.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.HasFeature(Godot.TextServer.Feature)">
            <summary>
            <para>Returns <c>true</c> if the server supports a feature.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.GetName">
            <summary>
            <para>Returns the name of the server interface.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.LoadSupportData(System.String)">
            <summary>
            <para>Loads optional TextServer database (e.g. ICU break iterators and dictionaries).</para>
            <para>Note: This function should be called before any other TextServer functions used, otherwise it won't have any effect.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.IsLocaleRightToLeft(System.String)">
            <summary>
            <para>Returns <c>true</c> if locale is right-to-left.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.NameToTag(System.String)">
            <summary>
            <para>Converts readable feature, variation, script or language name to OpenType tag.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.TagToName(System.Int32)">
            <summary>
            <para>Converts OpenType tag to readable feature, variation, script or language name.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.Has(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if <c>rid</c> is valid resource owned by this text server.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FreeRid(Godot.RID)">
            <summary>
            <para>Frees an object created by this <see cref="T:Godot.TextServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.CreateFontSystem(System.String,System.Int32)">
            <summary>
            <para>Creates new font from the system font. To free the resulting font, use <see cref="M:Godot.TextServer.FreeRid(Godot.RID)"/> method.</para>
            <para>Note: This method is supported by servers with the <c>FEATURE_FONT_SYSTEM</c> feature.</para>
            <para>Note: For non-scalable fonts <c>base_size</c> is ignored, use <see cref="M:Godot.TextServer.FontGetBaseSize(Godot.RID)"/> to check actual font size.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.CreateFontResource(System.String,System.Int32)">
            <summary>
            <para>Creates new font from the file. To free the resulting font, use <see cref="M:Godot.TextServer.FreeRid(Godot.RID)"/> method.</para>
            <para>Note: For non-scalable fonts <c>base_size</c> is ignored, use <see cref="M:Godot.TextServer.FontGetBaseSize(Godot.RID)"/> to check actual font size.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.CreateFontMemory(System.Byte[],System.String,System.Int32)">
            <summary>
            <para>Creates new font from the data in memory. To free the resulting font, use <see cref="M:Godot.TextServer.FreeRid(Godot.RID)"/> method.</para>
            <para>Note: For non-scalable fonts <c>base_size</c> is ignored, use <see cref="M:Godot.TextServer.FontGetBaseSize(Godot.RID)"/> to check actual font size.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetHeight(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the total font height (ascent plus descent) in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetAscent(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the font ascent (number of pixels above the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetDescent(Godot.RID,System.Int32)">
            <summary>
            <para>Returns the font descent (number of pixels below the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetUnderlinePosition(Godot.RID,System.Int32)">
            <summary>
            <para>Returns underline offset (number of pixels below the baseline).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetUnderlineThickness(Godot.RID,System.Int32)">
            <summary>
            <para>Returns underline thickness in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetAntialiased(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets font anti-aliasing.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetAntialiased(Godot.RID)">
            <summary>
            <para>Returns <c>true</c>, if font anti-aliasing is supported and enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetFeatureList(Godot.RID)">
            <summary>
            <para>Returns list of OpenType features supported by font.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetVariationList(Godot.RID)">
            <summary>
            <para>Returns list of supported <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg">variation coordinates</a>, each coordinate is returned as <c>tag: Vector3i(min_value,max_value,default_value)</c>.</para>
            <para>Font variations allow for continuous change of glyph characteristics along some given design axis, such as weight, width or slant.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetVariation(Godot.RID,System.String,System.Double)">
            <summary>
            <para>Sets variation coordinate <c>name</c>. Unsupported coordinates will be silently ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetVariation(Godot.RID,System.String)">
            <summary>
            <para>Returns variation coordinate <c>tag</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetHinting(Godot.RID,Godot.TextServer.Hinting)">
            <summary>
            <para>Sets font hinting.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetHinting(Godot.RID)">
            <summary>
            <para>Returns the font hinting.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetDistanceFieldHint(Godot.RID,System.Boolean)">
            <summary>
            <para>Sets font distance field hint.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetDistanceFieldHint(Godot.RID)">
            <summary>
            <para>Returns <c>true</c>, if distance field hint is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetForceAutohinter(Godot.RID,System.Boolean)">
            <summary>
            <para>Enables/disables default autohinter.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetForceAutohinter(Godot.RID)">
            <summary>
            <para>Returns <c>true</c>, if autohinter is supported and enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontHasChar(Godot.RID,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if <c>char</c> is available in the font.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetSupportedChars(Godot.RID)">
            <summary>
            <para>Returns a string containing all the characters available in the font.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontHasOutline(Godot.RID)">
            <summary>
            <para>Returns <c>true</c>, if font supports glyph outlines.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetBaseSize(Godot.RID)">
            <summary>
            <para>Returns the default size of the font.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontIsLanguageSupported(Godot.RID,System.String)">
            <summary>
            <para>Returns <c>true</c>, if font supports given language (ISO 639 code).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetLanguageSupportOverride(Godot.RID,System.String,System.Boolean)">
            <summary>
            <para>Adds override for <see cref="M:Godot.TextServer.FontIsLanguageSupported(Godot.RID,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetLanguageSupportOverride(Godot.RID,System.String)">
            <summary>
            <para>Returns <c>true</c> if support override is enabled for the <c>language</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontRemoveLanguageSupportOverride(Godot.RID,System.String)">
            <summary>
            <para>Remove language support override.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetLanguageSupportOverrides(Godot.RID)">
            <summary>
            <para>Returns list of language support overrides.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontIsScriptSupported(Godot.RID,System.String)">
            <summary>
            <para>Returns <c>true</c>, if font supports given script (ISO 15924 code).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetScriptSupportOverride(Godot.RID,System.String,System.Boolean)">
            <summary>
            <para>Adds override for <see cref="M:Godot.TextServer.FontIsScriptSupported(Godot.RID,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetScriptSupportOverride(Godot.RID,System.String)">
            <summary>
            <para>Returns <c>true</c> if support override is enabled for the <c>script</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontRemoveScriptSupportOverride(Godot.RID,System.String)">
            <summary>
            <para>Removes script support override.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetScriptSupportOverrides(Godot.RID)">
            <summary>
            <para>Returns list of script support overrides.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetGlyphIndex(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Returns the glyph index of a <c>char</c>, optionally modified by the <c>variation_selector</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetGlyphAdvance(Godot.RID,System.UInt32,System.Int32)">
            <summary>
            <para>Returns advance of the glyph.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontGetGlyphKerning(Godot.RID,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            <para>Returns a kerning of the pair of glyphs.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontDrawGlyph(Godot.RID,Godot.RID,System.Int32,Godot.Vector2,System.UInt32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws single glyph into a canvas item at the position, using <c>font</c> at the size <c>size</c>.</para>
            <para>Note: Glyph index is specific to the font, use glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.TextServer.FontGetGlyphIndex(Godot.RID,System.Int32,System.Int32)"/>.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextServer.FontDrawGlyphOutline(Godot.RID,Godot.RID,System.Int32,System.Int32,Godot.Vector2,System.UInt32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draws single glyph outline of size <c>outline_size</c> into a canvas item at the position, using <c>font</c> at the size <c>size</c>.</para>
            <para>Note: Glyph index is specific to the font, use glyphs indices returned by <see cref="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)"/> or <see cref="M:Godot.TextServer.FontGetGlyphIndex(Godot.RID,System.Int32,System.Int32)"/>.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextServer.FontGetOversampling">
            <summary>
            <para>Returns the font oversampling factor, shared by all fonts in the TextServer.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FontSetOversampling(System.Single)">
            <summary>
            <para>Sets oversampling factor, shared by all font in the TextServer.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.GetSystemFonts">
            <summary>
            <para>Returns list of available system fonts.</para>
            <para>Note: This method is supported by servers with the <c>FEATURE_FONT_SYSTEM</c> feature.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.GetHexCodeBoxSize(System.Int32,System.Int32)">
            <summary>
            <para>Returns size of the replacement character (box with character hexadecimal code that is drawn in place of invalid characters).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.DrawHexCodeBox(Godot.RID,System.Int32,Godot.Vector2,System.Int32,Godot.Color)">
            <summary>
            <para>Draws box displaying character hexadecimal code. Used for replacing missing characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.CreateShapedText(Godot.TextServer.Direction,Godot.TextServer.Orientation)">
            <summary>
            <para>Creates new buffer for complex text layout, with the given <c>direction</c> and <c>orientation</c>. To free the resulting buffer, use <see cref="M:Godot.TextServer.FreeRid(Godot.RID)"/> method.</para>
            <para>Note: Direction is ignored if server does not support <c>FEATURE_BIDI_LAYOUT</c> feature.</para>
            <para>Note: Orientation is ignored if server does not support <c>FEATURE_VERTICAL_LAYOUT</c> feature.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextClear(Godot.RID)">
            <summary>
            <para>Clears text buffer (removes text and inline objects).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSetDirection(Godot.RID,Godot.TextServer.Direction)">
            <summary>
            <para>Sets desired text direction. If set to <c>TEXT_DIRECTION_AUTO</c>, direction will be detected based on the buffer contents and current locale.</para>
            <para>Note: Direction is ignored if server does not support <c>FEATURE_BIDI_LAYOUT</c> feature.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetDirection(Godot.RID)">
            <summary>
            <para>Returns direction of the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSetBidiOverride(Godot.RID,Godot.Collections.Array)">
            <summary>
            <para>Overrides BiDi for the structured text.</para>
            <para>Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSetOrientation(Godot.RID,Godot.TextServer.Orientation)">
            <summary>
            <para>Sets desired text orientation.</para>
            <para>Note: Orientation is ignored if server does not support <c>FEATURE_VERTICAL_LAYOUT</c> feature.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetOrientation(Godot.RID)">
            <summary>
            <para>Returns text orientation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSetPreserveInvalid(Godot.RID,System.Boolean)">
            <summary>
            <para>If set to <c>true</c> text buffer will display invalid characters as hexadecimal codes, otherwise nothing is displayed.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetPreserveInvalid(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if text buffer is configured to display hexadecimal codes in place of invalid characters.</para>
            <para>Note: If set to <c>false</c>, nothing is displayed  in place of invalid characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSetPreserveControl(Godot.RID,System.Boolean)">
            <summary>
            <para>If set to <c>true</c> text buffer will display control characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetPreserveControl(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if text buffer is configured to display control characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextAddString(Godot.RID,System.String,Godot.Collections.Array,System.Int32,Godot.Collections.Dictionary,System.String)">
            <summary>
            <para>Adds text span and font to draw it to the text buffer.</para>
            </summary>
            <param name="opentypeFeatures">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.TextServer.ShapedTextAddObject(Godot.RID,System.Object,Godot.Vector2,Godot.VAlign,System.Int32)">
            <summary>
            <para>Adds inline object to the text buffer, <c>key</c> must be unique. In the text, object is represented as <c>length</c> object replacement characters.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextResizeObject(Godot.RID,System.Object,Godot.Vector2,Godot.VAlign)">
            <summary>
            <para>Sets new size and alignment of embedded object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextSubstr(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Returns text buffer for the substring of the text in the <c>shaped</c> text buffer (including inline objects).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetParent(Godot.RID)">
            <summary>
            <para>Sets text orientation.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextFitToWidth(Godot.RID,System.Single,System.Byte)">
            <summary>
            <para>Adjusts text with to fit to specified width, returns new text width.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextTabAlign(Godot.RID,System.Single[])">
            <summary>
            <para>Aligns shaped text to the given tab-stops.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextShape(Godot.RID)">
            <summary>
            <para>Shapes buffer if it's not shaped. Returns <c>true</c> if the string is shaped successfully.</para>
            <para>Note: It is not necessary to call this function manually, buffer will be shaped automatically as soon as any of its output data is requested.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextIsReady(Godot.RID)">
            <summary>
            <para>Returns <c>true</c> if buffer is successfully shaped.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetGlyphs(Godot.RID)">
            <summary>
            <para>Returns text glyphs.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetRange(Godot.RID)">
            <summary>
            <para>Returns substring buffer character range in the parent buffer.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetLineBreaksAdv(Godot.RID,System.Single[],System.Int32,System.Boolean,System.Byte)">
            <summary>
            <para>Breaks text to the lines and columns. Returns character ranges for each segment.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetLineBreaks(Godot.RID,System.Single,System.Int32,System.Byte)">
            <summary>
            <para>Breaks text to the lines and returns character ranges for each line.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetWordBreaks(Godot.RID)">
            <summary>
            <para>Breaks text into words and returns array of character ranges.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetObjects(Godot.RID)">
            <summary>
            <para>Returns array of inline objects.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetObjectRect(Godot.RID,System.Object)">
            <summary>
            <para>Returns bounding rectangle of the inline object.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetSize(Godot.RID)">
            <summary>
            <para>Returns size of the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetAscent(Godot.RID)">
            <summary>
            <para>Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).</para>
            <para>Note: overall ascent can be higher than font ascent, if some glyphs are displaced from the baseline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetDescent(Godot.RID)">
            <summary>
            <para>Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).</para>
            <para>Note: overall descent can be higher than font descent, if some glyphs are displaced from the baseline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetWidth(Godot.RID)">
            <summary>
            <para>Returns width (for horizontal layout) or height (for vertical) of the text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetUnderlinePosition(Godot.RID)">
            <summary>
            <para>Returns pixel offset of the underline below the baseline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetUnderlineThickness(Godot.RID)">
            <summary>
            <para>Returns thickness of the underline.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetCarets(Godot.RID,System.Int32)">
            <summary>
            <para>Returns shapes of the carets corresponding to the character offset <c>position</c> in the text. Returned caret shape is 1 pixel wide rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetSelection(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Returns selection rectangles for the specified character range.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextHitTestGrapheme(Godot.RID,System.Single)">
            <summary>
            <para>Returns grapheme index at the specified pixel offset at the baseline, or <c>-1</c> if none is found.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextHitTestPosition(Godot.RID,System.Single)">
            <summary>
            <para>Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextNextGraphemePos(Godot.RID,System.Int32)">
            <summary>
            <para>Returns composite character end position closest to the <c>pos</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextPrevGraphemePos(Godot.RID,System.Int32)">
            <summary>
            <para>Returns composite character start position closest to the <c>pos</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ShapedTextDraw(Godot.RID,Godot.RID,Godot.Vector2,System.Single,System.Single,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw shaped text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextServer.ShapedTextDrawOutline(Godot.RID,Godot.RID,Godot.Vector2,System.Single,System.Single,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            <para>Draw the outline of the shaped text into a canvas item at a given position, with <c>color</c>. <c>pos</c> specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout).</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.TextServer.ShapedTextGetDominantDirecitonInRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            <para>Returns dominant direction of in the range of text.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.FormatNumber(System.String,System.String)">
            <summary>
            <para>Converts a number from the Western Arabic (0..9) to the numeral systems used in <c>language</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.ParseNumber(System.String,System.String)">
            <summary>
            <para>Converts a number from the numeral systems used in <c>language</c> to Western Arabic (0..9).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServer.PercentSign(System.String)">
            <summary>
            <para>Returns percent sign used in the <c>language</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.TextServerManager">
            <summary>
            <para><see cref="T:Godot.TextServerManager"/> is the API backend for loading, enumeration and switching <see cref="T:Godot.TextServer"/>s.</para>
            <para>Note: Switching text server at runtime is possible, but will invalidate all fonts and text buffers. Make sure to unload all controls, fonts, and themes before doing so.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetInterfaceCount">
            <summary>
            <para>Returns the number of interfaces currently registered.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetInterfaceName(System.Int32)">
            <summary>
            <para>Returns the interface name registered at a given index.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetInterfaceFeatures(System.Int32)">
            <summary>
            <para>Returns text server supported features (binary OR).</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetInterface(System.Int32)">
            <summary>
            <para>Returns the interface registered at a given index.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetInterfaces">
            <summary>
            <para>Returns a list of available interfaces the index and name of each interface.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.FindInterface(System.String)">
            <summary>
            <para>Finds an interface by its name.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.SetPrimaryInterface(System.Int32)">
            <summary>
            <para>Sets (and initializes it if required) interface registered at a given index as the primary. Invalidates all references to the fonts and text buffers.</para>
            </summary>
        </member>
        <member name="M:Godot.TextServerManager.GetPrimaryInterface">
            <summary>
            <para>Returns the primary <see cref="T:Godot.TextServer"/> interface.</para>
            </summary>
        </member>
        <member name="T:Godot.Texture2D">
            <summary>
            <para>A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D <see cref="T:Godot.Sprite2D"/> or GUI <see cref="T:Godot.Control"/>.</para>
            <para>Textures are often created by loading them from a file. See <c>@GDScript.load</c>.</para>
            <para><see cref="T:Godot.Texture2D"/> is a base for other resources. It cannot be used directly.</para>
            <para>Note: The maximum texture size is 16384×16384 pixels due to graphics hardware limitations. Larger textures may fail to import.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture2D.GetWidth">
            <summary>
            <para>Returns the texture width.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture2D.GetHeight">
            <summary>
            <para>Returns the texture height.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture2D.GetSize">
            <summary>
            <para>Returns the texture size.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture2D.HasAlpha">
            <summary>
            <para>Returns <c>true</c> if this <see cref="T:Godot.Texture2D"/> has an alpha channel.</para>
            </summary>
        </member>
        <member name="M:Godot.Texture2D.Draw(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color},System.Boolean)">
            <summary>
            <para>Draws the texture using a <see cref="T:Godot.CanvasItem"/> with the <see cref="T:Godot.RenderingServer"/> API at the specified <c>position</c>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Texture2D.DrawRect(Godot.RID,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean)">
            <summary>
            <para>Draws the texture using a <see cref="T:Godot.CanvasItem"/> with the <see cref="T:Godot.RenderingServer"/> API.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Texture2D.DrawRectRegion(Godot.RID,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,System.Boolean)">
            <summary>
            <para>Draws a part of the texture using a <see cref="T:Godot.CanvasItem"/> with the <see cref="T:Godot.RenderingServer"/> API.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.Texture2D.GetData">
            <summary>
            <para>Returns an <see cref="T:Godot.Image"/> that is a copy of data from this <see cref="T:Godot.Texture2D"/>. <see cref="T:Godot.Image"/>s can be accessed and manipulated directly.</para>
            </summary>
        </member>
        <member name="T:Godot.TextureButton">
            <summary>
            <para><see cref="T:Godot.TextureButton"/> has the same functionality as <see cref="T:Godot.Button"/>, except it uses sprites instead of Godot's <see cref="T:Godot.Theme"/> resource. It is faster to create, but it doesn't support localization like more complex <see cref="T:Godot.Control"/>s.</para>
            <para>The "normal" state must contain a texture (<see cref="P:Godot.TextureButton.TextureNormal"/>); other textures are optional.</para>
            <para>See also <see cref="T:Godot.BaseButton"/> which contains common properties and methods associated with this node.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Scale">
            <summary>
            <para>Scale to fit the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Tile">
            <summary>
            <para>Tile inside the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.Keep">
            <summary>
            <para>The texture keeps its original size and stays in the bounding rectangle's top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepCentered">
            <summary>
            <para>The texture keeps its original size and stays centered in the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspect">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspectCentered">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureButton.StretchModeEnum.KeepAspectCovered">
            <summary>
            <para>Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureNormal">
            <summary>
            <para>Texture to display by default, when the node is not in the disabled, focused, hover or pressed state.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TexturePressed">
            <summary>
            <para>Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the Enter key or if the player presses the <see cref="P:Godot.BaseButton.Shortcut"/> key.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureHover">
            <summary>
            <para>Texture to display when the mouse hovers the node.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureDisabled">
            <summary>
            <para>Texture to display when the node is disabled. See <see cref="P:Godot.BaseButton.Disabled"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureFocused">
            <summary>
            <para>Texture to display when the node has mouse or keyboard focus.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureClickMask">
            <summary>
            <para>Pure black and white <see cref="T:Godot.BitMap"/> image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.Expand">
            <summary>
            <para>If <c>true</c>, the texture stretches to the edges of the node's bounding rectangle using the <see cref="P:Godot.TextureButton.StretchMode"/>. If <c>false</c>, the texture will not scale with the node.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.StretchMode">
            <summary>
            <para>Controls the texture's behavior when you resize the node's bounding rectangle, only if <see cref="P:Godot.TextureButton.Expand"/> is <c>true</c>. Set it to one of the <see cref="T:Godot.TextureButton.StretchModeEnum"/> constants. See the constants to learn more.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureButton.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically.</para>
            </summary>
        </member>
        <member name="T:Godot.TextureLayered">
            <summary>
            <para>Base class for <see cref="T:Godot.Texture2DArray"/>, <see cref="T:Godot.Cubemap"/> and <see cref="T:Godot.CubemapArray"/>. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. Data is set on a per-layer basis. For <see cref="T:Godot.Texture2DArray"/>s, the layer specifies the array layer.</para>
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetFormat">
            <summary>
            <para>Returns the current format being used by this texture. See <see cref="T:Godot.Image.Format"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetWidth">
            <summary>
            <para>Returns the width of the texture. Width is typically represented by the X-axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetHeight">
            <summary>
            <para>Returns the height of the texture. Height is typically represented by the Y-axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TextureLayered.GetLayerData(System.Int32)">
            <summary>
            <para>Returns an <see cref="T:Godot.Image"/> resource with the data from specified <c>layer</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.TextureProgressBar">
            <summary>
            <para>TextureProgressBar works like <see cref="T:Godot.ProgressBar"/>, but uses up to 3 textures instead of Godot's <see cref="T:Godot.Theme"/> resource. It can be used to create horizontal, vertical and radial progress bars.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.LeftToRight">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from left to right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.RightToLeft">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from right to left.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.TopToBottom">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from top to bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.BottomToTop">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from bottom to top.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.Clockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills clockwise. See <see cref="P:Godot.TextureProgressBar.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgressBar.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgressBar.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.CounterClockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills counterclockwise. See <see cref="P:Godot.TextureProgressBar.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgressBar.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgressBar.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.BilinearLeftAndRight">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from the center, expanding both towards the left and the right.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.BilinearTopAndBottom">
            <summary>
            <para>The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills from the center, expanding both towards the top and the bottom.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureProgressBar.FillModeEnum.ClockwiseAndCounterClockwise">
            <summary>
            <para>Turns the node into a radial bar. The <see cref="P:Godot.TextureProgressBar.TextureProgress"/> fills radially from the center, expanding both clockwise and counterclockwise. See <see cref="P:Godot.TextureProgressBar.RadialCenterOffset"/>, <see cref="P:Godot.TextureProgressBar.RadialInitialAngle"/> and <see cref="P:Godot.TextureProgressBar.RadialFillDegrees"/> to control the way the bar fills up.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TextureUnder">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> that draws under the progress bar. The bar's background.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TextureOver">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of <see cref="P:Godot.TextureProgressBar.TextureProgress"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TextureProgress">
            <summary>
            <para><see cref="T:Godot.Texture2D"/> that clips based on the node's <c>value</c> and <see cref="P:Godot.TextureProgressBar.FillMode"/>. As <c>value</c> increased, the texture fills up. It shows entirely when <c>value</c> reaches <c>max_value</c>. It doesn't show at all if <c>value</c> is equal to <c>min_value</c>.</para>
            <para>The <c>value</c> property comes from <see cref="T:Godot.Range"/>. See <see cref="P:Godot.Range.Value"/>, <see cref="P:Godot.Range.MinValue"/>, <see cref="P:Godot.Range.MaxValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.FillMode">
            <summary>
            <para>The fill direction. See <see cref="T:Godot.TextureProgressBar.FillModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TintUnder">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_under</c> texture.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TintOver">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_over</c> texture. The effect is similar to <see cref="P:Godot.CanvasItem.Modulate"/>, except it only affects this specific texture instead of the entire node.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.TintProgress">
            <summary>
            <para>Multiplies the color of the bar's <c>texture_progress</c> texture.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.RadialInitialAngle">
            <summary>
            <para>Starting angle for the fill of <see cref="P:Godot.TextureProgressBar.TextureProgress"/> if <see cref="P:Godot.TextureProgressBar.FillMode"/> is  or . When the node's <c>value</c> is equal to its <c>min_value</c>, the texture doesn't show up at all. When the <c>value</c> increases, the texture fills and tends towards <see cref="P:Godot.TextureProgressBar.RadialFillDegrees"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.RadialFillDegrees">
            <summary>
            <para>Upper limit for the fill of <see cref="P:Godot.TextureProgressBar.TextureProgress"/> if <see cref="P:Godot.TextureProgressBar.FillMode"/> is  or . When the node's <c>value</c> is equal to its <c>max_value</c>, the texture fills up to this angle.</para>
            <para>See <see cref="P:Godot.Range.Value"/>, <see cref="P:Godot.Range.MaxValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.RadialCenterOffset">
            <summary>
            <para>Offsets <see cref="P:Godot.TextureProgressBar.TextureProgress"/> if <see cref="P:Godot.TextureProgressBar.FillMode"/> is  or .</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.NinePatchStretch">
            <summary>
            <para>If <c>true</c>, Godot treats the bar's textures like in <see cref="T:Godot.NinePatchRect"/>. Use the <c>stretch_margin_*</c> properties like <see cref="P:Godot.TextureProgressBar.StretchMarginBottom"/> to set up the nine patch's 3×3 grid. When using a radial <see cref="P:Godot.TextureProgressBar.FillMode"/>, this setting will enable stretching.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.StretchMarginLeft">
            <summary>
            <para>The width of the 9-patch's left column.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.StretchMarginTop">
            <summary>
            <para>The height of the 9-patch's top row.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.StretchMarginRight">
            <summary>
            <para>The width of the 9-patch's right column.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureProgressBar.StretchMarginBottom">
            <summary>
            <para>The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.</para>
            </summary>
        </member>
        <member name="T:Godot.TextureRect">
            <summary>
            <para>Used to draw icons and sprites in a user interface. The texture's placement can be controlled with the <see cref="P:Godot.TextureRect.StretchMode"/> property. It can scale, tile, or stay centered inside its bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.ScaleOnExpand">
            <summary>
            <para>Scale to fit the node's bounding rectangle, only if <c>expand</c> is <c>true</c>. Default <c>stretch_mode</c>, for backwards compatibility. Until you set <c>expand</c> to <c>true</c>, the texture will behave like .</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Scale">
            <summary>
            <para>Scale to fit the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Tile">
            <summary>
            <para>Tile inside the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.Keep">
            <summary>
            <para>The texture keeps its original size and stays in the bounding rectangle's top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepCentered">
            <summary>
            <para>The texture keeps its original size and stays centered in the node's bounding rectangle.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspect">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspectCentered">
            <summary>
            <para>Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio.</para>
            </summary>
        </member>
        <member name="F:Godot.TextureRect.StretchModeEnum.KeepAspectCovered">
            <summary>
            <para>Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Texture">
            <summary>
            <para>The node's <see cref="T:Godot.Texture2D"/> resource.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Expand">
            <summary>
            <para>If <c>true</c>, the texture scales to fit its bounding rectangle.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.StretchMode">
            <summary>
            <para>Controls the texture's behavior when resizing the node's bounding rectangle. See <see cref="T:Godot.TextureRect.StretchModeEnum"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.FlipH">
            <summary>
            <para>If <c>true</c>, texture is flipped horizontally.</para>
            </summary>
        </member>
        <member name="P:Godot.TextureRect.FlipV">
            <summary>
            <para>If <c>true</c>, texture is flipped vertically.</para>
            </summary>
        </member>
        <member name="T:Godot.Theme">
            <summary>
            <para>A theme for skinning controls. Controls can be skinned individually, but for complex applications, it's more practical to just create a global theme that defines everything. This theme can be applied to any <see cref="T:Godot.Control"/>; the Control and its children will automatically use it.</para>
            <para>Theme resources can alternatively be loaded by writing them in a <c>.theme</c> file, see the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.Theme.DefaultFont">
            <summary>
            <para>The theme's default font.</para>
            </summary>
        </member>
        <member name="P:Godot.Theme.DefaultFontSize">
            <summary>
            <para>The theme's default font size. Set to <c>-1</c> to ignore and use global default.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetIcon(Godot.StringName,Godot.StringName,Godot.Texture2D)">
            <summary>
            <para>Sets the theme's icon <see cref="T:Godot.Texture2D"/> to <c>texture</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIcon(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.Texture2D"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasIcon(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if icon <see cref="T:Godot.Texture2D"/> with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearIcon(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears the icon at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIconList(System.String)">
            <summary>
            <para>Returns all the icons as a <see cref="T:string[]"/> filled with each <see cref="T:Godot.Texture2D"/>'s name, for use in <see cref="M:Godot.Theme.GetIcon(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIconTypeList">
            <summary>
            <para>Returns all the icon types as a <see cref="T:string[]"/> filled with unique type names, for use in <see cref="M:Godot.Theme.GetIcon(Godot.StringName,Godot.StringName)"/> and/or <see cref="M:Godot.Theme.GetIconList(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetStylebox(Godot.StringName,Godot.StringName,Godot.StyleBox)">
            <summary>
            <para>Sets theme's <see cref="T:Godot.StyleBox"/> to <c>stylebox</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStylebox(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.StyleBox"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasStylebox(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.StyleBox"/> with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearStylebox(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears <see cref="T:Godot.StyleBox"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxList(System.String)">
            <summary>
            <para>Returns all the <see cref="T:Godot.StyleBox"/>s as a <see cref="T:string[]"/> filled with each <see cref="T:Godot.StyleBox"/>'s name, for use in <see cref="M:Godot.Theme.GetStylebox(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxTypeList">
            <summary>
            <para>Returns all the <see cref="T:Godot.StyleBox"/> types as a <see cref="T:string[]"/> filled with unique type names, for use in <see cref="M:Godot.Theme.GetStylebox(Godot.StringName,Godot.StringName)"/> and/or <see cref="M:Godot.Theme.GetStyleboxList(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetFont(Godot.StringName,Godot.StringName,Godot.Font)">
            <summary>
            <para>Sets the theme's <see cref="T:Godot.Font"/> to <c>font</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the <see cref="T:Godot.Font"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Font"/> with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears the <see cref="T:Godot.Font"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontList(System.String)">
            <summary>
            <para>Returns all the <see cref="T:Godot.Font"/>s as a <see cref="T:string[]"/> filled with each <see cref="T:Godot.Font"/>'s name, for use in <see cref="M:Godot.Theme.GetFont(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontTypeList">
            <summary>
            <para>Returns all the <see cref="T:Godot.Font"/> types as a <see cref="T:string[]"/> filled with unique type names, for use in <see cref="M:Godot.Theme.GetFont(Godot.StringName,Godot.StringName)"/> and/or <see cref="M:Godot.Theme.GetFontList(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetFontSize(Godot.StringName,Godot.StringName,System.Int32)">
            <summary>
            <para>Sets the theme's font size to <c>font_size</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the font size at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font size with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears the font size <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontSizeList(System.String)">
            <summary>
            <para>Returns all the font sizes as a <see cref="T:string[]"/> filled with each font size name, for use in <see cref="M:Godot.Theme.GetFontSize(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetColor(Godot.StringName,Godot.StringName,Godot.Color)">
            <summary>
            <para>Sets the theme's <see cref="T:Godot.Color"/> to <c>color</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColor(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the <see cref="T:Godot.Color"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasColor(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Color"/> with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearColor(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears the <see cref="T:Godot.Color"/> at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColorList(System.String)">
            <summary>
            <para>Returns all the <see cref="T:Godot.Color"/>s as a <see cref="T:string[]"/> filled with each <see cref="T:Godot.Color"/>'s name, for use in <see cref="M:Godot.Theme.GetColor(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColorTypeList">
            <summary>
            <para>Returns all the <see cref="T:Godot.Color"/> types as a <see cref="T:string[]"/> filled with unique type names, for use in <see cref="M:Godot.Theme.GetColor(Godot.StringName,Godot.StringName)"/> and/or <see cref="M:Godot.Theme.GetColorList(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.SetConstant(Godot.StringName,Godot.StringName,System.Int32)">
            <summary>
            <para>Sets the theme's constant to <c>constant</c> at <c>name</c> in <c>node_type</c>.</para>
            <para>Does nothing if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the constant at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.HasConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if constant with <c>name</c> is in <c>node_type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Clears the constant at <c>name</c> if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstantList(System.String)">
            <summary>
            <para>Returns all the constants as a <see cref="T:string[]"/> filled with each constant's name, for use in <see cref="M:Godot.Theme.GetConstant(Godot.StringName,Godot.StringName)"/>, if the theme has <c>node_type</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstantTypeList">
            <summary>
            <para>Returns all the constant types as a <see cref="T:string[]"/> filled with unique type names, for use in <see cref="M:Godot.Theme.GetConstant(Godot.StringName,Godot.StringName)"/> and/or <see cref="M:Godot.Theme.GetConstantList(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.Clear">
            <summary>
            <para>Clears all values on the theme.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.GetTypeList">
            <summary>
            <para>Returns all the theme types as a <see cref="T:string[]"/> filled with unique type names, for use in other <c>get_*</c> functions of this theme.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.CopyDefaultTheme">
            <summary>
            <para>Sets the theme's values to a copy of the default theme values.</para>
            </summary>
        </member>
        <member name="M:Godot.Theme.CopyTheme(Godot.Theme)">
            <summary>
            <para>Sets the theme's values to a copy of a given theme.</para>
            </summary>
        </member>
        <member name="T:Godot.TileMap">
            <summary>
            <para>Node for 2D tile-based maps. Tilemaps use a <see cref="T:Godot.TileSet"/> which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.InvalidCell">
            <summary>
            <para>Returned when a cell doesn't exist.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Square">
            <summary>
            <para>Orthogonal orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Isometric">
            <summary>
            <para>Isometric orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.ModeEnum.Custom">
            <summary>
            <para>Custom orientation mode.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.TopLeft">
            <summary>
            <para>Tile origin at its top-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.Center">
            <summary>
            <para>Tile origin at its center.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.TileOrigin.BottomLeft">
            <summary>
            <para>Tile origin at its bottom-left corner.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.X">
            <summary>
            <para>Half offset on the X coordinate.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.Y">
            <summary>
            <para>Half offset on the Y coordinate.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.Disabled">
            <summary>
            <para>Half offset disabled.</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.NegativeX">
            <summary>
            <para>Half offset on the X coordinate (negative).</para>
            </summary>
        </member>
        <member name="F:Godot.TileMap.HalfOffset.NegativeY">
            <summary>
            <para>Half offset on the Y coordinate (negative).</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.Mode">
            <summary>
            <para>The TileMap orientation mode. See <see cref="T:Godot.TileMap.ModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.TileSet">
            <summary>
            <para>The assigned <see cref="T:Godot.TileSet"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellSize">
            <summary>
            <para>The TileMap's cell size.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellQuadrantSize">
            <summary>
            <para>The TileMap's quadrant size. Optimizes drawing by batching, using chunks of this size.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellCustomTransform">
            <summary>
            <para>The custom <see cref="T:Godot.Transform2D"/> to be applied to the TileMap's cells.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellHalfOffset">
            <summary>
            <para>Amount to offset alternating tiles. See <see cref="T:Godot.TileMap.HalfOffset"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellTileOrigin">
            <summary>
            <para>Position for tile origin. See <see cref="T:Godot.TileMap.TileOrigin"/> for possible values.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellYSort">
            <summary>
            <para>If <c>true</c>, the TileMap's direct children will be drawn in order of their Y coordinate.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CompatibilityMode">
            <summary>
            <para>If <c>true</c>, the compatibility with the tilemaps made in Godot 3.1 or earlier is maintained (textures move when the tile origin changes and rotate if the texture size is not homogeneous). This mode presents problems when doing <c>flip_h</c>, <c>flip_v</c> and <c>transpose</c> tile operations on non-homogeneous isometric tiles (e.g. 2:1), in which the texture could not coincide with the collision, thus it is not recommended for isometric or non-square tiles.</para>
            <para>If <c>false</c>, the textures do not move when doing <c>flip_h</c>, <c>flip_v</c> operations if no offset is used, nor when changing the tile origin.</para>
            <para>The compatibility mode doesn't work with the <see cref="P:Godot.TileMap.CenteredTextures"/> option, because displacing textures with the <see cref="P:Godot.TileMap.CellTileOrigin"/> option or in irregular tiles is not relevant when centering those textures.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CenteredTextures">
            <summary>
            <para>If <c>true</c>, the textures will be centered in the middle of each tile. This is useful for certain isometric or top-down modes when textures are made larger or smaller than the tiles (e.g. to avoid flickering on tile edges). The offset is still applied, but from the center of the tile. If used, <see cref="P:Godot.TileMap.CompatibilityMode"/> is ignored.</para>
            <para>If <c>false</c>, the texture position start in the top-left corner unless <see cref="P:Godot.TileMap.CompatibilityMode"/> is enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellClipUv">
            <summary>
            <para>If <c>true</c>, the cell's UVs will be clipped.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionUseParent">
            <summary>
            <para>If <c>true</c>, this tilemap's collision shape will be added to the collision shape of the parent. The parent has to be a <see cref="T:Godot.CollisionObject2D"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionUseKinematic">
            <summary>
            <para>If <c>true</c>, TileMap collisions will be handled as a kinematic body. If <c>false</c>, collisions will be handled as static body.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionFriction">
            <summary>
            <para>Friction value for static body collisions (see <c>collision_use_kinematic</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionBounce">
            <summary>
            <para>Bounce value for static body collisions (see <c>collision_use_kinematic</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionLayer">
            <summary>
            <para>The collision layer(s) for all colliders in the TileMap. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionMask">
            <summary>
            <para>The collision mask(s) for all colliders in the TileMap. See <a href="https://docs.godotengine.org/en/latest/tutorials/physics/physics_introduction.html#collision-layers-and-masks">Collision layers and masks</a> in the documentation for more information.</para>
            </summary>
        </member>
        <member name="P:Godot.TileMap.OccluderLightMask">
            <summary>
            <para>The light mask assigned to all light occluders in the TileMap. The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the given collision layer bit.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given collision layer bit is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the given collision mask bit.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given collision mask bit is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCell(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Sets the tile index for the cell given by a Vector2.</para>
            <para>An index of <c>-1</c> clears the cell.</para>
            <para>Optionally, the tile can also be flipped, transposed, or given autotile coordinates. The autotile coordinate refers to the column and row of the subtile.</para>
            <para>Note: Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.</para>
            <para>If you need these to be immediately updated, you can call <see cref="M:Godot.TileMap.UpdateDirtyQuadrants"/>.</para>
            <para>Overriding this method also overrides it internally, allowing custom logic to be implemented when tiles are placed/removed:</para>
            <para><code>
            func set_cell(x, y, tile, flip_x=false, flip_y=false, transpose=false, autotile_coord=Vector2())
                # Write your custom logic here.
                # To call the default method:
                .set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)
            </code></para>
            </summary>
            <param name="autotileCoord">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.TileMap.SetCellv(Godot.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Sets the tile index for the given cell.</para>
            <para>An index of <c>-1</c> clears the cell.</para>
            <para>Optionally, the tile can also be flipped or transposed.</para>
            <para>Note: Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.</para>
            <para>If you need these to be immediately updated, you can call <see cref="M:Godot.TileMap.UpdateDirtyQuadrants"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCell(System.Int32,System.Int32)">
            <summary>
            <para>Returns the tile index of the given cell. If no tile exists in the cell, returns .</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCellv(Godot.Vector2)">
            <summary>
            <para>Returns the tile index of the cell given by a Vector2. If no tile exists in the cell, returns .</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellXFlipped(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is flipped in the X axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellYFlipped(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is flipped in the Y axis.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellTransposed(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given cell is transposed, i.e. the X and Y axes are swapped.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCellAutotileCoord(System.Int32,System.Int32)">
            <summary>
            <para>Returns the coordinate (subtile column and row) of the autotile variation in the tileset. Returns a zero vector if the cell doesn't have autotiling.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.FixInvalidTiles">
            <summary>
            <para>Clears cells that do not exist in the tileset.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.Clear">
            <summary>
            <para>Clears all cells.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCells">
            <summary>
            <para>Returns a <see cref="T:Godot.Vector2"/> array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from <c>-1</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCellsByIndex(System.Int32)">
            <summary>
            <para>Returns an array of all cells with the given tile <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedRect">
            <summary>
            <para>Returns a rectangle enclosing the used (non-empty) tiles of the map.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.MapToWorld(Godot.Vector2,System.Boolean)">
            <summary>
            <para>Returns the global position corresponding to the given tilemap (grid-based) coordinates.</para>
            <para>Optionally, the tilemap's half offset can be ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.WorldToMap(Godot.Vector2)">
            <summary>
            <para>Returns the tilemap (grid-based) coordinates corresponding to the given local position.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateDirtyQuadrants">
            <summary>
            <para>Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskArea(Godot.Vector2)">
            <summary>
            <para>Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based X and Y coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskRegion(System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            <para>Applies autotiling rules to the cells in the given region (specified by grid-based X and Y coordinates).</para>
            <para>Calling with invalid (or missing) parameters applies autotiling rules for the entire tilemap.</para>
            </summary>
            <param name="start">If the parameter is null, then the default value is new Vector2(0, 0)</param>
            <param name="end">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="T:Godot.TileMap.SettingsChangedHandler">
            <summary>
            <para>Emitted when a tilemap setting has changed.</para>
            </summary>
        </member>
        <member name="T:Godot.TileSet">
            <summary>
            <para>A TileSet is a library of tiles for a <see cref="T:Godot.TileMap"/>. It contains a list of tiles, each consisting of a sprite and optional collision shapes.</para>
            <para>Tiles are referenced by a unique integer ID.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet._IsTileBound(System.Int32,System.Int32)">
            <summary>
            <para>Determines when the auto-tiler should consider two different auto-tile IDs to be bound together.</para>
            <para>Note: <c>neighbor_id</c> will be <c>-1</c> () when checking a tile against an empty neighbor tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.CreateTile(System.Int32)">
            <summary>
            <para>Creates a new tile with the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileClearBitmaskMap(System.Int32)">
            <summary>
            <para>Clears all bitmask information of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetIconCoordinate(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the subtile that will be used as an icon in an atlas/autotile given its coordinates.</para>
            <para>The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetIconCoordinate(System.Int32)">
            <summary>
            <para>Returns the subtile that's being used as an icon in an atlas/autotile given its coordinates.</para>
            <para>The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSubtilePriority(System.Int32,Godot.Vector2,System.Int32)">
            <summary>
            <para>Sets the priority of the subtile from an autotile given its coordinates.</para>
            <para>When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSubtilePriority(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the priority of the subtile from an autotile given its coordinates.</para>
            <para>When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetZIndex(System.Int32,Godot.Vector2,System.Int32)">
            <summary>
            <para>Sets the drawing index of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetZIndex(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the drawing index of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetLightOccluder(System.Int32,Godot.OccluderPolygon2D,Godot.Vector2)">
            <summary>
            <para>Sets the light occluder of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetLightOccluder(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the light occluder of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetNavigationPolygon(System.Int32,Godot.NavigationPolygon,Godot.Vector2)">
            <summary>
            <para>Sets the navigation polygon of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetNavigationPolygon(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the navigation polygon of the subtile from an atlas/autotile given its coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetBitmask(System.Int32,Godot.Vector2,System.UInt32)">
            <summary>
            <para>Sets the bitmask of the subtile from an autotile given its coordinates.</para>
            <para>The value is the sum of the values in <see cref="T:Godot.TileSet.AutotileBindings"/> present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetBitmask(System.Int32,Godot.Vector2)">
            <summary>
            <para>Returns the bitmask of the subtile from an autotile given its coordinates.</para>
            <para>The value is the sum of the values in <see cref="T:Godot.TileSet.AutotileBindings"/> present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetBitmaskMode(System.Int32,Godot.TileSet.BitmaskMode)">
            <summary>
            <para>Sets the <see cref="T:Godot.TileSet.BitmaskMode"/> of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetBitmaskMode(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.TileSet.BitmaskMode"/> of the autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSpacing(System.Int32,System.Int32)">
            <summary>
            <para>Sets the spacing between subtiles of the atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSpacing(System.Int32)">
            <summary>
            <para>Returns the spacing between subtiles of the atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetSize(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the size of the subtiles in an atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetSize(System.Int32)">
            <summary>
            <para>Returns the size of the subtiles in an atlas/autotile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetName(System.Int32,System.String)">
            <summary>
            <para>Sets the tile's name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetName(System.Int32)">
            <summary>
            <para>Returns the tile's name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTexture(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the tile's texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTexture(System.Int32)">
            <summary>
            <para>Returns the tile's texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetMaterial(System.Int32,Godot.ShaderMaterial)">
            <summary>
            <para>Sets the tile's material.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetMaterial(System.Int32)">
            <summary>
            <para>Returns the tile's material.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetModulate(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the tile's modulation color.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetModulate(System.Int32)">
            <summary>
            <para>Returns the tile's modulation color.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTextureOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the tile's texture offset.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTextureOffset(System.Int32)">
            <summary>
            <para>Returns the texture offset of the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetRegion(System.Int32,Godot.Rect2)">
            <summary>
            <para>Sets the tile's sub-region in the texture. This is common in texture atlases.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetRegion(System.Int32)">
            <summary>
            <para>Returns the tile sub-region in the texture.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShape(System.Int32,System.Int32,Godot.Shape2D)">
            <summary>
            <para>Sets a shape for the tile, enabling collision.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShape(System.Int32,System.Int32)">
            <summary>
            <para>Returns a tile's given shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOffset(System.Int32,System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the offset of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOffset(System.Int32,System.Int32)">
            <summary>
            <para>Returns the offset of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeTransform(System.Int32,System.Int32,Godot.Transform2D)">
            <summary>
            <para>Sets a <see cref="T:Godot.Transform2D"/> on a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeTransform(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Transform2D"/> of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOneWay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Enables one-way collision on a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOneWay(System.Int32,System.Int32)">
            <summary>
            <para>Returns the one-way collision value of a tile's shape.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileAddShape(System.Int32,Godot.Shape2D,Godot.Transform2D,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Adds a shape to the tile.</para>
            </summary>
            <param name="autotileCoord">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeCount(System.Int32)">
            <summary>
            <para>Returns the number of shapes assigned to a tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapes(System.Int32,Godot.Collections.Array)">
            <summary>
            <para>Sets an array of shapes for the tile, enabling collision.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapes(System.Int32)">
            <summary>
            <para>Returns an array of dictionaries describing the tile's shapes.</para>
            <para>Dictionary structure in the array returned by this method:</para>
            <para><code>
            {
                "autotile_coord": Vector2,
                "one_way": bool,
                "one_way_margin": int,
                "shape": CollisionShape2D,
                "shape_transform": Transform2D,
            }
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTileMode(System.Int32,Godot.TileSet.TileMode)">
            <summary>
            <para>Sets the tile's <see cref="T:Godot.TileSet.TileMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTileMode(System.Int32)">
            <summary>
            <para>Returns the tile's <see cref="T:Godot.TileSet.TileMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygon(System.Int32,Godot.NavigationPolygon)">
            <summary>
            <para>Sets the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygon(System.Int32)">
            <summary>
            <para>Returns the navigation polygon of the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygonOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets an offset for the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygonOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the tile's navigation polygon.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetLightOccluder(System.Int32,Godot.OccluderPolygon2D)">
            <summary>
            <para>Sets a light occluder for the tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetLightOccluder(System.Int32)">
            <summary>
            <para>Returns the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetOccluderOffset(System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets an offset for the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetOccluderOffset(System.Int32)">
            <summary>
            <para>Returns the offset of the tile's light occluder.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetZIndex(System.Int32,System.Int32)">
            <summary>
            <para>Sets the tile's drawing index.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetZIndex(System.Int32)">
            <summary>
            <para>Returns the tile's Z index (drawing layer).</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.RemoveTile(System.Int32)">
            <summary>
            <para>Removes the given tile ID.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.Clear">
            <summary>
            <para>Clears all tiles.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetLastUnusedTileId">
            <summary>
            <para>Returns the ID following the last currently used ID, useful when creating a new tile.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.FindTileByName(System.String)">
            <summary>
            <para>Returns the first tile matching the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetTilesIds">
            <summary>
            <para>Returns an array of all currently used tile IDs.</para>
            </summary>
        </member>
        <member name="T:Godot.Timer">
            <summary>
            <para>Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one-shot" mode.</para>
            <para>Note: To create an one-shot timer without instantiating a node, use <see cref="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Timer.TimerProcessMode.Physics">
            <summary>
            <para>Update the timer during the physics step at each frame (fixed framerate processing).</para>
            </summary>
        </member>
        <member name="F:Godot.Timer.TimerProcessMode.Idle">
            <summary>
            <para>Update the timer during the idle time at each frame.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.ProcessMode">
            <summary>
            <para>Processing mode. See <see cref="T:Godot.Timer.TimerProcessMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.WaitTime">
            <summary>
            <para>Wait time in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.OneShot">
            <summary>
            <para>If <c>true</c>, the timer will stop when reaching 0. If <c>false</c>, it will restart.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.Autostart">
            <summary>
            <para>If <c>true</c>, the timer will automatically start when entering the scene tree.</para>
            <para>Note: This property is automatically set to <c>false</c> after the timer enters the scene tree and starts.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.Paused">
            <summary>
            <para>If <c>true</c>, the timer is paused and will not process until it is unpaused again, even if <see cref="M:Godot.Timer.Start(System.Single)"/> is called.</para>
            </summary>
        </member>
        <member name="P:Godot.Timer.TimeLeft">
            <summary>
            <para>The timer's remaining time in seconds. Returns 0 if the timer is inactive.</para>
            <para>Note: You cannot set this value. To change the timer's remaining time, use <see cref="M:Godot.Timer.Start(System.Single)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.Start(System.Single)">
            <summary>
            <para>Starts the timer. Sets <c>wait_time</c> to <c>time_sec</c> if <c>time_sec &gt; 0</c>. This also resets the remaining time to <c>wait_time</c>.</para>
            <para>Note: this method will not resume a paused timer. See <see cref="P:Godot.Timer.Paused"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.Stop">
            <summary>
            <para>Stops the timer.</para>
            </summary>
        </member>
        <member name="M:Godot.Timer.IsStopped">
            <summary>
            <para>Returns <c>true</c> if the timer is stopped.</para>
            </summary>
        </member>
        <member name="T:Godot.Timer.TimeoutHandler">
            <summary>
            <para>Emitted when the timer reaches 0.</para>
            </summary>
        </member>
        <member name="T:Godot.TouchScreenButton">
            <summary>
            <para>TouchScreenButton allows you to create on-screen buttons for touch devices. It's intended for gameplay use, such as a unit you have to touch to move.</para>
            <para>This node inherits from <see cref="T:Godot.Node2D"/>. Unlike with <see cref="T:Godot.Control"/> nodes, you cannot set anchors on it. If you want to create menus or user interfaces, you may want to use <see cref="T:Godot.Button"/> nodes instead. To make button nodes react to touch events, you can enable the Emulate Mouse option in the Project Settings.</para>
            <para>You can configure TouchScreenButton to be visible only on touch devices, helping you develop your game both for desktop and mobile devices.</para>
            </summary>
        </member>
        <member name="F:Godot.TouchScreenButton.VisibilityModeEnum.Always">
            <summary>
            <para>Always visible.</para>
            </summary>
        </member>
        <member name="F:Godot.TouchScreenButton.VisibilityModeEnum.TouchscreenOnly">
            <summary>
            <para>Visible on touch screens only.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Normal">
            <summary>
            <para>The button's texture for the normal state.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Pressed">
            <summary>
            <para>The button's texture for the pressed state.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Bitmask">
            <summary>
            <para>The button's bitmask.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Shape">
            <summary>
            <para>The button's shape.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeCentered">
            <summary>
            <para>If <c>true</c>, the button's shape is centered in the provided texture. If no texture is used, this property has no effect.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeVisible">
            <summary>
            <para>If <c>true</c>, the button's shape is visible.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.PassbyPress">
            <summary>
            <para>If <c>true</c>, pass-by presses are enabled.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Action">
            <summary>
            <para>The button's action. Actions can be handled with <see cref="T:Godot.InputEventAction"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.VisibilityMode">
            <summary>
            <para>The button's visibility mode. See <see cref="T:Godot.TouchScreenButton.VisibilityModeEnum"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.TouchScreenButton.IsPressed">
            <summary>
            <para>Returns <c>true</c> if this button is currently pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.TouchScreenButton.ReleasedHandler">
            <summary>
            <para>Emitted when the button is released (up).</para>
            </summary>
        </member>
        <member name="T:Godot.TouchScreenButton.PressedSignalHandler">
            <summary>
            <para>Emitted when the button is pressed (down).</para>
            </summary>
        </member>
        <member name="T:Godot.Translation">
            <summary>
            <para>Translations are resources that can be loaded and unloaded on demand. They map a string to another string.</para>
            </summary>
        </member>
        <member name="P:Godot.Translation.Locale">
            <summary>
            <para>The locale of the translation.</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.AddMessage(Godot.StringName,Godot.StringName,Godot.StringName)">
            <summary>
            <para>Adds a message if nonexistent, followed by its translation.</para>
            <para>An additional context could be used to specify the translation context or differentiate polysemic words.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Translation.AddPluralMessage(Godot.StringName,System.String[],Godot.StringName)">
            <summary>
            <para>Adds a message involving plural translation if nonexistent, followed by its translation.</para>
            <para>An additional context could be used to specify the translation context or differentiate polysemic words.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Translation.GetMessage(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns a message's translation.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Translation.GetPluralMessage(Godot.StringName,Godot.StringName,System.Int32,Godot.StringName)">
            <summary>
            <para>Returns a message's translation involving plurals.</para>
            <para>The number <c>n</c> is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Translation.EraseMessage(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Erases a message.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Translation.GetMessageList">
            <summary>
            <para>Returns all the messages (keys).</para>
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessageCount">
            <summary>
            <para>Returns the number of existing messages.</para>
            </summary>
        </member>
        <member name="T:Godot.TranslationServer">
            <summary>
            <para>Server that manages all translations. Translations can be set to it and removed from it.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.SetLocale(System.String)">
            <summary>
            <para>Sets the locale of the game.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocale">
            <summary>
            <para>Returns the current locale of the game.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocaleName(System.String)">
            <summary>
            <para>Returns a locale's language and its variant (e.g. <c>"en_US"</c> would return <c>"English (United States)"</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Translate(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the current locale's translation for the given message (key) and context.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.TranslationServer.TranslatePlural(Godot.StringName,Godot.StringName,System.Int32,Godot.StringName)">
            <summary>
            <para>Returns the current locale's translation for the given message (key), plural_message and context.</para>
            <para>The number <c>n</c> is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.</para>
            </summary>
            <param name="context">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.TranslationServer.AddTranslation(Godot.Translation)">
            <summary>
            <para>Adds a <see cref="T:Godot.Translation"/> resource.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.RemoveTranslation(Godot.Translation)">
            <summary>
            <para>Removes the given translation from the server.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetTranslationObject(System.String)">
            <summary>
            <para>Returns the <see cref="T:Godot.Translation"/> instance based on the <c>locale</c> passed in.</para>
            <para>It will return a <c>nullptr</c> if there is no <see cref="T:Godot.Translation"/> instance that matches the <c>locale</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Clear">
            <summary>
            <para>Clears the server from all translations.</para>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLoadedLocales">
            <summary>
            <para>Returns an Array of all loaded locales of the game.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree">
            <summary>
            <para>This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.</para>
            <para>Trees are built via code, using <see cref="T:Godot.TreeItem"/> objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.</para>
            <para><code>
            func _ready():
                var tree = Tree.new()
                var root = tree.create_item()
                tree.set_hide_root(true)
                var child1 = tree.create_item(root)
                var child2 = tree.create_item(root)
                var subchild1 = tree.create_item(child1)
                subchild1.set_text(0, "Subchild1")
            </code></para>
            <para>To iterate over all the <see cref="T:Godot.TreeItem"/> objects in a <see cref="T:Godot.Tree"/> object, use <see cref="M:Godot.TreeItem.GetNext"/> and <see cref="M:Godot.TreeItem.GetChildren"/> after getting the root through <see cref="M:Godot.Tree.GetRoot"/>. You can use <see cref="M:Godot.Object.Free"/> on a <see cref="T:Godot.TreeItem"/> to remove it from the <see cref="T:Godot.Tree"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Single">
            <summary>
            <para>Allows selection of a single cell at a time. From the perspective of items, only a single item is allowed to be selected. And there is only one column selected in the selected item.</para>
            <para>The focus cursor is always hidden in this mode, but it is positioned at the current selection, making the currently selected item the currently focused item.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Row">
            <summary>
            <para>Allows selection of a single row at a time. From the perspective of items, only a single items is allowed to be selected. And all the columns are selected in the selected item.</para>
            <para>The focus cursor is always hidden in this mode, but it is positioned at the first column of the current selection, making the currently selected item the currently focused item.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.SelectModeEnum.Multi">
            <summary>
            <para>Allows selection of multiple cells at the same time. From the perspective of items, multiple items are allowed to be selected. And there can be multiple columns selected in each selected item.</para>
            <para>The focus cursor is visible in this mode, the item or column under the cursor is not necessarily selected.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.Disabled">
            <summary>
            <para>Disables all drop sections, but still allows to detect the "on item" drop section by <see cref="M:Godot.Tree.GetDropSectionAtPosition(Godot.Vector2)"/>.</para>
            <para>Note: This is the default flag, it has no effect when combined with other flags.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.OnItem">
            <summary>
            <para>Enables the "on item" drop section. This drop section covers the entire item.</para>
            <para>When combined with , this drop section halves the height and stays centered vertically.</para>
            </summary>
        </member>
        <member name="F:Godot.Tree.DropModeFlagsEnum.Inbetween">
            <summary>
            <para>Enables "above item" and "below item" drop sections. The "above item" drop section covers the top half of the item, and the "below item" drop section covers the bottom half.</para>
            <para>When combined with , these drop sections halves the height and stays on top / bottom accordingly.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.Columns">
            <summary>
            <para>The number of columns.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowReselect">
            <summary>
            <para>If <c>true</c>, the currently selected cell may be selected again.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowRmbSelect">
            <summary>
            <para>If <c>true</c>, a right mouse button click can select items.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.HideFolding">
            <summary>
            <para>If <c>true</c>, the folding arrow is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.HideRoot">
            <summary>
            <para>If <c>true</c>, the tree's root is hidden.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.DropModeFlags">
            <summary>
            <para>The drop mode as an OR combination of flags. See <see cref="T:Godot.Tree.DropModeFlagsEnum"/> constants. Once dropping is done, reverts to . Setting this during <see cref="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)"/> is recommended.</para>
            <para>This controls the drop sections, i.e. the decision and drawing of possible drop locations based on the mouse position.</para>
            </summary>
        </member>
        <member name="P:Godot.Tree.SelectMode">
            <summary>
            <para>Allows single or multiple selection. See the <see cref="T:Godot.Tree.SelectModeEnum"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.Clear">
            <summary>
            <para>Clears the tree. This removes all items.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.CreateItem(Godot.Object,System.Int32)">
            <summary>
            <para>Creates an item in the tree and adds it as a child of <c>parent</c>.</para>
            <para>If <c>parent</c> is <c>null</c>, the root item will be the parent, or the new item will be the root itself if the tree is empty.</para>
            <para>The new item will be the <c>idx</c>th child of parent, or it will be the last child if there are not enough siblings.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetRoot">
            <summary>
            <para>Returns the tree's root item, or <c>null</c> if the tree is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnMinWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the minimum width of a column. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to <see cref="P:Godot.Control.SizeFlagsStretchRatio"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnExpand(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the column will have the "Expand" flag of <see cref="T:Godot.Control"/>. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to <see cref="P:Godot.Control.SizeFlagsStretchRatio"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnWidth(System.Int32)">
            <summary>
            <para>Returns the column's width in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetNextSelected(Godot.Object)">
            <summary>
            <para>Returns the next selected item after the given one, or <c>null</c> if the end is reached.</para>
            <para>If <c>from</c> is <c>null</c>, this returns the first selected item.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelected">
            <summary>
            <para>Returns the currently focused item, or <c>null</c> if no item is focused.</para>
            <para>In  and  modes, the focused item is same as the selected item. In  mode, the focused item is the item under the focus cursor, not necessarily selected.</para>
            <para>To get the currently selected item(s), use <see cref="M:Godot.Tree.GetNextSelected(Godot.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelectedColumn">
            <summary>
            <para>Returns the currently focused column, or -1 if no column is focused.</para>
            <para>In  mode, the focused column is the selected column. In  mode, the focused column is always 0 if any item is selected. In  mode, the focused column is the column under the focus cursor, and there are not necessarily any column selected.</para>
            <para>To tell whether a column of an item is selected, use <see cref="M:Godot.TreeItem.IsSelected(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetPressedButton">
            <summary>
            <para>Returns the last pressed button's index.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEdited">
            <summary>
            <para>Returns the currently edited item. Can be used with <c>item_edited</c> to get the item that was modified.</para>
            <para><code>
            func _ready():
                $Tree.item_edited.connect(on_Tree_item_edited)
            
            func on_Tree_item_edited():
                print($Tree.get_edited()) # This item just got edited (e.g. checked).
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEditedColumn">
            <summary>
            <para>Returns the column for the currently edited item.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetCustomPopupRect">
            <summary>
            <para>Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See <see cref="M:Godot.TreeItem.SetCellMode(System.Int32,Godot.TreeItem.TreeCellMode)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAreaRect(Godot.Object,System.Int32)">
            <summary>
            <para>Returns the rectangle area for the specified item. If <c>column</c> is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAtPosition(Godot.Vector2)">
            <summary>
            <para>Returns the tree item at the specified position (relative to the tree origin position).</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnAtPosition(Godot.Vector2)">
            <summary>
            <para>Returns the column index at <c>position</c>, or -1 if no item is there.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetDropSectionAtPosition(Godot.Vector2)">
            <summary>
            <para>Returns the drop section at <c>position</c>, or -100 if no item is there.</para>
            <para>Values -1, 0, or 1 will be returned for the "above item", "on item", and "below item" drop sections, respectively. See <see cref="T:Godot.Tree.DropModeFlagsEnum"/> for a description of each drop section.</para>
            <para>To get the item which the returned drop section is relative to, use <see cref="M:Godot.Tree.GetItemAtPosition(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.EnsureCursorIsVisible">
            <summary>
            <para>Makes the currently focused cell visible.</para>
            <para>This will scroll the tree if necessary. In  mode, this will not do horizontal scrolling, as all the cells in the selected row is focused logically.</para>
            <para>Note: Despite the name of this method, the focus cursor itself is only visible in  mode.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitlesVisible(System.Boolean)">
            <summary>
            <para>If <c>true</c>, column titles are visible.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.AreColumnTitlesVisible">
            <summary>
            <para>Returns <c>true</c> if the column titles are being shown.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitle(System.Int32,System.String)">
            <summary>
            <para>Sets the title of a column.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitle(System.Int32)">
            <summary>
            <para>Returns the column's title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitleDirection(System.Int32,Godot.Control.TextDirection)">
            <summary>
            <para>Sets column title base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitleDirection(System.Int32)">
            <summary>
            <para>Returns column title base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitleOpentypeFeature(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c> for the column title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitleOpentypeFeature(System.Int32,System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c> of the column title.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.ClearColumnTitleOpentypeFeatures(System.Int32)">
            <summary>
            <para>Removes all OpenType features from the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitleLanguage(System.Int32,System.String)">
            <summary>
            <para>Sets language code of column title used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitleLanguage(System.Int32)">
            <summary>
            <para>Returns column title language code.</para>
            </summary>
        </member>
        <member name="M:Godot.Tree.GetScroll">
            <summary>
            <para>Returns the current scrolling position.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemActivatedHandler">
            <summary>
            <para>Emitted when an item's label is double-clicked.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.MultiSelectedHandler">
            <summary>
            <para>Emitted instead of <c>item_selected</c> if <c>select_mode</c> is .</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ColumnTitlePressedHandler">
            <summary>
            <para>Emitted when a column's title is pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.CustomPopupEditedHandler">
            <summary>
            <para>Emitted when a cell with the  is clicked to be edited.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemCollapsedHandler">
            <summary>
            <para>Emitted when an item is collapsed by a click on the folding arrow.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemRmbEditedHandler">
            <summary>
            <para>Emitted when an item is edited using the right mouse button.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemEditedHandler">
            <summary>
            <para>Emitted when an item is edited.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.EmptyTreeRmbSelectedHandler">
            <summary>
            <para>Emitted when the right mouse button is pressed if right mouse button selection is active and the tree is empty.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.NothingSelectedHandler">
            <summary>
            <para>Emitted when a left mouse button click does not select any item.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemDoubleClickedHandler">
            <summary>
            <para>Emitted when an item's icon is double-clicked.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.EmptyRmbHandler">
            <summary>
            <para>Emitted when the right mouse button is pressed in the empty space of the tree.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemRmbSelectedHandler">
            <summary>
            <para>Emitted when an item is selected with the right mouse button.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemSelectedHandler">
            <summary>
            <para>Emitted when an item is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.CellSelectedHandler">
            <summary>
            <para>Emitted when a cell is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ButtonPressedHandler">
            <summary>
            <para>Emitted when a button on the tree was pressed (see <see cref="M:Godot.TreeItem.AddButton(System.Int32,Godot.Texture2D,System.Int32,System.Boolean,System.String)"/>).</para>
            </summary>
        </member>
        <member name="T:Godot.Tree.ItemCustomButtonPressedHandler">
            <summary>
            <para>Emitted when a custom button is pressed (i.e. in a  mode cell).</para>
            </summary>
        </member>
        <member name="T:Godot.TreeItem">
            <summary>
            <para>Control for a single item inside a <see cref="T:Godot.Tree"/>. May have child <see cref="T:Godot.TreeItem"/>s and be styled as well as contain buttons.</para>
            <para>You can remove a <see cref="T:Godot.TreeItem"/> by using <see cref="M:Godot.Object.Free"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.String">
            <summary>
            <para>Cell contains a string.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Check">
            <summary>
            <para>Cell can be checked.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Range">
            <summary>
            <para>Cell contains a range.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TreeCellMode.Icon">
            <summary>
            <para>Cell contains an icon.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Left">
            <summary>
            <para>Align text to the left. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Center">
            <summary>
            <para>Center text. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.TreeItem.TextAlign.Right">
            <summary>
            <para>Align text to the right. See <c>set_text_align()</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.Collapsed">
            <summary>
            <para>If <c>true</c>, the TreeItem is collapsed.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.DisableFolding">
            <summary>
            <para>If <c>true</c>, folding is disabled for this TreeItem.</para>
            </summary>
        </member>
        <member name="P:Godot.TreeItem.CustomMinimumHeight">
            <summary>
            <para>The custom minimum height.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCellMode(System.Int32,Godot.TreeItem.TreeCellMode)">
            <summary>
            <para>Sets the given column's cell mode to <c>mode</c>. See <see cref="T:Godot.TreeItem.TreeCellMode"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCellMode(System.Int32)">
            <summary>
            <para>Returns the column's cell mode.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetChecked(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the column <c>column</c> is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsChecked(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given column is checked.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetText(System.Int32)">
            <summary>
            <para>Returns the given column's text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTextDirection(System.Int32,Godot.Control.TextDirection)">
            <summary>
            <para>Sets item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTextDirection(System.Int32)">
            <summary>
            <para>Returns item's text base writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetOpentypeFeature(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Sets OpenType feature <c>tag</c> for the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetOpentypeFeature(System.Int32,System.String)">
            <summary>
            <para>Returns OpenType feature <c>tag</c> of the item's text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearOpentypeFeatures(System.Int32)">
            <summary>
            <para>Removes all OpenType features.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetLanguage(System.Int32,System.String)">
            <summary>
            <para>Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetLanguage(System.Int32)">
            <summary>
            <para>Returns item's text language code.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIcon(System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the given column's icon <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIcon(System.Int32)">
            <summary>
            <para>Returns the given column's icon <see cref="T:Godot.Texture2D"/>. Error if no icon is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            <para>Sets the given column's icon's texture region.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconRegion(System.Int32)">
            <summary>
            <para>Returns the icon <see cref="T:Godot.Texture2D"/> region as <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconMaxWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the given column's icon's maximum width.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconMaxWidth(System.Int32)">
            <summary>
            <para>Returns the column's icon's maximum width.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconModulate(System.Int32,Godot.Color)">
            <summary>
            <para>Modulates the given column's icon with <c>modulate</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconModulate(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Color"/> modulating the column's icon.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomDraw(System.Int32,Godot.Object,Godot.StringName)">
            <summary>
            <para>Sets the given column's custom draw callback to <c>callback</c> method on <c>object</c>.</para>
            <para>The <c>callback</c> should accept two arguments: the <see cref="T:Godot.TreeItem"/> that is drawn and its position and size as a <see cref="T:Godot.Rect2"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNext">
            <summary>
            <para>Returns the next TreeItem in the tree or a null object if there is none.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrev">
            <summary>
            <para>Returns the previous TreeItem in the tree or a null object if there is none.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetParent">
            <summary>
            <para>Returns the parent TreeItem or a null object if there is none.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetChildren">
            <summary>
            <para>Returns the TreeItem's first child item or a null object if there is none.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNextVisible(System.Boolean)">
            <summary>
            <para>Returns the next visible TreeItem in the tree or a null object if there is none.</para>
            <para>If <c>wrap</c> is enabled, the method will wrap around to the first visible element in the tree when called on the last visible element, otherwise it returns <c>null</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrevVisible(System.Boolean)">
            <summary>
            <para>Returns the previous visible TreeItem in the tree or a null object if there is none.</para>
            <para>If <c>wrap</c> is enabled, the method will wrap around to the last visible element in the tree when called on the first visible element, otherwise it returns <c>null</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.RemoveChild(Godot.Object)">
            <summary>
            <para>Removes the given child <see cref="T:Godot.TreeItem"/> and all its children from the <see cref="T:Godot.Tree"/>. Note that it doesn't free the item from memory, so it can be reused later. To completely remove a <see cref="T:Godot.TreeItem"/> use <see cref="M:Godot.Object.Free"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetSelectable(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, the given column is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelectable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is selectable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelected(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is selected.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Select(System.Int32)">
            <summary>
            <para>Selects the column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Deselect(System.Int32)">
            <summary>
            <para>Deselects the given column.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetEditable(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, column <c>column</c> is editable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsEditable(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if column <c>column</c> is editable.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomColor(System.Int32,Godot.Color)">
            <summary>
            <para>Sets the given column's custom color.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomColor(System.Int32)">
            <summary>
            <para>Resets the color for the given column to default.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCustomColor(System.Int32)">
            <summary>
            <para>Returns the custom color of column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomBgColor(System.Int32,Godot.Color,System.Boolean)">
            <summary>
            <para>Sets the given column's custom background color and whether to just use it as an outline.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomBgColor(System.Int32)">
            <summary>
            <para>Resets the background color for the given column to default.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCustomBgColor(System.Int32)">
            <summary>
            <para>Returns the custom background color of column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.AddButton(System.Int32,Godot.Texture2D,System.Int32,System.Boolean,System.String)">
            <summary>
            <para>Adds a button with <see cref="T:Godot.Texture2D"/> <c>button</c> at column <c>column</c>. The <c>button_idx</c> index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling <see cref="M:Godot.TreeItem.GetButtonCount(System.Int32)"/> immediately after this method. Optionally, the button can be <c>disabled</c> and have a <c>tooltip</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButtonCount(System.Int32)">
            <summary>
            <para>Returns the number of buttons in column <c>column</c>. May be used to get the most recently added button's index, if no index was specified.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButtonTooltip(System.Int32,System.Int32)">
            <summary>
            <para>Returns the tooltip string for the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButton(System.Int32,System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Texture2D"/> of the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetButton(System.Int32,System.Int32,Godot.Texture2D)">
            <summary>
            <para>Sets the given column's button <see cref="T:Godot.Texture2D"/> at index <c>button_idx</c> to <c>button</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.EraseButton(System.Int32,System.Int32)">
            <summary>
            <para>Removes the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetButtonDisabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, disables the button at index <c>button_idx</c> in column <c>column</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsButtonDisabled(System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the button at index <c>button_idx</c> for the given column is disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetExpandRight(System.Int32,System.Boolean)">
            <summary>
            <para>If <c>true</c>, column <c>column</c> is expanded to the right.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetExpandRight(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if <c>expand_right</c> is set.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTooltip(System.Int32,System.String)">
            <summary>
            <para>Sets the given column's tooltip text.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTooltip(System.Int32)">
            <summary>
            <para>Returns the given column's tooltip.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTextAlign(System.Int32,Godot.TreeItem.TextAlign)">
            <summary>
            <para>Sets the given column's text alignment. See <see cref="T:Godot.TreeItem.TextAlign"/> for possible values.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTextAlign(System.Int32)">
            <summary>
            <para>Returns the given column's text alignment.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToTop">
            <summary>
            <para>Moves this TreeItem to the top in the <see cref="T:Godot.Tree"/> hierarchy.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToBottom">
            <summary>
            <para>Moves this TreeItem to the bottom in the <see cref="T:Godot.Tree"/> hierarchy.</para>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.CallRecursive(Godot.StringName,System.Object[])">
            <summary>
            <para>Calls the <c>method</c> on the actual TreeItem and its children recursively. Pass parameters as a comma separated list.</para>
            </summary>
        </member>
        <member name="T:Godot.TriangleMesh">
            <summary>
            <para>Mesh type used internally for collision calculations.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween">
            <summary>
            <para>Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name tween comes from in-betweening, an animation technique where you specify keyframes and the computer interpolates the frames that appear between them.</para>
            <para><see cref="T:Godot.Tween"/> is more suited than <see cref="T:Godot.AnimationPlayer"/> for animations where you don't know the final values in advance. For example, interpolating a dynamically-chosen camera zoom value is best done with a <see cref="T:Godot.Tween"/> node; it would be difficult to do the same thing with an <see cref="T:Godot.AnimationPlayer"/> node.</para>
            <para>Here is a brief usage example that makes a 2D node move smoothly between two positions:</para>
            <para><code>
            var tween = get_node("Tween")
            tween.interpolate_property($Node2D, "position",
                    Vector2(0, 0), Vector2(100, 100), 1,
                    Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
            tween.start()
            </code></para>
            <para>Many methods require a property name, such as <c>"position"</c> above. You can find the correct property name by hovering over the property in the Inspector. You can also provide the components of a property directly by using <c>"property:component"</c> (eg. <c>position:x</c>), where it would only apply to that particular component.</para>
            <para>Many of the methods accept <c>trans_type</c> and <c>ease_type</c>. The first accepts an <see cref="T:Godot.Tween.TransitionType"/> constant, and refers to the way the timing of the animation is handled (see <a href="https://easings.net/">easings.net</a> for some examples). The second accepts an <see cref="T:Godot.Tween.EaseType"/> constant, and controls where the <c>trans_type</c> is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different <see cref="T:Godot.Tween.TransitionType"/> constants with , and use the one that looks best.</para>
            <para><a href="https://raw.githubusercontent.com/godotengine/godot-docs/master/img/tween_cheatsheet.png">Tween easing and transition types cheatsheet</a></para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Linear">
            <summary>
            <para>The animation is interpolated linearly.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Sine">
            <summary>
            <para>The animation is interpolated using a sine function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quint">
            <summary>
            <para>The animation is interpolated with a quintic (to the power of 5) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quart">
            <summary>
            <para>The animation is interpolated with a quartic (to the power of 4) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Quad">
            <summary>
            <para>The animation is interpolated with a quadratic (to the power of 2) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Expo">
            <summary>
            <para>The animation is interpolated with an exponential (to the power of x) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Elastic">
            <summary>
            <para>The animation is interpolated with elasticity, wiggling around the edges.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Cubic">
            <summary>
            <para>The animation is interpolated with a cubic (to the power of 3) function.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Circ">
            <summary>
            <para>The animation is interpolated with a function using square roots.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Bounce">
            <summary>
            <para>The animation is interpolated by bouncing at the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TransitionType.Back">
            <summary>
            <para>The animation is interpolated backing out at ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TweenProcessMode.Physics">
            <summary>
            <para>The tween updates with the <c>_physics_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.TweenProcessMode.Idle">
            <summary>
            <para>The tween updates with the <c>_process</c> callback.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.In">
            <summary>
            <para>The interpolation starts slowly and speeds up towards the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.Out">
            <summary>
            <para>The interpolation starts quickly and slows down towards the end.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.InOut">
            <summary>
            <para>A combination of  and . The interpolation is slowest at both ends.</para>
            </summary>
        </member>
        <member name="F:Godot.Tween.EaseType.OutIn">
            <summary>
            <para>A combination of  and . The interpolation is fastest at both ends.</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.Repeat">
            <summary>
            <para>If <c>true</c>, the tween loops.</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackProcessMode">
            <summary>
            <para>The tween's animation process thread. See <see cref="T:Godot.Tween.TweenProcessMode"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackSpeed">
            <summary>
            <para>The tween's speed multiplier. For example, set it to <c>1.0</c> for normal speed, <c>2.0</c> for two times normal speed, or <c>0.5</c> for half of the normal speed. A value of <c>0</c> pauses the animation, but see also <see cref="M:Godot.Tween.SetActive(System.Boolean)"/> or <see cref="M:Godot.Tween.StopAll"/> for this.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.IsActive">
            <summary>
            <para>Returns <c>true</c> if any tweens are currently running.</para>
            <para>Note: This method doesn't consider tweens that have ended.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.SetActive(System.Boolean)">
            <summary>
            <para>Activates/deactivates the tween. See also <see cref="M:Godot.Tween.StopAll"/> and <see cref="M:Godot.Tween.ResumeAll"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Start">
            <summary>
            <para>Starts the tween. You can define animations both before and after this.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Reset(Godot.Object,Godot.StringName)">
            <summary>
            <para>Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless <c>key</c> is specified.</para>
            </summary>
            <param name="key">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Tween.ResetAll">
            <summary>
            <para>Resets all tweens to their initial values (the ones given, not those before the tween).</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Stop(Godot.Object,Godot.StringName)">
            <summary>
            <para>Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless <c>key</c> is specified.</para>
            </summary>
            <param name="key">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Tween.StopAll">
            <summary>
            <para>Stops animating all tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Resume(Godot.Object,Godot.StringName)">
            <summary>
            <para>Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless <c>key</c> is specified.</para>
            </summary>
            <param name="key">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Tween.ResumeAll">
            <summary>
            <para>Continues animating all stopped tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Remove(Godot.Object,Godot.StringName)">
            <summary>
            <para>Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless <c>key</c> is specified.</para>
            </summary>
            <param name="key">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Tween.RemoveAll">
            <summary>
            <para>Stops animation and removes all tweens.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Seek(System.Single)">
            <summary>
            <para>Sets the interpolation to the given <c>time</c> in seconds.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.Tell">
            <summary>
            <para>Returns the current time of the tween.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.GetRuntime">
            <summary>
            <para>Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateProperty(Godot.Object,Godot.NodePath,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>property</c> of <c>object</c> from <c>initial_val</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Setting the initial value to <c>null</c> uses the current value of the property.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateMethod(Godot.Object,Godot.StringName,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>method</c> of <c>object</c> from <c>initial_val</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Methods are called with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Calls <c>callback</c> of <c>object</c> after <c>duration</c>. <c>arg1</c>-<c>arg5</c> are arguments to be passed to the callback.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateDeferredCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Calls <c>callback</c> of <c>object</c> after <c>duration</c> on the main thread (similar to <see cref="M:Godot.Object.CallDeferred(Godot.StringName,System.Object[])"/>). <c>arg1</c>-<c>arg5</c> are arguments to be passed to the callback.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowProperty(Godot.Object,Godot.NodePath,System.Object,Godot.Object,Godot.NodePath,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Follows <c>property</c> of <c>object</c> and applies it on <c>target_property</c> of <c>target</c>, beginning from <c>initial_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowMethod(Godot.Object,Godot.StringName,System.Object,Godot.Object,Godot.StringName,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Follows <c>method</c> of <c>object</c> and applies the returned value on <c>target_method</c> of <c>target</c>, beginning from <c>initial_val</c> for <c>duration</c> seconds, <c>delay</c> later. Methods are called with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingProperty(Godot.Object,Godot.NodePath,Godot.Object,Godot.NodePath,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>property</c> of <c>object</c> from the current value of the <c>initial_val</c> property of <c>initial</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingMethod(Godot.Object,Godot.StringName,Godot.Object,Godot.StringName,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            <para>Animates <c>method</c> of <c>object</c> from the value returned by <c>initial_method</c> to <c>final_val</c> for <c>duration</c> seconds, <c>delay</c> seconds later. Methods are animated by calling them with consecutive values.</para>
            <para>Use <see cref="T:Godot.Tween.TransitionType"/> for <c>trans_type</c> and <see cref="T:Godot.Tween.EaseType"/> for <c>ease_type</c> parameters. These values control the timing and direction of the interpolation. See the class description for more information.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween.TweenStepHandler">
            <summary>
            <para>Emitted at each step of the animation.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween.TweenAllCompletedHandler">
            <summary>
            <para>Emitted when all processes in a tween end.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween.TweenCompletedHandler">
            <summary>
            <para>Emitted when a tween ends.</para>
            </summary>
        </member>
        <member name="T:Godot.Tween.TweenStartedHandler">
            <summary>
            <para>Emitted when a tween starts.</para>
            </summary>
        </member>
        <member name="T:Godot.UDPServer">
            <summary>
            <para>A simple server that opens a UDP socket and returns connected <see cref="T:Godot.PacketPeerUDP"/> upon receiving new packets. See also <see cref="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)"/>.</para>
            <para>After starting the server (<see cref="M:Godot.UDPServer.Listen(System.UInt16,System.String)"/>), you will need to <see cref="M:Godot.UDPServer.Poll"/> it at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>) for it to process new packets, delivering them to the appropriate <see cref="T:Godot.PacketPeerUDP"/>, and taking new connections.</para>
            <para>Below a small example of how it can be used:</para>
            <para><code>
            # server.gd
            extends Node
            
            var server := UDPServer.new()
            var peers = []
            
            func _ready():
                server.listen(4242)
            
            func _process(delta):
                server.poll() # Important!
                if server.is_connection_available():
                    var peer : PacketPeerUDP = server.take_connection()
                    var pkt = peer.get_packet()
                    print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
                    print("Received data: %s" % [pkt.get_string_from_utf8()])
                    # Reply so it knows we received the message.
                    peer.put_packet(pkt)
                    # Keep a reference so we can keep contacting the remote peer.
                    peers.append(peer)
            
                for i in range(0, peers.size()):
                    pass # Do something with the connected peers.
            
            </code></para>
            <para><code>
            # client.gd
            extends Node
            
            var udp := PacketPeerUDP.new()
            var connected = false
            
            func _ready():
                udp.connect_to_host("127.0.0.1", 4242)
            
            func _process(delta):
                if !connected:
                    # Try to contact server
                    udp.put_packet("The answer is... 42!".to_utf8())
                if udp.get_available_packet_count() &gt; 0:
                    print("Connected: %s" % udp.get_packet().get_string_from_utf8())
                    connected = true
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.UDPServer.MaxPendingConnections">
            <summary>
            <para>Define the maximum number of pending connections, during <see cref="M:Godot.UDPServer.Poll"/>, any new pending connection exceeding that value will be automatically dropped. Setting this value to <c>0</c> effectively prevents any new pending connection to be accepted (e.g. when all your players have connected).</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.Listen(System.UInt16,System.String)">
            <summary>
            <para>Starts the server by opening a UDP socket listening on the given port. You can optionally specify a <c>bind_address</c> to only listen for packets sent to that address. See also <see cref="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.Poll">
            <summary>
            <para>Call this method at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>) to process new packets. And packet from known address/port pair will be delivered to the appropriate <see cref="T:Godot.PacketPeerUDP"/>, any packet received from an unknown address/port pair will be added as a pending connection (see <see cref="M:Godot.UDPServer.IsConnectionAvailable"/>, <see cref="M:Godot.UDPServer.TakeConnection"/>). The maximum number of pending connection is defined via <see cref="P:Godot.UDPServer.MaxPendingConnections"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.IsConnectionAvailable">
            <summary>
            <para>Returns <c>true</c> if a packet with a new address/port combination was received on the socket.</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.IsListening">
            <summary>
            <para>Returns <c>true</c> if the socket is open and listening on a port.</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.TakeConnection">
            <summary>
            <para>Returns the first pending connection (connected to the appropriate address/port). Will return <c>null</c> if no new connection is available. See also <see cref="M:Godot.UDPServer.IsConnectionAvailable"/>, <see cref="M:Godot.PacketPeerUDP.ConnectToHost(System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UDPServer.Stop">
            <summary>
            <para>Stops the server, closing the UDP socket if open. Will close all connected <see cref="T:Godot.PacketPeerUDP"/> accepted via <see cref="M:Godot.UDPServer.TakeConnection"/> (remote peers will not be notified).</para>
            </summary>
        </member>
        <member name="T:Godot.UPNP">
            <summary>
            <para>Provides UPNP functionality to discover <see cref="T:Godot.UPNPDevice"/>s on the local network and execute commands on them, like managing port mappings (port forwarding) and querying the local and remote network IP address. Note that methods on this class are synchronous and block the calling thread.</para>
            <para>To forward a specific port:</para>
            <para><code>
            const PORT = 7777
            var upnp = UPNP.new()
            upnp.discover(2000, 2, "InternetGatewayDevice")
            upnp.add_port_mapping(port)
            </code></para>
            <para>To close a specific port (e.g. after you have finished using it):</para>
            <para><code>
            upnp.delete_port_mapping(port)
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.Success">
            <summary>
            <para>UPNP command or discovery was successful.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NotAuthorized">
            <summary>
            <para>Not authorized to use the command on the <see cref="T:Godot.UPNPDevice"/>. May be returned when the user disabled UPNP on their router.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.PortMappingNotFound">
            <summary>
            <para>No port mapping was found for the given port, protocol combination on the given <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InconsistentParameters">
            <summary>
            <para>Inconsistent parameters.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoSuchEntryInArray">
            <summary>
            <para>No such entry in array. May be returned if a given port, protocol combination is not found on an <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ActionFailed">
            <summary>
            <para>The action failed.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SrcIpWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the source IP address.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ExtPortWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the external port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.IntPortWildcardNotPermitted">
            <summary>
            <para>The <see cref="T:Godot.UPNPDevice"/> does not allow wildcard values for the internal port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.RemoteHostMustBeWildcard">
            <summary>
            <para>The remote host value must be a wildcard.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ExtPortMustBeWildcard">
            <summary>
            <para>The external port value must be a wildcard.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoPortMapsAvailable">
            <summary>
            <para>No port maps are available. May also be returned if port mapping functionality is not available.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ConflictWithOtherMechanism">
            <summary>
            <para>Conflict with other mechanism. May be returned instead of  if a port mapping conflicts with an existing one.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.ConflictWithOtherMapping">
            <summary>
            <para>Conflict with an existing port mapping.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SamePortValuesRequired">
            <summary>
            <para>External and internal port values must be the same.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.OnlyPermanentLeaseSupported">
            <summary>
            <para>Only permanent leases are supported. Do not use the <c>duration</c> parameter when adding port mappings.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidGateway">
            <summary>
            <para>Invalid gateway.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidPort">
            <summary>
            <para>Invalid port.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidProtocol">
            <summary>
            <para>Invalid protocol.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidDuration">
            <summary>
            <para>Invalid duration.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidArgs">
            <summary>
            <para>Invalid arguments.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidResponse">
            <summary>
            <para>Invalid response.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.InvalidParam">
            <summary>
            <para>Invalid parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.HttpError">
            <summary>
            <para>HTTP error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.SocketError">
            <summary>
            <para>Socket error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.MemAllocError">
            <summary>
            <para>Error allocating memory.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoGateway">
            <summary>
            <para>No gateway available. You may need to call <see cref="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)"/> first, or discovery didn't detect any valid IGDs (InternetGatewayDevices).</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.NoDevices">
            <summary>
            <para>No devices available. You may need to call <see cref="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)"/> first, or discovery didn't detect any valid <see cref="T:Godot.UPNPDevice"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNP.UPNPResult.UnknownError">
            <summary>
            <para>Unknown error.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverMulticastIf">
            <summary>
            <para>Multicast interface to use for discovery. Uses the default multicast interface if empty.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverLocalPort">
            <summary>
            <para>If <c>0</c>, the local port to use for discovery is chosen automatically by the system. If <c>1</c>, discovery will be done from the source port 1900 (same as destination port). Otherwise, the value will be used as the port.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNP.DiscoverIpv6">
            <summary>
            <para>If <c>true</c>, IPv6 is used for <see cref="T:Godot.UPNPDevice"/> discovery.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetDeviceCount">
            <summary>
            <para>Returns the number of discovered <see cref="T:Godot.UPNPDevice"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetDevice(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.UPNPDevice"/> at the given <c>index</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.AddDevice(Godot.UPNPDevice)">
            <summary>
            <para>Adds the given <see cref="T:Godot.UPNPDevice"/> to the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.SetDevice(System.Int32,Godot.UPNPDevice)">
            <summary>
            <para>Sets the device at <c>index</c> from the list of discovered devices to <c>device</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.RemoveDevice(System.Int32)">
            <summary>
            <para>Removes the device at <c>index</c> from the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.ClearDevices">
            <summary>
            <para>Clears the list of discovered devices.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.GetGateway">
            <summary>
            <para>Returns the default gateway. That is the first discovered <see cref="T:Godot.UPNPDevice"/> that is also a valid IGD (InternetGatewayDevice).</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.Discover(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Discovers local <see cref="T:Godot.UPNPDevice"/>s. Clears the list of previously discovered devices.</para>
            <para>Filters for IGD (InternetGatewayDevice) type devices by default, as those manage port forwarding. <c>timeout</c> is the time to wait for responses in milliseconds. <c>ttl</c> is the time-to-live; only touch this if you know what you're doing.</para>
            <para>See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.QueryExternalAddress">
            <summary>
            <para>Returns the external <see cref="T:Godot.IP"/> address of the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) as string. Returns an empty string on error.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            <para>Adds a mapping to forward the external <c>port</c> (between 1 and 65535) on the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) to the <c>internal_port</c> on the local machine for the given protocol <c>proto</c> (either <c>TCP</c> or <c>UDP</c>, with UDP being the default). If a port mapping for the given port and protocol combination already exists on that gateway device, this method tries to overwrite it. If that is not desired, you can retrieve the gateway manually with <see cref="M:Godot.UPNP.GetGateway"/> and call <see cref="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)"/> on it, if any.</para>
            <para>If <c>internal_port</c> is <c>0</c> (the default), the same port number is used for both the external and the internal port (the <c>port</c> value).</para>
            <para>The description (<c>desc</c>) is shown in some router UIs and can be used to point out which application added the mapping. The mapping's lease duration can be limited by specifying a <c>duration</c> (in seconds). However, some routers are incompatible with one or both of these, so use with caution and add fallback logic in case of errors to retry without them if in doubt.</para>
            <para>See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNP.DeletePortMapping(System.Int32,System.String)">
            <summary>
            <para>Deletes the port mapping for the given port and protocol combination on the default gateway (see <see cref="M:Godot.UPNP.GetGateway"/>) if one exists. <c>port</c> must be a valid port between 1 and 65535, <c>proto</c> can be either <c>TCP</c> or <c>UDP</c>. See <see cref="T:Godot.UPNP.UPNPResult"/> for possible return values.</para>
            </summary>
        </member>
        <member name="T:Godot.UPNPDevice">
            <summary>
            <para>UPNP device. See <see cref="T:Godot.UPNP"/> for UPNP discovery and utility functions. Provides low-level access to UPNP control commands. Allows to manage port mappings (port forwarding) and to query network information of the device (like local and external IP address and status). Note that methods on this class are synchronous and block the calling thread.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.Ok">
            <summary>
            <para>OK.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.HttpError">
            <summary>
            <para>HTTP error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.HttpEmpty">
            <summary>
            <para>Empty HTTP response.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.NoUrls">
            <summary>
            <para>Returned response contained no URLs.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.NoIgd">
            <summary>
            <para>Not a valid IGD.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.Disconnected">
            <summary>
            <para>Disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.UnknownDevice">
            <summary>
            <para>Unknown device.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.InvalidControl">
            <summary>
            <para>Invalid control.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.MallocError">
            <summary>
            <para>Memory allocation error.</para>
            </summary>
        </member>
        <member name="F:Godot.UPNPDevice.IGDStatus.UnknownError">
            <summary>
            <para>Unknown error.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.DescriptionUrl">
            <summary>
            <para>URL to the device description.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.ServiceType">
            <summary>
            <para>Service type.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdControlUrl">
            <summary>
            <para>IDG control URL.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdServiceType">
            <summary>
            <para>IGD service type.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdOurAddr">
            <summary>
            <para>Address of the local machine in the network connecting it to this <see cref="T:Godot.UPNPDevice"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.UPNPDevice.IgdStatus">
            <summary>
            <para>IGD status. See <see cref="T:Godot.UPNPDevice.IGDStatus"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.IsValidGateway">
            <summary>
            <para>Returns <c>true</c> if this is a valid IGD (InternetGatewayDevice) which potentially supports port forwarding.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.QueryExternalAddress">
            <summary>
            <para>Returns the external IP address of this <see cref="T:Godot.UPNPDevice"/> or an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            <para>Adds a port mapping to forward the given external port on this <see cref="T:Godot.UPNPDevice"/> for the given protocol to the local machine. See <see cref="M:Godot.UPNP.AddPortMapping(System.Int32,System.Int32,System.String,System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.UPNPDevice.DeletePortMapping(System.Int32,System.String)">
            <summary>
            <para>Deletes the port mapping identified by the given port and protocol combination on this device. See <see cref="M:Godot.UPNP.DeletePortMapping(System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.UndoRedo">
            <summary>
            <para>Helper to manage undo/redo operations in the editor or custom tools. It works by registering methods and property changes inside "actions".</para>
            <para>Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.</para>
            <para>Here's an example on how to add an action to the Godot editor's own <see cref="T:Godot.UndoRedo"/>, from a plugin:</para>
            <para><code>
            var undo_redo = get_undo_redo() # Method of EditorPlugin.
            
            func do_something():
                pass # Put your code here.
            
            func undo_something():
                pass # Put here the code that reverts what's done by "do_something()".
            
            func _on_MyButton_pressed():
                var node = get_node("MyNode2D")
                undo_redo.create_action("Move the node")
                undo_redo.add_do_method(self, "do_something")
                undo_redo.add_undo_method(self, "undo_something")
                undo_redo.add_do_property(node, "position", Vector2(100,100))
                undo_redo.add_undo_property(node, "position", node.position)
                undo_redo.commit_action()
            </code></para>
            <para><see cref="M:Godot.UndoRedo.CreateAction(System.String,Godot.UndoRedo.MergeMode)"/>, <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,Godot.StringName,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,Godot.StringName,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddDoProperty(Godot.Object,Godot.StringName,System.Object)"/>, <see cref="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,Godot.StringName,System.Object)"/>, and <see cref="M:Godot.UndoRedo.CommitAction"/> should be called one after the other, like in the example. Not doing so could lead to crashes.</para>
            <para>If you don't need to register a method, you can leave <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,Godot.StringName,System.Object[])"/> and <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,Godot.StringName,System.Object[])"/> out; the same goes for properties. You can also register more than one method/property.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.Disable">
            <summary>
            <para>Makes "do"/"undo" operations stay in separate actions.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.Ends">
            <summary>
            <para>Makes so that the action's "do" operation is from the first action created and the "undo" operation is from the last subsequent action with the same name.</para>
            </summary>
        </member>
        <member name="F:Godot.UndoRedo.MergeMode.All">
            <summary>
            <para>Makes subsequent actions with the same name be merged into one.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CreateAction(System.String,Godot.UndoRedo.MergeMode)">
            <summary>
            <para>Create a new action. After this is called, do all your calls to <see cref="M:Godot.UndoRedo.AddDoMethod(Godot.Object,Godot.StringName,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,Godot.StringName,System.Object[])"/>, <see cref="M:Godot.UndoRedo.AddDoProperty(Godot.Object,Godot.StringName,System.Object)"/>, and <see cref="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,Godot.StringName,System.Object)"/>, then commit the action with <see cref="M:Godot.UndoRedo.CommitAction"/>.</para>
            <para>The way actions are merged is dictated by the <c>merge_mode</c> argument. See <see cref="T:Godot.UndoRedo.MergeMode"/> for details.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CommitAction">
            <summary>
            <para>Commit the action. All "do" methods/properties are called/set when this function is called.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.IsCommittingAction">
            <summary>
            <para>Returns <c>true</c> if the <see cref="T:Godot.UndoRedo"/> is currently committing the action, i.e. running its "do" method or property change (see <see cref="M:Godot.UndoRedo.CommitAction"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoMethod(Godot.Object,Godot.StringName,System.Object[])">
            <summary>
            <para>Register a method that will be called when the action is committed.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,Godot.StringName,System.Object[])">
            <summary>
            <para>Register a method that will be called when the action is undone.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoProperty(Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Register a property value change for "do".</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Register a property value change for "undo".</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoReference(Godot.Object)">
            <summary>
            <para>Register a reference for "do" that will be erased if the "do" history is lost. This is useful mostly for new nodes created for the "do" call. Do not use for resources.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoReference(Godot.Object)">
            <summary>
            <para>Register a reference for "undo" that will be erased if the "undo" history is lost. This is useful mostly for nodes removed with the "do" call (not the "undo" call!).</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.ClearHistory(System.Boolean)">
            <summary>
            <para>Clear the undo/redo history and associated references.</para>
            <para>Passing <c>false</c> to <c>increase_version</c> will prevent the version number to be increased from this.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetCurrentActionName">
            <summary>
            <para>Gets the name of the current action.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.HasUndo">
            <summary>
            <para>Returns <c>true</c> if an "undo" action is available.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.HasRedo">
            <summary>
            <para>Returns <c>true</c> if a "redo" action is available.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetVersion">
            <summary>
            <para>Gets the version. Every time a new action is committed, the <see cref="T:Godot.UndoRedo"/>'s version number is increased automatically.</para>
            <para>This is useful mostly to check if something changed from a saved version.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Redo">
            <summary>
            <para>Redo the last action.</para>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Undo">
            <summary>
            <para>Undo the last action.</para>
            </summary>
        </member>
        <member name="T:Godot.UndoRedo.VersionChangedHandler">
            <summary>
            <para>Called when <see cref="M:Godot.UndoRedo.Undo"/> or <see cref="M:Godot.UndoRedo.Redo"/> was called.</para>
            </summary>
        </member>
        <member name="T:Godot.VBoxContainer">
            <summary>
            <para>Vertical box container. See <see cref="T:Godot.BoxContainer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VScrollBar">
            <summary>
            <para>Vertical version of <see cref="T:Godot.ScrollBar"/>, which goes from top (min) to bottom (max).</para>
            </summary>
        </member>
        <member name="T:Godot.VSeparator">
            <summary>
            <para>Vertical version of <see cref="T:Godot.Separator"/>. Even though it looks vertical, it is used to separate objects horizontally.</para>
            </summary>
        </member>
        <member name="T:Godot.VSlider">
            <summary>
            <para>Vertical slider. See <see cref="T:Godot.Slider"/>. This one goes from bottom (min) to top (max).</para>
            <para>Note: The <c>Range.changed</c> and <c>Range.value_changed</c> signals are part of the <see cref="T:Godot.Range"/> class which this class inherits from.</para>
            </summary>
        </member>
        <member name="T:Godot.VSplitContainer">
            <summary>
            <para>Vertical split container. See <see cref="T:Godot.SplitContainer"/>. This goes from top to bottom.</para>
            </summary>
        </member>
        <member name="T:Godot.VehicleBody3D">
            <summary>
            <para>This node implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a <see cref="T:Godot.CollisionShape3D"/> for the main body of your vehicle and add <see cref="T:Godot.VehicleWheel3D"/> nodes for the wheels. You should also add a <see cref="T:Godot.MeshInstance3D"/> to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the <see cref="P:Godot.VehicleBody3D.Brake"/>, <see cref="P:Godot.VehicleBody3D.EngineForce"/>, and <see cref="P:Godot.VehicleBody3D.Steering"/> properties and not change the position or orientation of this node directly.</para>
            <para>Note: The origin point of your VehicleBody3D will determine the center of gravity of your vehicle so it is better to keep this low and move the <see cref="T:Godot.CollisionShape3D"/> and <see cref="T:Godot.MeshInstance3D"/> upwards.</para>
            <para>Note: This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you will probably have to write your own physics integration using another <see cref="T:Godot.PhysicsBody3D"/> class.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody3D.EngineForce">
            <summary>
            <para>Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have <see cref="P:Godot.VehicleWheel3D.UseAsTraction"/> set to <c>true</c> and are in contact with a surface. The <see cref="P:Godot.RigidBody3D.Mass"/> of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.</para>
            <para>Note: The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.</para>
            <para>A negative value will result in the vehicle reversing.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody3D.Brake">
            <summary>
            <para>Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the <see cref="P:Godot.RigidBody3D.Mass"/> of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleBody3D.Steering">
            <summary>
            <para>The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have <see cref="P:Godot.VehicleWheel3D.UseAsSteering"/> set to <c>true</c> will automatically be rotated.</para>
            </summary>
        </member>
        <member name="T:Godot.VehicleWheel3D">
            <summary>
            <para>This node needs to be used as a child node of <see cref="T:Godot.VehicleBody3D"/> and simulates the behavior of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.</para>
            <para>Note: This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you will probably have to write your own physics integration using another <see cref="T:Godot.PhysicsBody3D"/> class.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.EngineForce">
            <summary>
            <para>Accelerates the wheel by applying an engine force. The wheel is only speed up if it is in contact with a surface. The <see cref="P:Godot.RigidBody3D.Mass"/> of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.</para>
            <para>Note: The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.</para>
            <para>A negative value will result in the wheel reversing.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.Brake">
            <summary>
            <para>Slows down the wheel by applying a braking force. The wheel is only slowed down if it is in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the <see cref="P:Godot.RigidBody3D.Mass"/> of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.Steering">
            <summary>
            <para>The steering angle for the wheel. Setting this to a non-zero value will result in the vehicle turning when it's moving.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.UseAsTraction">
            <summary>
            <para>If <c>true</c>, this wheel transfers engine force to the ground to propel the vehicle forward. This value is used in conjunction with <see cref="P:Godot.VehicleBody3D.EngineForce"/> and ignored if you are using the per-wheel <see cref="P:Godot.VehicleWheel3D.EngineForce"/> value instead.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.UseAsSteering">
            <summary>
            <para>If <c>true</c>, this wheel will be turned when the car steers. This value is used in conjunction with <see cref="P:Godot.VehicleBody3D.Steering"/> and ignored if you are using the per-wheel <see cref="P:Godot.VehicleWheel3D.Steering"/> value instead.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.WheelRollInfluence">
            <summary>
            <para>This value affects the roll of your vehicle. If set to 1.0 for all wheels, your vehicle will be prone to rolling over, while a value of 0.0 will resist body roll.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.WheelRadius">
            <summary>
            <para>The radius of the wheel in meters.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.WheelRestLength">
            <summary>
            <para>This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.WheelFrictionSlip">
            <summary>
            <para>This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.</para>
            <para>It's best to set this to 1.0 when starting out.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.SuspensionTravel">
            <summary>
            <para>This is the distance the suspension can travel. As Godot units are equivalent to meters, keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.SuspensionStiffness">
            <summary>
            <para>This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.SuspensionMaxForce">
            <summary>
            <para>The maximum force the spring can resist. This value should be higher than a quarter of the <see cref="P:Godot.RigidBody3D.Mass"/> of the <see cref="T:Godot.VehicleBody3D"/> or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3× to 4× this number.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.DampingCompression">
            <summary>
            <para>The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car.</para>
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel3D.DampingRelaxation">
            <summary>
            <para>The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the <see cref="P:Godot.VehicleWheel3D.DampingCompression"/> property. For a <see cref="P:Godot.VehicleWheel3D.DampingCompression"/> value of 0.3, try a relaxation value of 0.5.</para>
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel3D.IsInContact">
            <summary>
            <para>Returns <c>true</c> if this wheel is in contact with a surface.</para>
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel3D.GetSkidinfo">
            <summary>
            <para>Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is skidding (the wheel has lost grip, e.g. icy terrain), 1.0 means not skidding (the wheel has full grip, e.g. dry asphalt road).</para>
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel3D.GetRpm">
            <summary>
            <para>Returns the rotational speed of the wheel in revolutions per minute.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoPlayer">
            <summary>
            <para>Control node for playing video streams using <see cref="T:Godot.VideoStream"/> resources.</para>
            <para>Supported video formats are <a href="https://www.webmproject.org/">WebM</a> (<c>.webm</c>, <see cref="T:Godot.VideoStreamWebm"/>), <a href="https://www.theora.org/">Ogg Theora</a> (<c>.ogv</c>, <see cref="T:Godot.VideoStreamTheora"/>), and any format exposed via a GDNative plugin using <see cref="T:Godot.VideoStreamGDNative"/>.</para>
            <para>Note: Due to a bug, VideoPlayer does not support localization remapping yet.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.AudioTrack">
            <summary>
            <para>The embedded audio track to play.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Stream">
            <summary>
            <para>The assigned video stream. See description for supported formats.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.VolumeDb">
            <summary>
            <para>Audio volume in dB.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Volume">
            <summary>
            <para>Audio volume as a linear value.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Autoplay">
            <summary>
            <para>If <c>true</c>, playback starts when the scene loads.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Paused">
            <summary>
            <para>If <c>true</c>, the video is paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Expand">
            <summary>
            <para>If <c>true</c>, the video scales to the control size. Otherwise, the control minimum size will be automatically adjusted to match the video stream's dimensions.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.BufferingMsec">
            <summary>
            <para>Amount of time in milliseconds to store in buffer while playing.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.StreamPosition">
            <summary>
            <para>The current position of the stream, in seconds.</para>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Bus">
            <summary>
            <para>Audio bus to use for sound playback.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Play">
            <summary>
            <para>Starts the video playback from the beginning. If the video is paused, this will not unpause the video.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Stop">
            <summary>
            <para>Stops the video playback and sets the stream position to 0.</para>
            <para>Note: Although the stream position will be set to 0, the first frame of the video stream won't become the current frame.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.IsPlaying">
            <summary>
            <para>Returns <c>true</c> if the video is playing.</para>
            <para>Note: The video is still considered playing if paused during playback.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetStreamName">
            <summary>
            <para>Returns the video stream's name, or <c>"&lt;No Stream&gt;"</c> if no video stream is assigned.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetVideoTexture">
            <summary>
            <para>Returns the current frame as a <see cref="T:Godot.Texture2D"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoPlayer.FinishedHandler">
            <summary>
            <para>Emitted when playback is finished.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoStream">
            <summary>
            <para>Base resource type for all video streams. Classes that derive from <see cref="T:Godot.VideoStream"/> can all be used as resource types to play back videos in <see cref="T:Godot.VideoPlayer"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoStreamGDNative">
            <summary>
            <para><see cref="T:Godot.VideoStream"/> resource for for video formats implemented via GDNative.</para>
            <para>It can be used via <a href="https://github.com/KidRigger/godot-videodecoder">godot-videodecoder</a> which uses the <a href="https://ffmpeg.org">FFmpeg</a> library.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamGDNative.SetFile(System.String)">
            <summary>
            <para>Sets the video file that this <see cref="T:Godot.VideoStreamGDNative"/> resource handles. The supported extensions depend on the GDNative plugins used to expose video formats.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamGDNative.GetFile">
            <summary>
            <para>Returns the video file handled by this <see cref="T:Godot.VideoStreamGDNative"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoStreamTheora">
            <summary>
            <para><see cref="T:Godot.VideoStream"/> resource handling the <a href="https://www.theora.org/">Ogg Theora</a> video format with <c>.ogv</c> extension. The Theora codec is less efficient than <see cref="T:Godot.VideoStreamWebm"/>'s VP8 and VP9, but it requires less CPU resources to decode. The Theora codec is decoded on the CPU.</para>
            <para>Note: While Ogg Theora videos can also have an <c>.ogg</c> extension, you will have to rename the extension to <c>.ogv</c> to use those videos within Godot.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.SetFile(System.String)">
            <summary>
            <para>Sets the Ogg Theora video file that this <see cref="T:Godot.VideoStreamTheora"/> resource handles. The <c>file</c> name should have the <c>.ogv</c> extension.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.GetFile">
            <summary>
            <para>Returns the Ogg Theora video file handled by this <see cref="T:Godot.VideoStreamTheora"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VideoStreamWebm">
            <summary>
            <para><see cref="T:Godot.VideoStream"/> resource handling the <a href="https://www.webmproject.org/">WebM</a> video format with <c>.webm</c> extension. Both the VP8 and VP9 codecs are supported. The VP8 and VP9 codecs are more efficient than <see cref="T:Godot.VideoStreamTheora"/>, but they require more CPU resources to decode (especially VP9). Both the VP8 and VP9 codecs are decoded on the CPU.</para>
            <para>Note: Alpha channel (also known as transparency) is not supported. The video will always appear to have a black background, even if it originally contains an alpha channel.</para>
            <para>Note: There are known bugs and performance issues with WebM video playback in Godot. If you run into problems, try using the Ogg Theora format instead: <see cref="T:Godot.VideoStreamTheora"/></para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.SetFile(System.String)">
            <summary>
            <para>Sets the WebM video file that this <see cref="T:Godot.VideoStreamWebm"/> resource handles. The <c>file</c> name should have the <c>.webm</c> extension.</para>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.GetFile">
            <summary>
            <para>Returns the WebM video file handled by this <see cref="T:Godot.VideoStreamWebm"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Viewport">
            <summary>
            <para>A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera3D 3D nodes will render on it too.</para>
            <para>Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.</para>
            <para>If a viewport is a child of a <see cref="T:Godot.SubViewportContainer"/>, it will automatically take up its size, otherwise it must be set manually.</para>
            <para>Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.</para>
            <para>Also, viewports can be assigned to different screens in case the devices have multiple screens.</para>
            <para>Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.ObjectsInFrame">
            <summary>
            <para>Amount of objects in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.VerticesInFrame">
            <summary>
            <para>Amount of vertices in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.MaterialChangesInFrame">
            <summary>
            <para>Amount of material changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.ShaderChangesInFrame">
            <summary>
            <para>Amount of shader changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.SurfaceChangesInFrame">
            <summary>
            <para>Amount of surface changes in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.DrawCallsInFrame">
            <summary>
            <para>Amount of draw calls in frame.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.RenderInfo.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Viewport.RenderInfo"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Disabled">
            <summary>
            <para>Objects are displayed normally.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Unshaded">
            <summary>
            <para>Objects are displayed without light information.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Overdraw">
            <summary>
            <para>Objects are displayed semi-transparent with additive blending so you can see where they are drawing over top of one another. A higher overdraw means you are wasting performance on drawing pixels that are being hidden behind others.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Wireframe">
            <summary>
            <para>Objects are displayed in wireframe style.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.GiProbeAlbedo">
            <summary>
            <para>Objects are displayed with only the albedo value from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.GiProbeLighting">
            <summary>
            <para>Objects are displayed with only the lighting value from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.GiProbeEmission">
            <summary>
            <para>Objects are displayed with only the emission color from <see cref="T:Godot.GIProbe"/>s.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.ShadowAtlas">
            <summary>
            <para>Draws the shadow atlas that stores shadows from <see cref="T:Godot.OmniLight3D"/>s and <see cref="T:Godot.SpotLight3D"/>s in the upper left quadrant of the <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.DirectionalShadowAtlas">
            <summary>
            <para>Draws the shadow atlas that stores shadows from <see cref="T:Godot.DirectionalLight3D"/>s in the upper left quadrant of the <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.Ssao">
            <summary>
            <para>Draws the screen-space ambient occlusion texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have <see cref="P:Godot.Environment.SsaoEnabled"/> set in your <see cref="T:Godot.WorldEnvironment"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.PssmSplits">
            <summary>
            <para>Colors each PSSM split for the <see cref="T:Godot.DirectionalLight3D"/>s in the scene a different color so you can see where the splits are. In order, they will be colored red, green, blue, and yellow.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DebugDrawEnum.DecalAtlas">
            <summary>
            <para>Draws the decal atlas used by <see cref="T:Godot.Decal"/>s and light projector textures in the upper left quadrant of the <see cref="T:Godot.Viewport"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ScreenSpaceAA.Disabled">
            <summary>
            <para>Do not perform any antialiasing in the full screen post-process.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ScreenSpaceAA.Fxaa">
            <summary>
            <para>Use fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ScreenSpaceAA.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Viewport.ScreenSpaceAA"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureFilter.Nearest">
            <summary>
            <para>The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering, but the texture will look pixelized.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureFilter.Linear">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels. Use this when you want to avoid a pixelated style, but do not want mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureFilter.LinearWithMipmaps">
            <summary>
            <para>The texture filter reads from the nearest pixel in the nearest mipmap. The fastest way to read from textures with mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureFilter.NearestWithMipmaps">
            <summary>
            <para>The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureFilter.Max">
            <summary>
            <para>Max value for <see cref="T:Godot.Viewport.DefaultCanvasItemTextureFilter"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Disabled">
            <summary>
            <para>This quadrant will not be used.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv1">
            <summary>
            <para>This quadrant will only be used by one shadow map.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv4">
            <summary>
            <para>This quadrant will be split in 4 and used by up to 4 shadow maps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv16">
            <summary>
            <para>This quadrant will be split 16 ways and used by up to 16 shadow maps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv64">
            <summary>
            <para>This quadrant will be split 64 ways and used by up to 64 shadow maps.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv256">
            <summary>
            <para>This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the <see cref="P:Godot.Viewport.ShadowAtlasSize"/> is very high, the shadows in this quadrant will be very low resolution.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Subdiv1024">
            <summary>
            <para>This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the <see cref="P:Godot.Viewport.ShadowAtlasSize"/> is very high, the shadows in this quadrant will be very low resolution.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.ShadowAtlasQuadrantSubdiv.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Viewport.ShadowAtlasQuadrantSubdiv"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureRepeat.Disabled">
            <summary>
            <para>Disables textures repeating. Instead, when reading UVs outside the 0-1 range, the value will be clamped to the edge of the texture, resulting in a stretched out look at the borders of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureRepeat.Enabled">
            <summary>
            <para>Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureRepeat.Mirror">
            <summary>
            <para>Flip the texture when repeating so that the edge lines up instead of abruptly changing.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.DefaultCanvasItemTextureRepeat.Max">
            <summary>
            <para>Max value for <see cref="T:Godot.Viewport.DefaultCanvasItemTextureRepeat"/> enum.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Disabled">
            <summary>
            <para>Multisample antialiasing mode disabled. This is the default value, and also the fastest setting.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa2x">
            <summary>
            <para>Use 2x Multisample Antialiasing.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa4x">
            <summary>
            <para>Use 4x Multisample Antialiasing.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa8x">
            <summary>
            <para>Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Msaa16x">
            <summary>
            <para>Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware.</para>
            </summary>
        </member>
        <member name="F:Godot.Viewport.MSAA.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.Viewport.MSAA"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.OwnWorld3d">
            <summary>
            <para>If <c>true</c>, the viewport will use the <see cref="T:Godot.World3D"/> defined in <see cref="P:Godot.Viewport.World3d"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.World3d">
            <summary>
            <para>The custom <see cref="T:Godot.World3D"/> which can be used as 3D environment source.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.World2d">
            <summary>
            <para>The custom <see cref="T:Godot.World2D"/> which can be used as 2D environment source.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.TransparentBg">
            <summary>
            <para>If <c>true</c>, the viewport should render its background as transparent.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.Msaa">
            <summary>
            <para>The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ScreenSpaceAa">
            <summary>
            <para>Sets the screen-space antialiasing method used. Screen-space antialiasing works by selectively blurring edges in a post-process shader. It differs from MSAA which takes multiple coverage samples while rendering objects. Screen-space AA methods are typically faster than MSAA and will smooth out specular aliasing, but tend to make scenes appear blurry.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.DebugDraw">
            <summary>
            <para>The overlay mode for test rendered geometry in debug purposes.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.CanvasItemDefaultTextureFilter">
            <summary>
            <para>Sets the default filter mode used by <see cref="T:Godot.CanvasItem"/>s in this Viewport. See <see cref="T:Godot.Viewport.DefaultCanvasItemTextureFilter"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.CanvasItemDefaultTextureRepeat">
            <summary>
            <para>Sets the default repeat mode used by <see cref="T:Godot.CanvasItem"/>s in this Viewport. See <see cref="T:Godot.Viewport.DefaultCanvasItemTextureRepeat"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable2d">
            <summary>
            <para>If <c>true</c>, the viewport will process 2D audio streams.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable3d">
            <summary>
            <para>If <c>true</c>, the viewport will process 3D audio streams.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.PhysicsObjectPicking">
            <summary>
            <para>If <c>true</c>, the objects rendered by viewport become subjects of mouse picking process.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiDisableInput">
            <summary>
            <para>If <c>true</c>, the viewport will not receive input events.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiSnapControlsToPixels">
            <summary>
            <para>If <c>true</c>, the GUI controls on the viewport will lay pixel perfectly.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasSize">
            <summary>
            <para>The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.</para>
            <para>Note: If this is set to 0, shadows won't be visible. Since user-created viewports default to a value of 0, this value must be set above 0 manually.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad0">
            <summary>
            <para>The subdivision amount of the first quadrant on the shadow atlas.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad1">
            <summary>
            <para>The subdivision amount of the second quadrant on the shadow atlas.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad2">
            <summary>
            <para>The subdivision amount of the third quadrant on the shadow atlas.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad3">
            <summary>
            <para>The subdivision amount of the fourth quadrant on the shadow atlas.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.CanvasTransform">
            <summary>
            <para>The canvas transform of the viewport, useful for changing the on-screen positions of all child <see cref="T:Godot.CanvasItem"/>s. This is relative to the global canvas transform of the viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.Viewport.GlobalCanvasTransform">
            <summary>
            <para>The global canvas transform of the viewport. The canvas transform is relative to this.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld2d">
            <summary>
            <para>Returns the 2D world of the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld3d">
            <summary>
            <para>Returns the 3D world of the viewport, or if none the world of the parent viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetFinalTransform">
            <summary>
            <para>Returns the total transform of the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetVisibleRect">
            <summary>
            <para>Returns the visible rectangle in global screen coordinates.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetRenderInfo(Godot.Viewport.RenderInfo)">
            <summary>
            <para>Returns information about the viewport from the rendering pipeline.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetTexture">
            <summary>
            <para>Returns the viewport's texture.</para>
            <para>Note: Due to the way OpenGL works, the resulting <see cref="T:Godot.ViewportTexture"/> is flipped vertically. You can use <see cref="M:Godot.Image.FlipY"/> on the result of <see cref="M:Godot.Texture2D.GetData"/> to flip it back, for example:</para>
            <para><code>
            var img = get_viewport().get_texture().get_data()
            img.flip_y()
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetViewportRid">
            <summary>
            <para>Returns the viewport's RID from the <see cref="T:Godot.RenderingServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.UpdateWorlds">
            <summary>
            <para>Forces update of the 2D and 3D worlds.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetCamera">
            <summary>
            <para>Returns the active 3D camera.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetMousePosition">
            <summary>
            <para>Returns the mouse position relative to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.WarpMouse(Godot.Vector2)">
            <summary>
            <para>Warps the mouse to a position relative to the viewport.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiGetDragData">
            <summary>
            <para>Returns the drag data from the GUI, that was previously returned by <see cref="M:Godot.Control.GetDragData(Godot.Vector2)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiIsDragging">
            <summary>
            <para>Returns <c>true</c> if the viewport is currently performing a drag operation.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetShadowAtlasQuadrantSubdiv(System.Int32,Godot.Viewport.ShadowAtlasQuadrantSubdiv)">
            <summary>
            <para>Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetShadowAtlasQuadrantSubdiv(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.Viewport.ShadowAtlasQuadrantSubdiv"/> of the specified quadrant.</para>
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetInputAsHandled">
            <summary>
            <para>Stops the input from propagating further down the <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Viewport.SizeChangedHandler">
            <summary>
            <para>Emitted when the size of the viewport is changed, whether by resizing of window, or some other means.</para>
            </summary>
        </member>
        <member name="T:Godot.Viewport.GuiFocusChangedHandler">
            <summary>
            <para>Emitted when a Control node grabs keyboard focus.</para>
            </summary>
        </member>
        <member name="T:Godot.ViewportTexture">
            <summary>
            <para>Displays the content of a <see cref="T:Godot.Viewport"/> node as a dynamic <see cref="T:Godot.Texture2D"/>. This can be used to mix controls, 2D, and 3D elements in the same scene.</para>
            <para>To create a ViewportTexture in code, use the <see cref="M:Godot.Viewport.GetTexture"/> method on the target viewport.</para>
            </summary>
        </member>
        <member name="P:Godot.ViewportTexture.ViewportPath">
            <summary>
            <para>The path to the <see cref="T:Godot.Viewport"/> node to display. This is relative to the scene root, not to the node which uses the texture.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler2D">
            <summary>
            <para>The VisibilityEnabler2D will disable <see cref="T:Godot.RigidBody2D"/>, <see cref="T:Godot.AnimationPlayer"/>, and other nodes when they are not visible. It will only affect nodes with the same root node as the VisibilityEnabler2D, and the root node itself.</para>
            <para>If you just want to receive notifications, use <see cref="T:Godot.VisibilityNotifier2D"/> instead.</para>
            <para>Note: For performance reasons, VisibilityEnabler2D uses an approximate heuristic with precision determined by . If you need precise visibility checking, use another method such as adding an <see cref="T:Godot.Area2D"/> node as a child of a <see cref="T:Godot.Camera2D"/> node.</para>
            <para>Note: VisibilityEnabler2D will not affect nodes added after scene initialization.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseAnimations">
            <summary>
            <para>This enabler will pause <see cref="T:Godot.AnimationPlayer"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.FreezeBodies">
            <summary>
            <para>This enabler will freeze <see cref="T:Godot.RigidBody2D"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseParticles">
            <summary>
            <para>This enabler will stop <see cref="T:Godot.GPUParticles2D"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.ParentProcess">
            <summary>
            <para>This enabler will stop the parent's _process function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.ParentPhysicsProcess">
            <summary>
            <para>This enabler will stop the parent's _physics_process function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.PauseAnimatedSprites">
            <summary>
            <para>This enabler will stop <see cref="T:Godot.AnimatedSprite2D"/> nodes animations.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler2D.Enabler.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisibilityEnabler2D.Enabler"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimations">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimationPlayer"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.FreezeBodies">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.RigidBody2D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseParticles">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.GPUParticles2D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimatedSprites">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimatedSprite2D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.ProcessParent">
            <summary>
            <para>If <c>true</c>, the parent's <see cref="M:Godot.Node._Process(System.Single)"/> will be stopped.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PhysicsProcessParent">
            <summary>
            <para>If <c>true</c>, the parent's <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> will be stopped.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityEnabler2D.SetEnabler(Godot.VisibilityEnabler2D.Enabler,System.Boolean)">
            <summary>
            <para>Sets active state of the enabler identified by given <see cref="T:Godot.VisibilityEnabler2D.Enabler"/> constant.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityEnabler2D.IsEnablerEnabled(Godot.VisibilityEnabler2D.Enabler)">
            <summary>
            <para>Returns whether the enabler identified by given <see cref="T:Godot.VisibilityEnabler2D.Enabler"/> constant is active.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler3D">
            <summary>
            <para>The VisibilityEnabler3D will disable <see cref="T:Godot.RigidBody3D"/> and <see cref="T:Godot.AnimationPlayer"/> nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler3D itself.</para>
            <para>If you just want to receive notifications, use <see cref="T:Godot.VisibilityNotifier3D"/> instead.</para>
            <para>Note: VisibilityEnabler3D uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. The heuristic is an implementation detail and may change in future versions. If you need precise visibility checking, use another method such as adding an <see cref="T:Godot.Area3D"/> node as a child of a <see cref="T:Godot.Camera3D"/> node and/or <c>Vector3.dot</c>.</para>
            <para>Note: VisibilityEnabler3D will not affect nodes added after scene initialization.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler3D.Enabler.PauseAnimations">
            <summary>
            <para>This enabler will pause <see cref="T:Godot.AnimationPlayer"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler3D.Enabler.FreezeBodies">
            <summary>
            <para>This enabler will freeze <see cref="T:Godot.RigidBody3D"/> nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisibilityEnabler3D.Enabler.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisibilityEnabler3D.Enabler"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler3D.PauseAnimations">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.AnimationPlayer"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler3D.FreezeBodies">
            <summary>
            <para>If <c>true</c>, <see cref="T:Godot.RigidBody3D"/> nodes will be paused.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityEnabler3D.SetEnabler(Godot.VisibilityEnabler3D.Enabler,System.Boolean)">
            <summary>
            <para>Sets active state of the enabler identified by given <see cref="T:Godot.VisibilityEnabler3D.Enabler"/> constant.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityEnabler3D.IsEnablerEnabled(Godot.VisibilityEnabler3D.Enabler)">
            <summary>
            <para>Returns whether the enabler identified by given <see cref="T:Godot.VisibilityEnabler3D.Enabler"/> constant is active.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D">
            <summary>
            <para>The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.</para>
            <para>If you want nodes to be disabled automatically when they exit the screen, use <see cref="T:Godot.VisibilityEnabler2D"/> instead.</para>
            <para>Note: For performance reasons, VisibilityNotifier2D uses an approximate heuristic with precision determined by . If you need precise visibility checking, use another method such as adding an <see cref="T:Godot.Area2D"/> node as a child of a <see cref="T:Godot.Camera2D"/> node.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier2D.Rect">
            <summary>
            <para>The VisibilityNotifier2D's bounding rectangle.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier2D.IsOnScreen">
            <summary>
            <para>If <c>true</c>, the bounding rectangle is on the screen.</para>
            <para>Note: It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return <c>false</c> right after it is instantiated, even if it will be on screen in the draw pass.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D.ScreenEnteredHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier2D enters the screen.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D.ViewportEnteredHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier2D enters a <see cref="T:Godot.Viewport"/>'s view.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D.ScreenExitedHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier2D exits the screen.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D.ViewportExitedHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier2D exits a <see cref="T:Godot.Viewport"/>'s view.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier3D">
            <summary>
            <para>The VisibilityNotifier3D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a <see cref="T:Godot.Camera3D"/>'s view.</para>
            <para>If you want nodes to be disabled automatically when they exit the screen, use <see cref="T:Godot.VisibilityEnabler3D"/> instead.</para>
            <para>Note: VisibilityNotifier3D uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. The heuristic is an implementation detail and may change in future versions. If you need precise visibility checking, use another method such as adding an <see cref="T:Godot.Area3D"/> node as a child of a <see cref="T:Godot.Camera3D"/> node and/or <c>Vector3.dot</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier3D.Aabb">
            <summary>
            <para>The VisibilityNotifier3D's bounding box.</para>
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier3D.IsOnScreen">
            <summary>
            <para>If <c>true</c>, the bounding box is on the screen.</para>
            <para>Note: It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return <c>false</c> right after it is instantiated, even if it will be on screen in the draw pass.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier3D.CameraExitedHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier3D exits a <see cref="T:Godot.Camera3D"/>'s view.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier3D.ScreenEnteredHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier3D enters the screen.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier3D.CameraEnteredHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier3D enters a <see cref="T:Godot.Camera3D"/>'s view.</para>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier3D.ScreenExitedHandler">
            <summary>
            <para>Emitted when the VisibilityNotifier3D exits the screen.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualInstance3D">
            <summary>
            <para>The <see cref="T:Godot.VisualInstance3D"/> is used to connect a resource to a visual representation. All visual 3D nodes inherit from the <see cref="T:Godot.VisualInstance3D"/>. In general, you should not access the <see cref="T:Godot.VisualInstance3D"/> properties directly as they are accessed and managed by the nodes that inherit from <see cref="T:Godot.VisualInstance3D"/>. <see cref="T:Godot.VisualInstance3D"/> is the node representation of the <see cref="T:Godot.RenderingServer"/> instance.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualInstance3D.Layers">
            <summary>
            <para>The render layer(s) this <see cref="T:Godot.VisualInstance3D"/> is drawn on.</para>
            <para>This object will only be visible for <see cref="T:Godot.Camera3D"/>s whose cull mask includes the render object this <see cref="T:Godot.VisualInstance3D"/> is set to.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.SetBase(Godot.RID)">
            <summary>
            <para>Sets the resource that is instantiated by this <see cref="T:Godot.VisualInstance3D"/>, which changes how the engine handles the <see cref="T:Godot.VisualInstance3D"/> under the hood. Equivalent to <see cref="M:Godot.RenderingServer.InstanceSetBase(Godot.RID,Godot.RID)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.GetBase">
            <summary>
            <para>Returns the RID of the resource associated with this <see cref="T:Godot.VisualInstance3D"/>. For example, if the Node is a <see cref="T:Godot.MeshInstance3D"/>, this will return the RID of the associated <see cref="T:Godot.Mesh"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.GetInstance">
            <summary>
            <para>Returns the RID of this instance. This RID is the same as the RID returned by <see cref="M:Godot.RenderingServer.InstanceCreate"/>. This RID is needed if you want to call <see cref="T:Godot.RenderingServer"/> functions directly on this <see cref="T:Godot.VisualInstance3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.SetLayerMaskBit(System.Int32,System.Boolean)">
            <summary>
            <para>Enables a particular layer in <see cref="P:Godot.VisualInstance3D.Layers"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.GetLayerMaskBit(System.Int32)">
            <summary>
            <para>Returns <c>true</c> when the specified layer is enabled in <see cref="P:Godot.VisualInstance3D.Layers"/> and <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.GetTransformedAabb">
            <summary>
            <para>Returns the transformed <see cref="T:Godot.AABB"/> (also known as the bounding box) for this <see cref="T:Godot.VisualInstance3D"/>.</para>
            <para>Transformed in this case means the <see cref="T:Godot.AABB"/> plus the position, rotation, and scale of the <see cref="T:Godot.Node3D"/>'s <see cref="T:Godot.Transform"/>. See also <see cref="M:Godot.VisualInstance3D.GetAabb"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualInstance3D.GetAabb">
            <summary>
            <para>Returns the <see cref="T:Godot.AABB"/> (also known as the bounding box) for this <see cref="T:Godot.VisualInstance3D"/>. See also <see cref="M:Godot.VisualInstance3D.GetTransformedAabb"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScript">
            <summary>
            <para>A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.</para>
            <para><see cref="M:Godot.Object.SetScript(System.Object)"/> extends an existing object, if that object's class matches one of the script's base classes.</para>
            <para>You are most likely to use this class via the Visual Script editor or when writing plugins for it.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddFunction(Godot.StringName)">
            <summary>
            <para>Add a function with the specified name to the VisualScript.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasFunction(Godot.StringName)">
            <summary>
            <para>Returns whether a function exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveFunction(Godot.StringName)">
            <summary>
            <para>Remove a specific function and its nodes from the script.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameFunction(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Change the name of a function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetFunctionScroll(Godot.StringName,Godot.Vector2)">
            <summary>
            <para>Position the center of the screen for a function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionScroll(Godot.StringName)">
            <summary>
            <para>Returns the position of the center of the screen for a given function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddNode(Godot.StringName,System.Int32,Godot.VisualScriptNode,System.Nullable{Godot.Vector2})">
            <summary>
            <para>Add a node to a function of the VisualScript.</para>
            </summary>
            <param name="position">If the parameter is null, then the default value is new Vector2(0, 0)</param>
        </member>
        <member name="M:Godot.VisualScript.RemoveNode(Godot.StringName,System.Int32)">
            <summary>
            <para>Remove a specific node.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionNodeId(Godot.StringName)">
            <summary>
            <para>Returns the id of a function's entry point node.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNode(Godot.StringName,System.Int32)">
            <summary>
            <para>Returns a node given its id and its function.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasNode(Godot.StringName,System.Int32)">
            <summary>
            <para>Returns whether a node exists with the given id.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetNodePosition(Godot.StringName,System.Int32,Godot.Vector2)">
            <summary>
            <para>Position a node on the screen.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNodePosition(Godot.StringName,System.Int32)">
            <summary>
            <para>Returns a node's position in pixels.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceConnect(Godot.StringName,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connect two sequence ports. The execution will flow from of <c>from_node</c>'s <c>from_output</c> into <c>to_node</c>.</para>
            <para>Unlike <see cref="M:Godot.VisualScript.DataConnect(Godot.StringName,System.Int32,System.Int32,System.Int32,System.Int32)"/>, there isn't a <c>to_port</c>, since the target node can have only one sequence port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceDisconnect(Godot.StringName,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Disconnect two sequence ports previously connected with <see cref="M:Godot.VisualScript.SequenceConnect(Godot.StringName,System.Int32,System.Int32,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasSequenceConnection(Godot.StringName,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns whether the specified sequence ports are connected.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataConnect(Godot.StringName,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connect two data ports. The value of <c>from_node</c>'s <c>from_port</c> would be fed into <c>to_node</c>'s <c>to_port</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataDisconnect(Godot.StringName,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Disconnect two data ports previously connected with <see cref="M:Godot.VisualScript.DataConnect(Godot.StringName,System.Int32,System.Int32,System.Int32,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasDataConnection(Godot.StringName,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns whether the specified data ports are connected.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddVariable(Godot.StringName,System.Object,System.Boolean)">
            <summary>
            <para>Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasVariable(Godot.StringName)">
            <summary>
            <para>Returns whether a variable exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveVariable(Godot.StringName)">
            <summary>
            <para>Remove a variable with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableDefaultValue(Godot.StringName,System.Object)">
            <summary>
            <para>Change the default (initial) value of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableDefaultValue(Godot.StringName)">
            <summary>
            <para>Returns the default (initial) value of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableInfo(Godot.StringName,Godot.Collections.Dictionary)">
            <summary>
            <para>Set a variable's info, using the same format as <see cref="M:Godot.VisualScript.GetVariableInfo(Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableInfo(Godot.StringName)">
            <summary>
            <para>Returns the information for a given variable as a dictionary. The information includes its name, type, hint and usage.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableExport(Godot.StringName,System.Boolean)">
            <summary>
            <para>Change whether a variable is exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableExport(Godot.StringName)">
            <summary>
            <para>Returns whether a variable is exported.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameVariable(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Change the name of a variable.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddCustomSignal(Godot.StringName)">
            <summary>
            <para>Add a custom signal with the specified name to the VisualScript.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasCustomSignal(Godot.StringName)">
            <summary>
            <para>Returns whether a signal exists with the specified name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalAddArgument(Godot.StringName,Godot.Variant.Type,System.String,System.Int32)">
            <summary>
            <para>Add an argument to a custom signal added with <see cref="M:Godot.VisualScript.AddCustomSignal(Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentType(Godot.StringName,System.Int32,Godot.Variant.Type)">
            <summary>
            <para>Change the type of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentType(Godot.StringName,System.Int32)">
            <summary>
            <para>Get the type of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentName(Godot.StringName,System.Int32,System.String)">
            <summary>
            <para>Rename a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentName(Godot.StringName,System.Int32)">
            <summary>
            <para>Get the name of a custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalRemoveArgument(Godot.StringName,System.Int32)">
            <summary>
            <para>Remove a specific custom signal's argument.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentCount(Godot.StringName)">
            <summary>
            <para>Get the count of a custom signal's arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSwapArgument(Godot.StringName,System.Int32,System.Int32)">
            <summary>
            <para>Swap two of the arguments of a custom signal.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveCustomSignal(Godot.StringName)">
            <summary>
            <para>Remove a custom signal with the given name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameCustomSignal(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Change the name of a custom signal.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetInstanceBaseType(Godot.StringName)">
            <summary>
            <para>Set the base type of the script.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScript.NodePortsChangedHandler">
            <summary>
            <para>Emitted when the ports of a node are changed.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBasicTypeConstant">
            <summary>
            <para>A Visual Script node representing a constant from base types, such as .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.BasicType">
            <summary>
            <para>The type to get the constant from.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.Constant">
            <summary>
            <para>The name of the constant to return.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBuiltinFunc">
            <summary>
            <para>A built-in function used inside a <see cref="T:Godot.VisualScript"/>. It is usually a math function or an utility function.</para>
            <para>See also <c>@GDScript</c>, for the same functions in the GDScript language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSin">
            <summary>
            <para>Return the sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCos">
            <summary>
            <para>Return the cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathTan">
            <summary>
            <para>Return the tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSinh">
            <summary>
            <para>Return the hyperbolic sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCosh">
            <summary>
            <para>Return the hyperbolic cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathTanh">
            <summary>
            <para>Return the hyperbolic tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAsin">
            <summary>
            <para>Return the arc sine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAcos">
            <summary>
            <para>Return the arc cosine of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAtan">
            <summary>
            <para>Return the arc tangent of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAtan2">
            <summary>
            <para>Return the arc tangent of the input, using the signs of both parameters to determine the exact angle.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSqrt">
            <summary>
            <para>Return the square root of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFmod">
            <summary>
            <para>Return the remainder of one input divided by the other, using floating-point numbers.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFposmod">
            <summary>
            <para>Return the positive remainder of one input divided by the other, using floating-point numbers.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathFloor">
            <summary>
            <para>Return the input rounded down.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCeil">
            <summary>
            <para>Return the input rounded up.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRound">
            <summary>
            <para>Return the input rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathAbs">
            <summary>
            <para>Return the absolute value of the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSign">
            <summary>
            <para>Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathPow">
            <summary>
            <para>Return the input raised to a given power.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLog">
            <summary>
            <para>Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathExp">
            <summary>
            <para>Return the mathematical constant e raised to the specified power of the input. e has an approximate value of 2.71828.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathIsnan">
            <summary>
            <para>Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathIsinf">
            <summary>
            <para>Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathEase">
            <summary>
            <para>Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathStepDecimals">
            <summary>
            <para>Return the number of digit places after the decimal that the first non-zero digit occurs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLerp">
            <summary>
            <para>Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula <c>a + (a - b) * t</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathMoveToward">
            <summary>
            <para>Moves the number toward a value, based on the third input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDectime">
            <summary>
            <para>Return the result of <c>value</c> decreased by <c>step</c> * <c>amount</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandomize">
            <summary>
            <para>Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandi">
            <summary>
            <para>Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandf">
            <summary>
            <para>Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandfRange">
            <summary>
            <para>Return a random floating-point value between the two inputs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandiRange">
            <summary>
            <para>Return a random 32-bit integer value between the two inputs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSeed">
            <summary>
            <para>Set the seed for the random number generator.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRandseed">
            <summary>
            <para>Return a random value from the given seed, along with the new seed.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDeg2rad">
            <summary>
            <para>Convert the input from degrees to radians.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathRad2deg">
            <summary>
            <para>Convert the input from radians to degrees.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathLinear2db">
            <summary>
            <para>Convert the input from linear volume to decibel volume.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathDb2linear">
            <summary>
            <para>Convert the input from decibel volume to linear volume.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathPolar2cartesian">
            <summary>
            <para>Converts a 2D point expressed in the polar coordinate system (a distance from the origin <c>r</c> and an angle <c>th</c>) to the cartesian coordinate system (X and Y axis).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathCartesian2polar">
            <summary>
            <para>Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicMax">
            <summary>
            <para>Return the greater of the two numbers, also known as their maximum.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicMin">
            <summary>
            <para>Return the lesser of the two numbers, also known as their minimum.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicClamp">
            <summary>
            <para>Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to <c>min(max(input, range_low), range_high)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.LogicNearestPo2">
            <summary>
            <para>Return the nearest power of 2 to the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.ObjWeakref">
            <summary>
            <para>Create a <see cref="T:Godot.WeakRef"/> from the input.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeConvert">
            <summary>
            <para>Convert between types.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeOf">
            <summary>
            <para>Return the type of the input as an integer. Check <see cref="T:Godot.Variant.Type"/> for the integers that might be returned.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TypeExists">
            <summary>
            <para>Checks if a type is registered in the <see cref="T:Godot.ClassDB"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextChar">
            <summary>
            <para>Return a character with the given ascii value.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextStr">
            <summary>
            <para>Convert the input to a string.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrint">
            <summary>
            <para>Print the given string to the output window.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrinterr">
            <summary>
            <para>Print the given string to the standard error output.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.TextPrintraw">
            <summary>
            <para>Print the given string to the standard output, without adding a newline.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.VarToStr">
            <summary>
            <para>Serialize a <c>Variant</c> to a string.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.StrToVar">
            <summary>
            <para>Deserialize a <c>Variant</c> from a string serialized using .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.VarToBytes">
            <summary>
            <para>Serialize a <c>Variant</c> to a <see cref="T:byte[]"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.BytesToVar">
            <summary>
            <para>Deserialize a <c>Variant</c> from a <see cref="T:byte[]"/> serialized using .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.Colorn">
            <summary>
            <para>Return the <see cref="T:Godot.Color"/> with the given name and alpha ranging from 0 to 1.</para>
            <para>Note: Names are defined in <c>color_names.inc</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.MathSmoothstep">
            <summary>
            <para>Return a number smoothly interpolated between the first two inputs, based on the third input. Similar to , but interpolates faster at the beginning and slower at the end. Using Hermite interpolation formula:</para>
            <para><code>
            var t = clamp((weight - from) / (to - from), 0.0, 1.0)
            return t * t * (3.0 - 2.0 * t)
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptBuiltinFunc.BuiltinFunc.FuncMax">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisualScriptBuiltinFunc.BuiltinFunc"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBuiltinFunc.Function">
            <summary>
            <para>The function to be executed.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptClassConstant">
            <summary>
            <para>This node returns a constant from a given class, such as . See the given class' documentation for available constants.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>value</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.BaseType">
            <summary>
            <para>The constant's parent class.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.Constant">
            <summary>
            <para>The constant to return. See the given class for its available constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptComment">
            <summary>
            <para>A Visual Script node used to display annotations in the script, so that code may be documented.</para>
            <para>Comment nodes can be resized so they encompass a group of nodes.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Title">
            <summary>
            <para>The comment node's title.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Description">
            <summary>
            <para>The text inside the comment node.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Size">
            <summary>
            <para>The comment node's size (in pixels).</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptComposeArray">
            <summary>
            <para>A Visual Script Node used to compose array from the list of elements provided with custom in-graph UI hard coded in the VisualScript Editor.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCondition">
            <summary>
            <para>A Visual Script node that checks a <see cref="T:System.Boolean"/> input port. If <c>true</c>, it will exit via the "true" sequence port. If <c>false</c>, it will exit via the "false" sequence port. After exiting either, it exits via the "done" port. Sequence ports may be left disconnected.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>if (cond) is</c></para>
            <para>- Data (boolean): <c>cond</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>true</c></para>
            <para>- Sequence: <c>false</c></para>
            <para>- Sequence: <c>done</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstant">
            <summary>
            <para>This node returns a constant's value.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Type">
            <summary>
            <para>The constant's type.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Value">
            <summary>
            <para>The constant's value.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstructor">
            <summary>
            <para>A Visual Script node which calls a base type constructor. It can be used for type conversion as well.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCustomNode">
            <summary>
            <para>A custom Visual Script node which can be scripted in powerful ways.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepPushStackBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should return to it when there is no other node left to execute.</para>
            <para>This is used by <see cref="T:Godot.VisualScriptCondition"/> to redirect the sequence to the "Done" port after the <c>true</c>/<c>false</c> branch has finished execution.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepGoBackBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should return back, either hitting a previous  or exiting the function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepExitFunctionBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that control should stop and exit the function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StepYieldBit">
            <summary>
            <para>Hint used by <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> to tell that the function should be yielded.</para>
            <para>Using this requires you to have at least one working memory slot, which is used for the <see cref="T:Godot.VisualScriptFunctionState"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.BeginSequence">
            <summary>
            <para>The start mode used the first time when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.ContinueSequence">
            <summary>
            <para>The start mode used when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called after coming back from a .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptCustomNode.StartMode.ResumeYield">
            <summary>
            <para>The start mode used when <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> is called after resuming from .</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCaption">
            <summary>
            <para>Return the node's title.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCategory">
            <summary>
            <para>Return the node's category.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortCount">
            <summary>
            <para>Return the count of input value ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortName(System.Int32)">
            <summary>
            <para>Return the specified input port's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortType(System.Int32)">
            <summary>
            <para>Return the specified input port's type. See the <see cref="T:Godot.Variant.Type"/> values.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortCount">
            <summary>
            <para>Return the amount of output sequence ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortText(System.Int32)">
            <summary>
            <para>Return the specified sequence output's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortCount">
            <summary>
            <para>Return the amount of output value ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortName(System.Int32)">
            <summary>
            <para>Return the specified output's name.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortType(System.Int32)">
            <summary>
            <para>Return the specified output's type. See the <see cref="T:Godot.Variant.Type"/> values.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetText">
            <summary>
            <para>Return the custom node's text, which is shown right next to the input sequence port (if there is none, on the place that is usually taken by it).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetWorkingMemorySize">
            <summary>
            <para>Return the size of the custom node's working memory. See <see cref="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)"/> for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._HasInputSequencePort">
            <summary>
            <para>Return whether the custom node has an input sequence port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._Step(Godot.Collections.Array,Godot.Collections.Array,System.Int32,Godot.Collections.Array)">
            <summary>
            <para>Execute the custom node's logic, returning the index of the output sequence port to use or a <see cref="T:System.String"/> when there is an error.</para>
            <para>The <c>inputs</c> array contains the values of the input ports.</para>
            <para><c>outputs</c> is an array whose indices should be set to the respective outputs.</para>
            <para>The <c>start_mode</c> is usually , unless you have used the <c>STEP_*</c> constants.</para>
            <para><c>working_mem</c> is an array which can be used to persist information between runs of the custom node.</para>
            <para>When returning, you can mask the returned value with one of the <c>STEP_*</c> constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptDeconstruct">
            <summary>
            <para>A Visual Script node which deconstructs a base type instance into its parts.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptDeconstruct.Type">
            <summary>
            <para>The type to deconstruct.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEmitSignal">
            <summary>
            <para>Emits a specified signal when it is executed.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>emit</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEmitSignal.Signal">
            <summary>
            <para>The signal to emit.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEngineSingleton">
            <summary>
            <para>A Visual Script node returning a singleton from <c>@GlobalScope</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEngineSingleton.Constant">
            <summary>
            <para>The singleton's name.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptIterator">
            <summary>
            <para>This node steps through each item in a given input. Input can be any sequence data type, such as an <see cref="T:Godot.Collections.Array"/> or <see cref="T:System.String"/>. When each item has been processed, execution passed out the <c>exit</c> Sequence port.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>for (elem) in (input)</c></para>
            <para>- Data (variant): <c>input</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>each</c></para>
            <para>- Sequence: <c>exit</c></para>
            <para>- Data (variant): <c>elem</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLists">
            <summary>
            <para>A Visual Script virtual class that defines the shape and the default behavior of the nodes that have to be in-graph editable nodes.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVar">
            <summary>
            <para>Returns a local variable's value. "Var Name" must be supplied, with an optional type.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.VarName">
            <summary>
            <para>The local variable's name.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.Type">
            <summary>
            <para>The local variable's type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVarSet">
            <summary>
            <para>Changes a local variable's value to the given input. The new value is also provided on an output Data port.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>set</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.VarName">
            <summary>
            <para>The local variable's name.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.Type">
            <summary>
            <para>The local variable's type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptMathConstant">
            <summary>
            <para>Provides common math constants, such as Pi, on an output Data port.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>get</c></para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.One">
            <summary>
            <para>Unity: <c>1</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Pi">
            <summary>
            <para>Pi: <c>3.141593</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.HalfPi">
            <summary>
            <para>Pi divided by two: <c>1.570796</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Tau">
            <summary>
            <para>Tau: <c>6.283185</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.E">
            <summary>
            <para>Mathematical constant <c>e</c>, the natural log base: <c>2.718282</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Sqrt2">
            <summary>
            <para>Square root of two: <c>1.414214</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Inf">
            <summary>
            <para>Infinity: <c>inf</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Nan">
            <summary>
            <para>Not a number: <c>nan</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualScriptMathConstant.MathConstant.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisualScriptMathConstant.MathConstant"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptMathConstant.Constant">
            <summary>
            <para>The math constant.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptNode">
            <summary>
            <para>A node which is part of a <see cref="T:Godot.VisualScript"/>. Not to be confused with <see cref="T:Godot.Node"/>, which is a part of a <see cref="T:Godot.SceneTree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetVisualScript">
            <summary>
            <para>Returns the <see cref="T:Godot.VisualScript"/> instance the node is bound to.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.SetDefaultInputValue(System.Int32,System.Object)">
            <summary>
            <para>Change the default value of a given port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetDefaultInputValue(System.Int32)">
            <summary>
            <para>Returns the default value of a given port. The default value is used when nothing is connected to the port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.PortsChangedNotify">
            <summary>
            <para>Notify that the node's ports have changed. Usually used in conjunction with <see cref="T:Godot.VisualScriptCustomNode"/> .</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptNode.PortsChangedHandler">
            <summary>
            <para>Emitted when the available input/output ports are changed.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptOperator">
            <summary>
            <para>Input Ports:</para>
            <para>- Data (variant): <c>A</c></para>
            <para>- Data (variant): <c>B</c></para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>result</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptPreload">
            <summary>
            <para>Creates a new <see cref="T:Godot.Resource"/> or loads one from the filesystem.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (object): <c>res</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPreload.Resource">
            <summary>
            <para>The <see cref="T:Godot.Resource"/> to load.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptReturn">
            <summary>
            <para>Ends the execution of a function and returns control to the calling function. Optionally, it can return a <c>Variant</c> value.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>result</c> (optional)</para>
            <para>Output Ports:</para>
            <para>none</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnEnabled">
            <summary>
            <para>If <c>true</c>, the <c>return</c> input port is available.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnType">
            <summary>
            <para>The return value's data type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSceneNode">
            <summary>
            <para>A direct reference to a node.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data: <c>node</c> (obj)</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSceneNode.NodePath">
            <summary>
            <para>The node's path in the scene tree.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelect">
            <summary>
            <para>Chooses between two input values based on a Boolean condition.</para>
            <para>Input Ports:</para>
            <para>- Data (boolean): <c>cond</c></para>
            <para>- Data (variant): <c>a</c></para>
            <para>- Data (variant): <c>b</c></para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>out</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSelect.Type">
            <summary>
            <para>The input variables' type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelf">
            <summary>
            <para>Provides a reference to the node running the visual script.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (object): <c>instance</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSequence">
            <summary>
            <para>Steps through a series of one or more output Sequence ports. The <c>current</c> data port outputs the currently executing item.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>in order</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>1</c></para>
            <para>- Sequence: <c>2 - n</c> (optional)</para>
            <para>- Data (int): <c>current</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSequence.Steps">
            <summary>
            <para>The number of steps in the sequence.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSwitch">
            <summary>
            <para>Branches the flow based on an input's value. Use Case Count in the Inspector to set the number of branches and each comparison's optional type.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>'input' is</c></para>
            <para>- Data (variant): <c>=</c></para>
            <para>- Data (variant): <c>=</c> (optional)</para>
            <para>- Data (variant): <c>input</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            <para>- Sequence (optional)</para>
            <para>- Sequence: <c>done</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableGet">
            <summary>
            <para>Returns a variable's value. "Var Name" must be supplied, with an optional type.</para>
            <para>Input Ports:</para>
            <para>none</para>
            <para>Output Ports:</para>
            <para>- Data (variant): <c>value</c></para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableGet.VarName">
            <summary>
            <para>The variable's name.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableSet">
            <summary>
            <para>Changes a variable's value to the given input.</para>
            <para>Input Ports:</para>
            <para>- Sequence</para>
            <para>- Data (variant): <c>set</c></para>
            <para>Output Ports:</para>
            <para>- Sequence</para>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableSet.VarName">
            <summary>
            <para>The variable's name.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptWhile">
            <summary>
            <para>Loops while a condition is <c>true</c>. Execution continues out the <c>exit</c> Sequence port when the loop terminates.</para>
            <para>Input Ports:</para>
            <para>- Sequence: <c>while(cond)</c></para>
            <para>- Data (bool): <c>cond</c></para>
            <para>Output Ports:</para>
            <para>- Sequence: <c>repeat</c></para>
            <para>- Sequence: <c>exit</c></para>
            </summary>
        </member>
        <member name="T:Godot.VisualShader">
            <summary>
            <para>This class allows you to define a custom shader program that can be used for various materials to render objects.</para>
            <para>The visual shader editor creates the shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Vertex">
            <summary>
            <para>A vertex shader, operating on vertices.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Fragment">
            <summary>
            <para>A fragment shader, operating on fragments (pixels).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Light">
            <summary>
            <para>A shader for light calculations.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShader.Type.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisualShader.Type"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShader.GraphOffset">
            <summary>
            <para>The offset vector of the whole graph.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.SetMode(Godot.Shader.Mode)">
            <summary>
            <para>Sets the mode of this shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.AddNode(Godot.VisualShader.Type,Godot.VisualShaderNode,Godot.Vector2,System.Int32)">
            <summary>
            <para>Adds the specified node to the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNode(Godot.VisualShader.Type,System.Int32)">
            <summary>
            <para>Returns the shader node instance with specified <c>type</c> and <c>id</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.SetNodePosition(Godot.VisualShader.Type,System.Int32,Godot.Vector2)">
            <summary>
            <para>Sets the position of the specified node.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodePosition(Godot.VisualShader.Type,System.Int32)">
            <summary>
            <para>Returns the position of the specified node within the shader graph.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodeList(Godot.VisualShader.Type)">
            <summary>
            <para>Returns the list of all nodes in the shader with the specified type.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.RemoveNode(Godot.VisualShader.Type,System.Int32)">
            <summary>
            <para>Removes the specified node from the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.IsNodeConnection(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified node and port connection exist.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.CanConnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified nodes and ports can be connected together.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.ConnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connects the specified nodes and ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.DisconnectNodes(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connects the specified nodes and ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.ConnectNodesForced(Godot.VisualShader.Type,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Connects the specified nodes and ports, even if they can't be connected. Such connection is invalid and will not function properly.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShader.GetNodeConnections(Godot.VisualShader.Type)">
            <summary>
            <para>Returns the list of connected nodes with the specified type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Scalar">
            <summary>
            <para>Floating-point scalar. Translated to <c>float</c> type in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.ScalarInt">
            <summary>
            <para>Integer scalar. Translated to <c>int</c> type in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Vector">
            <summary>
            <para>3D vector of floating-point values. Translated to <c>vec3</c> type in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Boolean">
            <summary>
            <para>Boolean type. Translated to <c>bool</c> type in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Transform">
            <summary>
            <para>Transform type. Translated to <c>mat4</c> type in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Sampler">
            <summary>
            <para>Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNode.PortType.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisualShaderNode.PortType"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNode.OutputPortForPreview">
            <summary>
            <para>Sets the output port index which will be showed for preview. If set to <c>-1</c> no port will be open for preview.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.SetInputPortDefaultValue(System.Int32,System.Object)">
            <summary>
            <para>Sets the default value for the selected input <c>port</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.GetInputPortDefaultValue(System.Int32)">
            <summary>
            <para>Returns the default value of the input <c>port</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.SetDefaultInputValues(Godot.Collections.Array)">
            <summary>
            <para>Sets the default input ports values using an <see cref="T:Godot.Collections.Array"/> of the form <c>[index0, value0, index1, value1, ...]</c>. For example: <c>[0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNode.GetDefaultInputValues">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> containing default values for all of the input ports of the node in the form <c>[index0, value0, index1, value1, ...]</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNode.EditorRefreshRequestHandler">
            <summary>
            <para>Emitted when the node requests an editor refresh. Currently called only in setter of <see cref="P:Godot.VisualShaderNodeTexture.Source"/>, <see cref="T:Godot.VisualShaderNodeTexture"/>, and <see cref="T:Godot.VisualShaderNodeCubemap"/> (and their derivatives).</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeBooleanConstant">
            <summary>
            <para>Has only one output port and no inputs.</para>
            <para>Translated to <c>bool</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeBooleanConstant.Constant">
            <summary>
            <para>A boolean constant which represents a state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeBooleanUniform">
            <summary>
            <para>Translated to <c>uniform bool</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeBooleanUniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeBooleanUniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeBooleanUniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeColorConstant">
            <summary>
            <para>Has two output ports representing RGB and alpha channels of <see cref="T:Godot.Color"/>.</para>
            <para>Translated to <c>vec3 rgb</c> and <c>float alpha</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorConstant.Constant">
            <summary>
            <para>A <see cref="T:Godot.Color"/> constant which represents a state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeColorFunc">
            <summary>
            <para>Accept a <see cref="T:Godot.Color"/> to the input port and transform it according to <see cref="P:Godot.VisualShaderNodeColorFunc.Function"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorFunc.FunctionEnum.Grayscale">
            <summary>
            <para>Converts the color to grayscale using the following formula:</para>
            <para><code>
            vec3 c = input;
            float max1 = max(c.r, c.g);
            float max2 = max(max1, c.b);
            float max3 = max(max1, max2);
            return vec3(max3, max3, max3);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorFunc.FunctionEnum.Sepia">
            <summary>
            <para>Applies sepia tone effect using the following formula:</para>
            <para><code>
            vec3 c = input;
            float r = (c.r * 0.393) + (c.g * 0.769) + (c.b * 0.189);
            float g = (c.r * 0.349) + (c.g * 0.686) + (c.b * 0.168);
            float b = (c.r * 0.272) + (c.g * 0.534) + (c.b * 0.131);
            return vec3(r, g, b);
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorFunc.Function">
            <summary>
            <para>A function to be applied to the input color. See <see cref="T:Godot.VisualShaderNodeColorFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeColorOp">
            <summary>
            <para>Applies <see cref="P:Godot.VisualShaderNodeColorOp.Operator"/> to two color inputs.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Screen">
            <summary>
            <para>Produce a screen effect with the following formula:</para>
            <para><code>
            result = vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Difference">
            <summary>
            <para>Produce a difference effect with the following formula:</para>
            <para><code>
            result = abs(a - b);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Darken">
            <summary>
            <para>Produce a darken effect with the following formula:</para>
            <para><code>
            result = min(a, b);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Lighten">
            <summary>
            <para>Produce a lighten effect with the following formula:</para>
            <para><code>
            result = max(a, b);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Overlay">
            <summary>
            <para>Produce an overlay effect with the following formula:</para>
            <para><code>
            for (int i = 0; i &lt; 3; i++) {
                float base = a[i];
                float blend = b[i];
                if (base &lt; 0.5) {
                    result[i] = 2.0 * base * blend;
                } else {
                    result[i] = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
                }
            }
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Dodge">
            <summary>
            <para>Produce a dodge effect with the following formula:</para>
            <para><code>
            result = a / (vec3(1.0) - b);
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.Burn">
            <summary>
            <para>Produce a burn effect with the following formula:</para>
            <para><code>
            result = vec3(1.0) - (vec3(1.0) - a) / b;
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.SoftLight">
            <summary>
            <para>Produce a soft light effect with the following formula:</para>
            <para><code>
            for (int i = 0; i &lt; 3; i++) {
                float base = a[i];
                float blend = b[i];
                if (base &lt; 0.5) {
                    result[i] = base * (blend + 0.5);
                } else {
                    result[i] = 1.0 - (1.0 - base) * (1.0 - (blend - 0.5));
                }
            }
            </code></para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeColorOp.OperatorEnum.HardLight">
            <summary>
            <para>Produce a hard light effect with the following formula:</para>
            <para><code>
            for (int i = 0; i &lt; 3; i++) {
                float base = a[i];
                float blend = b[i];
                if (base &lt; 0.5) {
                    result[i] = base * (2.0 * blend);
                } else {
                    result[i] = 1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5));
                }
            }
            </code></para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorOp.Operator">
            <summary>
            <para>An operator to be applied to the inputs. See <see cref="T:Godot.VisualShaderNodeColorOp.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeColorUniform">
            <summary>
            <para>Translated to <c>uniform vec4</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorUniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeColorUniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeColorUniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeCompare">
            <summary>
            <para>Compares <c>a</c> and <c>b</c> of <see cref="P:Godot.VisualShaderNodeCompare.Type"/> by <see cref="P:Godot.VisualShaderNodeCompare.Function"/>. Returns a boolean scalar. Translates to <c>if</c> instruction in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ComparisonType.Scalar">
            <summary>
            <para>A floating-point scalar.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ComparisonType.ScalarInt">
            <summary>
            <para>An integer scalar.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ComparisonType.Vector">
            <summary>
            <para>A 3D vector type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ComparisonType.Boolean">
            <summary>
            <para>A boolean type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ComparisonType.Transform">
            <summary>
            <para>A transform (<c>mat4</c>) type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.Equal">
            <summary>
            <para>Comparison for equality (<c>a == b</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.NotEqual">
            <summary>
            <para>Comparison for inequality (<c>a != b</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.GreaterThan">
            <summary>
            <para>Comparison for greater than (<c>a &gt; b</c>). Cannot be used if <see cref="P:Godot.VisualShaderNodeCompare.Type"/> set to  or .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.GreaterThanEqual">
            <summary>
            <para>Comparison for greater than or equal (<c>a &gt;= b</c>). Cannot be used if <see cref="P:Godot.VisualShaderNodeCompare.Type"/> set to  or .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.LessThan">
            <summary>
            <para>Comparison for less than (<c>a &lt; b</c>). Cannot be used if <see cref="P:Godot.VisualShaderNodeCompare.Type"/> set to  or .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.FunctionEnum.LessThanEqual">
            <summary>
            <para>Comparison for less than or equal (<c>a &lt;= b</c>). Cannot be used if <see cref="P:Godot.VisualShaderNodeCompare.Type"/> set to  or .</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ConditionEnum.All">
            <summary>
            <para>The result will be true if all of component in vector satisfy the comparison condition.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCompare.ConditionEnum.Any">
            <summary>
            <para>The result will be true if any of component in vector satisfy the comparison condition.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCompare.Type">
            <summary>
            <para>The type to be used in the comparison. See <see cref="T:Godot.VisualShaderNodeCompare.ComparisonType"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCompare.Function">
            <summary>
            <para>A comparison function. See <see cref="T:Godot.VisualShaderNodeCompare.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCompare.Condition">
            <summary>
            <para>Extra condition which is applied if <see cref="P:Godot.VisualShaderNodeCompare.Type"/> is set to .</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeCubemap">
            <summary>
            <para>Translated to <c>texture(cubemap, vec3)</c> in the shader language. Returns a color vector and alpha channel as scalar.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubemap.TextureTypeEnum.Data">
            <summary>
            <para>No hints are added to the uniform declaration.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubemap.TextureTypeEnum.Color">
            <summary>
            <para>Adds <c>hint_albedo</c> as hint to the uniform declaration for proper sRGB to linear conversion.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubemap.TextureTypeEnum.NormalMap">
            <summary>
            <para>Adds <c>hint_normal</c> as hint to the uniform declaration, which internally converts the texture for proper usage as normal map.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubemap.SourceEnum.Texture">
            <summary>
            <para>Use the <see cref="T:Godot.Cubemap"/> set via <see cref="P:Godot.VisualShaderNodeCubemap.CubeMap"/>. If this is set to <see cref="P:Godot.VisualShaderNodeCubemap.Source"/>, the <c>samplerCube</c> port is ignored.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeCubemap.SourceEnum.Port">
            <summary>
            <para>Use the <see cref="T:Godot.Cubemap"/> sampler reference passed via the <c>samplerCube</c> port. If this is set to <see cref="P:Godot.VisualShaderNodeCubemap.Source"/>, the <see cref="P:Godot.VisualShaderNodeCubemap.CubeMap"/> texture is ignored.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCubemap.Source">
            <summary>
            <para>Defines which source should be used for the sampling. See <see cref="T:Godot.VisualShaderNodeCubemap.SourceEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCubemap.CubeMap">
            <summary>
            <para>The <see cref="T:Godot.Cubemap"/> texture to sample when using  as <see cref="P:Godot.VisualShaderNodeCubemap.Source"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeCubemap.TextureType">
            <summary>
            <para>Defines the type of data provided by the source texture. See <see cref="T:Godot.VisualShaderNodeCubemap.TextureTypeEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeCubemapUniform">
            <summary>
            <para>Translated to <c>uniform samplerCube</c> in the shader language. The output value can be used as port for <see cref="T:Godot.VisualShaderNodeCubemap"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeCustom">
            <summary>
            <para>By inheriting this class you can create a custom <see cref="T:Godot.VisualShader"/> script addon which will be automatically added to the Visual Shader Editor. The <see cref="T:Godot.VisualShaderNode"/>'s behavior is defined by overriding the provided virtual methods.</para>
            <para>In order for the node to be registered as an editor addon, you must use the <c>@tool</c> annotation and provide a <c>class_name</c> for your custom script. For example:</para>
            <para><code>
            @tool
            extends VisualShaderNodeCustom
            class_name VisualShaderNodeNoise
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetCategory">
            <summary>
            <para>Override this method to define the path to the associated custom node in the Visual Shader Editor's members dialog. The path may looks like <c>"MyGame/MyFunctions/Noise"</c>.</para>
            <para>Defining this method is optional. If not overridden, the node will be filed under the "Addons" category.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetCode(Godot.Collections.Array,Godot.Collections.Array,System.Int32,System.Int32)">
            <summary>
            <para>Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the <c>"""</c> multiline string construct can be used for convenience).</para>
            <para>The <c>input_vars</c> and <c>output_vars</c> arrays contain the string names of the various input and output variables, as defined by <c>_get_input_*</c> and <c>_get_output_*</c> virtual methods in this class.</para>
            <para>The output ports can be assigned values in the shader code. For example, <c>return output_vars[0] + " = " + input_vars[0] + ";"</c>.</para>
            <para>You can customize the generated code based on the shader <c>mode</c> (see <see cref="T:Godot.Shader.Mode"/>) and/or <c>type</c> (see <see cref="T:Godot.VisualShader.Type"/>).</para>
            <para>Defining this method is required.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetDescription">
            <summary>
            <para>Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog.</para>
            <para>Defining this method is optional.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetGlobalCode(System.Int32)">
            <summary>
            <para>Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the <c>"""</c> multiline string construct can be used for convenience).</para>
            <para>Be careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names.</para>
            <para>You can customize the generated code based on the shader <c>mode</c> (see <see cref="T:Godot.Shader.Mode"/>).</para>
            <para>Defining this method is optional.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetInputPortCount">
            <summary>
            <para>Override this method to define the amount of input ports of the associated custom node.</para>
            <para>Defining this method is required. If not overridden, the node has no input ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetInputPortName(System.Int32)">
            <summary>
            <para>Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the <c>input_vars</c> array in <see cref="M:Godot.VisualShaderNodeCustom._GetCode(Godot.Collections.Array,Godot.Collections.Array,System.Int32,System.Int32)"/>.</para>
            <para>Defining this method is optional, but recommended. If not overridden, input ports are named as <c>"in" + str(port)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetInputPortType(System.Int32)">
            <summary>
            <para>Override this method to define the returned type of each input port of the associated custom node (see <see cref="T:Godot.VisualShaderNode.PortType"/> for possible types).</para>
            <para>Defining this method is optional, but recommended. If not overridden, input ports will return the  type.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetName">
            <summary>
            <para>Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph.</para>
            <para>Defining this method is optional, but recommended. If not overridden, the node will be named as "Unnamed".</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetOutputPortCount">
            <summary>
            <para>Override this method to define the amount of output ports of the associated custom node.</para>
            <para>Defining this method is required. If not overridden, the node has no output ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetOutputPortName(System.Int32)">
            <summary>
            <para>Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the <c>output_vars</c> array in <see cref="M:Godot.VisualShaderNodeCustom._GetCode(Godot.Collections.Array,Godot.Collections.Array,System.Int32,System.Int32)"/>.</para>
            <para>Defining this method is optional, but recommended. If not overridden, output ports are named as <c>"out" + str(port)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetOutputPortType(System.Int32)">
            <summary>
            <para>Override this method to define the returned type of each output port of the associated custom node (see <see cref="T:Godot.VisualShaderNode.PortType"/> for possible types).</para>
            <para>Defining this method is optional, but recommended. If not overridden, output ports will return the  type.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._GetReturnIconType">
            <summary>
            <para>Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog.</para>
            <para>Defining this method is optional. If not overridden, no return icon is shown.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeCustom._IsHighend">
            <summary>
            <para>Override this method to enable high-end mark in the Visual Shader Editor's members dialog.</para>
            <para>Defining this method is optional. If not overridden, it's false.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeDeterminant">
            <summary>
            <para>Translates to <c>deteminant(x)</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeDotProduct">
            <summary>
            <para>Translates to <c>dot(a, b)</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeExpression">
            <summary>
            <para>Custom Godot Shading Language expression, with a custom amount of input and output ports.</para>
            <para>The provided code is directly injected into the graph's matching shader function (<c>vertex</c>, <c>fragment</c>, or <c>light</c>), so it cannot be used to to declare functions, varyings, uniforms, or global constants. See <see cref="T:Godot.VisualShaderNodeGlobalExpression"/> for such global definitions.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeExpression.Expression">
            <summary>
            <para>An expression in Godot Shading Language, which will be injected at the start of the graph's matching shader function (<c>vertex</c>, <c>fragment</c>, or <c>light</c>), and thus cannot be used to declare functions, varyings, uniforms, or global constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFaceForward">
            <summary>
            <para>Translates to <c>faceforward(N, I, Nref)</c> in the shader language. The function has three vector parameters: <c>N</c>, the vector to orient, <c>I</c>, the incident vector, and <c>Nref</c>, the reference vector. If the dot product of <c>I</c> and <c>Nref</c> is smaller than zero the return value is <c>N</c>. Otherwise <c>-N</c> is returned.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFloatConstant">
            <summary>
            <para>Translated to <c>float</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatConstant.Constant">
            <summary>
            <para>A floating-point constant which represents a state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFloatFunc">
            <summary>
            <para>Accept a floating-point scalar (<c>x</c>) to the input port and transform it according to <see cref="P:Godot.VisualShaderNodeFloatFunc.Function"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Sin">
            <summary>
            <para>Returns the sine of the parameter. Translates to <c>sin(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Cos">
            <summary>
            <para>Returns the cosine of the parameter. Translates to <c>cos(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Tan">
            <summary>
            <para>Returns the tangent of the parameter. Translates to <c>tan(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Asin">
            <summary>
            <para>Returns the arc-sine of the parameter. Translates to <c>asin(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Acos">
            <summary>
            <para>Returns the arc-cosine of the parameter. Translates to <c>acos(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Atan">
            <summary>
            <para>Returns the arc-tangent of the parameter. Translates to <c>atan(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Sinh">
            <summary>
            <para>Returns the hyperbolic sine of the parameter. Translates to <c>sinh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Cosh">
            <summary>
            <para>Returns the hyperbolic cosine of the parameter. Translates to <c>cosh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Tanh">
            <summary>
            <para>Returns the hyperbolic tangent of the parameter. Translates to <c>tanh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Log">
            <summary>
            <para>Returns the natural logarithm of the parameter. Translates to <c>log(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Exp">
            <summary>
            <para>Returns the natural exponentiation of the parameter. Translates to <c>exp(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Sqrt">
            <summary>
            <para>Returns the square root of the parameter. Translates to <c>sqrt(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Abs">
            <summary>
            <para>Returns the absolute value of the parameter. Translates to <c>abs(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Sign">
            <summary>
            <para>Extracts the sign of the parameter. Translates to <c>sign(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Floor">
            <summary>
            <para>Finds the nearest integer less than or equal to the parameter. Translates to <c>floor(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Round">
            <summary>
            <para>Finds the nearest integer to the parameter. Translates to <c>round(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Ceil">
            <summary>
            <para>Finds the nearest integer that is greater than or equal to the parameter. Translates to <c>ceil(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Frac">
            <summary>
            <para>Computes the fractional part of the argument. Translates to <c>fract(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Saturate">
            <summary>
            <para>Clamps the value between <c>0.0</c> and <c>1.0</c> using <c>min(max(x, 0.0), 1.0)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Negate">
            <summary>
            <para>Negates the <c>x</c> using <c>-(x)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Acosh">
            <summary>
            <para>Returns the arc-hyperbolic-cosine of the parameter. Translates to <c>acosh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Asinh">
            <summary>
            <para>Returns the arc-hyperbolic-sine of the parameter. Translates to <c>asinh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Atanh">
            <summary>
            <para>Returns the arc-hyperbolic-tangent of the parameter. Translates to <c>atanh(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Degrees">
            <summary>
            <para>Convert a quantity in radians to degrees. Translates to <c>degrees(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Exp2">
            <summary>
            <para>Returns 2 raised by the power of the parameter. Translates to <c>exp2(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.InverseSqrt">
            <summary>
            <para>Returns the inverse of the square root of the parameter. Translates to <c>inversesqrt(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Log2">
            <summary>
            <para>Returns the base 2 logarithm of the parameter. Translates to <c>log2(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Radians">
            <summary>
            <para>Convert a quantity in degrees to radians. Translates to <c>radians(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Reciprocal">
            <summary>
            <para>Finds reciprocal value of dividing 1 by <c>x</c> (i.e. <c>1 / x</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Roundeven">
            <summary>
            <para>Finds the nearest even integer to the parameter. Translates to <c>roundEven(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Trunc">
            <summary>
            <para>Returns a value equal to the nearest integer to <c>x</c> whose absolute value is not larger than the absolute value of <c>x</c>. Translates to <c>trunc(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatFunc.FunctionEnum.Oneminus">
            <summary>
            <para>Subtracts scalar <c>x</c> from 1 (i.e. <c>1 - x</c>).</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatFunc.Function">
            <summary>
            <para>A function to be applied to the scalar. See <see cref="T:Godot.VisualShaderNodeFloatFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFloatOp">
            <summary>
            <para>Applies <see cref="P:Godot.VisualShaderNodeFloatOp.Operator"/> to two floating-point inputs: <c>a</c> and <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Add">
            <summary>
            <para>Sums two numbers using <c>a + b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Sub">
            <summary>
            <para>Subtracts two numbers using <c>a - b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Mul">
            <summary>
            <para>Multiplies two numbers using <c>a * b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Div">
            <summary>
            <para>Divides two numbers using <c>a / b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Mod">
            <summary>
            <para>Calculates the remainder of two numbers. Translates to <c>mod(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Pow">
            <summary>
            <para>Raises the <c>a</c> to the power of <c>b</c>. Translates to <c>pow(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Max">
            <summary>
            <para>Returns the greater of two numbers. Translates to <c>max(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Min">
            <summary>
            <para>Returns the lesser of two numbers. Translates to <c>min(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Atan2">
            <summary>
            <para>Returns the arc-tangent of the parameters. Translates to <c>atan(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatOp.OperatorEnum.Step">
            <summary>
            <para>Generates a step function by comparing <c>b</c>(x) to <c>a</c>(edge). Returns 0.0 if <c>x</c> is smaller than <c>edge</c> and otherwise 1.0. Translates to <c>step(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatOp.Operator">
            <summary>
            <para>An operator to be applied to the inputs. See <see cref="T:Godot.VisualShaderNodeFloatOp.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFloatUniform">
            <summary>
            <para>Translated to <c>uniform float</c> in the shader language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatUniform.HintEnum.None">
            <summary>
            <para>No hint used.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatUniform.HintEnum.Range">
            <summary>
            <para>A range hint for scalar value, which limits possible input values between <see cref="P:Godot.VisualShaderNodeFloatUniform.Min"/> and <see cref="P:Godot.VisualShaderNodeFloatUniform.Max"/>. Translated to <c>hint_range(min, max)</c> in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeFloatUniform.HintEnum.RangeStep">
            <summary>
            <para>A range hint for scalar value with step, which limits possible input values between <see cref="P:Godot.VisualShaderNodeFloatUniform.Min"/> and <see cref="P:Godot.VisualShaderNodeFloatUniform.Max"/>, with a step (increment) of <see cref="P:Godot.VisualShaderNodeFloatUniform.Step"/>). Translated to <c>hint_range(min, max, step)</c> in shader code.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.Hint">
            <summary>
            <para>A hint applied to the uniform, which controls the values it can take when set through the inspector.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.Min">
            <summary>
            <para>Maximum value for range hints. Used if <see cref="P:Godot.VisualShaderNodeFloatUniform.Hint"/> is set to  or .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.Max">
            <summary>
            <para>Minimum value for range hints. Used if <see cref="P:Godot.VisualShaderNodeFloatUniform.Hint"/> is set to  or .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.Step">
            <summary>
            <para>Step (increment) value for the range hint with step. Used if <see cref="P:Godot.VisualShaderNodeFloatUniform.Hint"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeFloatUniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeFloatUniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeFresnel">
            <summary>
            <para>Returns falloff based on the dot product of surface normal and view direction of camera (pass associated inputs to it).</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeGlobalExpression">
            <summary>
            <para>Custom Godot Shader Language expression, which is placed on top of the generated shader. You can place various function definitions inside to call later in <see cref="T:Godot.VisualShaderNodeExpression"/>s (which are injected in the main shader functions). You can also declare varyings, uniforms and global constants.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeGroupBase">
            <summary>
            <para>Currently, has no direct usage, use the derived classes instead.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetInputs(System.String)">
            <summary>
            <para>Defines all input ports using a <see cref="T:System.String"/> formatted as a colon-separated list: <c>id,type,name;</c> (see <see cref="M:Godot.VisualShaderNodeGroupBase.AddInputPort(System.Int32,System.Int32,System.String)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetInputs">
            <summary>
            <para>Returns a <see cref="T:System.String"/> description of the input ports as as colon-separated list using the format <c>id,type,name;</c> (see <see cref="M:Godot.VisualShaderNodeGroupBase.AddInputPort(System.Int32,System.Int32,System.String)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetOutputs(System.String)">
            <summary>
            <para>Defines all output ports using a <see cref="T:System.String"/> formatted as a colon-separated list: <c>id,type,name;</c> (see <see cref="M:Godot.VisualShaderNodeGroupBase.AddOutputPort(System.Int32,System.Int32,System.String)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetOutputs">
            <summary>
            <para>Returns a <see cref="T:System.String"/> description of the output ports as as colon-separated list using the format <c>id,type,name;</c> (see <see cref="M:Godot.VisualShaderNodeGroupBase.AddOutputPort(System.Int32,System.Int32,System.String)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.IsValidPortName(System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified port name does not override an existed port name and is valid within the shader.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.AddInputPort(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Adds an input port with the specified <c>type</c> (see <see cref="T:Godot.VisualShaderNode.PortType"/>) and <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.RemoveInputPort(System.Int32)">
            <summary>
            <para>Removes the specified input port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetInputPortCount">
            <summary>
            <para>Returns the number of input ports in use. Alternative for <see cref="M:Godot.VisualShaderNodeGroupBase.GetFreeInputPortId"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.HasInputPort(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified input port exists.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.ClearInputPorts">
            <summary>
            <para>Removes all previously specified input ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.AddOutputPort(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Adds an output port with the specified <c>type</c> (see <see cref="T:Godot.VisualShaderNode.PortType"/>) and <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.RemoveOutputPort(System.Int32)">
            <summary>
            <para>Removes the specified output port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetOutputPortCount">
            <summary>
            <para>Returns the number of output ports in use. Alternative for <see cref="M:Godot.VisualShaderNodeGroupBase.GetFreeOutputPortId"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.HasOutputPort(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the specified output port exists.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.ClearOutputPorts">
            <summary>
            <para>Removes all previously specified output ports.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetInputPortName(System.Int32,System.String)">
            <summary>
            <para>Renames the specified input port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetInputPortType(System.Int32,System.Int32)">
            <summary>
            <para>Sets the specified input port's type (see <see cref="T:Godot.VisualShaderNode.PortType"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetOutputPortName(System.Int32,System.String)">
            <summary>
            <para>Renames the specified output port.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.SetOutputPortType(System.Int32,System.Int32)">
            <summary>
            <para>Sets the specified output port's type (see <see cref="T:Godot.VisualShaderNode.PortType"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetFreeInputPortId">
            <summary>
            <para>Returns a free input port ID which can be used in <see cref="M:Godot.VisualShaderNodeGroupBase.AddInputPort(System.Int32,System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeGroupBase.GetFreeOutputPortId">
            <summary>
            <para>Returns a free output port ID which can be used in <see cref="M:Godot.VisualShaderNodeGroupBase.AddOutputPort(System.Int32,System.Int32,System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIf">
            <summary>
            <para>First two ports are scalar floatin-point numbers to compare, third is tolerance comparison amount and last three ports represents a vectors returned if <c>a == b</c>, <c>a &gt; b</c> and <c>a &lt; b</c> respectively.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeInput">
            <summary>
            <para>Gives access to input variables (built-ins) available for the shader. See the shading reference for the list of available built-ins for each shader type (check <c>Tutorials</c> section for link).</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeInput.InputName">
            <summary>
            <para>One of the several input constants in lower-case style like: "vertex"(<c>VERTEX</c>) or "point_size"(<c>POINT_SIZE</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.VisualShaderNodeInput.GetInputRealName">
            <summary>
            <para>Returns a translated name of the current constant in the Godot Shader Language. eg. <c>"ALBEDO"</c> if the <see cref="P:Godot.VisualShaderNodeInput.InputName"/> equal to <c>"albedo"</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeInput.InputTypeChangedHandler">
            <summary>
            <para>Emitted when input is changed via <see cref="P:Godot.VisualShaderNodeInput.InputName"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIntConstant">
            <summary>
            <para>Translated to <c>int</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntConstant.Constant">
            <summary>
            <para>An integer constant which represents a state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIntFunc">
            <summary>
            <para>Accept an integer scalar (<c>x</c>) to the input port and transform it according to <see cref="P:Godot.VisualShaderNodeIntFunc.Function"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntFunc.FunctionEnum.Abs">
            <summary>
            <para>Returns the absolute value of the parameter. Translates to <c>abs(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntFunc.FunctionEnum.Clamp">
            <summary>
            <para>Constrains a parameter between <c>min</c> and <c>max</c>. Translates to <c>clamp(x, min, max)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntFunc.FunctionEnum.Negate">
            <summary>
            <para>Negates the <c>x</c> using <c>-(x)</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntFunc.FunctionEnum.Sign">
            <summary>
            <para>Extracts the sign of the parameter. Translates to <c>sign(x)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntFunc.Function">
            <summary>
            <para>A function to be applied to the scalar. See <see cref="T:Godot.VisualShaderNodeIntFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIntOp">
            <summary>
            <para>Applies <see cref="P:Godot.VisualShaderNodeIntOp.Operator"/> to two integer inputs: <c>a</c> and <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Add">
            <summary>
            <para>Sums two numbers using <c>a + b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Sub">
            <summary>
            <para>Subtracts two numbers using <c>a - b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Mul">
            <summary>
            <para>Multiplies two numbers using <c>a * b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Div">
            <summary>
            <para>Divides two numbers using <c>a / b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Mod">
            <summary>
            <para>Calculates the remainder of two numbers using <c>a % b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Max">
            <summary>
            <para>Returns the greater of two numbers. Translates to <c>max(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntOp.OperatorEnum.Min">
            <summary>
            <para>Returns the lesser of two numbers. Translates to <c>max(a, b)</c> in the Godot Shader Language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntOp.Operator">
            <summary>
            <para>An operator to be applied to the inputs. See <see cref="T:Godot.VisualShaderNodeIntOp.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIntUniform">
            <summary>
            <para>Translated to <c>uniform int</c> in the shader language.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntUniform.HintEnum.None">
            <summary>
            <para>No hint used.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntUniform.HintEnum.Range">
            <summary>
            <para>A range hint for scalar value, which limits possible input values between <see cref="P:Godot.VisualShaderNodeIntUniform.Min"/> and <see cref="P:Godot.VisualShaderNodeIntUniform.Max"/>. Translated to <c>hint_range(min, max)</c> in shader code.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIntUniform.HintEnum.RangeStep">
            <summary>
            <para>A range hint for scalar value with step, which limits possible input values between <see cref="P:Godot.VisualShaderNodeIntUniform.Min"/> and <see cref="P:Godot.VisualShaderNodeIntUniform.Max"/>, with a step (increment) of <see cref="P:Godot.VisualShaderNodeIntUniform.Step"/>). Translated to <c>hint_range(min, max, step)</c> in shader code.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.Hint">
            <summary>
            <para>A hint applied to the uniform, which controls the values it can take when set through the inspector.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.Min">
            <summary>
            <para>Maximum value for range hints. Used if <see cref="P:Godot.VisualShaderNodeIntUniform.Hint"/> is set to  or .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.Max">
            <summary>
            <para>Minimum value for range hints. Used if <see cref="P:Godot.VisualShaderNodeIntUniform.Hint"/> is set to  or .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.Step">
            <summary>
            <para>Step (increment) value for the range hint with step. Used if <see cref="P:Godot.VisualShaderNodeIntUniform.Hint"/> is set to .</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeIntUniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIntUniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeIs">
            <summary>
            <para>Returns the boolean result of the comparison between <c>INF</c> or <c>NaN</c> and a scalar parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIs.FunctionEnum.Inf">
            <summary>
            <para>Comparison with <c>INF</c> (Infinity).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeIs.FunctionEnum.Nan">
            <summary>
            <para>Comparison with <c>NaN</c> (Not a Number; denotes invalid numeric results, e.g. division by zero).</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeIs.Function">
            <summary>
            <para>The comparison function. See <see cref="T:Godot.VisualShaderNodeIs.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeMultiplyAdd">
            <summary>
            <para>Uses three operands to compute <c>(a * b + c)</c> expression.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeMultiplyAdd.OpTypeEnum.Scalar">
            <summary>
            <para>A scalar type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeMultiplyAdd.OpTypeEnum.Vector">
            <summary>
            <para>A vector type.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeMultiplyAdd.OpTypeEnum.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.VisualShaderNodeMultiplyAdd.OpTypeEnum"/> enum.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeMultiplyAdd.OpType">
            <summary>
            <para>A type of operands and returned value.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeOuterProduct">
            <summary>
            <para><c>OuterProduct</c> treats the first parameter <c>c</c> as a column vector (matrix with one column) and the second parameter <c>r</c> as a row vector (matrix with one row) and does a linear algebraic matrix multiply <c>c * r</c>, yielding a matrix whose number of rows is the number of components in <c>c</c> and whose number of columns is the number of components in <c>r</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeOutput">
            <summary>
            <para>This visual shader node is present in all shader graphs in form of "Output" block with multiple output value ports.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeResizableBase.Size">
            <summary>
            <para>The size of the node in the visual shader graph.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeSample3D">
            <summary>
            <para>A virtual class, use the descendants instead.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeSample3D.SourceEnum.Texture">
            <summary>
            <para>Creates internal uniform and provides a way to assign it within node.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeSample3D.SourceEnum.Port">
            <summary>
            <para>Use the uniform texture from sampler port.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeSample3D.Source">
            <summary>
            <para>An input source type.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeScalarClamp">
            <summary>
            <para>Constrains a value to lie between <c>min</c> and <c>max</c> values.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeScalarDerivativeFunc">
            <summary>
            <para>This node is only available in <c>Fragment</c> and <c>Light</c> visual shaders.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarDerivativeFunc.FunctionEnum.Sum">
            <summary>
            <para>Sum of absolute derivative in <c>x</c> and <c>y</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarDerivativeFunc.FunctionEnum.X">
            <summary>
            <para>Derivative in <c>x</c> using local differencing.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeScalarDerivativeFunc.FunctionEnum.Y">
            <summary>
            <para>Derivative in <c>y</c> using local differencing.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeScalarDerivativeFunc.Function">
            <summary>
            <para>The derivative type. See <see cref="T:Godot.VisualShaderNodeScalarDerivativeFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeScalarInterp">
            <summary>
            <para>Translates to <c>mix(a, b, weight)</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeScalarSmoothStep">
            <summary>
            <para>Translates to <c>smoothstep(edge0, edge1, x)</c> in the shader language.</para>
            <para>Returns <c>0.0</c> if <c>x</c> is smaller than <c>edge0</c> and <c>1.0</c> if <c>x</c> is larger than <c>edge1</c>. Otherwise the return value is interpolated between <c>0.0</c> and <c>1.0</c> using Hermite polynomials.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeScalarSwitch">
            <summary>
            <para>Returns an associated scalar if the provided boolean value is <c>true</c> or <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeSwitch">
            <summary>
            <para>Returns an associated vector if the provided boolean value is <c>true</c> or <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTexture">
            <summary>
            <para>Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.Data">
            <summary>
            <para>No hints are added to the uniform declaration.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.Color">
            <summary>
            <para>Adds <c>hint_albedo</c> as hint to the uniform declaration for proper sRGB to linear conversion.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.TextureTypeEnum.NormalMap">
            <summary>
            <para>Adds <c>hint_normal</c> as hint to the uniform declaration, which internally converts the texture for proper usage as normal map.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Texture">
            <summary>
            <para>Use the texture given as an argument for this function.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Screen">
            <summary>
            <para>Use the current viewport's texture as the source.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Source2dTexture">
            <summary>
            <para>Use the texture from this shader's texture built-in (e.g. a texture of a <see cref="T:Godot.Sprite2D"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Source2dNormal">
            <summary>
            <para>Use the texture from this shader's normal map built-in.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Depth">
            <summary>
            <para>Use the depth texture available for this shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTexture.SourceEnum.Port">
            <summary>
            <para>Use the texture provided in the input port for this function.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.Source">
            <summary>
            <para>Determines the source for the lookup. See <see cref="T:Godot.VisualShaderNodeTexture.SourceEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.Texture">
            <summary>
            <para>The source texture, if needed for the selected <see cref="P:Godot.VisualShaderNodeTexture.Source"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture.TextureType">
            <summary>
            <para>Specifies the type of the texture if <see cref="P:Godot.VisualShaderNodeTexture.Source"/> is set to . See <see cref="T:Godot.VisualShaderNodeTexture.TextureTypeEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTexture2DArray">
            <summary>
            <para>Translated to <c>uniform sampler2DArray</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture2DArray.TextureArray">
            <summary>
            <para>A source texture array. Used if <see cref="P:Godot.VisualShaderNodeSample3D.Source"/> is set to .</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTexture3D">
            <summary>
            <para>Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTexture3D.Texture">
            <summary>
            <para>A source texture. Used if <see cref="P:Godot.VisualShaderNodeSample3D.Source"/> is set to .</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTexture3DUniform">
            <summary>
            <para>Translated to <c>uniform sampler3D</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTextureUniform">
            <summary>
            <para>Performs a lookup operation on the texture provided as a uniform for the shader.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Data">
            <summary>
            <para>No hints are added to the uniform declaration.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Color">
            <summary>
            <para>Adds <c>hint_albedo</c> as hint to the uniform declaration for proper sRGB to linear conversion.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.NormalMap">
            <summary>
            <para>Adds <c>hint_normal</c> as hint to the uniform declaration, which internally converts the texture for proper usage as normal map.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum.Aniso">
            <summary>
            <para>Adds <c>hint_aniso</c> as hint to the uniform declaration to use for a flowmap.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.ColorDefaultEnum.White">
            <summary>
            <para>Defaults to white color.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTextureUniform.ColorDefaultEnum.Black">
            <summary>
            <para>Defaults to black color.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTextureUniform.TextureType">
            <summary>
            <para>Defines the type of data provided by the source texture. See <see cref="T:Godot.VisualShaderNodeTextureUniform.TextureTypeEnum"/> for options.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTextureUniform.ColorDefault">
            <summary>
            <para>Sets the default color if no texture is assigned to the uniform.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTextureUniformTriplanar">
            <summary>
            <para>Performs a lookup operation on the texture provided as a uniform for the shader, with support for triplanar mapping.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformCompose">
            <summary>
            <para>Creates a 4x4 transform matrix using four vectors of type <c>vec3</c>. Each vector is one row in the matrix and the last column is a <c>vec4(0, 0, 0, 1)</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformConstant">
            <summary>
            <para>A constant <see cref="T:Godot.Transform"/>, which can be used as an input node.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformConstant.Constant">
            <summary>
            <para>A <see cref="T:Godot.Transform"/> constant which represents the state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformDecompose">
            <summary>
            <para>Takes a 4x4 transform matrix and decomposes it into four <c>vec3</c> values, one from each row of the matrix.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformFunc">
            <summary>
            <para>Computes an inverse or transpose function on the provided <see cref="T:Godot.Transform"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformFunc.FunctionEnum.Inverse">
            <summary>
            <para>Perform the inverse operation on the <see cref="T:Godot.Transform"/> matrix.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformFunc.FunctionEnum.Transpose">
            <summary>
            <para>Perform the transpose operation on the <see cref="T:Godot.Transform"/> matrix.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformFunc.Function">
            <summary>
            <para>The function to be computed. See <see cref="T:Godot.VisualShaderNodeTransformFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformMult">
            <summary>
            <para>A multiplication operation on two transforms (4x4 matrices), with support for different multiplication operators.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.Axb">
            <summary>
            <para>Multiplies transform <c>a</c> by the transform <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.Bxa">
            <summary>
            <para>Multiplies transform <c>b</c> by the transform <c>a</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.AxbComp">
            <summary>
            <para>Performs a component-wise multiplication of transform <c>a</c> by the transform <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformMult.OperatorEnum.BxaComp">
            <summary>
            <para>Performs a component-wise multiplication of transform <c>b</c> by the transform <c>a</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformMult.Operator">
            <summary>
            <para>The multiplication type to be performed on the transforms. See <see cref="T:Godot.VisualShaderNodeTransformMult.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformUniform">
            <summary>
            <para>Translated to <c>uniform mat4</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformUniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeTransformUniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformUniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeTransformVecMult">
            <summary>
            <para>A multiplication operation on a transform (4x4 matrix) and a vector, with support for different multiplication operators.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Axb">
            <summary>
            <para>Multiplies transform <c>a</c> by the vector <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Bxa">
            <summary>
            <para>Multiplies vector <c>b</c> by the transform <c>a</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Op3x3Axb">
            <summary>
            <para>Multiplies transform <c>a</c> by the vector <c>b</c>, skipping the last row and column of the transform.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeTransformVecMult.OperatorEnum.Op3x3Bxa">
            <summary>
            <para>Multiplies vector <c>b</c> by the transform <c>a</c>, skipping the last row and column of the transform.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeTransformVecMult.Operator">
            <summary>
            <para>The multiplication type to be performed. See <see cref="T:Godot.VisualShaderNodeTransformVecMult.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeUniform">
            <summary>
            <para>A uniform represents a variable in the shader which is set externally, i.e. from the <see cref="T:Godot.ShaderMaterial"/>. Uniforms are exposed as properties in the <see cref="T:Godot.ShaderMaterial"/> and can be assigned from the inspector or from a script.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeUniform.UniformName">
            <summary>
            <para>Name of the uniform, by which it can be accessed through the <see cref="T:Godot.ShaderMaterial"/> properties.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeUniformRef">
            <summary>
            <para>Creating a reference to a <see cref="T:Godot.VisualShaderNodeUniform"/> allows you to reuse this uniform in different shaders or shader stages easily.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeUniformRef.UniformName">
            <summary>
            <para>The name of the uniform which this reference points to.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVec3Constant">
            <summary>
            <para>A constant <see cref="T:Godot.Vector3"/>, which can be used as an input node.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVec3Constant.Constant">
            <summary>
            <para>A <see cref="T:Godot.Vector3"/> constant which represents the state of this node.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVec3Uniform">
            <summary>
            <para>Translated to <c>uniform vec3</c> in the shader language.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVec3Uniform.DefaultValueEnabled">
            <summary>
            <para>Enables usage of the <see cref="P:Godot.VisualShaderNodeVec3Uniform.DefaultValue"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVec3Uniform.DefaultValue">
            <summary>
            <para>A default value to be assigned within the shader.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorClamp">
            <summary>
            <para>Constrains a value to lie between <c>min</c> and <c>max</c> values. The operation is performed on each component of the vector individually.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorCompose">
            <summary>
            <para>Creates a <c>vec3</c> using three scalar values that can be provided from separate inputs.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorDecompose">
            <summary>
            <para>Takes a <c>vec3</c> and decomposes it into three scalar values that can be used as separate inputs.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorDerivativeFunc">
            <summary>
            <para>This node is only available in <c>Fragment</c> and <c>Light</c> visual shaders.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorDerivativeFunc.FunctionEnum.Sum">
            <summary>
            <para>Sum of absolute derivative in <c>x</c> and <c>y</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorDerivativeFunc.FunctionEnum.X">
            <summary>
            <para>Derivative in <c>x</c> using local differencing.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorDerivativeFunc.FunctionEnum.Y">
            <summary>
            <para>Derivative in <c>y</c> using local differencing.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVectorDerivativeFunc.Function">
            <summary>
            <para>A derivative type. See <see cref="T:Godot.VisualShaderNodeVectorDerivativeFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorDistance">
            <summary>
            <para>Calculates distance from point represented by vector <c>p0</c> to vector <c>p1</c>.</para>
            <para>Translated to <c>distance(p0, p1)</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorFunc">
            <summary>
            <para>A visual shader node able to perform different functions using vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Normalize">
            <summary>
            <para>Normalizes the vector so that it has a length of <c>1</c> but points in the same direction.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Saturate">
            <summary>
            <para>Clamps the value between <c>0.0</c> and <c>1.0</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Negate">
            <summary>
            <para>Returns the opposite value of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Reciprocal">
            <summary>
            <para>Returns <c>1/vector</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Rgb2hsv">
            <summary>
            <para>Converts RGB vector to HSV equivalent.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Hsv2rgb">
            <summary>
            <para>Converts HSV vector to RGB equivalent.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Abs">
            <summary>
            <para>Returns the absolute value of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Acos">
            <summary>
            <para>Returns the arc-cosine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Acosh">
            <summary>
            <para>Returns the inverse hyperbolic cosine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Asin">
            <summary>
            <para>Returns the arc-sine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Asinh">
            <summary>
            <para>Returns the inverse hyperbolic sine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Atan">
            <summary>
            <para>Returns the arc-tangent of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Atanh">
            <summary>
            <para>Returns the inverse hyperbolic tangent of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Ceil">
            <summary>
            <para>Finds the nearest integer that is greater than or equal to the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Cos">
            <summary>
            <para>Returns the cosine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Cosh">
            <summary>
            <para>Returns the hyperbolic cosine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Degrees">
            <summary>
            <para>Converts a quantity in radians to degrees.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Exp">
            <summary>
            <para>Base-e Exponential.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Exp2">
            <summary>
            <para>Base-2 Exponential.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Floor">
            <summary>
            <para>Finds the nearest integer less than or equal to the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Frac">
            <summary>
            <para>Computes the fractional part of the argument.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.InverseSqrt">
            <summary>
            <para>Returns the inverse of the square root of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Log">
            <summary>
            <para>Natural logarithm.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Log2">
            <summary>
            <para>Base-2 logarithm.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Radians">
            <summary>
            <para>Converts a quantity in degrees to radians.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Round">
            <summary>
            <para>Finds the nearest integer to the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Roundeven">
            <summary>
            <para>Finds the nearest even integer to the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Sign">
            <summary>
            <para>Extracts the sign of the parameter, i.e. returns <c>-1</c> if the parameter is negative, <c>1</c> if it's positive and <c>0</c> otherwise.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Sin">
            <summary>
            <para>Returns the sine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Sinh">
            <summary>
            <para>Returns the hyperbolic sine of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Sqrt">
            <summary>
            <para>Returns the square root of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Tan">
            <summary>
            <para>Returns the tangent of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Tanh">
            <summary>
            <para>Returns the hyperbolic tangent of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Trunc">
            <summary>
            <para>Returns a value equal to the nearest integer to the parameter whose absolute value is not larger than the absolute value of the parameter.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorFunc.FunctionEnum.Oneminus">
            <summary>
            <para>Returns <c>1.0 - vector</c>.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVectorFunc.Function">
            <summary>
            <para>The function to be performed. See <see cref="T:Godot.VisualShaderNodeVectorFunc.FunctionEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorInterp">
            <summary>
            <para>Translates to <c>mix(a, b, weight)</c> in the shader language, where <c>weight</c> is a <see cref="T:Godot.Vector3"/> with weights for each component.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorLen">
            <summary>
            <para>Translated to <c>length(p0)</c> in the shader language.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorOp">
            <summary>
            <para>A visual shader node for use of vector operators. Operates on vector <c>a</c> and vector <c>b</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Add">
            <summary>
            <para>Adds two vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Sub">
            <summary>
            <para>Subtracts a vector from a vector.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Mul">
            <summary>
            <para>Multiplies two vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Div">
            <summary>
            <para>Divides vector by vector.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Mod">
            <summary>
            <para>Returns the remainder of the two vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Pow">
            <summary>
            <para>Returns the value of the first parameter raised to the power of the second, for each component of the vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Max">
            <summary>
            <para>Returns the greater of two values, for each component of the vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Min">
            <summary>
            <para>Returns the lesser of two values, for each component of the vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Cross">
            <summary>
            <para>Calculates the cross product of two vectors.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Atan2">
            <summary>
            <para>Returns the arc-tangent of the parameters.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Reflect">
            <summary>
            <para>Returns the vector that points in the direction of reflection. <c>a</c> is incident vector and <c>b</c> is the normal vector.</para>
            </summary>
        </member>
        <member name="F:Godot.VisualShaderNodeVectorOp.OperatorEnum.Step">
            <summary>
            <para>Vector step operator. Returns <c>0.0</c> if <c>a</c> is smaller than <c>b</c> and <c>1.0</c> otherwise.</para>
            </summary>
        </member>
        <member name="P:Godot.VisualShaderNodeVectorOp.Operator">
            <summary>
            <para>The operator to be used. See <see cref="T:Godot.VisualShaderNodeVectorOp.OperatorEnum"/> for options.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorRefract">
            <summary>
            <para>Translated to <c>refract(I, N, eta)</c> in the shader language, where <c>I</c> is the incident vector, <c>N</c> is the normal vector and <c>eta</c> is the ratio of the indices of the refraction.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorScalarMix">
            <summary>
            <para>Translates to <c>mix(a, b, weight)</c> in the shader language, where <c>a</c> and <c>b</c> are vectors and <c>weight</c> is a scalar.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorScalarSmoothStep">
            <summary>
            <para>Translates to <c>smoothstep(edge0, edge1, x)</c> in the shader language, where <c>x</c> is a scalar.</para>
            <para>Returns <c>0.0</c> if <c>x</c> is smaller than <c>edge0</c> and <c>1.0</c> if <c>x</c> is larger than <c>edge1</c>. Otherwise the return value is interpolated between <c>0.0</c> and <c>1.0</c> using Hermite polynomials.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorScalarStep">
            <summary>
            <para>Translates to <c>step(edge, x)</c> in the shader language.</para>
            <para>Returns <c>0.0</c> if <c>x</c> is smaller than <c>edge</c> and <c>1.0</c> otherwise.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualShaderNodeVectorSmoothStep">
            <summary>
            <para>Translates to <c>smoothstep(edge0, edge1, x)</c> in the shader language, where <c>x</c> is a vector.</para>
            <para>Returns <c>0.0</c> if <c>x</c> is smaller than <c>edge0</c> and <c>1.0</c> if <c>x</c> is larger than <c>edge1</c>. Otherwise the return value is interpolated between <c>0.0</c> and <c>1.0</c> using Hermite polynomials.</para>
            </summary>
        </member>
        <member name="T:Godot.WeakRef">
            <summary>
            <para>A weakref can hold a <see cref="T:Godot.Reference"/>, without contributing to the reference counter. A weakref can be created from an <see cref="T:Godot.Object"/> using <c>@GDScript.weakref</c>. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.</para>
            </summary>
        </member>
        <member name="M:Godot.WeakRef.GetRef">
            <summary>
            <para>Returns the <see cref="T:Godot.Object"/> this weakref is referring to.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.WriteModeEnum.Text">
            <summary>
            <para>Tells the channel to send data over this channel as text. An external peer (non-Godot) would receive this as a string.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.WriteModeEnum.Binary">
            <summary>
            <para>Tells the channel to send data over this channel as binary. An external peer (non-Godot) would receive this as array buffer or blob.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.ChannelState.Connecting">
            <summary>
            <para>The channel was created, but it's still trying to connect.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.ChannelState.Open">
            <summary>
            <para>The channel is currently open, and data can flow over it.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.ChannelState.Closing">
            <summary>
            <para>The channel is being closed, no new messages will be accepted, but those already in queue will be flushed.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCDataChannel.ChannelState.Closed">
            <summary>
            <para>The channel was closed, or connection failed.</para>
            </summary>
        </member>
        <member name="P:Godot.WebRTCDataChannel.WriteMode">
            <summary>
            <para>The transfer mode to use when sending outgoing packet. Either text or binary.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.Poll">
            <summary>
            <para>Reserved, but not used for now.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.Close">
            <summary>
            <para>Closes this data channel, notifying the other peer.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.WasStringPacket">
            <summary>
            <para>Returns <c>true</c> if the last received packet was transferred as text. See <see cref="P:Godot.WebRTCDataChannel.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetReadyState">
            <summary>
            <para>Returns the current state of this channel, see <see cref="T:Godot.WebRTCDataChannel.ChannelState"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetLabel">
            <summary>
            <para>Returns the label assigned to this channel during creation.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.IsOrdered">
            <summary>
            <para>Returns <c>true</c> if this channel was created with ordering enabled (default).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetId">
            <summary>
            <para>Returns the id assigned to this channel during creation (or auto-assigned during negotiation).</para>
            <para>If the channel is not negotiated out-of-band the id will only be available after the connection is established (will return <c>65535</c> until then).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetMaxPacketLifeTime">
            <summary>
            <para>Returns the <c>maxPacketLifeTime</c> value assigned to this channel during creation.</para>
            <para>Will be <c>65535</c> if not specified.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetMaxRetransmits">
            <summary>
            <para>Returns the <c>maxRetransmits</c> value assigned to this channel during creation.</para>
            <para>Will be <c>65535</c> if not specified.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.GetProtocol">
            <summary>
            <para>Returns the sub-protocol assigned to this channel during creation. An empty string if not specified.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCDataChannel.IsNegotiated">
            <summary>
            <para>Returns <c>true</c> if this channel was created with out-of-band configuration.</para>
            </summary>
        </member>
        <member name="T:Godot.WebRTCMultiplayer">
            <summary>
            <para>This class constructs a full mesh of <see cref="T:Godot.WebRTCPeerConnection"/> (one connection for each peer) that can be used as a <see cref="P:Godot.MultiplayerAPI.NetworkPeer"/>.</para>
            <para>You can add each <see cref="T:Godot.WebRTCPeerConnection"/> via <see cref="M:Godot.WebRTCMultiplayer.AddPeer(Godot.WebRTCPeerConnection,System.Int32,System.Int32)"/> or remove them via <see cref="M:Godot.WebRTCMultiplayer.RemovePeer(System.Int32)"/>. Peers must be added in  state to allow it to create the appropriate channels. This class will not create offers nor set descriptions, it will only poll them, and notify connections and disconnections.</para>
            <para><c>NetworkedMultiplayerPeer.connection_succeeded</c> and <c>NetworkedMultiplayerPeer.server_disconnected</c> will not be emitted unless <c>server_compatibility</c> is <c>true</c> in <see cref="M:Godot.WebRTCMultiplayer.Initialize(System.Int32,System.Boolean)"/>. Beside that data transfer works like in a <see cref="T:Godot.NetworkedMultiplayerPeer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.Initialize(System.Int32,System.Boolean)">
            <summary>
            <para>Initialize the multiplayer peer with the given <c>peer_id</c> (must be between 1 and 2147483647).</para>
            <para>If <c>server_compatibilty</c> is <c>false</c> (default), the multiplayer peer will be immediately in state  and <c>NetworkedMultiplayerPeer.connection_succeeded</c> will not be emitted.</para>
            <para>If <c>server_compatibilty</c> is <c>true</c> the peer will suppress all <c>NetworkedMultiplayerPeer.peer_connected</c> signals until a peer with id  connects and then emit <c>NetworkedMultiplayerPeer.connection_succeeded</c>. After that the signal <c>NetworkedMultiplayerPeer.peer_connected</c> will be emitted for every already connected peer, and any new peer that might connect. If the server peer disconnects after that, signal <c>NetworkedMultiplayerPeer.server_disconnected</c> will be emitted and state will become .</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.AddPeer(Godot.WebRTCPeerConnection,System.Int32,System.Int32)">
            <summary>
            <para>Add a new peer to the mesh with the given <c>peer_id</c>. The <see cref="T:Godot.WebRTCPeerConnection"/> must be in state .</para>
            <para>Three channels will be created for reliable, unreliable, and ordered transport. The value of <c>unreliable_lifetime</c> will be passed to the <c>maxPacketLifetime</c> option when creating unreliable and ordered channels (see <see cref="M:Godot.WebRTCPeerConnection.CreateDataChannel(System.String,Godot.Collections.Dictionary)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.RemovePeer(System.Int32)">
            <summary>
            <para>Remove the peer with given <c>peer_id</c> from the mesh. If the peer was connected, and <c>NetworkedMultiplayerPeer.peer_connected</c> was emitted for it, then <c>NetworkedMultiplayerPeer.peer_disconnected</c> will be emitted.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.HasPeer(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the given <c>peer_id</c> is in the peers map (it might not be connected though).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.GetPeer(System.Int32)">
            <summary>
            <para>Return a dictionary representation of the peer with given <c>peer_id</c> with three keys. <c>connection</c> containing the <see cref="T:Godot.WebRTCPeerConnection"/> to this peer, <c>channels</c> an array of three <see cref="T:Godot.WebRTCDataChannel"/>, and <c>connected</c> a boolean representing if the peer connection is currently connected (all three channels are open).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.GetPeers">
            <summary>
            <para>Returns a dictionary which keys are the peer ids and values the peer representation as in <see cref="M:Godot.WebRTCMultiplayer.GetPeer(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCMultiplayer.Close">
            <summary>
            <para>Close all the add peer connections and channels, freeing all resources.</para>
            </summary>
        </member>
        <member name="T:Godot.WebRTCPeerConnection">
            <summary>
            <para>A WebRTC connection between the local computer and a remote peer. Provides an interface to connect, maintain and monitor the connection.</para>
            <para>Setting up a WebRTC connection between two peers from now on) may not seem a trivial task, but it can be broken down into 3 main steps:</para>
            <para>- The peer that wants to initiate the connection (<c>A</c> from now on) creates an offer and send it to the other peer (<c>B</c> from now on).</para>
            <para>- <c>B</c> receives the offer, generate and answer, and sends it to <c>A</c>).</para>
            <para>- <c>A</c> and <c>B</c> then generates and exchange ICE candidates with each other.</para>
            <para>After these steps, the connection should become connected. Keep on reading or look into the tutorial for more information.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.New">
            <summary>
            <para>The connection is new, data channels and an offer can be created in this state.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.Connecting">
            <summary>
            <para>The peer is connecting, ICE is in progress, none of the transports has failed.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.Connected">
            <summary>
            <para>The peer is connected, all ICE transports are connected.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.Disconnected">
            <summary>
            <para>At least one ICE transport is disconnected.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.Failed">
            <summary>
            <para>One or more of the ICE transports failed.</para>
            </summary>
        </member>
        <member name="F:Godot.WebRTCPeerConnection.ConnectionState.Closed">
            <summary>
            <para>The peer connection is closed (after calling <see cref="M:Godot.WebRTCPeerConnection.Close"/> for example).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.Initialize(Godot.Collections.Dictionary)">
            <summary>
            <para>Re-initialize this peer connection, closing any previously active connection, and going back to state . A dictionary of <c>options</c> can be passed to configure the peer connection.</para>
            <para>Valid <c>options</c> are:</para>
            <para><code>
            {
                "iceServers": [
                    {
                        "urls": [ "stun:stun.example.com:3478" ], # One or more STUN servers.
                    },
                    {
                        "urls": [ "turn:turn.example.com:3478" ], # One or more TURN servers.
                        "username": "a_username", # Optional username for the TURN server.
                        "credential": "a_password", # Optional password for the TURN server.
                    }
                ]
            }
            </code></para>
            </summary>
            <param name="configuration">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.CreateDataChannel(System.String,Godot.Collections.Dictionary)">
            <summary>
            <para>Returns a new <see cref="T:Godot.WebRTCDataChannel"/> (or <c>null</c> on failure) with given <c>label</c> and optionally configured via the <c>options</c> dictionary. This method can only be called when the connection is in state .</para>
            <para>There are two ways to create a working data channel: either call <see cref="M:Godot.WebRTCPeerConnection.CreateDataChannel(System.String,Godot.Collections.Dictionary)"/> on only one of the peer and listen to <c>data_channel_received</c> on the other, or call <see cref="M:Godot.WebRTCPeerConnection.CreateDataChannel(System.String,Godot.Collections.Dictionary)"/> on both peers, with the same values, and the <c>negotiated</c> option set to <c>true</c>.</para>
            <para>Valid <c>options</c> are:</para>
            <para><code>
            {
                "negotiated": true, # When set to true (default off), means the channel is negotiated out of band. "id" must be set too. data_channel_received will not be called.
                "id": 1, # When "negotiated" is true this value must also be set to the same value on both peer.
            
                # Only one of maxRetransmits and maxPacketLifeTime can be specified, not both. They make the channel unreliable (but also better at real time).
                "maxRetransmits": 1, # Specify the maximum number of attempt the peer will make to retransmits packets if they are not acknowledged.
                "maxPacketLifeTime": 100, # Specify the maximum amount of time before giving up retransmitions of unacknowledged packets (in milliseconds).
                "ordered": true, # When in unreliable mode (i.e. either "maxRetransmits" or "maxPacketLifetime" is set), "ordered" (true by default) specify if packet ordering is to be enforced.
            
                "protocol": "my-custom-protocol", # A custom sub-protocol string for this channel.
            }
            </code></para>
            <para>Note: You must keep a reference to channels created this way, or it will be closed.</para>
            </summary>
            <param name="options">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.CreateOffer">
            <summary>
            <para>Creates a new SDP offer to start a WebRTC connection with a remote peer. At least one <see cref="T:Godot.WebRTCDataChannel"/> must have been created before calling this method.</para>
            <para>If this functions returns , <c>session_description_created</c> will be called when the session is ready to be sent.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.SetLocalDescription(System.String,System.String)">
            <summary>
            <para>Sets the SDP description of the local peer. This should be called in response to <c>session_description_created</c>.</para>
            <para>After calling this function the peer will start emitting <c>ice_candidate_created</c> (unless an <see cref="T:Godot.Error"/> different from  is returned).</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.SetRemoteDescription(System.String,System.String)">
            <summary>
            <para>Sets the SDP description of the remote peer. This should be called with the values generated by a remote peer and received over the signaling server.</para>
            <para>If <c>type</c> is <c>offer</c> the peer will emit <c>session_description_created</c> with the appropriate answer.</para>
            <para>If <c>type</c> is <c>answer</c> the peer will start emitting <c>ice_candidate_created</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.AddIceCandidate(System.String,System.Int32,System.String)">
            <summary>
            <para>Add an ice candidate generated by a remote peer (and received over the signaling server). See <c>ice_candidate_created</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.Poll">
            <summary>
            <para>Call this method frequently (e.g. in <see cref="M:Godot.Node._Process(System.Single)"/> or <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/>) to properly receive signals.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.Close">
            <summary>
            <para>Close the peer connection and all data channels associated with it. Note, you cannot reuse this object for a new connection unless you call <see cref="M:Godot.WebRTCPeerConnection.Initialize(Godot.Collections.Dictionary)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebRTCPeerConnection.GetConnectionState">
            <summary>
            <para>Returns the connection state. See <see cref="T:Godot.WebRTCPeerConnection.ConnectionState"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.WebRTCPeerConnection.IceCandidateCreatedHandler">
            <summary>
            <para>Emitted when a new ICE candidate has been created. The three parameters are meant to be passed to the remote peer over the signaling server.</para>
            </summary>
        </member>
        <member name="T:Godot.WebRTCPeerConnection.SessionDescriptionCreatedHandler">
            <summary>
            <para>Emitted after a successful call to <see cref="M:Godot.WebRTCPeerConnection.CreateOffer"/> or <see cref="M:Godot.WebRTCPeerConnection.SetRemoteDescription(System.String,System.String)"/> (when it generates an answer). The parameters are meant to be passed to <see cref="M:Godot.WebRTCPeerConnection.SetLocalDescription(System.String,System.String)"/> on this object, and sent to the remote peer over the signaling server.</para>
            </summary>
        </member>
        <member name="T:Godot.WebRTCPeerConnection.DataChannelReceivedHandler">
            <summary>
            <para>Emitted when a new in-band channel is received, i.e. when the channel was created with <c>negotiated: false</c> (default).</para>
            <para>The object will be an instance of <see cref="T:Godot.WebRTCDataChannel"/>. You must keep a reference of it or it will be closed automatically. See <see cref="M:Godot.WebRTCPeerConnection.CreateDataChannel(System.String,Godot.Collections.Dictionary)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient">
            <summary>
            <para>This class implements a WebSocket client compatible with any RFC 6455-compliant WebSocket server.</para>
            <para>This client can be optionally used as a network peer for the <see cref="T:Godot.MultiplayerAPI"/>.</para>
            <para>After starting the client (<see cref="M:Godot.WebSocketClient.ConnectToUrl(System.String,System.String[],System.Boolean,System.String[])"/>), you will need to <see cref="M:Godot.NetworkedMultiplayerPeer.Poll"/> it at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>).</para>
            <para>You will receive appropriate signals when connecting, disconnecting, or when new data is available.</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketClient.VerifySsl">
            <summary>
            <para>If <c>true</c>, SSL certificate verification is enabled.</para>
            <para>Note: You must specify the certificates to be used in the Project Settings for it to work when exported.</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketClient.TrustedSslCertificate">
            <summary>
            <para>If specified, this <see cref="T:Godot.X509Certificate"/> will be the only one accepted when connecting to an SSL host. Any other certificate provided by the server will be regarded as invalid.</para>
            <para>Note: Specifying a custom <c>trusted_ssl_certificate</c> is not supported in HTML5 exports due to browsers restrictions.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketClient.ConnectToUrl(System.String,System.String[],System.Boolean,System.String[])">
            <summary>
            <para>Connects to the given URL requesting one of the given <c>protocols</c> as sub-protocol. If the list empty (default), no sub-protocol will be requested.</para>
            <para>If <c>true</c> is passed as <c>gd_mp_api</c>, the client will behave like a network peer for the <see cref="T:Godot.MultiplayerAPI"/>, connections to non-Godot servers will not work, and <c>data_received</c> will not be emitted.</para>
            <para>If <c>false</c> is passed instead (default), you must call <see cref="T:Godot.PacketPeer"/> functions (<c>put_packet</c>, <c>get_packet</c>, etc.) on the <see cref="T:Godot.WebSocketPeer"/> returned via <c>get_peer(1)</c> and not on this object directly (e.g. <c>get_peer(1).put_packet(data)</c>).</para>
            <para>You can optionally pass a list of <c>custom_headers</c> to be added to the handshake HTTP request.</para>
            <para>Note: Specifying <c>custom_headers</c> is not supported in HTML5 exports due to browsers restrictions.</para>
            </summary>
            <param name="protocols">If the parameter is null, then the default value is new string[] {}</param>
            <param name="customHeaders">If the parameter is null, then the default value is new string[] {}</param>
        </member>
        <member name="M:Godot.WebSocketClient.DisconnectFromHost(System.Int32,System.String)">
            <summary>
            <para>Disconnects this client from the connected host. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketClient.GetConnectedHost">
            <summary>
            <para>Return the IP address of the currently connected host.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketClient.GetConnectedPort">
            <summary>
            <para>Return the IP port of the currently connected host.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient.ServerCloseRequestHandler">
            <summary>
            <para>Emitted when the server requests a clean close. You should keep polling until you get a <c>connection_closed</c> signal to achieve the clean close. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more details.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient.ConnectionEstablishedHandler">
            <summary>
            <para>Emitted when a connection with the server is established, <c>protocol</c> will contain the sub-protocol agreed with the server.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient.DataReceivedHandler">
            <summary>
            <para>Emitted when a WebSocket message is received.</para>
            <para>Note: This signal is not emitted when used as high-level multiplayer peer.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient.ConnectionErrorHandler">
            <summary>
            <para>Emitted when the connection to the server fails.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketClient.ConnectionClosedHandler">
            <summary>
            <para>Emitted when the connection to the server is closed. <c>was_clean_close</c> will be <c>true</c> if the connection was shutdown cleanly.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketMultiplayerPeer">
            <summary>
            <para>Base class for WebSocket server and client, allowing them to be used as network peer for the <see cref="T:Godot.MultiplayerAPI"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketMultiplayerPeer.SetBuffers(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Configures the buffer sizes for this WebSocket peer. Default values can be specified in the Project Settings under <c>network/limits</c>. For server, values are meant per connected peer.</para>
            <para>The first two parameters define the size and queued packets limits of the input buffer, the last two of the output buffer.</para>
            <para>Buffer sizes are expressed in KiB, so <c>4 = 2^12 = 4096 bytes</c>. All parameters will be rounded up to the nearest power of two.</para>
            <para>Note: HTML5 exports only use the input buffer since the output one is managed by browsers.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketMultiplayerPeer.GetPeer(System.Int32)">
            <summary>
            <para>Returns the <see cref="T:Godot.WebSocketPeer"/> associated to the given <c>peer_id</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketMultiplayerPeer.PeerPacketHandler">
            <summary>
            <para>Emitted when a packet is received from a peer.</para>
            <para>Note: This signal is only emitted when the client or server is configured to use Godot multiplayer API.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketPeer">
            <summary>
            <para>This class represent a specific WebSocket connection, you can do lower level operations with it.</para>
            <para>You can choose to write to the socket in binary or text mode, and you can recognize the mode used for writing by the other peer.</para>
            </summary>
        </member>
        <member name="F:Godot.WebSocketPeer.WriteMode.Text">
            <summary>
            <para>Specifies that WebSockets messages should be transferred as text payload (only valid UTF-8 is allowed).</para>
            </summary>
        </member>
        <member name="F:Godot.WebSocketPeer.WriteMode.Binary">
            <summary>
            <para>Specifies that WebSockets messages should be transferred as binary payload (any byte combination is allowed).</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetWriteMode">
            <summary>
            <para>Gets the current selected write mode. See <see cref="T:Godot.WebSocketPeer.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.SetWriteMode(Godot.WebSocketPeer.WriteMode)">
            <summary>
            <para>Sets the socket to use the given <see cref="T:Godot.WebSocketPeer.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.IsConnectedToHost">
            <summary>
            <para>Returns <c>true</c> if this peer is currently connected.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.WasStringPacket">
            <summary>
            <para>Returns <c>true</c> if the last received packet was sent as a text payload. See <see cref="T:Godot.WebSocketPeer.WriteMode"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.Close(System.Int32,System.String)">
            <summary>
            <para>Closes this WebSocket connection. <c>code</c> is the status code for the closure (see RFC 6455 section 7.4 for a list of valid status codes). <c>reason</c> is the human readable reason for closing the connection (can be any UTF-8 string that's smaller than 123 bytes).</para>
            <para>Note: To achieve a clean close, you will need to keep polling until either <c>WebSocketClient.connection_closed</c> or <c>WebSocketServer.client_disconnected</c> is received.</para>
            <para>Note: The HTML5 export might not support all status codes. Please refer to browser-specific documentation for more details.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetConnectedHost">
            <summary>
            <para>Returns the IP address of the connected peer.</para>
            <para>Note: Not available in the HTML5 export.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.GetConnectedPort">
            <summary>
            <para>Returns the remote port of the connected peer.</para>
            <para>Note: Not available in the HTML5 export.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketPeer.SetNoDelay(System.Boolean)">
            <summary>
            <para>Disable Nagle's algorithm on the underling TCP socket (default). See <see cref="M:Godot.StreamPeerTCP.SetNoDelay(System.Boolean)"/> for more information.</para>
            <para>Note: Not available in the HTML5 export.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer">
            <summary>
            <para>This class implements a WebSocket server that can also support the high-level multiplayer API.</para>
            <para>After starting the server (<see cref="M:Godot.WebSocketServer.Listen(System.Int32,System.String[],System.Boolean)"/>), you will need to <see cref="M:Godot.NetworkedMultiplayerPeer.Poll"/> it at regular intervals (e.g. inside <see cref="M:Godot.Node._Process(System.Single)"/>). When clients connect, disconnect, or send data, you will receive the appropriate signal.</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketServer.BindIp">
            <summary>
            <para>When not set to <c>*</c> will restrict incoming connections to the specified IP address. Setting <c>bind_ip</c> to <c>127.0.0.1</c> will cause the server to listen only to the local host.</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketServer.PrivateKey">
            <summary>
            <para>When set to a valid <see cref="T:Godot.CryptoKey"/> (along with <see cref="P:Godot.WebSocketServer.SslCertificate"/>) will cause the server to require SSL instead of regular TCP (i.e. the <c>wss://</c> protocol).</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketServer.SslCertificate">
            <summary>
            <para>When set to a valid <see cref="T:Godot.X509Certificate"/> (along with <see cref="P:Godot.WebSocketServer.PrivateKey"/>) will cause the server to require SSL instead of regular TCP (i.e. the <c>wss://</c> protocol).</para>
            </summary>
        </member>
        <member name="P:Godot.WebSocketServer.CaChain">
            <summary>
            <para>When using SSL (see <see cref="P:Godot.WebSocketServer.PrivateKey"/> and <see cref="P:Godot.WebSocketServer.SslCertificate"/>), you can set this to a valid <see cref="T:Godot.X509Certificate"/> to be provided as additional CA chain information during the SSL handshake.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.IsListening">
            <summary>
            <para>Returns <c>true</c> if the server is actively listening on a port.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.Listen(System.Int32,System.String[],System.Boolean)">
            <summary>
            <para>Starts listening on the given port.</para>
            <para>You can specify the desired subprotocols via the "protocols" array. If the list empty (default), no sub-protocol will be requested.</para>
            <para>If <c>true</c> is passed as <c>gd_mp_api</c>, the server will behave like a network peer for the <see cref="T:Godot.MultiplayerAPI"/>, connections from non-Godot clients will not work, and <c>data_received</c> will not be emitted.</para>
            <para>If <c>false</c> is passed instead (default), you must call <see cref="T:Godot.PacketPeer"/> functions (<c>put_packet</c>, <c>get_packet</c>, etc.), on the <see cref="T:Godot.WebSocketPeer"/> returned via <c>get_peer(id)</c> to communicate with the peer with given <c>id</c> (e.g. <c>get_peer(id).get_available_packet_count</c>).</para>
            </summary>
            <param name="protocols">If the parameter is null, then the default value is new string[] {}</param>
        </member>
        <member name="M:Godot.WebSocketServer.Stop">
            <summary>
            <para>Stops the server and clear its state.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.HasPeer(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if a peer with the given ID is connected.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.GetPeerAddress(System.Int32)">
            <summary>
            <para>Returns the IP address of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.GetPeerPort(System.Int32)">
            <summary>
            <para>Returns the remote port of the given peer.</para>
            </summary>
        </member>
        <member name="M:Godot.WebSocketServer.DisconnectPeer(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Disconnects the peer identified by <c>id</c> from the server. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more information.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer.ClientCloseRequestHandler">
            <summary>
            <para>Emitted when a client requests a clean close. You should keep polling until you get a <c>client_disconnected</c> signal with the same <c>id</c> to achieve the clean close. See <see cref="M:Godot.WebSocketPeer.Close(System.Int32,System.String)"/> for more details.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer.DataReceivedHandler">
            <summary>
            <para>Emitted when a new message is received.</para>
            <para>Note: This signal is not emitted when used as high-level multiplayer peer.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer.ClientConnectedHandler">
            <summary>
            <para>Emitted when a new client connects. "protocol" will be the sub-protocol agreed with the client.</para>
            </summary>
        </member>
        <member name="T:Godot.WebSocketServer.ClientDisconnectedHandler">
            <summary>
            <para>Emitted when a client disconnects. <c>was_clean_close</c> will be <c>true</c> if the connection was shutdown cleanly.</para>
            </summary>
        </member>
        <member name="F:Godot.Window.ModeEnum.Fullscreen">
            <summary>
            <para>Fullscreen window mode. Note that this is not exclusive fullscreen. On Windows and Linux, a borderless window is used to emulate fullscreen. On macOS, a new desktop is used to display the running project.</para>
            <para>Regardless of the platform, enabling fullscreen will change the window size to match the monitor's size. Therefore, make sure your project supports <a href="https://docs.godotengine.org/en/latest/tutorials/rendering/multiple_resolutions.html">multiple resolutions</a> when enabling fullscreen mode.</para>
            </summary>
        </member>
        <member name="F:Godot.Window.LayoutDirection.Inherited">
            <summary>
            <para>Automatic layout direction, determined from the parent control layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Window.LayoutDirection.Locale">
            <summary>
            <para>Automatic layout direction, determined from the current locale.</para>
            </summary>
        </member>
        <member name="F:Godot.Window.LayoutDirection.Ltr">
            <summary>
            <para>Left-to-right layout direction.</para>
            </summary>
        </member>
        <member name="F:Godot.Window.LayoutDirection.Rtl">
            <summary>
            <para>Right-to-left layout direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Window.GetThemeIcon(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.GetThemeStylebox(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.GetThemeFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the <see cref="T:Godot.Font"/> at <c>name</c> if the theme has <c>type</c>.</para>
            </summary>
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.GetThemeFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the font size at <c>name</c> if the theme has <c>type</c>.</para>
            </summary>
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.GetThemeColor(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.GetThemeConstant(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeIcon(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeStylebox(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeFont(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <see cref="T:Godot.Font"/> with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>type</c>.</para>
            </summary>
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeFontSize(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if font size with <c>name</c> is in <c>type</c>.</para>
            <para>Returns <c>false</c> if the theme does not have <c>type</c>.</para>
            </summary>
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeColor(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.HasThemeConstant(Godot.StringName,Godot.StringName)">
            <param name="type">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="M:Godot.Window.SetLayoutDirection(Godot.Window.LayoutDirection)">
            <summary>
            <para>Sets layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew).</para>
            </summary>
        </member>
        <member name="M:Godot.Window.GetLayoutDirection">
            <summary>
            <para>Returns layout direction and text writing direction.</para>
            </summary>
        </member>
        <member name="M:Godot.Window.IsLayoutRtl">
            <summary>
            <para>Returns <c>true</c> if layout is right-to-left.</para>
            </summary>
        </member>
        <member name="M:Godot.Window.Popup(System.Nullable{Godot.Rect2i})">
            <param name="rect">If the parameter is null, then the default value is new Rect2i(0, 0, 0, 0)</param>
        </member>
        <member name="M:Godot.Window.PopupCentered(System.Nullable{Godot.Vector2i})">
            <param name="minsize">If the parameter is null, then the default value is new Vector2i(0, 0)</param>
        </member>
        <member name="M:Godot.Window.PopupCenteredClamped(System.Nullable{Godot.Vector2i},System.Single)">
            <param name="minsize">If the parameter is null, then the default value is new Vector2i(0, 0)</param>
        </member>
        <member name="T:Godot.World2D">
            <summary>
            <para>Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.Canvas">
            <summary>
            <para>The <see cref="T:Godot.RID"/> of this world's canvas resource. Used by the <see cref="T:Godot.RenderingServer"/> for 2D drawing.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.Space">
            <summary>
            <para>The <see cref="T:Godot.RID"/> of this world's physics space resource. Used by the <see cref="T:Godot.PhysicsServer2D"/> for 2D physics, treating it as both a space and an area.</para>
            </summary>
        </member>
        <member name="P:Godot.World2D.DirectSpaceState">
            <summary>
            <para>Direct access to the world's physics 2D space state. Used for querying current and potential collisions. When using multi-threaded physics, access is limited to <c>_physics_process(delta)</c> in the main thread.</para>
            </summary>
        </member>
        <member name="T:Godot.World3D">
            <summary>
            <para>Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Node3D nodes register their resources into the current world.</para>
            </summary>
        </member>
        <member name="P:Godot.World3D.Environment">
            <summary>
            <para>The World3D's <see cref="T:Godot.Environment"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.World3D.FallbackEnvironment">
            <summary>
            <para>The World3D's fallback_environment will be used if the World3D's <see cref="T:Godot.Environment"/> fails or is missing.</para>
            </summary>
        </member>
        <member name="P:Godot.World3D.Space">
            <summary>
            <para>The World3D's physics space.</para>
            </summary>
        </member>
        <member name="P:Godot.World3D.Scenario">
            <summary>
            <para>The World3D's visual scenario.</para>
            </summary>
        </member>
        <member name="P:Godot.World3D.DirectSpaceState">
            <summary>
            <para>Direct access to the world's physics 3D space state. Used for querying current and potential collisions.</para>
            </summary>
        </member>
        <member name="T:Godot.WorldEnvironment">
            <summary>
            <para>The <see cref="T:Godot.WorldEnvironment"/> node is used to configure the default <see cref="T:Godot.Environment"/> for the scene.</para>
            <para>The parameters defined in the <see cref="T:Godot.WorldEnvironment"/> can be overridden by an <see cref="T:Godot.Environment"/> node set on the current <see cref="T:Godot.Camera3D"/>. Additionally, only one <see cref="T:Godot.WorldEnvironment"/> may be instanced in a given scene at a time.</para>
            <para>The <see cref="T:Godot.WorldEnvironment"/> allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.</para>
            </summary>
        </member>
        <member name="P:Godot.WorldEnvironment.Environment">
            <summary>
            <para>The <see cref="T:Godot.Environment"/> resource used by this <see cref="T:Godot.WorldEnvironment"/>, defining the default properties.</para>
            </summary>
        </member>
        <member name="T:Godot.WorldMarginShape3D">
            <summary>
            <para>An infinite plane shape for 3D collisions. Note that the <see cref="T:Godot.Plane"/>'s normal matters; anything "below" the plane will collide with it. If the <see cref="T:Godot.WorldMarginShape3D"/> is used in a <see cref="T:Godot.PhysicsBody3D"/>, it will cause colliding objects placed "below" it to teleport "above" the plane.</para>
            </summary>
        </member>
        <member name="P:Godot.WorldMarginShape3D.Plane">
            <summary>
            <para>The <see cref="T:Godot.Plane"/> used by the <see cref="T:Godot.WorldMarginShape3D"/> for collision.</para>
            </summary>
        </member>
        <member name="T:Godot.X509Certificate">
            <summary>
            <para>The X509Certificate class represents an X509 certificate. Certificates can be loaded and saved like any other <see cref="T:Godot.Resource"/>.</para>
            <para>They can be used as the server certificate in <see cref="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer,Godot.CryptoKey,Godot.X509Certificate,Godot.X509Certificate)"/> (along with the proper <see cref="T:Godot.CryptoKey"/>), and to specify the only certificate that should be accepted when connecting to an SSL server via <see cref="M:Godot.StreamPeerSSL.ConnectToStream(Godot.StreamPeer,System.Boolean,System.String,Godot.X509Certificate)"/>.</para>
            <para>Note: Not available in HTML5 exports.</para>
            </summary>
        </member>
        <member name="M:Godot.X509Certificate.Save(System.String)">
            <summary>
            <para>Saves a certificate to the given <c>path</c> (should be a "*.crt" file).</para>
            </summary>
        </member>
        <member name="M:Godot.X509Certificate.Load(System.String)">
            <summary>
            <para>Loads a certificate from <c>path</c> ("*.crt" file).</para>
            </summary>
        </member>
        <member name="T:Godot.XMLParser">
            <summary>
            <para>This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low-level so it can be applied to any possible schema.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.None">
            <summary>
            <para>There's no node (no file or buffer opened).</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Element">
            <summary>
            <para>Element (tag).</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.ElementEnd">
            <summary>
            <para>End of element.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Text">
            <summary>
            <para>Text node.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Comment">
            <summary>
            <para>Comment node.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Cdata">
            <summary>
            <para>CDATA content.</para>
            </summary>
        </member>
        <member name="F:Godot.XMLParser.NodeType.Unknown">
            <summary>
            <para>Unknown node.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Read">
            <summary>
            <para>Reads the next node of the file. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeType">
            <summary>
            <para>Gets the type of the current node. Compare with <see cref="T:Godot.XMLParser.NodeType"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeName">
            <summary>
            <para>Gets the name of the current element node. This will raise an error if the current node type is neither  nor .</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeData">
            <summary>
            <para>Gets the contents of a text node. This will raise an error in any other type of node.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeOffset">
            <summary>
            <para>Gets the byte offset of the current node since the beginning of the file or buffer.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeCount">
            <summary>
            <para>Gets the amount of attributes in the current element.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeName(System.Int32)">
            <summary>
            <para>Gets the name of the attribute specified by the index in <c>idx</c> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeValue(System.Int32)">
            <summary>
            <para>Gets the value of the attribute specified by the index in <c>idx</c> argument.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.HasAttribute(System.String)">
            <summary>
            <para>Check whether the current element has a certain attribute.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValue(System.String)">
            <summary>
            <para>Gets the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValueSafe(System.String)">
            <summary>
            <para>Gets the value of a certain attribute of the current element by name. This will return an empty <see cref="T:System.String"/> if the attribute is not found.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.IsEmpty">
            <summary>
            <para>Check whether the current element is empty (this only works for completely empty tags, e.g. <c>&lt;element \&gt;</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetCurrentLine">
            <summary>
            <para>Gets the current line in the parsed file (currently not implemented).</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.SkipSection">
            <summary>
            <para>Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Seek(System.UInt64)">
            <summary>
            <para>Moves the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Open(System.String)">
            <summary>
            <para>Opens an XML file for parsing. This returns an error code.</para>
            </summary>
        </member>
        <member name="M:Godot.XMLParser.OpenBuffer(System.Byte[])">
            <summary>
            <para>Opens an XML raw buffer for parsing. This returns an error code.</para>
            </summary>
        </member>
        <member name="T:Godot.XRAnchor3D">
            <summary>
            <para>The <see cref="T:Godot.XRAnchor3D"/> point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.</para>
            <para>This node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on 0,0,0 until a plane is recognized.</para>
            <para>Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view.</para>
            </summary>
        </member>
        <member name="P:Godot.XRAnchor3D.AnchorId">
            <summary>
            <para>The anchor's ID. You can set this before the anchor itself exists. The first anchor gets an ID of <c>1</c>, the second an ID of <c>2</c>, etc. When anchors get removed, the engine can then assign the corresponding ID to new anchors. The most common situation where anchors "disappear" is when the AR server identifies that two anchors represent different parts of the same plane and merges them.</para>
            </summary>
        </member>
        <member name="M:Godot.XRAnchor3D.GetAnchorName">
            <summary>
            <para>Returns the name given to this anchor.</para>
            </summary>
        </member>
        <member name="M:Godot.XRAnchor3D.GetIsActive">
            <summary>
            <para>Returns <c>true</c> if the anchor is being tracked and <c>false</c> if no anchor with this ID is currently known.</para>
            </summary>
        </member>
        <member name="M:Godot.XRAnchor3D.GetSize">
            <summary>
            <para>Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.</para>
            </summary>
        </member>
        <member name="M:Godot.XRAnchor3D.GetPlane">
            <summary>
            <para>Returns a plane aligned with our anchor; handy for intersection testing.</para>
            </summary>
        </member>
        <member name="M:Godot.XRAnchor3D.GetMesh">
            <summary>
            <para>If provided by the <see cref="T:Godot.XRInterface"/>, this returns a mesh object for the anchor. For an anchor, this can be a shape related to the object being tracked or it can be a mesh that provides topology related to the anchor and can be used to create shadows/reflections on surfaces or for generating collision shapes.</para>
            </summary>
        </member>
        <member name="T:Godot.XRAnchor3D.MeshUpdatedHandler">
            <summary>
            <para>Emitted when the mesh associated with the anchor changes or when one becomes available. This is especially important for topology that is constantly being <c>mesh_updated</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.XRCamera3D">
            <summary>
            <para>This is a helper spatial node for our camera; note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes.</para>
            <para>The position and orientation of this node is automatically updated by the XR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the XR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the XRCamera3D can lag a few milliseconds behind what is used for rendering as a result.</para>
            </summary>
        </member>
        <member name="T:Godot.XRController3D">
            <summary>
            <para>This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.</para>
            <para>Controllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add XRController3D nodes to your scene.</para>
            <para>The position of the controller node is automatically updated by the <see cref="T:Godot.XRServer"/>. This makes this node ideal to add child nodes to visualize the controller.</para>
            </summary>
        </member>
        <member name="P:Godot.XRController3D.ControllerId">
            <summary>
            <para>The controller's ID.</para>
            <para>A controller ID of 0 is unbound and will always result in an inactive node. Controller ID 1 is reserved for the first controller that identifies itself as the left-hand controller and ID 2 is reserved for the first controller that identifies itself as the right-hand controller.</para>
            <para>For any other controller that the <see cref="T:Godot.XRServer"/> detects, we continue with controller ID 3.</para>
            <para>When a controller is turned off, its slot is freed. This ensures controllers will keep the same ID even when controllers with lower IDs are turned off.</para>
            </summary>
        </member>
        <member name="P:Godot.XRController3D.Rumble">
            <summary>
            <para>The degree to which the controller vibrates. Ranges from <c>0.0</c> to <c>1.0</c> with precision <c>.01</c>. If changed, updates <see cref="P:Godot.XRPositionalTracker.Rumble"/> accordingly.</para>
            <para>This is a useful property to animate if you want the controller to vibrate for a limited duration.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetControllerName">
            <summary>
            <para>If active, returns the name of the associated controller if provided by the AR/VR SDK used.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetJoystickId">
            <summary>
            <para>Returns the ID of the joystick object bound to this. Every controller tracked by the <see cref="T:Godot.XRServer"/> that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.IsButtonPressed(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the button at index <c>button</c> is pressed. See <see cref="T:Godot.JoyButtonList"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetJoystickAxis(System.Int32)">
            <summary>
            <para>Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetIsActive">
            <summary>
            <para>Returns <c>true</c> if the bound controller is active. XR systems attempt to track active controllers.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetTrackerHand">
            <summary>
            <para>Returns the hand holding this controller, if known. See <see cref="T:Godot.XRPositionalTracker.TrackerHand"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRController3D.GetMesh">
            <summary>
            <para>If provided by the <see cref="T:Godot.XRInterface"/>, this returns a mesh associated with the controller. This can be used to visualize the controller.</para>
            </summary>
        </member>
        <member name="T:Godot.XRController3D.MeshUpdatedHandler">
            <summary>
            <para>Emitted when the mesh associated with the controller changes or when one becomes available. Generally speaking this will be a static mesh after becoming available.</para>
            </summary>
        </member>
        <member name="T:Godot.XRController3D.ButtonReleasedHandler">
            <summary>
            <para>Emitted when a button on this controller is released.</para>
            </summary>
        </member>
        <member name="T:Godot.XRController3D.ButtonPressedHandler">
            <summary>
            <para>Emitted when a button on this controller is pressed.</para>
            </summary>
        </member>
        <member name="T:Godot.XRInterface">
            <summary>
            <para>This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass XRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.</para>
            <para>Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through <see cref="T:Godot.XRServer"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Tracking_status.NormalTracking">
            <summary>
            <para>Tracking is behaving as expected.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Tracking_status.ExcessiveMotion">
            <summary>
            <para>Tracking is hindered by excessive motion (the player is moving faster than tracking can keep up).</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Tracking_status.InsufficientFeatures">
            <summary>
            <para>Tracking is hindered by insufficient features, it's too dark (for camera-based tracking), player is blocked, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Tracking_status.UnknownTracking">
            <summary>
            <para>We don't know the status of the tracking or this interface does not provide feedback.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Tracking_status.NotTracking">
            <summary>
            <para>Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.).</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Eyes.Mono">
            <summary>
            <para>Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Eyes.Left">
            <summary>
            <para>Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Eyes.Right">
            <summary>
            <para>Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Capabilities.None">
            <summary>
            <para>No XR capabilities.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Capabilities.Mono">
            <summary>
            <para>This interface can work with normal rendering output (non-HMD based AR).</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Capabilities.Stereo">
            <summary>
            <para>This interface supports stereoscopic rendering.</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Capabilities.Ar">
            <summary>
            <para>This interface supports AR (video background and real world tracking).</para>
            </summary>
        </member>
        <member name="F:Godot.XRInterface.Capabilities.External">
            <summary>
            <para>This interface outputs to an external device. If the main viewport is used, the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of <see cref="M:Godot.XRInterface.GetRenderTargetsize"/>). Using a separate viewport node frees up the main viewport for other purposes.</para>
            </summary>
        </member>
        <member name="P:Godot.XRInterface.InterfaceIsPrimary">
            <summary>
            <para><c>true</c> if this is the primary interface.</para>
            </summary>
        </member>
        <member name="P:Godot.XRInterface.InterfaceIsInitialized">
            <summary>
            <para><c>true</c> if this interface been initialized.</para>
            </summary>
        </member>
        <member name="P:Godot.XRInterface.ArIsAnchorDetectionEnabled">
            <summary>
            <para>On an AR interface, <c>true</c> if anchor detection is enabled.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.GetName">
            <summary>
            <para>Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.GetCapabilities">
            <summary>
            <para>Returns a combination of <see cref="T:Godot.XRInterface.Capabilities"/> flags providing information about the capabilities of this interface.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.Initialize">
            <summary>
            <para>Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.</para>
            <para>After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.</para>
            <para>Note: You must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot, such as for mobile VR.</para>
            <para>If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively, you can add a separate viewport node to your scene and enable AR/VR on that viewport. It will be used to output to the HMD, leaving you free to do anything you like in the main window, such as using a separate camera as a spectator camera or rendering something completely different.</para>
            <para>While currently not used, you can activate additional interfaces. You may wish to do this if you want to track controllers from other platforms. However, at this point in time only one interface can render to an HMD.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.Uninitialize">
            <summary>
            <para>Turns the interface off.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.GetTrackingStatus">
            <summary>
            <para>If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.GetRenderTargetsize">
            <summary>
            <para>Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.IsStereo">
            <summary>
            <para>Returns <c>true</c> if the current output of this interface is in stereo.</para>
            </summary>
        </member>
        <member name="M:Godot.XRInterface.GetCameraFeedId">
            <summary>
            <para>If this is an AR interface that requires displaying a camera feed as the background, this method returns the feed ID in the <see cref="T:Godot.CameraServer"/> for this interface.</para>
            </summary>
        </member>
        <member name="T:Godot.XRInterfaceGDNative">
            <summary>
            <para>This is a wrapper class for GDNative implementations of the XR interface. To use a GDNative XR interface, simply instantiate this object and set your GDNative library containing the XR interface implementation.</para>
            </summary>
        </member>
        <member name="T:Godot.XROrigin3D">
            <summary>
            <para>This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.</para>
            <para>There should be only one of these nodes in your scene and you must have one. All the XRCamera3D, XRController3D and XRAnchor3D nodes should be direct children of this node for spatial tracking to work correctly.</para>
            <para>It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.</para>
            <para>For example, if your character is driving a car, the XROrigin3D node should be a child node of this car. Or, if you're implementing a teleport system to move your character, you should change the position of this node.</para>
            </summary>
        </member>
        <member name="P:Godot.XROrigin3D.WorldScale">
            <summary>
            <para>Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter.</para>
            <para>Note: This method is a passthrough to the <see cref="T:Godot.XRServer"/> itself.</para>
            </summary>
        </member>
        <member name="T:Godot.XRPositionalTracker">
            <summary>
            <para>An instance of this object represents a device that is tracked, such as a controller or anchor point. HMDs aren't represented here as they are handled internally.</para>
            <para>As controllers are turned on and the AR/VR interface detects them, instances of this object are automatically added to this list of active tracking objects accessible through the <see cref="T:Godot.XRServer"/>.</para>
            <para>The <see cref="T:Godot.XRController3D"/> and <see cref="T:Godot.XRAnchor3D"/> both consume objects of this type and should be used in your project. The positional trackers are just under-the-hood objects that make this all work. These are mostly exposed so that GDNative-based interfaces can interact with them.</para>
            </summary>
        </member>
        <member name="F:Godot.XRPositionalTracker.TrackerHand.Unknown">
            <summary>
            <para>The hand this tracker is held in is unknown or not applicable.</para>
            </summary>
        </member>
        <member name="F:Godot.XRPositionalTracker.TrackerHand.Left">
            <summary>
            <para>This tracker is the left hand controller.</para>
            </summary>
        </member>
        <member name="F:Godot.XRPositionalTracker.TrackerHand.Right">
            <summary>
            <para>This tracker is the right hand controller.</para>
            </summary>
        </member>
        <member name="P:Godot.XRPositionalTracker.Rumble">
            <summary>
            <para>The degree to which the tracker rumbles. Ranges from <c>0.0</c> to <c>1.0</c> with precision <c>.01</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetTrackerType">
            <summary>
            <para>Returns the tracker's type, which will be one of the values from the <see cref="T:Godot.XRServer.TrackerType"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetTrackerId">
            <summary>
            <para>Returns the internal tracker ID. This uniquely identifies the tracker per tracker type and matches the ID you need to specify for nodes such as the <see cref="T:Godot.XRController3D"/> and <see cref="T:Godot.XRAnchor3D"/> nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetTrackerName">
            <summary>
            <para>Returns the controller or anchor point's name, if applicable.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetJoyId">
            <summary>
            <para>If this is a controller that is being tracked, the controller will also be represented by a joystick entry with this ID.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.IsTrackingOrientation">
            <summary>
            <para>Returns <c>true</c> if this device is tracking orientation.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetOrientation">
            <summary>
            <para>Returns the controller's orientation matrix.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.IsTrackingPosition">
            <summary>
            <para>Returns <c>true</c> if this device is tracking position.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetPosition">
            <summary>
            <para>Returns the world-space controller position.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetTrackerHand">
            <summary>
            <para>Returns the hand holding this tracker, if known. See <see cref="T:Godot.XRPositionalTracker.TrackerHand"/> constants.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetTransform(System.Boolean)">
            <summary>
            <para>Returns the transform combining this device's orientation and position.</para>
            </summary>
        </member>
        <member name="M:Godot.XRPositionalTracker.GetMesh">
            <summary>
            <para>Returns the mesh related to a controller or anchor point if one is available.</para>
            </summary>
        </member>
        <member name="T:Godot.XRServer">
            <summary>
            <para>The AR/VR server is the heart of our Advanced and Virtual Reality solution and handles all the processing.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.RotationMode.ResetFullRotation">
            <summary>
            <para>Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.RotationMode.ResetButKeepTilt">
            <summary>
            <para>Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.RotationMode.DontResetRotation">
            <summary>
            <para>Does not reset the orientation of the HMD, only the position of the player gets centered.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.Controller">
            <summary>
            <para>The tracker tracks the location of a controller.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.Basestation">
            <summary>
            <para>The tracker tracks the location of a base station.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.Anchor">
            <summary>
            <para>The tracker tracks the location and size of an AR anchor.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.AnyKnown">
            <summary>
            <para>Used internally to filter trackers of any known type.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.Unknown">
            <summary>
            <para>Used internally if we haven't set the tracker type yet.</para>
            </summary>
        </member>
        <member name="F:Godot.XRServer.TrackerType.Any">
            <summary>
            <para>Used internally to select all trackers.</para>
            </summary>
        </member>
        <member name="P:Godot.XRServer.WorldScale">
            <summary>
            <para>Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter.</para>
            </summary>
        </member>
        <member name="P:Godot.XRServer.PrimaryInterface">
            <summary>
            <para>The primary <see cref="T:Godot.XRInterface"/> currently bound to the <see cref="T:Godot.XRServer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetReferenceFrame">
            <summary>
            <para>Returns the reference frame transform. Mostly used internally and exposed for GDNative build interfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.CenterOnHmd(Godot.XRServer.RotationMode,System.Boolean)">
            <summary>
            <para>This is an important function to understand correctly. AR and VR platforms all handle positioning slightly differently.</para>
            <para>For platforms that do not offer spatial tracking, our origin point (0,0,0) is the location of our HMD, but you have little control over the direction the player is facing in the real world.</para>
            <para>For platforms that do offer spatial tracking, our origin point depends very much on the system. For OpenVR, our origin point is usually the center of the tracking space, on the ground. For other platforms, it's often the location of the tracking camera.</para>
            <para>This method allows you to center your tracker on the location of the HMD. It will take the current location of the HMD and use that to adjust all your tracking data; in essence, realigning the real world to your player's current position in the game world.</para>
            <para>For this method to produce usable results, tracking information must be available. This often takes a few frames after starting your game.</para>
            <para>You should call this method after a few seconds have passed. For instance, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, or when implementing a teleport mechanism.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetHmdTransform">
            <summary>
            <para>Returns the primary interface's transformation.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetInterfaceCount">
            <summary>
            <para>Returns the number of interfaces currently registered with the AR/VR server. If your project supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try to initialize each interface and use the first one that returns <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetInterface(System.Int32)">
            <summary>
            <para>Returns the interface registered at a given index in our list of interfaces.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetInterfaces">
            <summary>
            <para>Returns a list of available interfaces the ID and name of each interface.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.FindInterface(System.String)">
            <summary>
            <para>Finds an interface by its name. For instance, if your project uses capabilities of an AR/VR platform, you can find the interface for that platform by name and initialize it.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetTrackerCount">
            <summary>
            <para>Returns the number of trackers currently registered.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetTracker(System.Int32)">
            <summary>
            <para>Returns the positional tracker at the given ID.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetLastProcessUsec">
            <summary>
            <para>Returns the absolute timestamp (in μs) of the last <see cref="T:Godot.XRServer"/> process callback. The value comes from an internal call to <see cref="M:Godot.OS.GetTicksUsec"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetLastCommitUsec">
            <summary>
            <para>Returns the absolute timestamp (in μs) of the last <see cref="T:Godot.XRServer"/> commit of the AR/VR eyes to <see cref="T:Godot.RenderingServer"/>. The value comes from an internal call to <see cref="M:Godot.OS.GetTicksUsec"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.XRServer.GetLastFrameUsec">
            <summary>
            <para>Returns the duration (in μs) of the last frame. This is computed as the difference between <see cref="M:Godot.XRServer.GetLastCommitUsec"/> and <see cref="M:Godot.XRServer.GetLastProcessUsec"/> when committing.</para>
            </summary>
        </member>
        <member name="T:Godot.XRServer.TrackerRemovedHandler">
            <summary>
            <para>Emitted when a tracker is removed. You should remove any <see cref="T:Godot.XRController3D"/> or <see cref="T:Godot.XRAnchor3D"/> points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one).</para>
            </summary>
        </member>
        <member name="T:Godot.XRServer.TrackerAddedHandler">
            <summary>
            <para>Emitted when a new tracker has been added. If you don't use a fixed number of controllers or if you're using <see cref="T:Godot.XRAnchor3D"/>s for an AR solution, it is important to react to this signal to add the appropriate <see cref="T:Godot.XRController3D"/> or <see cref="T:Godot.XRAnchor3D"/> nodes related to this new tracker.</para>
            </summary>
        </member>
        <member name="T:Godot.XRServer.InterfaceRemovedHandler">
            <summary>
            <para>Emitted when an interface is removed.</para>
            </summary>
        </member>
        <member name="T:Godot.XRServer.InterfaceAddedHandler">
            <summary>
            <para>Emitted when a new interface has been added.</para>
            </summary>
        </member>
        <member name="T:Godot.YSort">
            <summary>
            <para>Sort all child nodes based on their Y positions. The child node must inherit from <see cref="T:Godot.CanvasItem"/> for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.</para>
            <para>Nesting of YSort nodes is possible. Children YSort nodes will be sorted in the same space as the parent YSort, allowing to better organize a scene or divide it in multiple ones, yet keep the unique sorting.</para>
            </summary>
        </member>
        <member name="P:Godot.YSort.SortEnabled">
            <summary>
            <para>If <c>true</c>, child nodes are sorted, otherwise sorting is disabled.</para>
            </summary>
        </member>
        <member name="T:Godot.ClassDB">
            <summary>
            <para>Provides access to metadata stored for every available class.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetClassList">
            <summary>
            <para>Returns the names of all the classes available.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetInheritersFromClass(Godot.StringName)">
            <summary>
            <para>Returns the names of all the classes that directly or indirectly inherit from <c>class</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetParentClass(Godot.StringName)">
            <summary>
            <para>Returns the parent class of <c>class</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassExists(Godot.StringName)">
            <summary>
            <para>Returns whether the specified <c>class</c> is available or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsParentClass(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns whether <c>inherits</c> is an ancestor of <c>class</c> or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.CanInstance(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if you can instance objects from the specified <c>class</c>, <c>false</c> in other case.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.Instance(Godot.StringName)">
            <summary>
            <para>Creates an instance of <c>class</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasSignal(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns whether <c>class</c> or its ancestry has a signal called <c>signal</c> or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignal(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the <c>signal</c> data of <c>class</c> or its ancestry. The returned value is a <see cref="T:Godot.Collections.Dictionary"/> with the following keys: <c>args</c>, <c>default_args</c>, <c>flags</c>, <c>id</c>, <c>name</c>, <c>return: (class_name, hint, hint_string, name, type, usage)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignalList(Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns an array with all the signals of <c>class</c> or its ancestry if <c>no_inheritance</c> is <c>false</c>. Every element of the array is a <see cref="T:Godot.Collections.Dictionary"/> as described in <see cref="M:Godot.ClassDB.ClassGetSignal(Godot.StringName,Godot.StringName)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetPropertyList(Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns an array with all the properties of <c>class</c> or its ancestry if <c>no_inheritance</c> is <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetProperty(Godot.Object,Godot.StringName)">
            <summary>
            <para>Returns the value of <c>property</c> of <c>class</c> or its ancestry.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassSetProperty(Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Sets <c>property</c> value of <c>class</c> to <c>value</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasMethod(Godot.StringName,Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns whether <c>class</c> (or its ancestry if <c>no_inheritance</c> is <c>false</c>) has a method called <c>method</c> or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetMethodList(Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns an array with all the methods of <c>class</c> or its ancestry if <c>no_inheritance</c> is <c>false</c>. Every element of the array is a <see cref="T:Godot.Collections.Dictionary"/> with the following keys: <c>args</c>, <c>default_args</c>, <c>flags</c>, <c>id</c>, <c>name</c>, <c>return: (class_name, hint, hint_string, name, type, usage)</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstantList(Godot.StringName,System.Boolean)">
            <summary>
            <para>Returns an array with the names all the integer constants of <c>class</c> or its ancestry.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasIntegerConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns whether <c>class</c> or its ancestry has an integer constant called <c>name</c> or not.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstant(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns the value of the integer constant <c>name</c> of <c>class</c> or its ancestry. Always returns 0 when the constant could not be found.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetCategory(Godot.StringName)">
            <summary>
            <para>Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required.</para>
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsClassEnabled(Godot.StringName)">
            <summary>
            <para>Returns whether this <c>class</c> is enabled or not.</para>
            </summary>
        </member>
        <member name="T:Godot.Directory">
            <summary>
            <para>Directory type. It is used to manage directories and their content (not restricted to the project folder).</para>
            <para>When creating a new <see cref="T:Godot.Directory"/>, it must be explicitly opened using <see cref="M:Godot.Directory.Open(System.String)"/> before most methods can be used. However, <see cref="M:Godot.Directory.FileExists(System.String)"/> and <see cref="M:Godot.Directory.DirExists(System.String)"/> can be used without opening a directory. If so, they use a path relative to <c>res://</c>.</para>
            <para>Here is an example on how to iterate through the files of a directory:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func dir_contents(path):</para>
            <para>    var dir = Directory.new()</para>
            <para>    if dir.open(path) == OK:</para>
            <para>        dir.list_dir_begin()</para>
            <para>        var file_name = dir.get_next()</para>
            <para>        while file_name != "":</para>
            <para>            if dir.current_is_dir():</para>
            <para>                print("Found directory: " + file_name)</para>
            <para>            else:</para>
            <para>                print("Found file: " + file_name)</para>
            <para>            file_name = dir.get_next()</para>
            <para>    else:</para>
            <para>        print("An error occurred when trying to access the path.")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public void DirContents(string path)</para>
            <para>{</para>
            <para>    var dir = new Directory();</para>
            <para>    if (dir.Open(path) == Error.Ok)</para>
            <para>    {</para>
            <para>        dir.ListDirBegin();</para>
            <para>        string fileName = dir.GetNext();</para>
            <para>        while (fileName != "")</para>
            <para>        {</para>
            <para>            if (dir.CurrentIsDir())</para>
            <para>            {</para>
            <para>                GD.Print("Found directory: " + fileName);</para>
            <para>            }</para>
            <para>            else</para>
            <para>            {</para>
            <para>                GD.Print("Found file: " + fileName);</para>
            <para>            }</para>
            <para>            fileName = dir.GetNext();</para>
            <para>        }</para>
            <para>    }</para>
            <para>    else</para>
            <para>    {</para>
            <para>        GD.Print("An error occurred when trying to access the path.");</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Open(System.String)">
            <summary>
            <para>Opens an existing directory of the filesystem. The <c>path</c> argument can be within the project tree (<c>res://folder</c>), the user directory (<c>user://folder</c>) or an absolute path of the user filesystem (e.g. <c>/tmp/folder</c> or <c>C:\tmp\folder</c>).</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)">
            <summary>
            <para>Initializes the stream used to list all files and directories using the <see cref="M:Godot.Directory.GetNext"/> function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with <see cref="M:Godot.Directory.ListDirEnd"/>.</para>
            <para>If <c>skip_navigational</c> is <c>true</c>, <c>.</c> and <c>..</c> are filtered out.</para>
            <para>If <c>skip_hidden</c> is <c>true</c>, hidden files are filtered out.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetNext">
            <summary>
            <para>Returns the next element (file or directory) in the current directory (including <c>.</c> and <c>..</c>, unless <c>skip_navigational</c> was given to <see cref="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)"/>).</para>
            <para>The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. <see cref="M:Godot.Directory.ListDirEnd"/> would not be mandatory in such a case).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.CurrentIsDir">
            <summary>
            <para>Returns whether the current item processed with the last <see cref="M:Godot.Directory.GetNext"/> call is a directory (<c>.</c> and <c>..</c> are considered directories).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirEnd">
            <summary>
            <para>Closes the current stream opened with <see cref="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)"/> (whether it has been fully processed with <see cref="M:Godot.Directory.GetNext"/> or not does not matter).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDriveCount">
            <summary>
            <para>On Windows, returns the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDrive(System.Int32)">
            <summary>
            <para>On Windows, returns the name of the drive (partition) passed as an argument (e.g. <c>C:</c>). On other platforms, or if the requested drive does not existed, the method returns an empty String.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDrive">
            <summary>
            <para>Returns the currently opened directory's drive index. See <see cref="M:Godot.Directory.GetDrive(System.Int32)"/> to convert returned index to the name of the drive.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.ChangeDir(System.String)">
            <summary>
            <para>Changes the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. <c>newdir</c> or <c>../newdir</c>), or an absolute path (e.g. <c>/tmp/newdir</c> or <c>res://somedir/newdir</c>).</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDir">
            <summary>
            <para>Returns the absolute path to the currently opened directory (e.g. <c>res://folder</c> or <c>C:\tmp\folder</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDir(System.String)">
            <summary>
            <para>Creates a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see <see cref="M:Godot.Directory.MakeDirRecursive(System.String)"/>).</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDirRecursive(System.String)">
            <summary>
            <para>Creates a target directory and all necessary intermediate directories in its path, by calling <see cref="M:Godot.Directory.MakeDir(System.String)"/> recursively. The argument can be relative to the current directory, or an absolute path.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.FileExists(System.String)">
            <summary>
            <para>Returns whether the target file exists. The argument can be relative to the current directory, or an absolute path.</para>
            <para>If the <see cref="T:Godot.Directory"/> is not open, the path is relative to <c>res://</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.DirExists(System.String)">
            <summary>
            <para>Returns whether the target directory exists. The argument can be relative to the current directory, or an absolute path.</para>
            <para>If the <see cref="T:Godot.Directory"/> is not open, the path is relative to <c>res://</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.GetSpaceLeft">
            <summary>
            <para>On UNIX desktop systems, returns the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Copy(System.String,System.String)">
            <summary>
            <para>Copies the <c>from</c> file to the <c>to</c> destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Rename(System.String,System.String)">
            <summary>
            <para>Renames (move) the <c>from</c> file to the <c>to</c> destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="M:Godot.Directory.Remove(System.String)">
            <summary>
            <para>Deletes the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.</para>
            <para>Returns one of the <see cref="T:Godot.Error"/> code constants (<c>OK</c> on success).</para>
            </summary>
        </member>
        <member name="T:Godot.Engine">
            <summary>
            <para>The <see cref="T:Godot.Engine"/> singleton allows you to query and modify the project's run-time parameters, such as frames per second, time scale, and others.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.EditorHint">
            <summary>
            <para>If <c>true</c>, it is running inside the editor. Useful for tool scripts.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.IterationsPerSecond">
            <summary>
            <para>The number of fixed iterations per second. This controls how often physics simulation and <see cref="M:Godot.Node._PhysicsProcess(System.Single)"/> methods are run. This value should generally always be set to <c>60</c> or above, as Godot doesn't interpolate the physics step. As a result, values lower than <c>60</c> will look stuttery. This value can be increased to make input more reactive or work around tunneling issues, but keep in mind doing so will increase CPU usage.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.TargetFps">
            <summary>
            <para>The desired frames per second. If the hardware cannot keep up, this setting may not be respected. A value of 0 means no limit.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.TimeScale">
            <summary>
            <para>Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.</para>
            </summary>
        </member>
        <member name="P:Godot.Engine.PhysicsJitterFix">
            <summary>
            <para>Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of in-game clock and real clock, but allows to smooth out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetPhysicsInterpolationFraction">
            <summary>
            <para>Returns the fraction through the current physics tick we are at the time of rendering the frame. This can be used to implement fixed timestep interpolation.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesDrawn">
            <summary>
            <para>Returns the total number of frames drawn. If the render loop is disabled with <c>--disable-render-loop</c> via command line, this returns <c>0</c>. See also <see cref="M:Godot.Engine.GetProcessFrames"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesPerSecond">
            <summary>
            <para>Returns the frames per second of the running game.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetPhysicsFrames">
            <summary>
            <para>Returns the total number of frames passed since engine initialization which is advanced on each physics frame.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetProcessFrames">
            <summary>
            <para>Returns the total number of frames passed since engine initialization which is advanced on each process frame, regardless of whether the render loop is enabled. See also <see cref="M:Godot.Engine.GetFramesDrawn"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetMainLoop">
            <summary>
            <para>Returns the main loop object (see <see cref="T:Godot.MainLoop"/> and <see cref="T:Godot.SceneTree"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetVersionInfo">
            <summary>
            <para>Returns the current engine version information in a Dictionary.</para>
            <para><c>major</c>    - Holds the major version number as an int</para>
            <para><c>minor</c>    - Holds the minor version number as an int</para>
            <para><c>patch</c>    - Holds the patch version number as an int</para>
            <para><c>hex</c>      - Holds the full version number encoded as a hexadecimal int with one byte (2 places) per number (see example below)</para>
            <para><c>status</c>   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String</para>
            <para><c>build</c>    - Holds the build name (e.g. "custom_build") as a String</para>
            <para><c>hash</c>     - Holds the full Git commit hash as a String</para>
            <para><c>year</c>     - Holds the year the version was released in as an int</para>
            <para><c>string</c>   - <c>major</c> + <c>minor</c> + <c>patch</c> + <c>status</c> + <c>build</c> in a single String</para>
            <para>The <c>hex</c> value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, "3.1.12" would be <c>0x03010C</c>. Note: It's still an int internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for easy version comparisons from code:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>if Engine.get_version_info().hex &gt;= 0x030200:</para>
            <para>    # Do things specific to version 3.2 or later</para>
            <para>else:</para>
            <para>    # Do things specific to versions before 3.2</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>if ((int)Engine.GetVersionInfo()["hex"] &gt;= 0x030200)</para>
            <para>{</para>
            <para>    // Do things specific to version 3.2 or later</para>
            <para>}</para>
            <para>else</para>
            <para>{</para>
            <para>    // Do things specific to versions before 3.2</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetAuthorInfo">
            <summary>
            <para>Returns engine author information in a Dictionary.</para>
            <para><c>lead_developers</c>    - Array of Strings, lead developer names</para>
            <para><c>founders</c>           - Array of Strings, founder names</para>
            <para><c>project_managers</c>   - Array of Strings, project manager names</para>
            <para><c>developers</c>         - Array of Strings, developer names</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetCopyrightInfo">
            <summary>
            <para>Returns an Array of copyright information Dictionaries.</para>
            <para><c>name</c>    - String, component name</para>
            <para><c>parts</c>   - Array of Dictionaries {<c>files</c>, <c>copyright</c>, <c>license</c>} describing subsections of the component</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetDonorInfo">
            <summary>
            <para>Returns a Dictionary of Arrays of donor names.</para>
            <para>{<c>platinum_sponsors</c>, <c>gold_sponsors</c>, <c>silver_sponsors</c>, <c>bronze_sponsors</c>, <c>mini_sponsors</c>, <c>gold_donors</c>, <c>silver_donors</c>, <c>bronze_donors</c>}</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetLicenseInfo">
            <summary>
            <para>Returns Dictionary of licenses used by Godot and included third party components.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetLicenseText">
            <summary>
            <para>Returns Godot license text.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.IsInPhysicsFrame">
            <summary>
            <para>Returns <c>true</c> if the game is inside the fixed process and physics phase of the game loop.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.HasSingleton(System.String)">
            <summary>
            <para>Returns <c>true</c> if a singleton with given <c>name</c> exists in global scope.</para>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetSingleton(System.String)">
            <summary>
            <para>Returns a global singleton with given <c>name</c>. Often used for plugins, e.g. GodotPayments.</para>
            </summary>
        </member>
        <member name="T:Godot.EngineDebugger">
            <summary>
            <para><see cref="T:Godot.EngineDebugger"/> handles the communication between the editor and the running game. It is active in the running game. Messages can be sent/received through it. It also manages the profilers.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.IsActive">
            <summary>
            <para>Returns <c>true</c> if the debugger is active otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.RegisterProfiler(Godot.StringName,Godot.Callable,Godot.Callable,Godot.Callable)">
            <summary>
            <para>Registers a profiler with the given <c>name</c>.</para>
            <para><c>toggle</c> callable is called when the profiler is enabled/disabled. It must take an argument array as an argument.</para>
            <para><c>add</c> callable is called when data is added to profiler using <see cref="M:Godot.EngineDebugger.ProfilerAddFrameData(Godot.StringName,Godot.Collections.Array)"/>. It must take a data array as argument.</para>
            <para><c>tick</c> callable is called at every active profiler iteration. It must take frame time, idle time, physics time, and physics idle time as arguments.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.UnregisterProfiler(Godot.StringName)">
            <summary>
            <para>Unregisters a profiler with given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.IsProfiling(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if a profiler with the given name is present and active otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.HasProfiler(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if a profiler with the given name is present otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.ProfilerAddFrameData(Godot.StringName,Godot.Collections.Array)">
            <summary>
            <para>Calls the <c>add</c> callable of the profiler with given <c>name</c> and <c>data</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.ProfilerEnable(Godot.StringName,System.Boolean,Godot.Collections.Array)">
            <summary>
            <para>Calls the <c>toggle</c> callable of the profiler with given <c>name</c> and <c>arguments</c>. Enables/Disables the same profiler depending on <c>enable</c> argument.</para>
            </summary>
            <param name="arguments">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.EngineDebugger.RegisterMessageCapture(Godot.StringName,Godot.Callable)">
            <summary>
            <para>Registers a message capture with given <c>name</c>. If <c>name</c> is "my_message" then messages starting with "my_message:" will be called with the given callable.</para>
            <para>Callable must accept a message string and a data array as argument. If the message and data are valid then callable must return <c>true</c> otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.UnregisterMessageCapture(Godot.StringName)">
            <summary>
            <para>Unregisters the message capture with given <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.HasCapture(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if a capture with the given name is present otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EngineDebugger.SendMessage(System.String,Godot.Collections.Array)">
            <summary>
            <para>Sends a message with given <c>message</c> and <c>data</c> array.</para>
            </summary>
        </member>
        <member name="T:Godot.File">
            <summary>
            <para>File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.</para>
            <para>Here's a sample on how to write and read from a file:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func save(content):</para>
            <para>    var file = File.new()</para>
            <para>    file.open("user://save_game.dat", File.WRITE)</para>
            <para>    file.store_string(content)</para>
            <para>    file.close()</para>
            <para></para>
            <para>func load():</para>
            <para>    var file = File.new()</para>
            <para>    file.open("user://save_game.dat", File.READ)</para>
            <para>    var content = file.get_as_text()</para>
            <para>    file.close()</para>
            <para>    return content</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public void Save(string content)</para>
            <para>{</para>
            <para>    var file = new File();</para>
            <para>    file.Open("user://save_game.dat", File.ModeFlags.Write);</para>
            <para>    file.StoreString(content);</para>
            <para>    file.Close();</para>
            <para>}</para>
            <para></para>
            <para>public string Load()</para>
            <para>{</para>
            <para>    var file = new File();</para>
            <para>    file.Open("user://save_game.dat", File.ModeFlags.Read);</para>
            <para>    string content = file.GetAsText();</para>
            <para>    file.Close();</para>
            <para>    return content;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>In the example above, the file will be saved in the user data folder as specified in the <a href="https://docs.godotengine.org/en/latest/tutorials/io/data_paths.html">Data paths</a> documentation.</para>
            <para>Note: To access project resources once exported, it is recommended to use <see cref="T:Godot.ResourceLoader"/> instead of the <see cref="T:Godot.File"/> API, as some files are converted to engine-specific formats and their original source files might not be present in the exported PCK package.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Fastlz">
            <summary>
            <para>Uses the <a href="http://fastlz.org/">FastLZ</a> compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Deflate">
            <summary>
            <para>Uses the <a href="https://en.wikipedia.org/wiki/DEFLATE">DEFLATE</a> compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Zstd">
            <summary>
            <para>Uses the <a href="https://facebook.github.io/zstd/">Zstandard</a> compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.CompressionMode.Gzip">
            <summary>
            <para>Uses the <a href="https://www.gzip.org/">gzip</a> compression method.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.Read">
            <summary>
            <para>Opens the file for read operations. The cursor is positioned at the beginning of the file.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.Write">
            <summary>
            <para>Opens the file for write operations. The file is created if it does not exist, and truncated if it does.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.ReadWrite">
            <summary>
            <para>Opens the file for read and write operations. Does not truncate the file. The cursor is positioned at the beginning of the file.</para>
            </summary>
        </member>
        <member name="F:Godot.File.ModeFlags.WriteRead">
            <summary>
            <para>Opens the file for read and write operations. The file is created if it does not exist, and truncated if it does. The cursor is positioned at the beginning of the file.</para>
            </summary>
        </member>
        <member name="P:Godot.File.EndianSwap">
            <summary>
            <para>If <c>true</c>, the file's endianness is swapped. Use this if you're dealing with files written on big-endian machines.</para>
            <para>Note: This is about the file format, not CPU type. This is always reset to <c>false</c> whenever you open the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncrypted(System.String,Godot.File.ModeFlags,System.Byte[])">
            <summary>
            <para>Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.</para>
            <para>Note: The provided key must be 32 bytes long.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncryptedWithPass(System.String,Godot.File.ModeFlags,System.String)">
            <summary>
            <para>Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.</para>
            </summary>
        </member>
        <member name="M:Godot.File.OpenCompressed(System.String,Godot.File.ModeFlags,Godot.File.CompressionMode)">
            <summary>
            <para>Opens a compressed file for reading or writing.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Open(System.String,Godot.File.ModeFlags)">
            <summary>
            <para>Opens the file for writing or reading, depending on the flags.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Close">
            <summary>
            <para>Closes the currently opened file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPath">
            <summary>
            <para>Returns the path as a <see cref="T:System.String"/> for the current open file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPathAbsolute">
            <summary>
            <para>Returns the absolute path as a <see cref="T:System.String"/> for the current open file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.IsOpen">
            <summary>
            <para>Returns <c>true</c> if the file is currently opened.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Seek(System.Int64)">
            <summary>
            <para>Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file).</para>
            </summary>
        </member>
        <member name="M:Godot.File.SeekEnd(System.Int64)">
            <summary>
            <para>Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).</para>
            <para>Note: This is an offset, so you should use negative numbers or the cursor will be at the end of the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPosition">
            <summary>
            <para>Returns the file cursor's position.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetLen">
            <summary>
            <para>Returns the size of the file in bytes.</para>
            </summary>
        </member>
        <member name="M:Godot.File.EofReached">
            <summary>
            <para>Returns <c>true</c> if the file cursor has read past the end of the file.</para>
            <para>Note: This function will still return <c>false</c> while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low-level file access works in all operating systems. There is always <see cref="M:Godot.File.GetLen"/> and <see cref="M:Godot.File.GetPosition"/> to implement a custom logic.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get8">
            <summary>
            <para>Returns the next 8 bits from the file as an integer. See <see cref="M:Godot.File.Store8(System.Byte)"/> for details on what values can be stored and retrieved this way.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get16">
            <summary>
            <para>Returns the next 16 bits from the file as an integer. See <see cref="M:Godot.File.Store16(System.UInt16)"/> for details on what values can be stored and retrieved this way.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get32">
            <summary>
            <para>Returns the next 32 bits from the file as an integer. See <see cref="M:Godot.File.Store32(System.UInt32)"/> for details on what values can be stored and retrieved this way.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Get64">
            <summary>
            <para>Returns the next 64 bits from the file as an integer. See <see cref="M:Godot.File.Store64(System.UInt64)"/> for details on what values can be stored and retrieved this way.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetFloat">
            <summary>
            <para>Returns the next 32 bits from the file as a floating-point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetDouble">
            <summary>
            <para>Returns the next 64 bits from the file as a floating-point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetReal">
            <summary>
            <para>Returns the next bits from the file as a floating-point number.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetBuffer(System.Int32)">
            <summary>
            <para>Returns next <c>len</c> bytes of the file as a <see cref="T:byte[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetLine">
            <summary>
            <para>Returns the next line of the file as a <see cref="T:System.String"/>.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetCsvLine(System.String)">
            <summary>
            <para>Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter <c>delim</c> to use other than the default <c>","</c> (comma). This delimiter must be one-character long.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetAsText">
            <summary>
            <para>Returns the whole file as a <see cref="T:System.String"/>.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetMd5(System.String)">
            <summary>
            <para>Returns an MD5 String representing the file at the given path or an empty <see cref="T:System.String"/> on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetSha256(System.String)">
            <summary>
            <para>Returns a SHA-256 <see cref="T:System.String"/> representing the file at the given path or an empty <see cref="T:System.String"/> on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetError">
            <summary>
            <para>Returns the last error that happened when trying to perform operations. Compare with the <c>ERR_FILE_*</c> constants from <see cref="T:Godot.Error"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetVar(System.Boolean)">
            <summary>
            <para>Returns the next <c>Variant</c> value from the file. If <c>allow_objects</c> is <c>true</c>, decoding objects is allowed.</para>
            <para>Warning: Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store8(System.Byte)">
            <summary>
            <para>Stores an integer as 8 bits in the file.</para>
            <para>Note: The <c>value</c> should lie in the interval <c>[0, 255]</c>. Any other value will overflow and wrap around.</para>
            <para>To store a signed integer, use <see cref="M:Godot.File.Store64(System.UInt64)"/>, or convert it manually (see <see cref="M:Godot.File.Store16(System.UInt16)"/> for an example).</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store16(System.UInt16)">
            <summary>
            <para>Stores an integer as 16 bits in the file.</para>
            <para>Note: The <c>value</c> should lie in the interval <c>[0, 2^16 - 1]</c>. Any other value will overflow and wrap around.</para>
            <para>To store a signed integer, use <see cref="M:Godot.File.Store64(System.UInt64)"/> or store a signed integer from the interval <c>[-2^15, 2^15 - 1]</c> (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>const MAX_15B = 1 &lt;&lt; 15</para>
            <para>const MAX_16B = 1 &lt;&lt; 16</para>
            <para></para>
            <para>func unsigned16_to_signed(unsigned):</para>
            <para>    return (unsigned + MAX_15B) % MAX_16B - MAX_15B</para>
            <para></para>
            <para>func _ready():</para>
            <para>    var f = File.new()</para>
            <para>    f.open("user://file.dat", File.WRITE_READ)</para>
            <para>    f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).</para>
            <para>    f.store_16(121) # In bounds, will store 121.</para>
            <para>    f.seek(0) # Go back to start to read the stored value.</para>
            <para>    var read1 = f.get_16() # 65494</para>
            <para>    var read2 = f.get_16() # 121</para>
            <para>    var converted1 = unsigned16_to_signed(read1) # -42</para>
            <para>    var converted2 = unsigned16_to_signed(read2) # 121</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void _Ready()</para>
            <para>{</para>
            <para>    var f = new File();</para>
            <para>    f.Open("user://file.dat", File.ModeFlags.WriteRead);</para>
            <para>    f.Store16(unchecked((ushort)-42)); // This wraps around and stores 65494 (2^16 - 42).</para>
            <para>    f.Store16(121); // In bounds, will store 121.</para>
            <para>    f.Seek(0); // Go back to start to read the stored value.</para>
            <para>    ushort read1 = f.Get16(); // 65494</para>
            <para>    ushort read2 = f.Get16(); // 121</para>
            <para>    short converted1 = BitConverter.ToInt16(BitConverter.GetBytes(read1), 0); // -42</para>
            <para>    short converted2 = BitConverter.ToInt16(BitConverter.GetBytes(read2), 0); // 121</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store32(System.UInt32)">
            <summary>
            <para>Stores an integer as 32 bits in the file.</para>
            <para>Note: The <c>value</c> should lie in the interval <c>[0, 2^32 - 1]</c>. Any other value will overflow and wrap around.</para>
            <para>To store a signed integer, use <see cref="M:Godot.File.Store64(System.UInt64)"/>, or convert it manually (see <see cref="M:Godot.File.Store16(System.UInt16)"/> for an example).</para>
            </summary>
        </member>
        <member name="M:Godot.File.Store64(System.UInt64)">
            <summary>
            <para>Stores an integer as 64 bits in the file.</para>
            <para>Note: The <c>value</c> must lie in the interval <c>[-2^63, 2^63 - 1]</c> (i.e. be a valid <see cref="T:System.Int32"/> value).</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreFloat(System.Single)">
            <summary>
            <para>Stores a floating-point number as 32 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreDouble(System.Double)">
            <summary>
            <para>Stores a floating-point number as 64 bits in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreReal(System.Single)">
            <summary>
            <para>Stores a floating-point number in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreBuffer(System.Byte[])">
            <summary>
            <para>Stores the given array of bytes in the file.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreLine(System.String)">
            <summary>
            <para>Appends <c>line</c> to the file followed by a line return character (<c>\n</c>), encoding the text as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreCsvLine(System.String[],System.String)">
            <summary>
            <para>Store the given <see cref="T:string[]"/> in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter <c>delim</c> to use other than the default <c>","</c> (comma). This delimiter must be one-character long.</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreString(System.String)">
            <summary>
            <para>Appends <c>string</c> to the file without a line return, encoding the text as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.StoreVar(System.Object,System.Boolean)">
            <summary>
            <para>Stores any Variant value in the file. If <c>full_objects</c> is <c>true</c>, encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.File.StorePascalString(System.String)">
            <summary>
            <para>Stores the given <see cref="T:System.String"/> as a line in the file in Pascal format (i.e. also store the length of the string).</para>
            <para>Text will be encoded as UTF-8.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetPascalString">
            <summary>
            <para>Returns a <see cref="T:System.String"/> saved in Pascal format from the file.</para>
            <para>Text is interpreted as being UTF-8 encoded.</para>
            </summary>
        </member>
        <member name="M:Godot.File.FileExists(System.String)">
            <summary>
            <para>Returns <c>true</c> if the file exists in the given path.</para>
            <para>Note: Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See <see cref="M:Godot.ResourceLoader.Exists(System.String,System.String)"/> for an alternative approach that takes resource remapping into account.</para>
            </summary>
        </member>
        <member name="M:Godot.File.GetModifiedTime(System.String)">
            <summary>
            <para>Returns the last time the <c>file</c> was modified in unix timestamp format or returns a <see cref="T:System.String"/> "ERROR IN <c>file</c>". This unix timestamp can be converted to datetime by using <see cref="M:Godot.OS.GetDatetimeFromUnixTime(System.Int64)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Geometry2D">
            <summary>
            <para>Geometry2D provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyEndType.Polygon">
            <summary>
            <para>Endpoints are joined using the <see cref="T:Godot.Geometry2D.PolyJoinType"/> value and the path filled as a polygon.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyEndType.Joined">
            <summary>
            <para>Endpoints are joined using the <see cref="T:Godot.Geometry2D.PolyJoinType"/> value and the path filled as a polyline.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyEndType.Butt">
            <summary>
            <para>Endpoints are squared off with no extension.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyEndType.Square">
            <summary>
            <para>Endpoints are squared off and extended by <c>delta</c> units.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyEndType.Round">
            <summary>
            <para>Endpoints are rounded off and extended by <c>delta</c> units.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyBooleanOperation.Union">
            <summary>
            <para>Create regions where either subject or clip polygons (or both) are filled.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyBooleanOperation.Difference">
            <summary>
            <para>Create regions where subject polygons are filled except where clip polygons are filled.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyBooleanOperation.Intersection">
            <summary>
            <para>Create regions where both subject and clip polygons are filled.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyBooleanOperation.Xor">
            <summary>
            <para>Create regions where either subject or clip polygons are filled but not where both are filled.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyJoinType.Square">
            <summary>
            <para>Squaring is applied uniformally at all convex edge joins at <c>1 * delta</c>.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyJoinType.Round">
            <summary>
            <para>While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords.</para>
            </summary>
        </member>
        <member name="F:Godot.Geometry2D.PolyJoinType.Miter">
            <summary>
            <para>There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce excessively long and narrow "spikes". For any given edge join, when miter offsetting would exceed that maximum distance, "square" joining is applied.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.IsPointInCircle(Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            <para>Returns <c>true</c> if <c>point</c> is inside the circle or if it's located exactly on the circle's boundary, otherwise returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.SegmentIntersectsSegment(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Checks if the two segments (<c>from_a</c>, <c>to_a</c>) and (<c>from_b</c>, <c>to_b</c>) intersect. If yes, return the point of intersection as <see cref="T:Godot.Vector2"/>. If no intersection takes place, returns an empty <c>Variant</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.LineIntersectsLine(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Checks if the two lines (<c>from_a</c>, <c>dir_a</c>) and (<c>from_b</c>, <c>dir_b</c>) intersect. If yes, return the point of intersection as <see cref="T:Godot.Vector2"/>. If no intersection takes place, returns an empty <c>Variant</c>.</para>
            <para>Note: The lines are specified using direction vectors, not end points.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.GetClosestPointsBetweenSegments(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Given the two 2D segments (<c>p1</c>, <c>q1</c>) and (<c>p2</c>, <c>q2</c>), finds those two points on the two segments that are closest to each other. Returns a <see cref="T:Godot.Vector2[]"/> that contains this point on (<c>p1</c>, <c>q1</c>) as well the accompanying point on (<c>p2</c>, <c>q2</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.GetClosestPointToSegment(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns the 2D point on the 2D segment (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point will always be inside the specified segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.GetClosestPointToSegmentUncapped(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns the 2D point on the 2D line defined by (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point can be inside the segment (<c>s1</c>, <c>s2</c>) or outside of it, i.e. somewhere on the line extending from the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.PointIsInsideTriangle(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            <para>Returns if <c>point</c> is inside the triangle specified by <c>a</c>, <c>b</c> and <c>c</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])">
            <summary>
            <para>Returns <c>true</c> if <c>polygon</c>'s vertices are ordered in clockwise order, otherwise returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.IsPointInPolygon(Godot.Vector2,Godot.Vector2[])">
            <summary>
            <para>Returns <c>true</c> if <c>point</c> is inside <c>polygon</c> or if it's located exactly on polygon's boundary, otherwise returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.TriangulatePolygon(Godot.Vector2[])">
            <summary>
            <para>Triangulates the polygon specified by the points in <c>polygon</c>. Returns a <see cref="T:int[]"/> where each triangle consists of three consecutive point indices into <c>polygon</c> (i.e. the returned array will have <c>n * 3</c> elements, with <c>n</c> being the number of found triangles). If the triangulation did not succeed, an empty <see cref="T:int[]"/> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.TriangulateDelaunay(Godot.Vector2[])">
            <summary>
            <para>Triangulates the area specified by discrete set of <c>points</c> such that no point is inside the circumcircle of any resulting triangle. Returns a <see cref="T:int[]"/> where each triangle consists of three consecutive point indices into <c>points</c> (i.e. the returned array will have <c>n * 3</c> elements, with <c>n</c> being the number of found triangles). If the triangulation did not succeed, an empty <see cref="T:int[]"/> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.ConvexHull(Godot.Vector2[])">
            <summary>
            <para>Given an array of <see cref="T:Godot.Vector2"/>s, returns the convex hull as a list of points in counterclockwise order. The last point is the same as the first one.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.MergePolygons(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Merges (combines) <c>polygon_a</c> and <c>polygon_b</c> and returns an array of merged polygons. This performs  between polygons.</para>
            <para>The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.ClipPolygons(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Clips <c>polygon_a</c> against <c>polygon_b</c> and returns an array of clipped polygons. This performs  between polygons. Returns an empty array if <c>polygon_b</c> completely overlaps <c>polygon_a</c>.</para>
            <para>If <c>polygon_b</c> is enclosed by <c>polygon_a</c>, returns an outer polygon (boundary) and inner polygon (hole) which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.IntersectPolygons(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Intersects <c>polygon_a</c> with <c>polygon_b</c> and returns an array of intersected polygons. This performs  between polygons. In other words, returns common area shared by polygons. Returns an empty array if no intersection occurs.</para>
            <para>The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.ExcludePolygons(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Mutually excludes common area defined by intersection of <c>polygon_a</c> and <c>polygon_b</c> (see <see cref="M:Godot.Geometry2D.IntersectPolygons(Godot.Vector2[],Godot.Vector2[])"/>) and returns an array of excluded polygons. This performs  between polygons. In other words, returns all but common area between polygons.</para>
            <para>The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.ClipPolylineWithPolygon(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Clips <c>polyline</c> against <c>polygon</c> and returns an array of clipped polylines. This performs  between the polyline and the polygon. This operation can be thought of as cutting a line with a closed shape.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.IntersectPolylineWithPolygon(Godot.Vector2[],Godot.Vector2[])">
            <summary>
            <para>Intersects <c>polyline</c> with <c>polygon</c> and returns an array of intersected polylines. This performs  between the polyline and the polygon. This operation can be thought of as chopping a line with a closed shape.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.OffsetPolygon(Godot.Vector2[],System.Single,Godot.Geometry2D.PolyJoinType)">
            <summary>
            <para>Inflates or deflates <c>polygon</c> by <c>delta</c> units (pixels). If <c>delta</c> is positive, makes the polygon grow outward. If <c>delta</c> is negative, shrinks the polygon inward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. Returns an empty array if <c>delta</c> is negative and the absolute value of it approximately exceeds the minimum bounding rectangle dimensions of the polygon.</para>
            <para>Each polygon's vertices will be rounded as determined by <c>join_type</c>, see <see cref="T:Godot.Geometry2D.PolyJoinType"/>.</para>
            <para>The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            <para>Note: To translate the polygon's vertices specifically, multiply them to a <see cref="T:Godot.Transform2D"/>:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var polygon = PackedVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])</para>
            <para>var offset = Vector2(50, 50)</para>
            <para>polygon = Transform2D(0, offset) * polygon</para>
            <para>print(polygon) # prints [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var polygon = new Vector2[] { new Vector2(0, 0), new Vector2(100, 0), new Vector2(100, 100), new Vector2(0, 100) };</para>
            <para>var offset = new Vector2(50, 50);</para>
            <para>// TODO: This code is not valid right now. Ping @aaronfranke about it before Godot 4.0 is out.</para>
            <para>//polygon = (Vector2[]) new Transform2D(0, offset).Xform(polygon);</para>
            <para>//GD.Print(polygon); // prints [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)]</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.OffsetPolyline(Godot.Vector2[],System.Single,Godot.Geometry2D.PolyJoinType,Godot.Geometry2D.PolyEndType)">
            <summary>
            <para>Inflates or deflates <c>polyline</c> by <c>delta</c> units (pixels), producing polygons. If <c>delta</c> is positive, makes the polyline grow outward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. If <c>delta</c> is negative, returns an empty array.</para>
            <para>Each polygon's vertices will be rounded as determined by <c>join_type</c>, see <see cref="T:Godot.Geometry2D.PolyJoinType"/>.</para>
            <para>Each polygon's endpoints will be rounded as determined by <c>end_type</c>, see <see cref="T:Godot.Geometry2D.PolyEndType"/>.</para>
            <para>The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling <see cref="M:Godot.Geometry2D.IsPolygonClockwise(Godot.Vector2[])"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry2D.MakeAtlas(Godot.Vector2[])">
            <summary>
            <para>Given an array of <see cref="T:Godot.Vector2"/>s representing tiles, builds an atlas. The returned dictionary has two keys: <c>points</c> is a vector of <see cref="T:Godot.Vector2"/> that specifies the positions of each tile, <c>size</c> contains the overall size of the whole atlas as <see cref="T:Godot.Vector2"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.Geometry3D">
            <summary>
            <para>Geometry3D provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.BuildBoxPlanes(Godot.Vector3)">
            <summary>
            <para>Returns an array with 6 <see cref="T:Godot.Plane"/>s that describe the sides of a box centered at the origin. The box size is defined by <c>extents</c>, which represents one (positive) corner of the box (i.e. half its actual size).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.BuildCylinderPlanes(System.Single,System.Single,System.Int32,Godot.Vector3.Axis)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Plane"/>s closely bounding a faceted cylinder centered at the origin with radius <c>radius</c> and height <c>height</c>. The parameter <c>sides</c> defines how many planes will be generated for the round part of the cylinder. The parameter <c>axis</c> describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.BuildCapsulePlanes(System.Single,System.Single,System.Int32,System.Int32,Godot.Vector3.Axis)">
            <summary>
            <para>Returns an array of <see cref="T:Godot.Plane"/>s closely bounding a faceted capsule centered at the origin with radius <c>radius</c> and height <c>height</c>. The parameter <c>sides</c> defines how many planes will be generated for the side part of the capsule, whereas <c>lats</c> gives the number of latitudinal steps at the bottom and top of the capsule. The parameter <c>axis</c> describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.GetClosestPointsBetweenSegments(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Given the two 3D segments (<c>p1</c>, <c>p2</c>) and (<c>q1</c>, <c>q2</c>), finds those two points on the two segments that are closest to each other. Returns a <see cref="T:Godot.Vector3[]"/> that contains this point on (<c>p1</c>, <c>p2</c>) as well the accompanying point on (<c>q1</c>, <c>q2</c>).</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Returns the 3D point on the 3D segment (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point will always be inside the specified segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.GetClosestPointToSegmentUncapped(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Returns the 3D point on the 3D line defined by (<c>s1</c>, <c>s2</c>) that is closest to <c>point</c>. The returned point can be inside the segment (<c>s1</c>, <c>s2</c>) or outside of it, i.e. somewhere on the line extending from the segment.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.RayIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Tests if the 3D ray starting at <c>from</c> with the direction of <c>dir</c> intersects the triangle specified by <c>a</c>, <c>b</c> and <c>c</c>. If yes, returns the point of intersection as <see cref="T:Godot.Vector3"/>. If no intersection takes place, an empty <c>Variant</c> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.SegmentIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            <para>Tests if the segment (<c>from</c>, <c>to</c>) intersects the triangle <c>a</c>, <c>b</c>, <c>c</c>. If yes, returns the point of intersection as <see cref="T:Godot.Vector3"/>. If no intersection takes place, an empty <c>Variant</c> is returned.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.SegmentIntersectsSphere(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            <para>Checks if the segment (<c>from</c>, <c>to</c>) intersects the sphere that is located at <c>sphere_position</c> and has radius <c>sphere_radius</c>. If no, returns an empty <see cref="T:Godot.Vector3[]"/>. If yes, returns a <see cref="T:Godot.Vector3[]"/> containing the point of intersection and the sphere's normal at the point of intersection.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.SegmentIntersectsCylinder(Godot.Vector3,Godot.Vector3,System.Single,System.Single)">
            <summary>
            <para>Checks if the segment (<c>from</c>, <c>to</c>) intersects the cylinder with height <c>height</c> that is centered at the origin and has radius <c>radius</c>. If no, returns an empty <see cref="T:Godot.Vector3[]"/>. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.SegmentIntersectsConvex(Godot.Vector3,Godot.Vector3,Godot.Collections.Array)">
            <summary>
            <para>Given a convex hull defined though the <see cref="T:Godot.Plane"/>s in the array <c>planes</c>, tests if the segment (<c>from</c>, <c>to</c>) intersects with that hull. If an intersection is found, returns a <see cref="T:Godot.Vector3[]"/> containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.</para>
            </summary>
        </member>
        <member name="M:Godot.Geometry3D.ClipPolygon(Godot.Vector3[],Godot.Plane)">
            <summary>
            <para>Clips the polygon defined by the points in <c>points</c> against the <c>plane</c> and returns the points of the clipped polygon.</para>
            </summary>
        </member>
        <member name="T:Godot.GodotSharp">
            <summary>
            <para>This class is a bridge between Godot and the Mono runtime. It exposes several low-level operations and is only available in Mono-enabled Godot builds.</para>
            <para>See also <see cref="T:Godot.CSharpScript"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.AttachThread">
            <summary>
            <para>Attaches the current thread to the Mono runtime.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.DetachThread">
            <summary>
            <para>Detaches the current thread from the Mono runtime.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.GetDomainId">
            <summary>
            <para>Returns the current MonoDomain ID.</para>
            <para>Note: The Mono runtime must be initialized for this method to work (use <see cref="M:Godot.GodotSharp.IsRuntimeInitialized"/> to check). If the Mono runtime isn't initialized at the time this method is called, the engine will crash.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.GetScriptsDomainId">
            <summary>
            <para>Returns the scripts MonoDomain's ID. This will be the same MonoDomain ID as <see cref="M:Godot.GodotSharp.GetDomainId"/>, unless the scripts domain isn't loaded.</para>
            <para>Note: The Mono runtime must be initialized for this method to work (use <see cref="M:Godot.GodotSharp.IsRuntimeInitialized"/> to check). If the Mono runtime isn't initialized at the time this method is called, the engine will crash.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsScriptsDomainLoaded">
            <summary>
            <para>Returns <c>true</c> if the scripts domain is loaded, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsDomainFinalizingForUnload(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the domain is being finalized, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsRuntimeShuttingDown">
            <summary>
            <para>Returns <c>true</c> if the Mono runtime is shutting down, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsRuntimeInitialized">
            <summary>
            <para>Returns <c>true</c> if the Mono runtime is initialized, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="T:Godot.JSON">
            <summary>
            <para>Helper class for parsing JSON data. For usage example and other important hints, see <see cref="T:Godot.JSONParseResult"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.JSON.Print(System.Object,System.String,System.Boolean)">
            <summary>
            <para>Converts a <c>Variant</c> var to JSON text and returns the result. Useful for serializing data to store or send over the network.</para>
            <para>Note: The JSON specification does not define integer or float types, but only a number type. Therefore, converting a Variant to JSON text will convert all numerical values to <see cref="T:System.Single"/> types.</para>
            <para>Use <c>indent</c> parameter to pretty print the output.</para>
            <para>Example output:</para>
            <para><code>
            ## JSON.print(my_dictionary)
            {"name":"my_dictionary","version":"1.0.0","entities":[{"name":"entity_0","value":"value_0"},{"name":"entity_1","value":"value_1"}]}
            
            ## JSON.print(my_dictionary, "\t")
            {
                    "name": "my_dictionary",
                    "version": "1.0.0",
                    "entities": [
                            {
                                    "name": "entity_0",
                                    "value": "value_0"
                            },
                            {
                                    "name": "entity_1",
                                    "value": "value_1"
                            }
                    ]
            }
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.JSON.Parse(System.String)">
            <summary>
            <para>Parses a JSON-encoded string and returns a <see cref="T:Godot.JSONParseResult"/> containing the result.</para>
            </summary>
        </member>
        <member name="T:Godot.Marshalls">
            <summary>
            <para>Provides data transformation and encoding utility functions.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.VariantToBase64(System.Object,System.Boolean)">
            <summary>
            <para>Returns a Base64-encoded string of the <c>Variant</c> <c>variant</c>. If <c>full_objects</c> is <c>true</c>, encoding objects is allowed (and can potentially include code).</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToVariant(System.String,System.Boolean)">
            <summary>
            <para>Returns a decoded <c>Variant</c> corresponding to the Base64-encoded string <c>base64_str</c>. If <c>allow_objects</c> is <c>true</c>, decoding objects is allowed.</para>
            <para>Warning: Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.RawToBase64(System.Byte[])">
            <summary>
            <para>Returns a Base64-encoded string of a given <see cref="T:byte[]"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToRaw(System.String)">
            <summary>
            <para>Returns a decoded <see cref="T:byte[]"/> corresponding to the Base64-encoded string <c>base64_str</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Utf8ToBase64(System.String)">
            <summary>
            <para>Returns a Base64-encoded string of the UTF-8 string <c>utf8_str</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToUtf8(System.String)">
            <summary>
            <para>Returns a decoded string corresponding to the Base64-encoded string <c>base64_str</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.Mutex">
            <summary>
            <para>A synchronization mutex (mutual exclusion). This is used to synchronize multiple <see cref="T:Godot.Thread"/>s, and is equivalent to a binary <see cref="T:Godot.Semaphore"/>. It guarantees that only one thread can ever acquire the lock at a time. A mutex can be used to protect a critical section; however, be careful to avoid deadlocks.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.Lock">
            <summary>
            <para>Locks this <see cref="T:Godot.Mutex"/>, blocks until it is unlocked by the current owner.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.TryLock">
            <summary>
            <para>Tries locking this <see cref="T:Godot.Mutex"/>, but does not block. Returns  on success,  otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.Mutex.Unlock">
            <summary>
            <para>Unlocks this <see cref="T:Godot.Mutex"/>, leaving it to other threads.</para>
            </summary>
        </member>
        <member name="T:Godot.OS">
            <summary>
            <para>Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.VideoDriver.Gles2">
            <summary>
            <para>The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.VideoDriver.Vulkan">
            <summary>
            <para>The Vulkan rendering backend.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Desktop">
            <summary>
            <para>Desktop directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Dcim">
            <summary>
            <para>DCIM (Digital Camera Images) directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Documents">
            <summary>
            <para>Documents directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Downloads">
            <summary>
            <para>Downloads directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Movies">
            <summary>
            <para>Movies directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Music">
            <summary>
            <para>Music directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Pictures">
            <summary>
            <para>Pictures directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.SystemDir.Ringtones">
            <summary>
            <para>Ringtones directory path.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.January">
            <summary>
            <para>January.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.February">
            <summary>
            <para>February.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.March">
            <summary>
            <para>March.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.April">
            <summary>
            <para>April.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.May">
            <summary>
            <para>May.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.June">
            <summary>
            <para>June.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.July">
            <summary>
            <para>July.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.August">
            <summary>
            <para>August.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.September">
            <summary>
            <para>September.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.October">
            <summary>
            <para>October.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.November">
            <summary>
            <para>November.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Month.December">
            <summary>
            <para>December.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Sunday">
            <summary>
            <para>Sunday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Monday">
            <summary>
            <para>Monday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Tuesday">
            <summary>
            <para>Tuesday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Wednesday">
            <summary>
            <para>Wednesday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Thursday">
            <summary>
            <para>Thursday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Friday">
            <summary>
            <para>Friday.</para>
            </summary>
        </member>
        <member name="F:Godot.OS.Weekday.Saturday">
            <summary>
            <para>Saturday.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.ExitCode">
            <summary>
            <para>The exit code passed to the OS when the main loop exits. By convention, an exit code of <c>0</c> indicates success whereas a non-zero exit code indicates an error. For portability reasons, the exit code should be set between 0 and 125 (inclusive).</para>
            <para>Note: This value will be ignored if using <see cref="M:Godot.SceneTree.Quit(System.Int32)"/> with an <c>exit_code</c> argument passed.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.LowProcessorUsageMode">
            <summary>
            <para>If <c>true</c>, the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.LowProcessorUsageModeSleepUsec">
            <summary>
            <para>The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.</para>
            </summary>
        </member>
        <member name="P:Godot.OS.TabletDriver">
            <summary>
            <para>The current tablet driver in use.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetConnectedMidiInputs">
            <summary>
            <para>Returns an array of MIDI device names.</para>
            <para>The returned array will be empty if the system MIDI driver has not previously been initialised with <see cref="M:Godot.OS.OpenMidiInputs"/>.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.OpenMidiInputs">
            <summary>
            <para>Initialises the singleton for the system MIDI driver.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.CloseMidiInputs">
            <summary>
            <para>Shuts down system MIDI driver.</para>
            <para>Note: This method is implemented on Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessorCount">
            <summary>
            <para>Returns the number of threads available on the host machine.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetExecutablePath">
            <summary>
            <para>Returns the path to the current engine executable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.Execute(System.String,System.String[],System.Boolean,Godot.Collections.Array,System.Boolean)">
            <summary>
            <para>Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.</para>
            <para>The arguments are used in the given order and separated by a space, so <c>OS.execute("ping", ["-w", "3", "godotengine.org"], false)</c> will resolve to <c>ping -w 3 godotengine.org</c> in the system's shell.</para>
            <para>This method has slightly different behavior based on whether the <c>blocking</c> mode is enabled.</para>
            <para>If <c>blocking</c> is <c>true</c>, the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the <c>output</c> array as a single string. When the process terminates, the Godot thread will resume execution.</para>
            <para>If <c>blocking</c> is <c>false</c>, the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so <c>output</c> will be empty.</para>
            <para>The return value also depends on the blocking mode. When blocking, the method will return an exit code of the process. When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with <see cref="M:Godot.OS.Kill(System.Int32)"/>). If the process forking (non-blocking) or opening (blocking) fails, the method will return <c>-1</c> or another exit code.</para>
            <para>Example of blocking mode and retrieving the shell output:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var output = []</para>
            <para>var exit_code = OS.execute("ls", ["-l", "/tmp"], true, output)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var output = new Godot.Collections.Array();</para>
            <para>int exitCode = OS.Execute("ls", new string[] {"-l", "/tmp"}, true, output);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Example of non-blocking mode, running another instance of the project and storing its process ID:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var pid = OS.execute(OS.get_executable_path(), [], false)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var pid = OS.Execute(OS.GetExecutablePath(), new string[] {}, false);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>If you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var output = []</para>
            <para>OS.execute("CMD.exe", ["/C", "cd %TEMP% &amp;&amp; dir"], true, output)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var output = new Godot.Collections.Array();</para>
            <para>OS.Execute("CMD.exe", new string[] {"/C", "cd %TEMP% &amp;&amp; dir"}, true, output);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: This method is implemented on Android, iOS, Linux, macOS and Windows.</para>
            </summary>
            <param name="output">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
        </member>
        <member name="M:Godot.OS.Kill(System.Int32)">
            <summary>
            <para>Kill (terminate) the process identified by the given process ID (<c>pid</c>), e.g. the one returned by <see cref="M:Godot.OS.Execute(System.String,System.String[],System.Boolean,Godot.Collections.Array,System.Boolean)"/> in non-blocking mode.</para>
            <para>Note: This method can also be used to kill processes that were not spawned by the game.</para>
            <para>Note: This method is implemented on Android, iOS, Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.ShellOpen(System.String)">
            <summary>
            <para>Requests the OS to open a resource with the most appropriate program. For example:</para>
            <para>- <c>OS.shell_open("C:\\Users\name\Downloads")</c> on Windows opens the file explorer at the user's Downloads folder.</para>
            <para>- <c>OS.shell_open("https://godotengine.org")</c> opens the default web browser on the official Godot website.</para>
            <para>- <c>OS.shell_open("mailto:example@example.com")</c> opens the default email client with the "To" field set to <c>example@example.com</c>. See <a href="https://blog.escapecreative.com/customizing-mailto-links/">Customizing <c>mailto:</c> Links</a> for a list of fields that can be added.</para>
            <para>Use <see cref="M:Godot.ProjectSettings.GlobalizePath(System.String)"/> to convert a <c>res://</c> or <c>user://</c> path into a system path for use with this method.</para>
            <para>Note: This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessId">
            <summary>
            <para>Returns the project's process ID.</para>
            <para>Note: This method is implemented on Android, iOS, Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetEnvironment(System.String)">
            <summary>
            <para>Returns an environment variable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasEnvironment(System.String)">
            <summary>
            <para>Returns <c>true</c> if an environment variable exists.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetName">
            <summary>
            <para>Returns the name of the host OS. Possible values are: <c>"Android"</c>, <c>"iOS"</c>, <c>"HTML5"</c>, <c>"OSX"</c>, <c>"Server"</c>, <c>"Windows"</c>, <c>"UWP"</c>, <c>"X11"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetCmdlineArgs">
            <summary>
            <para>Returns the command-line arguments passed to the engine.</para>
            <para>Command-line arguments can be written in any form, including both <c>--key value</c> and <c>--key=value</c> forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.</para>
            <para>You can also incorporate environment variables using the <see cref="M:Godot.OS.GetEnvironment(System.String)"/> method.</para>
            <para>You can set <c>editor/main_run_args</c> in the Project Settings to define command-line arguments to be passed by the editor when running the project.</para>
            <para>Here's a minimal example on how to parse command-line arguments into a dictionary using the <c>--key=value</c> form for arguments:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var arguments = {}</para>
            <para>for argument in OS.get_cmdline_args():</para>
            <para>    if argument.find("=") &gt; -1:</para>
            <para>        var key_value = argument.split("=")</para>
            <para>        arguments[key_value[0].lstrip("--")] = key_value[1]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var arguments = new Godot.Collections.Dictionary();</para>
            <para>foreach (var argument in OS.GetCmdlineArgs())</para>
            <para>{</para>
            <para>    if (argument.Find("=") &gt; -1)</para>
            <para>    {</para>
            <para>        string[] keyValue = argument.Split("=");</para>
            <para>        arguments[keyValue[0].LStrip("--")] = keyValue[1];</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetime(System.Boolean)">
            <summary>
            <para>Returns current datetime as a dictionary of keys: <c>year</c>, <c>month</c>, <c>day</c>, <c>weekday</c>, <c>dst</c> (Daylight Savings Time), <c>hour</c>, <c>minute</c>, <c>second</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDate(System.Boolean)">
            <summary>
            <para>Returns current date as a dictionary of keys: <c>year</c>, <c>month</c>, <c>day</c>, <c>weekday</c>, <c>dst</c> (Daylight Savings Time).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTime(System.Boolean)">
            <summary>
            <para>Returns current time as a dictionary of keys: hour, minute, second.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTimeZoneInfo">
            <summary>
            <para>Returns the current time zone as a dictionary with the keys: bias and name.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTime">
            <summary>
            <para>Returns the current UNIX epoch timestamp.</para>
            <para>Important: This is the system clock that the user can manully set. Never use this method for precise time calculation since its results are also subject to automatic adjustments by the operating system. Always use <see cref="M:Godot.OS.GetTicksUsec"/> or <see cref="M:Godot.OS.GetTicksMsec"/> for precise time calculation instead, since they are guaranteed to be monotonic (i.e. never decrease).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetimeFromUnixTime(System.Int64)">
            <summary>
            <para>Gets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).</para>
            <para>The returned Dictionary's values will be the same as <see cref="M:Godot.OS.GetDatetime(System.Boolean)"/>, with the exception of Daylight Savings Time as it cannot be determined from the epoch.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTimeFromDatetime(Godot.Collections.Dictionary)">
            <summary>
            <para>Gets an epoch time value from a dictionary of time values.</para>
            <para><c>datetime</c> must be populated with the following keys: <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>.</para>
            <para>You can pass the output from <see cref="M:Godot.OS.GetDatetimeFromUnixTime(System.Int64)"/> directly into this function. Daylight Savings Time (<c>dst</c>), if present, is ignored.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DelayUsec(System.UInt32)">
            <summary>
            <para>Delay execution of the current thread by <c>usec</c> microseconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DelayMsec(System.UInt32)">
            <summary>
            <para>Delay execution of the current thread by <c>msec</c> milliseconds.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTicksMsec">
            <summary>
            <para>Returns the amount of time passed in milliseconds since the engine started.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTicksUsec">
            <summary>
            <para>Returns the amount of time passed in microseconds since the engine started.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetLocale">
            <summary>
            <para>Returns the host OS locale as a string of the form <c>language_Script_COUNTRY_VARIANT@extra</c>.</para>
            <para><c>language</c> - 2 or 3 letter <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">language code</a>, in lower case.</para>
            <para><c>Script</c> - optional, 4 letter <a href="https://en.wikipedia.org/wiki/ISO_15924">script code</a>, in title case.</para>
            <para><c>COUNTRY</c> - optional, 2 or 3 letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1">country code</a>, in upper case.</para>
            <para><c>VARIANT</c> - optional, language variant, region and sort order. Variant can have any number of underscored key words.</para>
            <para><c>extra</c> - optional, semicolon separated list of additional key words. Currency, calendar, sort order and numbering system information.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetModelName">
            <summary>
            <para>Returns the model name of the current device.</para>
            <para>Note: This method is implemented on Android and iOS. Returns <c>"GenericDevice"</c> on unsupported platforms.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsUserfsPersistent">
            <summary>
            <para>If <c>true</c>, the <c>user://</c> file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsStdoutVerbose">
            <summary>
            <para>Returns <c>true</c> if the engine was executed with <c>-v</c> (verbose stdout).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.CanUseThreads">
            <summary>
            <para>Returns <c>true</c> if the current host platform is using multiple threads.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsDebugBuild">
            <summary>
            <para>Returns <c>true</c> if the Godot binary used to run the project is a debug export template, or when running in the editor.</para>
            <para>Returns <c>false</c> if the Godot binary used to run the project is a release export template.</para>
            <para>To check whether the Godot binary used to run the project is an export template (debug or release), use <c>OS.has_feature("standalone")</c> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DumpMemoryToFile(System.String)">
            <summary>
            <para>Dumps the memory allocation ringlist to a file (only works in debug).</para>
            <para>Entry format per line: "Address - Size - Description".</para>
            </summary>
        </member>
        <member name="M:Godot.OS.DumpResourcesToFile(System.String)">
            <summary>
            <para>Dumps all used resources to file (only works in debug).</para>
            <para>Entry format per line: "Resource Type : Resource Location".</para>
            <para>At the end of the file is a statistic of all used Resource Types.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesInUse(System.Boolean)">
            <summary>
            <para>Shows all resources currently used by the game.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllResources(System.String)">
            <summary>
            <para>Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in <c>tofile</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryUsage">
            <summary>
            <para>Returns the amount of static memory being used by the program in bytes.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryPeakUsage">
            <summary>
            <para>Returns the maximum amount of static memory used (only works in debug).</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUserDataDir">
            <summary>
            <para>Returns the absolute directory path where user data is written (<c>user://</c>).</para>
            <para>On Linux, this is <c>~/.local/share/godot/app_userdata/[project_name]</c>, or <c>~/.local/share/[custom_name]</c> if <c>use_custom_user_dir</c> is set.</para>
            <para>On macOS, this is <c>~/Library/Application Support/Godot/app_userdata/[project_name]</c>, or <c>~/Library/Application Support/[custom_name]</c> if <c>use_custom_user_dir</c> is set.</para>
            <para>On Windows, this is <c>%APPDATA%\Godot\app_userdata\[project_name]</c>, or <c>%APPDATA%\[custom_name]</c> if <c>use_custom_user_dir</c> is set. <c>%APPDATA%</c> expands to <c>%USERPROFILE%\AppData\Roaming</c>.</para>
            <para>If the project name is empty, <c>user://</c> falls back to <c>res://</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemDir(Godot.OS.SystemDir)">
            <summary>
            <para>Returns the actual path to commonly used folders across different platforms. Available locations are specified in <see cref="T:Godot.OS.SystemDir"/>.</para>
            <para>Note: This method is implemented on Android, Linux, macOS and Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetUniqueId">
            <summary>
            <para>Returns a string that is unique to the device.</para>
            <para>Note: Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllTexturesBySize">
            <summary>
            <para>Shows the list of loaded textures sorted by size in memory.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesByType(System.String[])">
            <summary>
            <para>Shows the number of resources loaded by the game of the given types.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetKeycodeString(System.UInt32)">
            <summary>
            <para>Returns the given keycode as a string (e.g. Return values: <c>"Escape"</c>, <c>"Shift+Escape"</c>).</para>
            <para>See also <see cref="P:Godot.InputEventKey.Keycode"/> and <see cref="M:Godot.InputEventKey.GetKeycodeWithModifiers"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.IsKeycodeUnicode(System.UInt32)">
            <summary>
            <para>Returns <c>true</c> if the input keycode corresponds to a Unicode character.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.FindKeycodeFromString(System.String)">
            <summary>
            <para>Returns the keycode of the given string (e.g. "Escape").</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetUseFileAccessSaveAndSwap(System.Boolean)">
            <summary>
            <para>Enables backup saves if <c>enabled</c> is <c>true</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.SetThreadName(System.String)">
            <summary>
            <para>Sets the name of the current thread.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.HasFeature(System.String)">
            <summary>
            <para>Returns <c>true</c> if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the <a href="https://docs.godotengine.org/en/latest/getting_started/workflow/export/feature_tags.html">Feature Tags</a> documentation for more details.</para>
            <para>Note: Tag names are case-sensitive.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.RequestPermission(System.String)">
            <summary>
            <para>At the moment this function is only used by <c>AudioDriverOpenSL</c> to request permission for <c>RECORD_AUDIO</c> on Android.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.RequestPermissions">
            <summary>
            <para>With this function you can request dangerous permissions since normal permissions are automatically granted at install time in Android application.</para>
            <para>Note: This method is implemented on Android.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetGrantedPermissions">
            <summary>
            <para>With this function you can get the list of dangerous permissions that have been granted to the Android application.</para>
            <para>Note: This method is implemented on Android.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTabletDriverCount">
            <summary>
            <para>Returns the total number of available tablet drivers.</para>
            <para>Note: This method is implemented on Windows.</para>
            </summary>
        </member>
        <member name="M:Godot.OS.GetTabletDriverName(System.Int32)">
            <summary>
            <para>Returns the tablet driver name for the given index.</para>
            <para>Note: This method is implemented on Windows.</para>
            </summary>
        </member>
        <member name="T:Godot.ResourceSaver">
            <summary>
            <para>Singleton for saving Godot-specific resource types to the filesystem.</para>
            <para>It uses the many <see cref="T:Godot.ResourceFormatSaver"/> classes registered in the engine (either built-in or from a plugin) to save engine-specific resource data to text-based (e.g. <c>.tres</c> or <c>.tscn</c>) or binary files (e.g. <c>.res</c> or <c>.scn</c>).</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.RelativePaths">
            <summary>
            <para>Save the resource with a path relative to the scene which uses it.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.BundleResources">
            <summary>
            <para>Bundles external resources.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.ChangePath">
            <summary>
            <para>Changes the <see cref="P:Godot.Resource.ResourcePath"/> of the saved resource to match its new location.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.OmitEditorProperties">
            <summary>
            <para>Do not save editor-specific metadata (identified by their <c>__editor</c> prefix).</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.SaveBigEndian">
            <summary>
            <para>Save as big endian (see <see cref="P:Godot.File.EndianSwap"/>).</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.Compress">
            <summary>
            <para>Compress the resource on save using . Only available for binary resource types.</para>
            </summary>
        </member>
        <member name="F:Godot.ResourceSaver.SaverFlags.ReplaceSubresourcePaths">
            <summary>
            <para>Take over the paths of the saved subresources (see <see cref="M:Godot.Resource.TakeOverPath(System.String)"/>).</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.Save(System.String,Godot.Resource,Godot.ResourceSaver.SaverFlags)">
            <summary>
            <para>Saves a resource to disk to the given path, using a <see cref="T:Godot.ResourceFormatSaver"/> that recognizes the resource object.</para>
            <para>The <c>flags</c> bitmask can be specified to customize the save behavior.</para>
            <para>Returns  on success.</para>
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.GetRecognizedExtensions(Godot.Resource)">
            <summary>
            <para>Returns the list of extensions available for saving a resource of a given type.</para>
            </summary>
        </member>
        <member name="T:Godot.Semaphore">
            <summary>
            <para>A synchronization semaphore which can be used to synchronize multiple <see cref="T:Godot.Thread"/>s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see <see cref="T:Godot.Mutex"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Wait">
            <summary>
            <para>Waits for the <see cref="T:Godot.Semaphore"/>, if its value is zero, blocks until non-zero.</para>
            </summary>
        </member>
        <member name="M:Godot.Semaphore.TryWait">
            <summary>
            <para>Like <see cref="M:Godot.Semaphore.Wait"/>, but won't block, so if the value is zero, fails immediately and returns . If non-zero, it returns  to report success.</para>
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Post">
            <summary>
            <para>Lowers the <see cref="T:Godot.Semaphore"/>, allowing one more thread in.</para>
            </summary>
        </member>
        <member name="T:Godot.Thread">
            <summary>
            <para>A unit of execution in a process. Can run methods on <see cref="T:Godot.Object"/>s simultaneously. The use of synchronization via <see cref="T:Godot.Mutex"/> or <see cref="T:Godot.Semaphore"/> is advised if working with shared objects.</para>
            <para>Note: Breakpoints won't break on code if it's running in a thread. This is a current limitation of the GDScript debugger.</para>
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.Low">
            <summary>
            <para>A thread running with lower priority than normally.</para>
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.Normal">
            <summary>
            <para>A thread with a standard priority.</para>
            </summary>
        </member>
        <member name="F:Godot.Thread.Priority.High">
            <summary>
            <para>A thread running with higher priority than normally.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.Start(Godot.Object,Godot.StringName,System.Object,Godot.Thread.Priority)">
            <summary>
            <para>Starts a new <see cref="T:Godot.Thread"/> that runs <c>method</c> on object <c>instance</c> with <c>userdata</c> passed as an argument. Even if no userdata is passed, <c>method</c> must accept one argument and it will be null. The <c>priority</c> of the <see cref="T:Godot.Thread"/> can be changed by passing a value from the <see cref="T:Godot.Thread.Priority"/> enum.</para>
            <para>Returns  on success, or  on failure.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.GetId">
            <summary>
            <para>Returns the current <see cref="T:Godot.Thread"/>'s ID, uniquely identifying it among all threads. If the <see cref="T:Godot.Thread"/> is not running this returns an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.IsActive">
            <summary>
            <para>Returns <c>true</c> if this <see cref="T:Godot.Thread"/> is currently active. An active <see cref="T:Godot.Thread"/> cannot start work on a new method but can be joined with <see cref="M:Godot.Thread.WaitToFinish"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.Thread.WaitToFinish">
            <summary>
            <para>Joins the <see cref="T:Godot.Thread"/> and waits for it to finish. Returns what the method called returned.</para>
            </summary>
        </member>
    </members>
</doc>
