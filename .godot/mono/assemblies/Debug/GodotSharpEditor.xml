<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GodotSharpEditor</name>
    </assembly>
    <members>
        <member name="T:Godot.EditorDebuggerPlugin">
            <summary>
            <para>All debugger plugin scripts must extend <see cref="T:Godot.EditorDebuggerPlugin"/>. It provides functions related to editor side of debugger.</para>
            <para>You don't need to instantiate this class. That is handled by the debugger itself. <see cref="T:Godot.Control"/> nodes can be added as child nodes to provide a GUI front-end for the plugin.</para>
            <para>Do not queue_free/reparent it's instance otherwise the instance becomes unusable.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.SendMessage(System.String,Godot.Collections.Array)">
            <summary>
            <para>Sends a message with given <c>message</c> and <c>data</c> array.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.RegisterMessageCapture(Godot.StringName,Godot.Callable)">
            <summary>
            <para>Registers a message capture with given <c>name</c>. If <c>name</c> is "my_message" then messages starting with "my_message:" will be called with the given callable.</para>
            <para>Callable must accept a message string and a data array as argument. If the message and data are valid then callable must return <c>true</c> otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.UnregisterMessageCapture(Godot.StringName)">
            <summary>
            <para>Unregisters the message capture with given name.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.HasCapture(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if a message capture with given name is present otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.IsBreaked">
            <summary>
            <para>Returns <c>true</c> if the game is in break state otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.IsDebuggable">
            <summary>
            <para>Returns <c>true</c> if the game can be debugged otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorDebuggerPlugin.IsSessionActive">
            <summary>
            <para>Returns <c>true</c> if there is an instance of  the game running with the attached debugger otherwise <c>false</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorDebuggerPlugin.BreakedHandler">
            <summary>
            <para>Emitted when the game enters a break state.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorDebuggerPlugin.StoppedHandler">
            <summary>
            <para>Emitted when the debugging stops.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorDebuggerPlugin.StartedHandler">
            <summary>
            <para>Emitted when the debugging starts.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorDebuggerPlugin.ContinuedHandler">
            <summary>
            <para>Emitted when the game exists a break state.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorExportPlugin">
            <summary>
            <para>Editor export plugins are automatically activated whenever the user exports the project. Their most common use is to determine what files are being included in the exported project. For each plugin, <see cref="M:Godot.EditorExportPlugin._ExportBegin(System.String[],System.Boolean,System.String,System.Int32)"/> is called at the beginning of the export process and then <see cref="M:Godot.EditorExportPlugin._ExportFile(System.String,System.String,System.String[])"/> is called for each exported file.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin._ExportBegin(System.String[],System.Boolean,System.String,System.Int32)">
            <summary>
            <para>Virtual method to be overridden by the user. It is called when the export starts and provides all information about the export. <c>features</c> is the list of features for the export, <c>is_debug</c> is <c>true</c> for debug builds, <c>path</c> is the target path for the exported project. <c>flags</c> is only used when running a runnable profile, e.g. when using native run on Android.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin._ExportEnd">
            <summary>
            <para>Virtual method to be overridden by the user. Called when the export is finished.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin._ExportFile(System.String,System.String,System.String[])">
            <summary>
            <para>Virtual method to be overridden by the user. Called for each exported file, providing arguments that can be used to identify the file. <c>path</c> is the path of the file, <c>type</c> is the <see cref="T:Godot.Resource"/> represented by the file (e.g. <see cref="T:Godot.PackedScene"/>) and <c>features</c> is the list of features for the export.</para>
            <para>Calling <see cref="M:Godot.EditorExportPlugin.Skip"/> inside this callback will make the file not included in the export.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddSharedObject(System.String,System.String[])">
            <summary>
            <para>Adds a shared object with the given <c>tags</c> and destination <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosProjectStaticLib(System.String)">
            <summary>
            <para>Adds a static lib from the given <c>path</c> to the iOS project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            <para>Adds a custom file to be exported. <c>path</c> is the virtual path that can be used to load the file, <c>file</c> is the binary data of the file. If <c>remap</c> is <c>true</c>, file will not be exported, but instead remapped to the given <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosFramework(System.String)">
            <summary>
            <para>Adds a static library (*.a) or dynamic library (*.dylib, *.framework) to Linking Phase in iOS's Xcode project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosEmbeddedFramework(System.String)">
            <summary>
            <para>Adds a dynamic library (*.dylib, *.framework) to Linking Phase in iOS's Xcode project and embeds it into resulting binary.</para>
            <para>Note: For static libraries (*.a) works in same way as <c>add_ios_framework</c>.</para>
            <para>This method should not be used for System libraries as they are already present on the device.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosPlistContent(System.String)">
            <summary>
            <para>Adds content for iOS Property List files.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosLinkerFlags(System.String)">
            <summary>
            <para>Adds linker flags for the iOS export.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosBundleFile(System.String)">
            <summary>
            <para>Adds an iOS bundle file from the given <c>path</c> to the exported project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.AddIosCppCode(System.String)">
            <summary>
            <para>Adds a C++ code to the iOS export. The final code is created from the code appended by each active export plugin.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorExportPlugin.Skip">
            <summary>
            <para>To be called inside <see cref="M:Godot.EditorExportPlugin._ExportFile(System.String,System.String,System.String[])"/>. Skips the current file, so it's not included in the export.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFeatureProfile">
            <summary>
            <para>An editor feature profile can be used to disable specific features of the Godot editor. When disabled, the features won't appear in the editor, which makes the editor less cluttered. This is useful in education settings to reduce confusion or when working in a team. For example, artists and level designers could use a feature profile that disables the script editor to avoid accidentally making changes to files they aren't supposed to edit.</para>
            <para>To manage editor feature profiles visually, use Editor &gt; Manage Feature Profiles... at the top of the editor window.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.Feature3d">
            <summary>
            <para>The 3D editor. If this feature is disabled, the 3D editor won't display but 3D nodes will still display in the Create New Node dialog.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.Script">
            <summary>
            <para>The Script tab, which contains the script editor and class reference browser. If this feature is disabled, the Script tab won't display.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.AssetLib">
            <summary>
            <para>The AssetLib tab. If this feature is disabled, the AssetLib tab won't display.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.SceneTree">
            <summary>
            <para>Scene tree editing. If this feature is disabled, the Scene tree dock will still be visible but will be read-only.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.NodeDock">
            <summary>
            <para>The Node dock. If this feature is disabled, signals and groups won't be visible and modifiable from the editor.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.FilesystemDock">
            <summary>
            <para>The FileSystem dock. If this feature is disabled, the FileSystem dock won't be visible.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.ImportDock">
            <summary>
            <para>The Import dock. If this feature is disabled, the Import dock won't be visible.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFeatureProfile.Feature.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.EditorFeatureProfile.Feature"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.SetDisableClass(Godot.StringName,System.Boolean)">
            <summary>
            <para>If <c>disable</c> is <c>true</c>, disables the class specified by <c>class_name</c>. When disabled, the class won't appear in the Create New Node dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.IsClassDisabled(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if the class specified by <c>class_name</c> is disabled. When disabled, the class won't appear in the Create New Node dialog.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.SetDisableClassEditor(Godot.StringName,System.Boolean)">
            <summary>
            <para>If <c>disable</c> is <c>true</c>, disables editing for the class specified by <c>class_name</c>. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.IsClassEditorDisabled(Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if editing for the class specified by <c>class_name</c> is disabled. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.SetDisableClassProperty(Godot.StringName,Godot.StringName,System.Boolean)">
            <summary>
            <para>If <c>disable</c> is <c>true</c>, disables editing for <c>property</c> in the class specified by <c>class_name</c>. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by <c>class_name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.IsClassPropertyDisabled(Godot.StringName,Godot.StringName)">
            <summary>
            <para>Returns <c>true</c> if <c>property</c> is disabled in the class specified by <c>class_name</c>. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by <c>class_name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.SetDisableFeature(Godot.EditorFeatureProfile.Feature,System.Boolean)">
            <summary>
            <para>If <c>disable</c> is <c>true</c>, disables the editor feature specified in <c>feature</c>. When a feature is disabled, it will disappear from the editor entirely.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.IsFeatureDisabled(Godot.EditorFeatureProfile.Feature)">
            <summary>
            <para>Returns <c>true</c> if the <c>feature</c> is disabled. When a feature is disabled, it will disappear from the editor entirely.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.GetFeatureName(Godot.EditorFeatureProfile.Feature)">
            <summary>
            <para>Returns the specified <c>feature</c>'s human-readable name.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.SaveToFile(System.String)">
            <summary>
            <para>Saves the editor feature profile to a file in JSON format. It can then be imported using the feature profile manager's Import button or the <see cref="M:Godot.EditorFeatureProfile.LoadFromFile(System.String)"/> button.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFeatureProfile.LoadFromFile(System.String)">
            <summary>
            <para>Loads an editor feature profile from a file. The file must follow the JSON format obtained by using the feature profile manager's Export button or the <see cref="M:Godot.EditorFeatureProfile.SaveToFile(System.String)"/> method.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.DisplayModeEnum.Thumbnails">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> displays resources as thumbnails.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.DisplayModeEnum.List">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> displays resources as a list of filenames.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.FileModeEnum.OpenFile">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can select only one file. Accepting the window will open the file.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.FileModeEnum.OpenFiles">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can select multiple files. Accepting the window will open all files.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.FileModeEnum.OpenDir">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can select only one directory. Accepting the window will open the directory.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.FileModeEnum.OpenAny">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can select a file or directory. Accepting the window will open it.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.FileModeEnum.SaveFile">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can select only one file. Accepting the window will save the file.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.AccessEnum.Resources">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can only view <c>res://</c> directory contents.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.AccessEnum.Userdata">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can only view <c>user://</c> directory contents.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorFileDialog.AccessEnum.Filesystem">
            <summary>
            <para>The <see cref="T:Godot.EditorFileDialog"/> can view the entire local file system.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.Access">
            <summary>
            <para>The location from which the user may select a file, including <c>res://</c>, <c>user://</c>, and the local file system.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.DisplayMode">
            <summary>
            <para>The view format in which the <see cref="T:Godot.EditorFileDialog"/> displays resources to the user.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.FileMode">
            <summary>
            <para>The dialog's open or save mode, which affects the selection behavior. See <see cref="T:Godot.EditorFileDialog.FileModeEnum"/></para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.CurrentDir">
            <summary>
            <para>The currently occupied directory.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.CurrentFile">
            <summary>
            <para>The currently selected file.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.CurrentPath">
            <summary>
            <para>The file system path in the address bar.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.ShowHiddenFiles">
            <summary>
            <para>If <c>true</c>, hidden files and directories will be visible in the <see cref="T:Godot.EditorFileDialog"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorFileDialog.DisableOverwriteWarning">
            <summary>
            <para>If <c>true</c>, the <see cref="T:Godot.EditorFileDialog"/> will not warn the user before overwriting files.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileDialog.ClearFilters">
            <summary>
            <para>Removes all filters except for "All Files (*)".</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileDialog.AddFilter(System.String)">
            <summary>
            <para>Adds a comma-delimited file extension filter option to the <see cref="T:Godot.EditorFileDialog"/> with an optional semi-colon-delimited label.</para>
            <para>For example, <c>"*.tscn, *.scn; Scenes"</c> results in filter text "Scenes (*.tscn, *.scn)".</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileDialog.GetVbox">
            <summary>
            <para>Returns the <c>VBoxContainer</c> used to display the file system.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileDialog.Invalidate">
            <summary>
            <para>Notify the <see cref="T:Godot.EditorFileDialog"/> that its view of the data is no longer accurate. Updates the view contents on next view update.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileDialog.FilesSelectedHandler">
            <summary>
            <para>Emitted when multiple files are selected.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileDialog.DirSelectedHandler">
            <summary>
            <para>Emitted when a directory is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileDialog.FileSelectedHandler">
            <summary>
            <para>Emitted when a file is selected.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystem">
            <summary>
            <para>This object holds information of all resources in the filesystem, their types, etc.</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetResourceFilesystem"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.GetFilesystem">
            <summary>
            <para>Gets the root directory object.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.IsScanning">
            <summary>
            <para>Returns <c>true</c> of the filesystem is being scanned.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.GetScanningProgress">
            <summary>
            <para>Returns the scan progress for 0 to 1 if the FS is being scanned.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.Scan">
            <summary>
            <para>Scan the filesystem for changes.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.ScanSources">
            <summary>
            <para>Check if the source of any imported resource changed.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.UpdateFile(System.String)">
            <summary>
            <para>Update a file information. Call this if an external program (not Godot) modified the file.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.GetFilesystemPath(System.String)">
            <summary>
            <para>Returns a view into the filesystem at <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.GetFileType(System.String)">
            <summary>
            <para>Gets the type of the file, given the full path.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystem.UpdateScriptClasses">
            <summary>
            <para>Scans the script files and updates the list of custom class names.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystem.ResourcesReimportedHandler">
            <summary>
            <para>Remitted if a resource is reimported.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystem.SourcesChangedHandler">
            <summary>
            <para>Emitted if the source of any imported file changed.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystem.FilesystemChangedHandler">
            <summary>
            <para>Emitted if the filesystem changed.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystem.ResourcesReloadHandler">
            <summary>
            <para>Emitted if at least one resource is reloaded when the filesystem is scanned.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorFileSystemDirectory">
            <summary>
            <para>A more generalized, low-level variation of the directory concept.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetSubdirCount">
            <summary>
            <para>Returns the number of subdirectories in this directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetSubdir(System.Int32)">
            <summary>
            <para>Returns the subdirectory at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFileCount">
            <summary>
            <para>Returns the number of files in this directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFile(System.Int32)">
            <summary>
            <para>Returns the name of the file at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFilePath(System.Int32)">
            <summary>
            <para>Returns the path to the file at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFileType(System.Int32)">
            <summary>
            <para>Returns the file extension of the file at index <c>idx</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFileScriptClassName(System.Int32)">
            <summary>
            <para>Returns the name of the script class defined in the file at index <c>idx</c>. If the file doesn't define a script class using the <c>class_name</c> syntax, this will return an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFileScriptClassExtends(System.Int32)">
            <summary>
            <para>Returns the base class of the script class defined in the file at index <c>idx</c>. If the file doesn't define a script class using the <c>class_name</c> syntax, this will return an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetFileImportIsValid(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the file at index <c>idx</c> imported properly.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetName">
            <summary>
            <para>Returns the name of this directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetPath">
            <summary>
            <para>Returns the path to this directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.GetParent">
            <summary>
            <para>Returns the parent directory for this directory or <c>null</c> if called on a directory at <c>res://</c> or <c>user://</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.FindFileIndex(System.String)">
            <summary>
            <para>Returns the index of the file with name <c>name</c> or <c>-1</c> if not found.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorFileSystemDirectory.FindDirIndex(System.String)">
            <summary>
            <para>Returns the index of the directory with name <c>name</c> or <c>-1</c> if not found.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorImportPlugin">
            <summary>
            <para>EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your <see cref="T:Godot.EditorPlugin"/> with <see cref="M:Godot.EditorPlugin.AddImportPlugin(Godot.EditorImportPlugin)"/>.</para>
            <para>EditorImportPlugins work by associating with specific file extensions and a resource type. See <see cref="M:Godot.EditorImportPlugin.GetRecognizedExtensions"/> and <see cref="M:Godot.EditorImportPlugin.GetResourceType"/>. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the <c>.godot/imported</c> directory.</para>
            <para>Below is an example EditorImportPlugin that imports a <see cref="T:Godot.Mesh"/> from a file with the extension ".special" or ".spec":</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>tool</para>
            <para>extends EditorImportPlugin</para>
            <para></para>
            <para>func get_importer_name():</para>
            <para>    return "my.special.plugin"</para>
            <para></para>
            <para>func get_visible_name():</para>
            <para>    return "Special Mesh Importer"</para>
            <para></para>
            <para>func get_recognized_extensions():</para>
            <para>    return ["special", "spec"]</para>
            <para></para>
            <para>func get_save_extension():</para>
            <para>    return "mesh"</para>
            <para></para>
            <para>func get_resource_type():</para>
            <para>    return "Mesh"</para>
            <para></para>
            <para>func get_preset_count():</para>
            <para>    return 1</para>
            <para></para>
            <para>func get_preset_name(i):</para>
            <para>    return "Default"</para>
            <para></para>
            <para>func get_import_options(i):</para>
            <para>    return [{"name": "my_option", "default_value": false}]</para>
            <para></para>
            <para>func import(source_file, save_path, options, platform_variants, gen_files):</para>
            <para>    var file = File.new()</para>
            <para>    if file.open(source_file, File.READ) != OK:</para>
            <para>        return FAILED</para>
            <para>    var mesh = ArrayMesh.new()</para>
            <para>    # Fill the Mesh with data read in "file", left as an exercise to the reader.</para>
            <para></para>
            <para>    var filename = save_path + "." + get_save_extension()</para>
            <para>    ResourceSaver.save(filename, mesh)</para>
            <para>    return OK</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para></para>
            <para>public class MySpecialPlugin : EditorImportPlugin</para>
            <para>{</para>
            <para>    public override String GetImporterName()</para>
            <para>    {</para>
            <para>        return "my.special.plugin";</para>
            <para>    }</para>
            <para></para>
            <para>    public override String GetVisibleName()</para>
            <para>    {</para>
            <para>        return "Special Mesh Importer";</para>
            <para>    }</para>
            <para></para>
            <para>    public override Godot.Collections.Array GetRecognizedExtensions()</para>
            <para>    {</para>
            <para>        return new Godot.Collections.Array{"special", "spec"};</para>
            <para>    }</para>
            <para></para>
            <para>    public override String GetSaveExtension()</para>
            <para>    {</para>
            <para>        return "mesh";</para>
            <para>    }</para>
            <para></para>
            <para>    public override String GetResourceType()</para>
            <para>    {</para>
            <para>        return "Mesh";</para>
            <para>    }</para>
            <para></para>
            <para>    public override int GetPresetCount()</para>
            <para>    {</para>
            <para>        return 1;</para>
            <para>    }</para>
            <para></para>
            <para>    public override String GetPresetName(int i)</para>
            <para>    {</para>
            <para>        return "Default";</para>
            <para>    }</para>
            <para></para>
            <para>    public override Godot.Collections.Array GetImportOptions(int i)</para>
            <para>    {</para>
            <para>        return new Godot.Collections.Array{new Godot.Collections.Dictionary{{"name", "myOption"}, {"defaultValue", false}}};</para>
            <para>    }</para>
            <para></para>
            <para>    public override int Import(String sourceFile, String savePath, Godot.Collections.Dictionary options, Godot.Collections.Array platformVariants, Godot.Collections.Array  genFiles)</para>
            <para>    {</para>
            <para>        var file = new File();</para>
            <para>        if (file.Open(sourceFile, File.ModeFlags.Read) != Error.Ok)</para>
            <para>        {</para>
            <para>            return (int)Error.Failed;</para>
            <para>        }</para>
            <para></para>
            <para>        var mesh = new ArrayMesh();</para>
            <para>        // Fill the Mesh with data read in "file", left as an exercise to the reader.</para>
            <para>        String filename = savePath + "." + GetSaveExtension();</para>
            <para>        ResourceSaver.Save(filename, mesh);</para>
            <para>        return (int)Error.Ok;</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetImportOptions(System.Int32)">
            <summary>
            <para>Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: <c>name</c>, <c>default_value</c>, <c>property_hint</c> (optional), <c>hint_string</c> (optional), <c>usage</c> (optional).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetImportOrder">
            <summary>
            <para>Gets the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetImporterName">
            <summary>
            <para>Gets the unique name of the importer.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetOptionVisibility(System.String,Godot.Collections.Dictionary)">
            <summary>
            <para>This method can be overridden to hide specific import options if conditions are met. This is mainly useful for hiding options that depend on others if one of them is disabled. For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func get_option_visibility(option, options):</para>
            <para>    # Only show the lossy quality setting if the compression mode is set to "Lossy".</para>
            <para>    if option == "compress/lossy_quality" and options.has("compress/mode"):</para>
            <para>        return int(options["compress/mode"]) == COMPRESS_LOSSY # This is a constant that you set</para>
            <para></para>
            <para>    return true</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public void GetOptionVisibility(string option, Godot.Collections.Dictionary options)</para>
            <para>{</para>
            <para>    // Only show the lossy quality setting if the compression mode is set to "Lossy".</para>
            <para>    if (option == "compress/lossyQuality" &amp;&amp; options.Contains("compress/mode"))</para>
            <para>    {</para>
            <para>        return (int)options["compress/mode"] == COMPRESS_LOSSY; // This is a constant you set</para>
            <para>    }</para>
            <para></para>
            <para>    return true;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Return <c>true</c> to make all options always visible.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetPresetCount">
            <summary>
            <para>Gets the number of initial presets defined by the plugin. Use <see cref="M:Godot.EditorImportPlugin.GetImportOptions(System.Int32)"/> to get the default options for the preset and <see cref="M:Godot.EditorImportPlugin.GetPresetName(System.Int32)"/> to get the name of the preset.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetPresetName(System.Int32)">
            <summary>
            <para>Gets the name of the options preset at this index.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetPriority">
            <summary>
            <para>Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is <c>1.0</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetRecognizedExtensions">
            <summary>
            <para>Gets the list of file extensions to associate with this loader (case-insensitive). e.g. <c>["obj"]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetResourceType">
            <summary>
            <para>Gets the Godot resource type associated with this loader. e.g. <c>"Mesh"</c> or <c>"Animation"</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetSaveExtension">
            <summary>
            <para>Gets the extension used to save this resource in the <c>.godot/imported</c> directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.GetVisibleName">
            <summary>
            <para>Gets the name to display in the import window.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorImportPlugin.Import(System.String,System.String,Godot.Collections.Dictionary,Godot.Collections.Array,Godot.Collections.Array)">
            <summary>
            <para>Imports <c>source_file</c> into <c>save_path</c> with the import <c>options</c> specified. The <c>platform_variants</c> and <c>gen_files</c> arrays will be modified by this function.</para>
            <para>This method must be overridden to do the actual importing work. See this class' description for an example of overriding this method.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector">
            <summary>
            <para>The editor inspector is by default located on the right-hand side of the editor. It's used to edit the properties of the selected node. For example, you can select a node such as the Sprite2D then edit its transform through the inspector tool. The editor inspector is an essential tool in the game development workflow.</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetInspector"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspector.Refresh">
            <summary>
            <para>Refreshes the inspector.</para>
            <para>Note: To save on CPU resources, calling this method will do nothing if the time specified in <c>docks/property_editor/auto_refresh_interval</c> editor setting hasn't passed yet since this method was last called. (By default, this interval is set to 0.3 seconds.)</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.PropertyEditedHandler">
            <summary>
            <para>Emitted when a property is edited in the inspector.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.ObjectIdSelectedHandler">
            <summary>
            <para>Emitted when the Edit button of an <see cref="T:Godot.Object"/> has been pressed in the inspector. This is mainly used in the remote scene tree inspector.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.PropertyDeletedHandler">
            <summary>
            <para>Emitted when a property is removed from the inspector.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.PropertySelectedHandler">
            <summary>
            <para>Emitted when a property is selected in the inspector.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.RestartRequestedHandler">
            <summary>
            <para>Emitted when a property that requires a restart to be applied is edited in the inspector. This is only used in the Project Settings and Editor Settings.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.PropertyKeyedHandler">
            <summary>
            <para>Emitted when a property is keyed in the inspector. Properties can be keyed by clicking the "key" icon next to a property when the Animation panel is toggled.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.ResourceSelectedHandler">
            <summary>
            <para>Emitted when a resource is selected in the inspector.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspector.PropertyToggledHandler">
            <summary>
            <para>Emitted when a boolean property is toggled in the inspector.</para>
            <para>Note: This signal is never emitted if the internal <c>autoclear</c> property enabled. Since this property is always enabled in the editor inspector, this signal is never emitted by the editor itself.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInspectorPlugin">
            <summary>
            <para>This plugins allows adding custom property editors to <see cref="T:Godot.EditorInspector"/>.</para>
            <para>Plugins are registered via <see cref="M:Godot.EditorPlugin.AddInspectorPlugin(Godot.EditorInspectorPlugin)"/>.</para>
            <para>When an object is edited, the <see cref="M:Godot.EditorInspectorPlugin.CanHandle(Godot.Object)"/> function is called and must return <c>true</c> if the object type is supported.</para>
            <para>If supported, the function <see cref="M:Godot.EditorInspectorPlugin.ParseBegin(Godot.Object)"/> will be called, allowing to place custom controls at the beginning of the class.</para>
            <para>Subsequently, the <see cref="M:Godot.EditorInspectorPlugin.ParseCategory(Godot.Object,System.String)"/> and <see cref="M:Godot.EditorInspectorPlugin.ParseProperty(Godot.Object,System.Int32,System.String,System.Int32,System.String,System.Int32)"/> are called for every category and property. They offer the ability to add custom controls to the inspector too.</para>
            <para>Finally <see cref="M:Godot.EditorInspectorPlugin.ParseEnd"/> will be called.</para>
            <para>On each of these calls, the "add" functions can be called.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.CanHandle(Godot.Object)">
            <summary>
            <para>Returns <c>true</c> if this object can be handled by this plugin.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.ParseBegin(Godot.Object)">
            <summary>
            <para>Called to allow adding controls at the beginning of the list.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.ParseCategory(Godot.Object,System.String)">
            <summary>
            <para>Called to allow adding controls at the beginning of the category.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.ParseEnd">
            <summary>
            <para>Called to allow adding controls at the end of the list.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.ParseProperty(Godot.Object,System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            <para>Called to allow adding property specific editors to the inspector. Usually these inherit <see cref="T:Godot.EditorProperty"/>. Returning <c>true</c> removes the built-in editor for this property, otherwise allows to insert a custom editor before the built-in one.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.AddCustomControl(Godot.Control)">
            <summary>
            <para>Adds a custom control, not necessarily a property editor.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.AddPropertyEditor(System.String,Godot.Control)">
            <summary>
            <para>Adds a property editor, this must inherit <see cref="T:Godot.EditorProperty"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInspectorPlugin.AddPropertyEditorForMultipleProperties(System.String,System.String[],Godot.Control)">
            <summary>
            <para>Adds an editor that allows modifying multiple properties, this must inherit <see cref="T:Godot.EditorProperty"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorInterface">
            <summary>
            <para>EditorInterface gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to <see cref="T:Godot.EditorSettings"/>, <see cref="T:Godot.EditorFileSystem"/>, <see cref="T:Godot.EditorResourcePreview"/>, <see cref="T:Godot.ScriptEditor"/>, the editor viewport, and information about scenes.</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorPlugin.GetEditorInterface"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorInterface.DistractionFreeMode">
            <summary>
            <para>If <c>true</c>, enables distraction-free mode which hides side docks to increase the space available for the main view.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.InspectObject(Godot.Object,System.String,System.Boolean)">
            <summary>
            <para>Shows the given property on the given <c>object</c> in the editor's Inspector dock. If <c>inspector_only</c> is <c>true</c>, plugins will not attempt to edit <c>object</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetSelection">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.EditorSelection"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetEditorSettings">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.EditorSettings"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetScriptEditor">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.ScriptEditor"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetBaseControl">
            <summary>
            <para>Returns the main container of Godot editor's window. For example, you can use it to retrieve the size of the container and place your controls accordingly.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.EditResource(Godot.Resource)">
            <summary>
            <para>Edits the given <see cref="T:Godot.Resource"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.OpenSceneFromPath(System.String)">
            <summary>
            <para>Opens the scene at the given path.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.ReloadSceneFromPath(System.String)">
            <summary>
            <para>Reloads the scene at the given path.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.PlayMainScene">
            <summary>
            <para>Plays the main scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.PlayCurrentScene">
            <summary>
            <para>Plays the currently active scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.PlayCustomScene(System.String)">
            <summary>
            <para>Plays the scene specified by its filepath.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.StopPlayingScene">
            <summary>
            <para>Stops the scene that is currently playing.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.IsPlayingScene">
            <summary>
            <para>Returns <c>true</c> if a scene is currently being played, <c>false</c> otherwise. Paused scenes are considered as being played.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetPlayingScene">
            <summary>
            <para>Returns the name of the scene that is being played. If no scene is currently being played, returns an empty string.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetOpenScenes">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> with the file paths of the currently opened scenes.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetEditedSceneRoot">
            <summary>
            <para>Returns the edited (current) scene's root <see cref="T:Godot.Node"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetResourcePreviewer">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.EditorResourcePreview"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetResourceFilesystem">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.EditorFileSystem"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetEditorMainControl">
            <summary>
            <para>Returns the main editor control. Use this as a parent for main screens.</para>
            <para>Note: This returns the main editor control containing the whole editor, not the 2D or 3D viewports specifically.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.MakeMeshPreviews(Godot.Collections.Array,System.Int32)">
            <summary>
            <para>Returns mesh previews rendered at the given size as an <see cref="T:Godot.Collections.Array"/> of <see cref="T:Godot.Texture2D"/>s.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.SelectFile(System.String)">
            <summary>
            <para>Selects the file, with the path provided by <c>file</c>, in the FileSystem dock.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetSelectedPath">
            <summary>
            <para>Returns the path of the directory currently selected in the <see cref="T:Godot.FileSystemDock"/>. If a file is selected, its base directory will be returned using <c>String.get_base_dir</c> instead.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetCurrentPath">
            <summary>
            <para>Returns the current path being viewed in the <see cref="T:Godot.FileSystemDock"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetFileSystemDock">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.FileSystemDock"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.SetPluginEnabled(System.String,System.Boolean)">
            <summary>
            <para>Sets the enabled status of a plugin. The plugin name is the same as its directory name.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.IsPluginEnabled(System.String)">
            <summary>
            <para>Returns <c>true</c> if the specified <c>plugin</c> is enabled. The plugin name is the same as its directory name.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.GetInspector">
            <summary>
            <para>Returns the editor's <see cref="T:Godot.EditorInspector"/> instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.SaveScene">
            <summary>
            <para>Saves the scene. Returns either <c>OK</c> or <c>ERR_CANT_CREATE</c> (see <c>@GlobalScope</c> constants).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.SaveSceneAs(System.String,System.Boolean)">
            <summary>
            <para>Saves the scene as a file at <c>path</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorInterface.SetMainScreenEditor(System.String)">
            <summary>
            <para>Sets the editor's current main screen to the one specified in <c>name</c>. <c>name</c> must match the text of the tab in question exactly (<c>2D</c>, <c>3D</c>, <c>Script</c>, <c>AssetLib</c>).</para>
            </summary>
        </member>
        <member name="T:Godot.EditorNode3DGizmo">
            <summary>
            <para>Custom gizmo that is used for providing custom visualization and editing (handles) for Node3D objects. See <see cref="T:Godot.EditorNode3DGizmoPlugin"/> for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.CommitHandle(System.Int32,System.Object,System.Boolean)">
            <summary>
            <para>Commit a handle being edited (handles must have been previously added by <see cref="M:Godot.EditorNode3DGizmo.AddHandles(Godot.Vector3[],Godot.Material,System.Boolean,System.Boolean)"/>).</para>
            <para>If the <c>cancel</c> parameter is <c>true</c>, an option to restore the edited value to the original is provided.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.GetHandleName(System.Int32)">
            <summary>
            <para>Gets the name of an edited handle (handles must have been previously added by <see cref="M:Godot.EditorNode3DGizmo.AddHandles(Godot.Vector3[],Godot.Material,System.Boolean,System.Boolean)"/>).</para>
            <para>Handles can be named for reference to the user when editing.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.GetHandleValue(System.Int32)">
            <summary>
            <para>Gets actual value of a handle. This value can be anything and used for eventually undoing the motion when calling <see cref="M:Godot.EditorNode3DGizmo.CommitHandle(System.Int32,System.Object,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.IsHandleHighlighted(System.Int32)">
            <summary>
            <para>Returns <c>true</c> if the handle at index <c>index</c> is highlighted by being hovered with the mouse.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.Redraw">
            <summary>
            <para>This function is called when the <see cref="T:Godot.Node3D"/> this gizmo refers to changes (the <see cref="M:Godot.Node3D.UpdateGizmo"/> is called).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.SetHandle(System.Int32,Godot.Camera3D,Godot.Vector2)">
            <summary>
            <para>This function is used when the user drags a gizmo handle (previously added with <see cref="M:Godot.EditorNode3DGizmo.AddHandles(Godot.Vector3[],Godot.Material,System.Boolean,System.Boolean)"/>) in screen coordinates.</para>
            <para>The <see cref="T:Godot.Camera3D"/> is also provided so screen coordinates can be converted to raycasts.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddLines(Godot.Vector3[],Godot.Material,System.Boolean,System.Nullable{Godot.Color})">
            <summary>
            <para>Adds lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddMesh(Godot.ArrayMesh,System.Boolean,Godot.SkinReference,Godot.Material)">
            <summary>
            <para>Adds a mesh to the gizmo with the specified <c>billboard</c> state, <c>skeleton</c> and <c>material</c>. If <c>billboard</c> is <c>true</c>, the mesh will rotate to always face the camera. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddCollisionSegments(Godot.Vector3[])">
            <summary>
            <para>Adds the specified <c>segments</c> to the gizmo's collision shape for picking. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddCollisionTriangles(Godot.TriangleMesh)">
            <summary>
            <para>Adds collision triangles to the gizmo for picking. A <see cref="T:Godot.TriangleMesh"/> can be generated from a regular <see cref="T:Godot.Mesh"/> too. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddUnscaledBillboard(Godot.Material,System.Single,System.Nullable{Godot.Color})">
            <summary>
            <para>Adds an unscaled billboard for visualization. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
            <param name="modulate">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.AddHandles(Godot.Vector3[],Godot.Material,System.Boolean,System.Boolean)">
            <summary>
            <para>Adds a list of handles (points) which can be used to deform the object being edited.</para>
            <para>There are virtual functions which will be called upon editing of these handles. Call this function during <see cref="M:Godot.EditorNode3DGizmo.Redraw"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.SetSpatialNode(Godot.Node)">
            <summary>
            <para>Sets the reference <see cref="T:Godot.Node3D"/> node for the gizmo. <c>node</c> must inherit from <see cref="T:Godot.Node3D"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.GetSpatialNode">
            <summary>
            <para>Returns the Node3D node associated with this gizmo.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.GetPlugin">
            <summary>
            <para>Returns the <see cref="T:Godot.EditorNode3DGizmoPlugin"/> that owns this gizmo. It's useful to retrieve materials using <see cref="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.Clear">
            <summary>
            <para>Removes everything in the gizmo including meshes, collisions and handles.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmo.SetHidden(System.Boolean)">
            <summary>
            <para>Sets the gizmo's hidden state. If <c>true</c>, the gizmo will be hidden. If <c>false</c>, it will be shown.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorNode3DGizmoPlugin">
            <summary>
            <para>EditorNode3DGizmoPlugin allows you to define a new type of Gizmo. There are two main ways to do so: extending <see cref="T:Godot.EditorNode3DGizmoPlugin"/> for the simpler gizmos, or creating a new <see cref="T:Godot.EditorNode3DGizmo"/> type. See the tutorial in the documentation for more info.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CanBeHidden">
            <summary>
            <para>Override this method to define whether the gizmo can be hidden or not. Returns <c>true</c> if not overridden.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CommitHandle(Godot.EditorNode3DGizmo,System.Int32,System.Object,System.Boolean)">
            <summary>
            <para>Override this method to commit gizmo handles. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CreateGizmo(Godot.Node3D)">
            <summary>
            <para>Override this method to return a custom <see cref="T:Godot.EditorNode3DGizmo"/> for the spatial nodes of your choice, return <c>null</c> for the rest of nodes. See also <see cref="M:Godot.EditorNode3DGizmoPlugin.HasGizmo(Godot.Node3D)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.GetHandleName(Godot.EditorNode3DGizmo,System.Int32)">
            <summary>
            <para>Override this method to provide gizmo's handle names. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.GetHandleValue(Godot.EditorNode3DGizmo,System.Int32)">
            <summary>
            <para>Gets actual value of a handle from gizmo. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.GetName">
            <summary>
            <para>Override this method to provide the name that will appear in the gizmo visibility menu.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.GetPriority">
            <summary>
            <para>Override this method to set the gizmo's priority. Higher values correspond to higher priority. If a gizmo with higher priority conflicts with another gizmo, only the gizmo with higher priority will be used.</para>
            <para>All built-in editor gizmos return a priority of <c>-1</c>. If not overridden, this method will return <c>0</c>, which means custom gizmos will automatically override built-in gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.HasGizmo(Godot.Node3D)">
            <summary>
            <para>Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a <see cref="T:Godot.Node3D"/> node is added to a scene this method is called, if it returns <c>true</c> the node gets a generic <see cref="T:Godot.EditorNode3DGizmo"/> assigned and is added to this plugin's list of active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.IsHandleHighlighted(Godot.EditorNode3DGizmo,System.Int32)">
            <summary>
            <para>Gets whether a handle is highlighted or not. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.IsSelectableWhenHidden">
            <summary>
            <para>Override this method to define whether Node3D with this gizmo should be selecteble even when the gizmo is hidden.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.Redraw(Godot.EditorNode3DGizmo)">
            <summary>
            <para>Callback to redraw the provided gizmo. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.SetHandle(Godot.EditorNode3DGizmo,System.Int32,Godot.Camera3D,Godot.Vector2)">
            <summary>
            <para>Update the value of a handle after it has been updated. Called for this plugin's active gizmos.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CreateMaterial(System.String,Godot.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with <see cref="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)"/> and used in <see cref="M:Godot.EditorNode3DGizmo.AddMesh(Godot.ArrayMesh,System.Boolean,Godot.SkinReference,Godot.Material)"/> and <see cref="M:Godot.EditorNode3DGizmo.AddLines(Godot.Vector3[],Godot.Material,System.Boolean,System.Nullable{Godot.Color})"/>. Should not be overridden.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CreateIconMaterial(System.String,Godot.Texture2D,System.Boolean,System.Nullable{Godot.Color})">
            <summary>
            <para>Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with <see cref="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)"/> and used in <see cref="M:Godot.EditorNode3DGizmo.AddUnscaledBillboard(Godot.Material,System.Single,System.Nullable{Godot.Color})"/>. Should not be overridden.</para>
            </summary>
            <param name="color">If the parameter is null, then the default value is new Color(1, 1, 1, 1)</param>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.CreateHandleMaterial(System.String,System.Boolean,Godot.Texture2D)">
            <summary>
            <para>Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with <see cref="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)"/> and used in <see cref="M:Godot.EditorNode3DGizmo.AddHandles(Godot.Vector3[],Godot.Material,System.Boolean,System.Boolean)"/>. Should not be overridden.</para>
            <para>You can optionally provide a texture to use instead of the default icon.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.AddMaterial(System.String,Godot.StandardMaterial3D)">
            <summary>
            <para>Adds a new material to the internal material list for the plugin. It can then be accessed with <see cref="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)"/>. Should not be overridden.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorNode3DGizmoPlugin.GetMaterial(System.String,Godot.EditorNode3DGizmo)">
            <summary>
            <para>Gets material from the internal list of materials. If an <see cref="T:Godot.EditorNode3DGizmo"/> is provided, it will try to get the corresponding variant (selected and/or editable).</para>
            </summary>
        </member>
        <member name="T:Godot.EditorPlugin">
            <summary>
            <para>Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also <see cref="T:Godot.EditorScript"/> to add functions to the editor.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorPlugin.DockSlot.Max">
            <summary>
            <para>Represents the size of the <see cref="T:Godot.EditorPlugin.DockSlot"/> enum.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ApplyChanges">
            <summary>
            <para>This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.</para>
            <para>This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.Clear">
            <summary>
            <para>Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.DisablePlugin">
            <summary>
            <para>Called by the engine when the user disables the <see cref="T:Godot.EditorPlugin"/> in the Plugin tab of the project settings window.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.Edit(Godot.Object)">
            <summary>
            <para>This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.EnablePlugin">
            <summary>
            <para>Called by the engine when the user enables the <see cref="T:Godot.EditorPlugin"/> in the Plugin tab of the project settings window.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardCanvasDrawOverViewport(Godot.Control)">
            <summary>
            <para>Called by the engine when the 2D editor's viewport is updated. Use the <c>overlay</c> <see cref="T:Godot.Control"/> for drawing. You can update the viewport manually by calling <see cref="M:Godot.EditorPlugin.UpdateOverlays"/>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func forward_canvas_draw_over_viewport(overlay):</para>
            <para>    # Draw a circle at cursor position.</para>
            <para>    overlay.draw_circle(overlay.get_local_mouse_position(), 64)</para>
            <para></para>
            <para>func forward_canvas_gui_input(event):</para>
            <para>    if event is InputEventMouseMotion:</para>
            <para>        # Redraw viewport when cursor is moved.</para>
            <para>        update_overlays()</para>
            <para>        return true</para>
            <para>    return false</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void ForwardCanvasDrawOverViewport(Godot.Control overlay)</para>
            <para>{</para>
            <para>    // Draw a circle at cursor position.</para>
            <para>    overlay.DrawCircle(overlay.GetLocalMousePosition(), 64, Colors.White);</para>
            <para>}</para>
            <para></para>
            <para>public override bool ForwardCanvasGuiInput(InputEvent @event)</para>
            <para>{</para>
            <para>    if (@event is InputEventMouseMotion)</para>
            <para>    {</para>
            <para>        // Redraw viewport when cursor is moved.</para>
            <para>        UpdateOverlays();</para>
            <para>        return true;</para>
            <para>    }</para>
            <para>    return false;</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardCanvasForceDrawOverViewport(Godot.Control)">
            <summary>
            <para>This method is the same as <see cref="M:Godot.EditorPlugin.ForwardCanvasDrawOverViewport(Godot.Control)"/>, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.</para>
            <para>You need to enable calling of this method by using <see cref="M:Godot.EditorPlugin.SetForceDrawOverForwardingEnabled"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardCanvasGuiInput(Godot.InputEvent)">
            <summary>
            <para>Called when there is a root node in the current edited scene, <see cref="M:Godot.EditorPlugin.Handles(Godot.Object)"/> is implemented and an <see cref="T:Godot.InputEvent"/> happens in the 2D viewport. Intercepts the <see cref="T:Godot.InputEvent"/>, if <c>return true</c> <see cref="T:Godot.EditorPlugin"/> consumes the <c>event</c>, otherwise forwards <c>event</c> to other Editor classes. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Prevents the InputEvent to reach other Editor classes</para>
            <para>func forward_canvas_gui_input(event):</para>
            <para>    return true</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Prevents the InputEvent to reach other Editor classes</para>
            <para>public override bool ForwardCanvasGuiInput(InputEvent @event)</para>
            <para>{</para>
            <para>    return true;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Must <c>return false</c> in order to forward the <see cref="T:Godot.InputEvent"/> to other Editor classes. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Consumes InputEventMouseMotion and forwards other InputEvent types.</para>
            <para>func forward_canvas_gui_input(event):</para>
            <para>    return event is InputEventMouseMotion</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Consumes InputEventMouseMotion and forwards other InputEvent types.</para>
            <para>public override bool ForwardCanvasGuiInput(InputEvent @event)</para>
            <para>{</para>
            <para>    return @event is InputEventMouseMotion;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardSpatialDrawOverViewport(Godot.Control)">
            <summary>
            <para>Called by the engine when the 3D editor's viewport is updated. Use the <c>overlay</c> <see cref="T:Godot.Control"/> for drawing. You can update the viewport manually by calling <see cref="M:Godot.EditorPlugin.UpdateOverlays"/>.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func forward_spatial_draw_over_viewport(overlay):</para>
            <para>    # Draw a circle at cursor position.</para>
            <para>    overlay.draw_circle(overlay.get_local_mouse_position(), 64)</para>
            <para></para>
            <para>func forward_spatial_gui_input(camera, event):</para>
            <para>    if event is InputEventMouseMotion:</para>
            <para>        # Redraw viewport when cursor is moved.</para>
            <para>        update_overlays()</para>
            <para>        return true</para>
            <para>    return false</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void ForwardSpatialDrawOverViewport(Godot.Control overlay)</para>
            <para>{</para>
            <para>    // Draw a circle at cursor position.</para>
            <para>    overlay.DrawCircle(overlay.GetLocalMousePosition(), 64, Colors.White);</para>
            <para>}</para>
            <para></para>
            <para>public override bool ForwardSpatialGuiInput(Godot.Camera3D camera, InputEvent @event)</para>
            <para>{</para>
            <para>    if (@event is InputEventMouseMotion)</para>
            <para>    {</para>
            <para>        // Redraw viewport when cursor is moved.</para>
            <para>        UpdateOverlays();</para>
            <para>        return true;</para>
            <para>    }</para>
            <para>    return false;</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardSpatialForceDrawOverViewport(Godot.Control)">
            <summary>
            <para>This method is the same as <see cref="M:Godot.EditorPlugin.ForwardSpatialDrawOverViewport(Godot.Control)"/>, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.</para>
            <para>You need to enable calling of this method by using <see cref="M:Godot.EditorPlugin.SetForceDrawOverForwardingEnabled"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.ForwardSpatialGuiInput(Godot.Camera3D,Godot.InputEvent)">
            <summary>
            <para>Called when there is a root node in the current edited scene, <see cref="M:Godot.EditorPlugin.Handles(Godot.Object)"/> is implemented and an <see cref="T:Godot.InputEvent"/> happens in the 3D viewport. Intercepts the <see cref="T:Godot.InputEvent"/>, if <c>return true</c> <see cref="T:Godot.EditorPlugin"/> consumes the <c>event</c>, otherwise forwards <c>event</c> to other Editor classes. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Prevents the InputEvent to reach other Editor classes.</para>
            <para>func forward_spatial_gui_input(camera, event):</para>
            <para>    return true</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Prevents the InputEvent to reach other Editor classes.</para>
            <para>public override bool ForwardSpatialGuiInput(Camera3D camera, InputEvent @event)</para>
            <para>{</para>
            <para>    return true;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Must <c>return false</c> in order to forward the <see cref="T:Godot.InputEvent"/> to other Editor classes. Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># Consumes InputEventMouseMotion and forwards other InputEvent types.</para>
            <para>func forward_spatial_gui_input(camera, event):</para>
            <para>    return event is InputEventMouseMotion</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// Consumes InputEventMouseMotion and forwards other InputEvent types.</para>
            <para>public override bool ForwardSpatialGuiInput(Camera3D camera, InputEvent @event)</para>
            <para>{</para>
            <para>    return @event is InputEventMouseMotion;</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetBreakpoints">
            <summary>
            <para>This is for editors that edit script-based objects. You can return a list of breakpoints in the format (<c>script:line</c>), for example: <c>res://path_to_script.gd:25</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetPluginIcon">
            <summary>
            <para>Override this method in your plugin to return a <see cref="T:Godot.Texture2D"/> in order to give it an icon.</para>
            <para>For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.</para>
            <para>Ideally, the plugin icon should be white with a transparent background and 16x16 pixels in size.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func get_plugin_icon():</para>
            <para>    # You can use a custom icon:</para>
            <para>    return preload("res://addons/my_plugin/my_plugin_icon.svg")</para>
            <para>    # Or use a built-in icon:</para>
            <para>    return get_editor_interface().get_base_control().get_icon("Node", "EditorIcons")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override Texture2D GetPluginIcon()</para>
            <para>{</para>
            <para>    // You can use a custom icon:</para>
            <para>    return ResourceLoader.Load&lt;Texture2D&gt;("res://addons/my_plugin/my_plugin_icon.svg");</para>
            <para>    // Or use a built-in icon:</para>
            <para>    return GetEditorInterface().GetBaseControl().GetIcon("Node", "EditorIcons");</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetPluginName">
            <summary>
            <para>Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.</para>
            <para>For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetState">
            <summary>
            <para>Gets the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetWindowLayout(Godot.ConfigFile)">
            <summary>
            <para>Gets the GUI layout of the plugin. This is used to save the project's editor layout when <see cref="M:Godot.EditorPlugin.QueueSaveLayout"/> is called or the editor layout was changed(For example changing the position of a dock).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.Handles(Godot.Object)">
            <summary>
            <para>Implement this function if your plugin edits a specific type of object (Resource or Node). If you return <c>true</c>, then you will get the functions <see cref="M:Godot.EditorPlugin.Edit(Godot.Object)"/> and <see cref="M:Godot.EditorPlugin.MakeVisible(System.Boolean)"/> called when the editor requests them. If you have declared the methods <see cref="M:Godot.EditorPlugin.ForwardCanvasGuiInput(Godot.InputEvent)"/> and <see cref="M:Godot.EditorPlugin.ForwardSpatialGuiInput(Godot.Camera3D,Godot.InputEvent)"/> these will be called too.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.HasMainScreen">
            <summary>
            <para>Returns <c>true</c> if this is a main screen editor plugin (it goes in the workspace selector together with 2D, 3D, Script and AssetLib).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.MakeVisible(System.Boolean)">
            <summary>
            <para>This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.</para>
            <para>Remember that you have to manage the visibility of all your editor controls manually.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.SaveExternalData">
            <summary>
            <para>This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.SetState(Godot.Collections.Dictionary)">
            <summary>
            <para>Restore the state saved by <see cref="M:Godot.EditorPlugin.GetState"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.SetWindowLayout(Godot.ConfigFile)">
            <summary>
            <para>Restore the plugin GUI layout saved by <see cref="M:Godot.EditorPlugin.GetWindowLayout(Godot.ConfigFile)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddControlToContainer(Godot.EditorPlugin.CustomControlContainer,Godot.Control)">
            <summary>
            <para>Adds a custom control to a container (see <see cref="T:Godot.EditorPlugin.CustomControlContainer"/>). There are many locations where custom controls can be added in the editor UI.</para>
            <para>Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).</para>
            <para>When your plugin is deactivated, make sure to remove your custom control with <see cref="M:Godot.EditorPlugin.RemoveControlFromContainer(Godot.EditorPlugin.CustomControlContainer,Godot.Control)"/> and free it with <see cref="M:Godot.Node.QueueFree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddControlToBottomPanel(Godot.Control,System.String)">
            <summary>
            <para>Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with <see cref="M:Godot.EditorPlugin.RemoveControlFromBottomPanel(Godot.Control)"/> and free it with <see cref="M:Godot.Node.QueueFree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddControlToDock(Godot.EditorPlugin.DockSlot,Godot.Control)">
            <summary>
            <para>Adds the control to a specific dock slot (see <see cref="T:Godot.EditorPlugin.DockSlot"/> for options).</para>
            <para>If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.</para>
            <para>When your plugin is deactivated, make sure to remove your custom control with <see cref="M:Godot.EditorPlugin.RemoveControlFromDocks(Godot.Control)"/> and free it with <see cref="M:Godot.Node.QueueFree"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveControlFromDocks(Godot.Control)">
            <summary>
            <para>Removes the control from the dock. You have to manually <see cref="M:Godot.Node.QueueFree"/> the control.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveControlFromBottomPanel(Godot.Control)">
            <summary>
            <para>Removes the control from the bottom panel. You have to manually <see cref="M:Godot.Node.QueueFree"/> the control.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveControlFromContainer(Godot.EditorPlugin.CustomControlContainer,Godot.Control)">
            <summary>
            <para>Removes the control from the specified container. You have to manually <see cref="M:Godot.Node.QueueFree"/> the control.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddToolMenuItem(System.String,Godot.Callable)">
            <summary>
            <para>Adds a custom menu item to Project &gt; Tools named <c>name</c>. When clicked, the provided <c>callable</c> will be called.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddToolSubmenuItem(System.String,Godot.Object)">
            <summary>
            <para>Adds a custom submenu under Project &gt; Tools &gt; <c>name</c>. <c>submenu</c> should be an object of class <see cref="T:Godot.PopupMenu"/>. Use <c>remove_tool_menu_item(name)</c> on plugin clean up to remove the menu.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveToolMenuItem(System.String)">
            <summary>
            <para>Removes a menu <c>name</c> from Project &gt; Tools.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddCustomType(System.String,System.String,Godot.Script,Godot.Texture2D)">
            <summary>
            <para>Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.</para>
            <para>When given node or resource is selected, the base type will be instanced (e.g. "Node3D", "Control", "Resource"), then the script will be loaded and set to this object.</para>
            <para>You can use the virtual method <see cref="M:Godot.EditorPlugin.Handles(Godot.Object)"/> to check if your custom object is being edited by checking the script or using the <c>is</c> keyword.</para>
            <para>During run-time, this will be a simple object with a script so this function does not need to be called then.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveCustomType(System.String)">
            <summary>
            <para>Removes a custom type added by <see cref="M:Godot.EditorPlugin.AddCustomType(System.String,System.String,Godot.Script,Godot.Texture2D)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddAutoloadSingleton(System.String,System.String)">
            <summary>
            <para>Adds a script at <c>path</c> to the Autoload list as <c>name</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveAutoloadSingleton(System.String)">
            <summary>
            <para>Removes an Autoload <c>name</c> from the list.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.UpdateOverlays">
            <summary>
            <para>Updates the overlays of the 2D and 3D editor viewport. Causes methods <see cref="M:Godot.EditorPlugin.ForwardCanvasDrawOverViewport(Godot.Control)"/>, <see cref="M:Godot.EditorPlugin.ForwardCanvasForceDrawOverViewport(Godot.Control)"/>, <see cref="M:Godot.EditorPlugin.ForwardSpatialDrawOverViewport(Godot.Control)"/> and <see cref="M:Godot.EditorPlugin.ForwardSpatialForceDrawOverViewport(Godot.Control)"/> to be called.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetUndoRedo">
            <summary>
            <para>Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.QueueSaveLayout">
            <summary>
            <para>Queue save the project's editor layout.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddTranslationParserPlugin(Godot.EditorTranslationParserPlugin)">
            <summary>
            <para>Registers a custom translation parser plugin for extracting translatable strings from custom files.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveTranslationParserPlugin(Godot.EditorTranslationParserPlugin)">
            <summary>
            <para>Removes a registered custom translation parser plugin.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddExportPlugin(Godot.EditorExportPlugin)">
            <summary>
            <para>Registers a new export plugin. Export plugins are used when the project is being exported. See <see cref="T:Godot.EditorExportPlugin"/> for more information.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.SetInputEventForwardingAlwaysEnabled">
            <summary>
            <para>Use this method if you always want to receive inputs from 3D view screen inside <see cref="M:Godot.EditorPlugin.ForwardSpatialGuiInput(Godot.Camera3D,Godot.InputEvent)"/>. It might be especially usable if your plugin will want to use raycast in the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.SetForceDrawOverForwardingEnabled">
            <summary>
            <para>Enables calling of <see cref="M:Godot.EditorPlugin.ForwardCanvasForceDrawOverViewport(Godot.Control)"/> for the 2D editor and <see cref="M:Godot.EditorPlugin.ForwardSpatialForceDrawOverViewport(Godot.Control)"/> for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetEditorInterface">
            <summary>
            <para>Returns the <see cref="T:Godot.EditorInterface"/> object that gives you control over Godot editor's window and its functionalities.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.GetScriptCreateDialog">
            <summary>
            <para>Gets the Editor's dialogue used for making scripts.</para>
            <para>Note: Users can configure it before use.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.AddDebuggerPlugin(Godot.Script)">
            <summary>
            <para>Adds a <see cref="T:Godot.Script"/> as debugger plugin to the Debugger. The script must extend <see cref="T:Godot.EditorDebuggerPlugin"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorPlugin.RemoveDebuggerPlugin(Godot.Script)">
            <summary>
            <para>Removes the debugger plugin with given script fromm the Debugger.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorPlugin.MainScreenChangedHandler">
            <summary>
            <para>Emitted when user changes the workspace (2D, 3D, Script, AssetLib). Also works with custom screens defined by plugins.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorPlugin.SceneClosedHandler">
            <summary>
            <para>Emitted when user closes a scene. The argument is file path to a closed scene.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorPlugin.SceneChangedHandler">
            <summary>
            <para>Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be <c>null</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty">
            <summary>
            <para>This control allows property editing for one or multiple properties into <see cref="T:Godot.EditorInspector"/>. It is added via <see cref="T:Godot.EditorInspectorPlugin"/>.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.Label">
            <summary>
            <para>Set this property to change the label (if you want to show one).</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.ReadOnly">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property is read-only.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.Checkable">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property is checkable.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.Checked">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property is checked.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.DrawRed">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property must draw with error color. This is used for editable children's properties.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.Keying">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property can add keys for animation.</para>
            </summary>
        </member>
        <member name="P:Godot.EditorProperty.Deletable">
            <summary>
            <para>Used by the inspector, set to <c>true</c> when the property can be deleted by the user.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.UpdateProperty">
            <summary>
            <para>When this virtual function is called, you must update your editor.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.GetEditedProperty">
            <summary>
            <para>Gets the edited property. If your editor is for a single property (added via <see cref="M:Godot.EditorInspectorPlugin.ParseProperty(Godot.Object,System.Int32,System.String,System.Int32,System.String,System.Int32)"/>), then this will return the property.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.GetEditedObject">
            <summary>
            <para>Gets the edited object.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.GetTooltipText">
            <summary>
            <para>Override if you want to allow a custom tooltip over your property.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.AddFocusable(Godot.Control)">
            <summary>
            <para>If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.SetBottomEditor(Godot.Control)">
            <summary>
            <para>Adds controls with this function if you want them on the bottom (below the label).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorProperty.EmitChanged(Godot.StringName,System.Object,Godot.StringName,System.Boolean)">
            <summary>
            <para>If one or several properties have changed, this must be called. <c>field</c> is used in case your editor can modify fields separately (as an example, Vector3.x). The <c>changing</c> argument avoids the editor requesting this property to be refreshed (leave as <c>false</c> if unsure).</para>
            </summary>
            <param name="field">If the parameter is null, then the default value is (StringName)""</param>
        </member>
        <member name="T:Godot.EditorProperty.ObjectIdSelectedHandler">
            <summary>
            <para>Used by sub-inspectors. Emit it if what was selected was an Object ID.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.PropertyCheckedHandler">
            <summary>
            <para>Emitted when a property was checked. Used internally.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.PropertyDeletedHandler">
            <summary>
            <para>Emitted when a property was deleted. Used internally.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.PropertyKeyedWithValueHandler">
            <summary>
            <para>Emit it if you want to key a property with a single value.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.PropertyKeyedHandler">
            <summary>
            <para>Emit it if you want to add this value as an animation key (check for keying being enabled first).</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.PropertyChangedHandler">
            <summary>
            <para>Do not emit this manually, use the <see cref="M:Godot.EditorProperty.EmitChanged(Godot.StringName,System.Object,Godot.StringName,System.Boolean)"/> method instead.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.ResourceSelectedHandler">
            <summary>
            <para>If you want a sub-resource to be edited, emit this signal with the resource.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.SelectedHandler">
            <summary>
            <para>Emitted when selected. Used internally.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorProperty.MultiplePropertiesChangedHandler">
            <summary>
            <para>Emit it if you want multiple properties modified at the same time. Do not use if added via <see cref="M:Godot.EditorInspectorPlugin.ParseProperty(Godot.Object,System.Int32,System.String,System.Int32,System.String,System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorResourcePreview">
            <summary>
            <para>This object is used to generate previews for resources of files.</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetResourcePreviewer"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreview.QueueResourcePreview(System.String,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreview.QueueEditedResourcePreview(Godot.Resource,Godot.Object,Godot.StringName,System.Object)">
            <summary>
            <para>Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreview.AddPreviewGenerator(Godot.EditorResourcePreviewGenerator)">
            <summary>
            <para>Create an own, custom preview generator.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreview.RemovePreviewGenerator(Godot.EditorResourcePreviewGenerator)">
            <summary>
            <para>Removes a custom preview generator.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreview.CheckForInvalidation(System.String)">
            <summary>
            <para>Check if the resource changed, if so, it will be invalidated and the corresponding signal emitted.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorResourcePreview.PreviewInvalidatedHandler">
            <summary>
            <para>Emitted if a preview was invalidated (changed). <c>path</c> corresponds to the path of the preview.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorResourcePreviewGenerator">
            <summary>
            <para>Custom code to generate previews. Please check <c>file_dialog/thumbnail_size</c> in <see cref="T:Godot.EditorSettings"/> to find out the right size to do previews at.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreviewGenerator.CanGenerateSmallPreview">
            <summary>
            <para>If this function returns <c>true</c>, the generator will call <see cref="M:Godot.EditorResourcePreviewGenerator.Generate(Godot.Resource,Godot.Vector2)"/> or <see cref="M:Godot.EditorResourcePreviewGenerator.GenerateFromPath(System.String,Godot.Vector2)"/> for small previews as well.</para>
            <para>By default, it returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreviewGenerator.Generate(Godot.Resource,Godot.Vector2)">
            <summary>
            <para>Generate a preview from a given resource with the specified size. This must always be implemented.</para>
            <para>Returning an empty texture is an OK way to fail and let another generator take care.</para>
            <para>Care must be taken because this function is always called from a thread (not the main thread).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreviewGenerator.GenerateFromPath(System.String,Godot.Vector2)">
            <summary>
            <para>Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call <see cref="M:Godot.EditorResourcePreviewGenerator.Generate(Godot.Resource,Godot.Vector2)"/>.</para>
            <para>Returning an empty texture is an OK way to fail and let another generator take care.</para>
            <para>Care must be taken because this function is always called from a thread (not the main thread).</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreviewGenerator.GenerateSmallPreviewAutomatically">
            <summary>
            <para>If this function returns <c>true</c>, the generator will automatically generate the small previews from the normal preview texture generated by the methods <see cref="M:Godot.EditorResourcePreviewGenerator.Generate(Godot.Resource,Godot.Vector2)"/> or <see cref="M:Godot.EditorResourcePreviewGenerator.GenerateFromPath(System.String,Godot.Vector2)"/>.</para>
            <para>By default, it returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorResourcePreviewGenerator.Handles(System.String)">
            <summary>
            <para>Returns <c>true</c> if your generator supports the resource of type <c>type</c>.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorSceneImporterFBX">
            <summary>
            <para>This is an FBX 3D asset importer with full support for most FBX features.</para>
            <para>If exporting a FBX scene from Autodesk Maya, use these FBX export settings:</para>
            <para><code>
            - Smoothing Groups
            - Smooth Mesh
            - Triangluate (for meshes with blend shapes)
            - Bake Animation
            - Resample All
            - Deformed Models
            - Skins
            - Blend Shapes
            - Curve Filters
            - Constant Key Reducer
            - Auto Tangents Only
            - *Do not check* Constraints (as it will break the file)
            - Can check Embed Media (embeds textures into the exported FBX file)
              - Note that when importing embedded media, the texture and mesh will be a single immutable file.
              - You will have to re-export then re-import the FBX if the texture has changed.
            - Units: Centimeters
            - Up Axis: Y
            - Binary format in FBX 2017
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.EditorSceneImporterMesh.AddSurface(Godot.Mesh.PrimitiveType,Godot.Collections.Array,Godot.Collections.Array,Godot.Collections.Dictionary,Godot.Material,System.String)">
            <param name="blendShapes">If the parameter is null, then the default value is new Godot.Collections.Array {}</param>
            <param name="lods">If the parameter is null, then the default value is new Godot.Collections.Dictionary()</param>
        </member>
        <member name="T:Godot.EditorScenePostImport">
            <summary>
            <para>Imported scenes can be automatically modified right after import by setting their Custom Script Import property to a <c>tool</c> script that inherits from this class.</para>
            <para>The <see cref="M:Godot.EditorScenePostImport.PostImport(Godot.Object)"/> callback receives the imported scene's root node and returns the modified version of the scene. Usage example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>tool # Needed so it runs in editor.</para>
            <para>extends EditorScenePostImport</para>
            <para># This sample changes all node names.</para>
            <para># Called right after the scene is imported and gets the root node.</para>
            <para>func post_import(scene):</para>
            <para>    # Change all node names to "modified_[oldnodename]"</para>
            <para>    iterate(scene)</para>
            <para>    return scene # Remember to return the imported scene</para>
            <para>func iterate(node):</para>
            <para>    if node != null:</para>
            <para>        node.name = "modified_" + node.name</para>
            <para>        for child in node.get_children():</para>
            <para>            iterate(child)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para></para>
            <para>// This sample changes all node names.</para>
            <para>// Called right after the scene is imported and gets the root node.</para>
            <para>[Tool]</para>
            <para>public class NodeRenamer : EditorScenePostImport</para>
            <para>{</para>
            <para>    public override Object PostImport(Object scene)</para>
            <para>    {</para>
            <para>        // Change all node names to "modified_[oldnodename]"</para>
            <para>        Iterate(scene as Node);</para>
            <para>        return scene; // Remember to return the imported scene</para>
            <para>    }</para>
            <para>    public void Iterate(Node node)</para>
            <para>    {</para>
            <para>        if (node != null)</para>
            <para>        {</para>
            <para>            node.Name = "modified_" + node.Name;</para>
            <para>            foreach (Node child in node.GetChildren())</para>
            <para>            {</para>
            <para>                Iterate(child);</para>
            <para>            }</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScenePostImport.PostImport(Godot.Object)">
            <summary>
            <para>Called after the scene was imported. This method must return the modified version of the scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScenePostImport.GetSourceFolder">
            <summary>
            <para>Returns the resource folder the imported scene file is located in.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScenePostImport.GetSourceFile">
            <summary>
            <para>Returns the source file path which got imported (e.g. <c>res://scene.dae</c>).</para>
            </summary>
        </member>
        <member name="T:Godot.EditorScript">
            <summary>
            <para>Scripts extending this class and implementing its <see cref="M:Godot.EditorScript._Run"/> method can be executed from the Script Editor's File &gt; Run menu option (or by pressing Ctrl + Shift + X) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using <see cref="T:Godot.EditorPlugin"/>s instead.</para>
            <para>Note: Extending scripts need to have <c>tool</c> mode enabled.</para>
            <para>Example script:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>tool</para>
            <para>extends EditorScript</para>
            <para></para>
            <para>func _run():</para>
            <para>    print("Hello from the Godot Editor!")</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para></para>
            <para>[Tool]</para>
            <para>public class HelloEditor : EditorScript</para>
            <para>{</para>
            <para>    public override void _Run()</para>
            <para>    {</para>
            <para>        GD.Print("Hello from the Godot Editor!");</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: The script is run in the Editor context, which means the output is visible in the console window started with the Editor (stdout) instead of the usual Godot Output dock.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScript._Run">
            <summary>
            <para>This method is executed by the Editor when File &gt; Run is used.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScript.AddRootNode(Godot.Node)">
            <summary>
            <para>Adds <c>node</c> as a child of the root node in the editor context.</para>
            <para>Warning: The implementation of this method is currently disabled.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScript.GetScene">
            <summary>
            <para>Returns the Editor's currently active scene.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorScript.GetEditorInterface">
            <summary>
            <para>Returns the <see cref="T:Godot.EditorInterface"/> singleton instance.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorSelection">
            <summary>
            <para>This object manages the SceneTree selection in the editor.</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetSelection"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSelection.Clear">
            <summary>
            <para>Clear the selection.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSelection.AddNode(Godot.Node)">
            <summary>
            <para>Adds a node to the selection.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSelection.RemoveNode(Godot.Node)">
            <summary>
            <para>Removes a node from the selection.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSelection.GetSelectedNodes">
            <summary>
            <para>Gets the list of selected nodes.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSelection.GetTransformableSelectedNodes">
            <summary>
            <para>Gets the list of selected nodes, optimized for transform operations (i.e. moving them, rotating, etc). This list avoids situations where a node is selected and also child/grandchild.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorSelection.SelectionChangedHandler">
            <summary>
            <para>Emitted when the selection changes.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorSettings">
            <summary>
            <para>Object that holds the project-independent editor settings. These settings are generally visible in the Editor &gt; Editor Settings menu.</para>
            <para>Property names use slash delimiters to distinguish sections. Setting values can be of any <c>Variant</c> type. It's recommended to use <c>snake_case</c> for editor settings to be consistent with the Godot editor itself.</para>
            <para>Accessing the settings can be done using the following methods, such as:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var settings = EditorInterface.get_editor_settings()</para>
            <para># `settings.set("some/property", 10)` also works as this class overrides `_set()` internally.</para>
            <para>settings.set_setting("some/property", 10)</para>
            <para># `settings.get("some/property")` also works as this class overrides `_get()` internally.</para>
            <para>settings.get_setting("some/property")</para>
            <para>var list_of_settings = settings.get_property_list()</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>EditorSettings settings = GetEditorInterface().GetEditorSettings();</para>
            <para>// `settings.set("some/property", value)` also works as this class overrides `_set()` internally.</para>
            <para>settings.SetSetting("some/property", Value);</para>
            <para>// `settings.get("some/property", value)` also works as this class overrides `_get()` internally.</para>
            <para>settings.GetSetting("some/property");</para>
            <para>Godot.Collections.Array listOfSettings = settings.GetPropertyList();</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetEditorSettings"/>.</para>
            </summary>
        </member>
        <member name="F:Godot.EditorSettings.NotificationEditorSettingsChanged">
            <summary>
            <para>Emitted after any editor setting has changed. It's used by various editor plugins to update their visuals on theme changes or logic on configuration changes.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.HasSetting(System.String)">
            <summary>
            <para>Returns <c>true</c> if the setting specified by <c>name</c> exists, <c>false</c> otherwise.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.SetSetting(System.String,System.Object)">
            <summary>
            <para>Sets the <c>value</c> of the setting specified by <c>name</c>. This is equivalent to using <see cref="M:Godot.Object.Set(System.String,System.Object)"/> on the EditorSettings instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetSetting(System.String)">
            <summary>
            <para>Returns the value of the setting specified by <c>name</c>. This is equivalent to using <see cref="M:Godot.Object.Get(System.String)"/> on the EditorSettings instance.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.Erase(System.String)">
            <summary>
            <para>Erases the setting whose name is specified by <c>property</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.SetInitialValue(Godot.StringName,System.Object,System.Boolean)">
            <summary>
            <para>Sets the initial value of the setting specified by <c>name</c> to <c>value</c>. This is used to provide a value for the Revert button in the Editor Settings. If <c>update_current</c> is true, the current value of the setting will be set to <c>value</c> as well.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.PropertyCanRevert(System.String)">
            <summary>
            <para>Returns <c>true</c> if the setting specified by <c>name</c> can have its value reverted to the default value, <c>false</c> otherwise. When this method returns <c>true</c>, a Revert button will display next to the setting in the Editor Settings.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.PropertyGetRevert(System.String)">
            <summary>
            <para>Returns the default value of the setting specified by <c>name</c>. This is the value that would be applied when clicking the Revert button in the Editor Settings.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.AddPropertyInfo(Godot.Collections.Dictionary)">
            <summary>
            <para>Adds a custom property info to a property. The dictionary must contain:</para>
            <para>- <c>name</c>: <see cref="T:System.String"/> (the name of the property)</para>
            <para>- <c>type</c>: <see cref="T:System.Int32"/> (see <see cref="T:Godot.Variant.Type"/>)</para>
            <para>- optionally <c>hint</c>: <see cref="T:System.Int32"/> (see <see cref="T:Godot.PropertyHint"/>) and <c>hint_string</c>: <see cref="T:System.String"/></para>
            <para>Example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>var settings = EditorInterface.get_editor_settings()</para>
            <para>settings.set("category/property_name", 0)</para>
            <para></para>
            <para>var property_info = {</para>
            <para>    "name": "category/property_name",</para>
            <para>    "type": TYPE_INT,</para>
            <para>    "hint": PROPERTY_HINT_ENUM,</para>
            <para>    "hint_string": "one,two,three"</para>
            <para>}</para>
            <para></para>
            <para>settings.add_property_info(property_info)</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>var settings = GetEditorInterface().GetEditorSettings();</para>
            <para>settings.Set("category/property_name", 0);</para>
            <para></para>
            <para>var propertyInfo = new Godot.Collections.Dictionary</para>
            <para>{</para>
            <para>    {"name", "category/propertyName"},</para>
            <para>    {"type", Variant.Type.Int},</para>
            <para>    {"hint", PropertyHint.Enum},</para>
            <para>    {"hint_string", "one,two,three"}</para>
            <para>};</para>
            <para></para>
            <para>settings.AddPropertyInfo(propertyInfo);</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetSettingsDir">
            <summary>
            <para>Gets the global settings path for the engine. Inside this path, you can find some standard paths such as:</para>
            <para><c>settings/tmp</c> - Used for temporary storage of files</para>
            <para><c>settings/templates</c> - Where export templates are located</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetProjectSettingsDir">
            <summary>
            <para>Returns the project-specific settings path. Projects all have a unique subdirectory inside the settings path where project-specific settings are saved.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.SetProjectMetadata(System.String,System.String,System.Object)">
            <summary>
            <para>Sets project-specific metadata with the <c>section</c>, <c>key</c> and <c>data</c> specified. This metadata is stored outside the project folder and therefore won't be checked into version control. See also <see cref="M:Godot.EditorSettings.GetProjectMetadata(System.String,System.String,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetProjectMetadata(System.String,System.String,System.Object)">
            <summary>
            <para>Returns project-specific metadata for the <c>section</c> and <c>key</c> specified. If the metadata doesn't exist, <c>default</c> will be returned instead. See also <see cref="M:Godot.EditorSettings.SetProjectMetadata(System.String,System.String,System.Object)"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.SetFavorites(System.String[])">
            <summary>
            <para>Sets the list of favorite files and directories for this project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetFavorites">
            <summary>
            <para>Returns the list of favorite files and directories for this project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.SetRecentDirs(System.String[])">
            <summary>
            <para>Sets the list of recently visited folders in the file dialog for this project.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorSettings.GetRecentDirs">
            <summary>
            <para>Returns the list of recently visited folders in the file dialog for this project.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorSettings.SettingsChangedHandler">
            <summary>
            <para>Emitted after any editor setting has changed.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorTranslationParserPlugin">
            <summary>
            <para>Plugins are registered via <see cref="M:Godot.EditorPlugin.AddTranslationParserPlugin(Godot.EditorTranslationParserPlugin)"/> method. To define the parsing and string extraction logic, override the <see cref="M:Godot.EditorTranslationParserPlugin.ParseFile(System.String,Godot.Collections.Array,Godot.Collections.Array)"/> method in script.</para>
            <para>Add the extracted strings to argument <c>msgids</c> or <c>msgids_context_plural</c> if context or plural is used.</para>
            <para>When adding to <c>msgids_context_plural</c>, you must add the data using the format <c>["A", "B", "C"]</c>, where <c>A</c> represents the extracted string, <c>B</c> represents the context, and <c>C</c> represents the plural version of the extracted string. If you want to add only context but not plural, put <c>""</c> for the plural slot. The idea is the same if you only want to add plural but not context. See the code below for concrete examples.</para>
            <para>The extracted strings will be written into a POT file selected by user under "POT Generation" in "Localization" tab in "Project Settings" menu.</para>
            <para>Below shows an example of a custom parser that extracts strings from a CSV file to write into a POT.</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>tool</para>
            <para>extends EditorTranslationParserPlugin</para>
            <para></para>
            <para>func parse_file(path, msgids, msgids_context_plural):</para>
            <para>    var file = File.new()</para>
            <para>    file.open(path, File.READ)</para>
            <para>    var text = file.get_as_text()</para>
            <para>    var split_strs = text.split(",", false)</para>
            <para>    for s in split_strs:</para>
            <para>        msgids.append(s)</para>
            <para>        #print("Extracted string: " + s)</para>
            <para></para>
            <para>func get_recognized_extensions():</para>
            <para>    return ["csv"]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>using Godot;</para>
            <para>using System;</para>
            <para></para>
            <para>[Tool]</para>
            <para>public class CustomParser : EditorTranslationParserPlugin</para>
            <para>{</para>
            <para>    public override void ParseFile(string path, Godot.Collections.Array msgids, Godot.Collections.Array msgidsContextPlural)</para>
            <para>    {</para>
            <para>        var file = new File();</para>
            <para>        file.Open(path, File.ModeFlags.Read);</para>
            <para>        string text = file.GetAsText();</para>
            <para>        string[] splitStrs = text.Split(",", false);</para>
            <para>        foreach (var s in splitStrs)</para>
            <para>        {</para>
            <para>            msgids.Add(s);</para>
            <para>            //GD.Print("Extracted string: " + s)</para>
            <para>        }</para>
            <para>    }</para>
            <para></para>
            <para>    public override Godot.Collections.Array GetRecognizedExtensions()</para>
            <para>    {</para>
            <para>        return new Godot.Collections.Array{"csv"};</para>
            <para>    }</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>To add a translatable string associated with context or plural, add it to <c>msgids_context_plural</c>:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para># This will add a message with msgid "Test 1", msgctxt "context", and msgid_plural "test 1 plurals".</para>
            <para>msgids_context_plural.append(["Test 1", "context", "test 1 plurals"])</para>
            <para># This will add a message with msgid "A test without context" and msgid_plural "plurals".</para>
            <para>msgids_context_plural.append(["A test without context", "", "plurals"])</para>
            <para># This will add a message with msgid "Only with context" and msgctxt "a friendly context".</para>
            <para>msgids_context_plural.append(["Only with context", "a friendly context", ""])</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>// This will add a message with msgid "Test 1", msgctxt "context", and msgid_plural "test 1 plurals".</para>
            <para>msgidsContextPlural.Add(new Godot.Collections.Array{"Test 1", "context", "test 1 Plurals"});</para>
            <para>// This will add a message with msgid "A test without context" and msgid_plural "plurals".</para>
            <para>msgidsContextPlural.Add(new Godot.Collections.Array{"A test without context", "", "plurals"});</para>
            <para>// This will add a message with msgid "Only with context" and msgctxt "a friendly context".</para>
            <para>msgidsContextPlural.Add(new Godot.Collections.Array{"Only with context", "a friendly context", ""});</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            <para>Note: If you override parsing logic for standard script types (GDScript, C#, etc.), it would be better to load the <c>path</c> argument using <see cref="M:Godot.ResourceLoader.Load(System.String,System.String,System.Boolean)"/>. This is because built-in scripts are loaded as <see cref="T:Godot.Resource"/> type, not <see cref="T:Godot.File"/> type.</para>
            <para>For example:</para>
            <para>[codeblocks]</para>
            <para>[gdscript]</para>
            <para>func parse_file(path, msgids, msgids_context_plural):</para>
            <para>    var res = ResourceLoader.load(path, "Script")</para>
            <para>    var text = res.source_code</para>
            <para>    # Parsing logic.</para>
            <para></para>
            <para>func get_recognized_extensions():</para>
            <para>    return ["gd"]</para>
            <para>[/gdscript]</para>
            <para>[csharp]</para>
            <para>public override void ParseFile(string path, Godot.Collections.Array msgids, Godot.Collections.Array msgidsContextPlural)</para>
            <para>{</para>
            <para>    var res = ResourceLoader.Load&lt;Script&gt;(path, "Script");</para>
            <para>    string text = res.SourceCode;</para>
            <para>    // Parsing logic.</para>
            <para>}</para>
            <para></para>
            <para>public override Godot.Collections.Array GetRecognizedExtensions()</para>
            <para>{</para>
            <para>    return new Godot.Collections.Array{"gd"};</para>
            <para>}</para>
            <para>[/csharp]</para>
            <para>[/codeblocks]</para>
            </summary>
        </member>
        <member name="M:Godot.EditorTranslationParserPlugin.GetRecognizedExtensions">
            <summary>
            <para>Gets the list of file extensions to associate with this parser, e.g. <c>["csv"]</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorTranslationParserPlugin.ParseFile(System.String,Godot.Collections.Array,Godot.Collections.Array)">
            <summary>
            <para>Override this method to define a custom parsing logic to extract the translatable strings.</para>
            </summary>
        </member>
        <member name="T:Godot.EditorVCSInterface">
            <summary>
            <para>Used by the editor to display VCS extracted information in the editor. The implementation of this API is included in VCS addons, which are essentially GDNative plugins that need to be put into the project folder. These VCS addons are scripts which are attached (on demand) to the object instance of <c>EditorVCSInterface</c>. All the functions listed below, instead of performing the task themselves, they call the internally defined functions in the VCS addons to provide a plug-n-play experience.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.IsAddonReady">
            <summary>
            <para>Returns <c>true</c> if the addon is ready to respond to function calls, else returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.Initialize(System.String)">
            <summary>
            <para>Initializes the VCS addon if not already. Uses the argument value as the path to the working directory of the project. Creates the initial commit if required. Returns <c>true</c> if no failure occurs, else returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.IsVcsInitialized">
            <summary>
            <para>Returns <c>true</c> if the VCS addon has been initialized, else returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.GetModifiedFilesData">
            <summary>
            <para>Returns a <see cref="T:Godot.Collections.Dictionary"/> containing the path of the detected file change mapped to an integer signifying what kind of a change the corresponding file has experienced.</para>
            <para>The following integer values are being used to signify that the detected file is:</para>
            <para>- <c>0</c>: New to the VCS working directory</para>
            <para>- <c>1</c>: Modified</para>
            <para>- <c>2</c>: Renamed</para>
            <para>- <c>3</c>: Deleted</para>
            <para>- <c>4</c>: Typechanged</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.StageFile(System.String)">
            <summary>
            <para>Stages the file which should be committed when <see cref="M:Godot.EditorVCSInterface.Commit(System.String)"/> is called. Argument should contain the absolute path.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.UnstageFile(System.String)">
            <summary>
            <para>Unstages the file which was staged previously to be committed, so that it is no longer committed when <see cref="M:Godot.EditorVCSInterface.Commit(System.String)"/> is called. Argument should contain the absolute path.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.Commit(System.String)">
            <summary>
            <para>Creates a version commit if the addon is initialized, else returns without doing anything. Uses the files which have been staged previously, with the commit message set to a value as provided as in the argument.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.GetFileDiff(System.String)">
            <summary>
            <para>Returns an <see cref="T:Godot.Collections.Array"/> of <see cref="T:Godot.Collections.Dictionary"/> objects containing the diff output from the VCS in use, if a VCS addon is initialized, else returns an empty <see cref="T:Godot.Collections.Array"/> object. The diff contents also consist of some contextual lines which provide context to the observed line change in the file.</para>
            <para>Each <see cref="T:Godot.Collections.Dictionary"/> object has the line diff contents under the keys:</para>
            <para>- <c>"content"</c> to store a <see cref="T:System.String"/> containing the line contents</para>
            <para>- <c>"status"</c> to store a <see cref="T:System.String"/> which contains <c>"+"</c> in case the content is a line addition but it stores a <c>"-"</c> in case of deletion and an empty string in the case the line content is neither an addition nor a deletion.</para>
            <para>- <c>"new_line_number"</c> to store an integer containing the new line number of the line content.</para>
            <para>- <c>"line_count"</c> to store an integer containing the number of lines in the line content.</para>
            <para>- <c>"old_line_number"</c> to store an integer containing the old line number of the line content.</para>
            <para>- <c>"offset"</c> to store the offset of the line change since the first contextual line content.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.ShutDown">
            <summary>
            <para>Shuts down the VCS addon to allow cleanup code to run on call. Returns <c>true</c> is no failure occurs, else returns <c>false</c>.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.GetProjectName">
            <summary>
            <para>Returns the project name of the VCS working directory.</para>
            </summary>
        </member>
        <member name="M:Godot.EditorVCSInterface.GetVcsName">
            <summary>
            <para>Returns the name of the VCS if the VCS has been initialized, else return an empty string.</para>
            </summary>
        </member>
        <member name="T:Godot.ScriptCreateDialog">
            <summary>
            <para>The <see cref="T:Godot.ScriptCreateDialog"/> creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the <see cref="M:Godot.Window.Popup(System.Nullable{Godot.Rect2i})"/> methods.</para>
            <para><code>
            func _ready():
                dialog.config("Node", "res://new_node.gd") # For in-engine types
                dialog.config("\"res://base_node.gd\"", "res://derived_node.gd") # For script types
                dialog.popup_centered()
            </code></para>
            </summary>
        </member>
        <member name="M:Godot.ScriptCreateDialog.Config(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Prefills required fields to configure the ScriptCreateDialog for use.</para>
            </summary>
        </member>
        <member name="T:Godot.ScriptCreateDialog.ScriptCreatedHandler">
            <summary>
            <para>Emitted when the user clicks the OK button.</para>
            </summary>
        </member>
        <member name="T:Godot.ScriptEditor">
            <summary>
            <para>Note: This class shouldn't be instantiated directly. Instead, access the singleton using <see cref="M:Godot.EditorInterface.GetScriptEditor"/>.</para>
            </summary>
        </member>
        <member name="M:Godot.ScriptEditor.GotoLine(System.Int32)">
            <summary>
            <para>Goes to the specified line in the current script.</para>
            </summary>
        </member>
        <member name="M:Godot.ScriptEditor.GetCurrentScript">
            <summary>
            <para>Returns a <see cref="T:Godot.Script"/> that is currently active in editor.</para>
            </summary>
        </member>
        <member name="M:Godot.ScriptEditor.GetOpenScripts">
            <summary>
            <para>Returns an array with all <see cref="T:Godot.Script"/> objects which are currently open in editor.</para>
            </summary>
        </member>
        <member name="M:Godot.ScriptEditor.OpenScriptCreateDialog(System.String,System.String)">
            <summary>
            <para>Opens the script create dialog. The script will extend <c>base_name</c>. The file extension can be omitted from <c>base_path</c>. It will be added based on the selected scripting language.</para>
            </summary>
        </member>
        <member name="T:Godot.ScriptEditor.EditorScriptChangedHandler">
            <summary>
            <para>Emitted when user changed active script. Argument is a freshly activated <see cref="T:Godot.Script"/>.</para>
            </summary>
        </member>
        <member name="T:Godot.ScriptEditor.ScriptCloseHandler">
            <summary>
            <para>Emitted when editor is about to close the active script. Argument is a <see cref="T:Godot.Script"/> that is going to be closed.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptEditor.AddCustomNode(System.String,System.String,Godot.Script)">
            <summary>
            <para>Add a custom Visual Script node to the editor. It'll be placed under "Custom Nodes" with the <c>category</c> as the parameter.</para>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptEditor.RemoveCustomNode(System.String,System.String)">
            <summary>
            <para>Remove a custom Visual Script node from the editor. Custom nodes already placed on scripts won't be removed.</para>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEditor.CustomNodesUpdatedHandler">
            <summary>
            <para>Emitted when a custom Visual Script node is added or removed.</para>
            </summary>
        </member>
    </members>
</doc>
